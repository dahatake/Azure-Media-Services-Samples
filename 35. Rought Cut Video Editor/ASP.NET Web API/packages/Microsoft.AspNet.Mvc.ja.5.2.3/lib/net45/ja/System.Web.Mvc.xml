<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Web.Mvc</name>
  </assembly>
  <members>
    <member name="T:System.Web.Mvc.AcceptVerbsAttribute">
      <summary>どの HTTP 動詞にアクション メソッドが応答するかを指定する属性を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.AcceptVerbsAttribute.#ctor(System.String[])">
      <summary>アクション メソッドが応答する対象の HTTP 動詞のリストを使用して、<see cref="T:System.Web.Mvc.AcceptVerbsAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="verbs">アクション メソッドが応答する対象の HTTP 動詞。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="verbs" /> パラメーターが null またはその長さが 0 です。</exception>
    </member>
    <member name="M:System.Web.Mvc.AcceptVerbsAttribute.#ctor(System.Web.Mvc.HttpVerbs)">
      <summary>アクション メソッドが応答する対象の HTTP 動詞を使用して、<see cref="T:System.Web.Mvc.AcceptVerbsAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="verbs">アクション メソッドが応答する対象の HTTP 動詞。</param>
    </member>
    <member name="M:System.Web.Mvc.AcceptVerbsAttribute.IsValidForRequest(System.Web.Mvc.ControllerContext,System.Reflection.MethodInfo)">
      <summary>指定されたメソッド情報が、指定されたコントローラー コンテキストで有効かどうかを判断します。</summary>
      <returns>メソッド情報が有効である場合は true。それ以外の場合は false。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="methodInfo">メソッド情報。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controllerContext " /> パラメーターが null です。</exception>
    </member>
    <member name="P:System.Web.Mvc.AcceptVerbsAttribute.Verbs">
      <summary>アクション メソッドが応答する対象の HTTP 動詞のリストを取得または設定します。</summary>
      <returns>アクション メソッドが応答する対象の HTTP 動詞のリスト。</returns>
    </member>
    <member name="T:System.Web.Mvc.ActionDescriptor">
      <summary>名前、コントローラー、パラメーター、属性、フィルターなど、アクション メソッドに関する情報を提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionDescriptor.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ActionDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.ActionDescriptor.ActionName">
      <summary>アクション メソッドの名前を取得します。</summary>
      <returns>アクション メソッドの名前。</returns>
    </member>
    <member name="P:System.Web.Mvc.ActionDescriptor.ControllerDescriptor">
      <summary>コントローラー記述子を取得します。</summary>
      <returns>コントローラー記述子。</returns>
    </member>
    <member name="M:System.Web.Mvc.ActionDescriptor.Execute(System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定されたパラメーターおよびコントローラー コンテキストを使用して、アクション メソッドを実行します。</summary>
      <returns>アクション メソッドの実行結果。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="parameters">アクション メソッドのパラメーター。</param>
    </member>
    <member name="M:System.Web.Mvc.ActionDescriptor.GetCustomAttributes(System.Boolean)">
      <summary>このメンバーに定義されているカスタム属性の配列を返します (名前付き属性を除く)。</summary>
      <returns>カスタム属性の配列、カスタム属性が存在しない場合は空の配列。</returns>
      <param name="inherit">継承されたカスタム属性の階層チェーンを参照する場合は true。それ以外の場合は false。</param>
      <exception cref="T:System.TypeLoadException">カスタム属性の型を読み込むことができません。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">このメンバーには、<paramref name="attributeType" /> 型の属性が複数定義されています。</exception>
    </member>
    <member name="M:System.Web.Mvc.ActionDescriptor.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>型によって識別される、このメンバーに定義されているカスタム属性の配列を返します。</summary>
      <returns>カスタム属性の配列。指定された型のカスタム属性が存在しない場合は空の配列。</returns>
      <param name="attributeType">カスタム属性の型。</param>
      <param name="inherit">継承されたカスタム属性の階層チェーンを参照する場合は true。それ以外の場合は false。</param>
      <exception cref="T:System.TypeLoadException">カスタム属性の型を読み込むことができません。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">このメンバーには、<paramref name="attributeType" /> 型の属性が複数定義されています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attritubeType" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.ActionDescriptor.GetFilterAttributes(System.Boolean)">
      <summary>フィルター属性を取得します。</summary>
      <returns>フィルター属性。</returns>
      <param name="useCache">キャッシュを使用する場合は true。それ以外の場合は false。</param>
    </member>
    <member name="M:System.Web.Mvc.ActionDescriptor.GetFilters">
      <summary>このアクション メソッドに関連付けられたフィルターを返します。</summary>
      <returns>このアクション メソッドに関連付けられたフィルター。</returns>
    </member>
    <member name="M:System.Web.Mvc.ActionDescriptor.GetParameters">
      <summary>アクション メソッドのパラメーターを返します。</summary>
      <returns>アクション メソッドのパラメーター。</returns>
    </member>
    <member name="M:System.Web.Mvc.ActionDescriptor.GetSelectors">
      <summary>アクション メソッド セレクターを返します。</summary>
      <returns>アクション メソッド セレクター。</returns>
    </member>
    <member name="M:System.Web.Mvc.ActionDescriptor.IsDefined(System.Type,System.Boolean)">
      <summary>指定された属性型のインスタンスが 1 つ以上このメンバーに定義されているかどうかを判断します。</summary>
      <returns>
        <paramref name="attributeType" /> がこのメンバーに定義されている場合は true。それ以外の場合は false。</returns>
      <param name="attributeType">カスタム属性の型。</param>
      <param name="inherit">継承されたカスタム属性の階層チェーンを参照する場合は true。それ以外の場合は false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attritubeType" /> パラメーターが null です。</exception>
    </member>
    <member name="P:System.Web.Mvc.ActionDescriptor.UniqueId">
      <summary>限定的な初期化を使用してアクション記述子の一意の ID を取得します。</summary>
      <returns>一意の ID。</returns>
    </member>
    <member name="T:System.Web.Mvc.ActionExecutedContext">
      <summary>
        <see cref="T:System.Web.Mvc.ActionFilterAttribute" /> クラスの ActionExecuted メソッドのコンテキストを提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionExecutedContext.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ActionExecutedContext" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionExecutedContext.#ctor(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Boolean,System.Exception)">
      <summary>
        <see cref="T:System.Web.Mvc.ActionExecutedContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="actionDescriptor">アクション メソッド記述子。</param>
      <param name="canceled">アクションが取り消された場合は true。</param>
      <param name="exception">例外オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="actionDescriptor" /> パラメーターが null です。</exception>
    </member>
    <member name="P:System.Web.Mvc.ActionExecutedContext.ActionDescriptor">
      <summary>アクション記述子を取得または設定します。</summary>
      <returns>アクション記述子。</returns>
    </member>
    <member name="P:System.Web.Mvc.ActionExecutedContext.Canceled">
      <summary>この <see cref="T:System.Web.Mvc.ActionExecutedContext" /> オブジェクトが取り消されたことを示す値を取得または設定します。</summary>
      <returns>コンテキストが取り消された場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Web.Mvc.ActionExecutedContext.Exception">
      <summary>アクション メソッドの実行中に発生した例外を取得または設定します。</summary>
      <returns>アクション メソッドの実行中に発生した例外。</returns>
    </member>
    <member name="P:System.Web.Mvc.ActionExecutedContext.ExceptionHandled">
      <summary>例外が処理済みかどうかを示す値を取得または設定します。</summary>
      <returns>例外が処理された場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Web.Mvc.ActionExecutedContext.Result">
      <summary>アクション メソッドが返す結果を取得または設定します。</summary>
      <returns>アクション メソッドが返す結果。</returns>
    </member>
    <member name="T:System.Web.Mvc.ActionExecutingContext">
      <summary>
        <see cref="T:System.Web.Mvc.ActionFilterAttribute" /> クラスの ActionExecuting メソッドのコンテキストを提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionExecutingContext.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ActionExecutingContext" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionExecutingContext.#ctor(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定されたコントローラー コンテキスト、アクション記述子、およびアクション メソッド パラメーターを使用して、<see cref="T:System.Web.Mvc.ActionExecutingContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="actionDescriptor">アクション記述子。</param>
      <param name="actionParameters">アクション メソッド パラメーター。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ActionParameters" /> パラメーターまたは <paramref name="actionDescriptor" /> パラメーターが null です。</exception>
    </member>
    <member name="P:System.Web.Mvc.ActionExecutingContext.ActionDescriptor">
      <summary>アクション記述子を取得または設定します。</summary>
      <returns>アクション記述子。</returns>
    </member>
    <member name="P:System.Web.Mvc.ActionExecutingContext.ActionParameters">
      <summary>アクション メソッド パラメーターを取得または設定します。</summary>
      <returns>アクション メソッド パラメーター。</returns>
    </member>
    <member name="P:System.Web.Mvc.ActionExecutingContext.Result">
      <summary>アクション メソッドが返す結果を取得または設定します。</summary>
      <returns>アクション メソッドが返す結果。</returns>
    </member>
    <member name="T:System.Web.Mvc.ActionFilterAttribute">
      <summary>フィルター属性の基本クラスを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionFilterAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ActionFilterAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionFilterAttribute.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
      <summary>アクション メソッドの実行後に ASP.NET MVC フレームワークによって呼び出されます。</summary>
      <param name="filterContext">フィルター コンテキスト。</param>
    </member>
    <member name="M:System.Web.Mvc.ActionFilterAttribute.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
      <summary>アクション メソッドの実行前に ASP.NET MVC フレームワークによって呼び出されます。</summary>
      <param name="filterContext">フィルター コンテキスト。</param>
    </member>
    <member name="M:System.Web.Mvc.ActionFilterAttribute.OnResultExecuted(System.Web.Mvc.ResultExecutedContext)">
      <summary>アクション結果の実行後に ASP.NET MVC フレームワークによって呼び出されます。</summary>
      <param name="filterContext">フィルター コンテキスト。</param>
    </member>
    <member name="M:System.Web.Mvc.ActionFilterAttribute.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)">
      <summary>アクション結果の実行前に ASP.NET MVC フレームワークによって呼び出されます。</summary>
      <param name="filterContext">フィルター コンテキスト。</param>
    </member>
    <member name="T:System.Web.Mvc.ActionMethodSelectorAttribute">
      <summary>アクション メソッドの選択に影響する属性を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionMethodSelectorAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ActionMethodSelectorAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionMethodSelectorAttribute.IsValidForRequest(System.Web.Mvc.ControllerContext,System.Reflection.MethodInfo)">
      <summary>アクション メソッドの選択が、指定されたコントローラー コンテキストで有効かどうかを判断します。</summary>
      <returns>アクション メソッドの選択が、指定されたコントローラー コンテキストで有効である場合は true。それ以外の場合は false。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="methodInfo">アクション メソッドに関する情報。</param>
    </member>
    <member name="T:System.Web.Mvc.ActionNameAttribute">
      <summary>アクションの名前に使用される属性を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionNameAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Web.Mvc.ActionNameAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">アクションの名前。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.ActionNameAttribute.IsValidName(System.Web.Mvc.ControllerContext,System.String,System.Reflection.MethodInfo)">
      <summary>指定されたコントローラー コンテキストでアクション名が有効かどうかを判断します。</summary>
      <returns>指定されたコントローラー コンテキストでアクション名が有効である場合は true。それ以外の場合は false。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="actionName">アクションの名前。</param>
      <param name="methodInfo">アクション メソッドに関する情報。</param>
    </member>
    <member name="P:System.Web.Mvc.ActionNameAttribute.Name">
      <summary>アクションの名前を取得または設定します。</summary>
      <returns>アクションの名前。</returns>
    </member>
    <member name="T:System.Web.Mvc.ActionNameSelectorAttribute">
      <summary>アクション メソッドの選択に影響する属性を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionNameSelectorAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ActionNameSelectorAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionNameSelectorAttribute.IsValidName(System.Web.Mvc.ControllerContext,System.String,System.Reflection.MethodInfo)">
      <summary>指定されたコントローラー コンテキストでアクション名が有効かどうかを判断します。</summary>
      <returns>指定されたコントローラー コンテキストでアクション名が有効である場合は true。それ以外の場合は false。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="actionName">アクションの名前。</param>
      <param name="methodInfo">アクション メソッドに関する情報。</param>
    </member>
    <member name="T:System.Web.Mvc.ActionResult">
      <summary>アクション メソッドの結果を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionResult.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ActionResult" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>
        <see cref="T:System.Web.Mvc.ActionResult" /> クラスを継承するカスタム型によって、アクション メソッドの結果の処理を有効にします。</summary>
      <param name="context">結果が実行されるコンテキスト。このコンテキスト情報には、コントローラー、HTTP コンテンツ、要求コンテキスト、ルート データなどが含まれます。</param>
    </member>
    <member name="T:System.Web.Mvc.ActionSelector">
      <summary>アクション メソッドの選択ロジックが含まれるデリゲートを表します。</summary>
    </member>
    <member name="T:System.Web.Mvc.AdditionalMetadataAttribute">
      <summary>追加のメタデータをサポートするために <see cref="T:System.Web.Mvc.IMetadataAware" /> インターフェイスを実装するクラスを提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.AdditionalMetadataAttribute.#ctor(System.String,System.Object)">
      <summary>
        <see cref="T:System.Web.Mvc.AdditionalMetadataAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">モデル メタデータの名前。</param>
      <param name="value">モデル メタデータの値。</param>
    </member>
    <member name="P:System.Web.Mvc.AdditionalMetadataAttribute.Name">
      <summary>追加のメタデータ属性の名前を取得します。</summary>
      <returns>追加のメタデータ属性の名前。</returns>
    </member>
    <member name="M:System.Web.Mvc.AdditionalMetadataAttribute.OnMetadataCreated(System.Web.Mvc.ModelMetadata)">
      <summary>モデル メタデータ作成プロセスにメタデータを提供します。</summary>
      <param name="metadata">メタデータ。</param>
    </member>
    <member name="P:System.Web.Mvc.AdditionalMetadataAttribute.TypeId">
      <summary>追加のメタデータ属性の型を取得します。</summary>
      <returns>追加のメタデータ属性の型。</returns>
    </member>
    <member name="P:System.Web.Mvc.AdditionalMetadataAttribute.Value">
      <summary>追加のメタデータ属性の値を取得します。</summary>
      <returns>追加のメタデータ属性の値。</returns>
    </member>
    <member name="T:System.Web.Mvc.AjaxHelper">
      <summary>AJAX シナリオで HTML をビュー内に表示するためのサポートを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.AjaxHelper.#ctor(System.Web.Mvc.ViewContext,System.Web.Mvc.IViewDataContainer)">
      <summary>指定されたビュー コンテキストおよびビュー データ コンテナーを使用して、<see cref="T:System.Web.Mvc.AjaxHelper" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="viewContext">ビュー コンテキスト。</param>
      <param name="viewDataContainer">ビュー データ コンテナー。</param>
      <exception cref="T:System.ArgumentNullException">パラメーターの一方または両方が null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.AjaxHelper.#ctor(System.Web.Mvc.ViewContext,System.Web.Mvc.IViewDataContainer,System.Web.Routing.RouteCollection)">
      <summary>指定されたビュー コンテキスト、ビュー データ コンテナー、およびルート コレクションを使用して、<see cref="T:System.Web.Mvc.AjaxHelper" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="viewContext">ビュー コンテキスト。</param>
      <param name="viewDataContainer">ビュー データ コンテナー。</param>
      <param name="routeCollection">URL ルート コレクション。</param>
      <exception cref="T:System.ArgumentNullException">1 つ以上のパラメーターが null です。</exception>
    </member>
    <member name="P:System.Web.Mvc.AjaxHelper.GlobalizationScriptPath">
      <summary>グローバリゼーション スクリプト ファイルに使用する場所のルート パスを取得または設定します。</summary>
      <returns>グローバリゼーション スクリプト ファイルを格納するフォルダーの場所。既定の場所は "～/Scripts/Globalization" です。</returns>
    </member>
    <member name="M:System.Web.Mvc.AjaxHelper.JavaScriptStringEncode(System.String)">
      <summary>指定されたメッセージをシリアル化し、結果として得られる JSON 形式の文字列を返します。</summary>
      <returns>JSON 形式の文字列としてシリアル化されたメッセージ。</returns>
      <param name="message">シリアル化するメッセージ。</param>
    </member>
    <member name="P:System.Web.Mvc.AjaxHelper.RouteCollection">
      <summary>アプリケーションの URL ルートのコレクションを取得します。</summary>
      <returns>アプリケーションのルートのコレクション。</returns>
    </member>
    <member name="P:System.Web.Mvc.AjaxHelper.ViewBag">
      <summary>ViewBag を取得します。</summary>
      <returns>ViewBag。</returns>
    </member>
    <member name="P:System.Web.Mvc.AjaxHelper.ViewContext">
      <summary>ビューのコンテキスト情報を取得します。</summary>
      <returns>ビューのコンテキスト。</returns>
    </member>
    <member name="P:System.Web.Mvc.AjaxHelper.ViewData">
      <summary>現在のビュー データ ディクショナリを取得します。</summary>
      <returns>ビュー データ ディクショナリ。</returns>
    </member>
    <member name="P:System.Web.Mvc.AjaxHelper.ViewDataContainer">
      <summary>ビュー データ コンテナーを取得します。</summary>
      <returns>ビュー データ コンテナー。</returns>
    </member>
    <member name="T:System.Web.Mvc.AjaxHelper`1">
      <summary>AJAX シナリオで HTML を、厳密に型指定されたビュー内に表示するためのサポートを表します。</summary>
      <typeparam name="TModel">モデルの型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.AjaxHelper`1.#ctor(System.Web.Mvc.ViewContext,System.Web.Mvc.IViewDataContainer)">
      <summary>指定されたビュー コンテキストおよびビュー データ コンテナーを使用して、<see cref="T:System.Web.Mvc.AjaxHelper`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="viewContext">ビュー コンテキスト。</param>
      <param name="viewDataContainer">ビュー データ コンテナー。</param>
    </member>
    <member name="M:System.Web.Mvc.AjaxHelper`1.#ctor(System.Web.Mvc.ViewContext,System.Web.Mvc.IViewDataContainer,System.Web.Routing.RouteCollection)">
      <summary>指定されたビュー コンテキスト、ビュー データ コンテナー、および URL ルート コレクションを使用して、<see cref="T:System.Web.Mvc.AjaxHelper`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="viewContext">ビュー コンテキスト。</param>
      <param name="viewDataContainer">ビュー データ コンテナー。</param>
      <param name="routeCollection">URL ルート コレクション。</param>
    </member>
    <member name="P:System.Web.Mvc.AjaxHelper`1.ViewBag">
      <summary>ViewBag を取得します。</summary>
      <returns>ViewBag。</returns>
    </member>
    <member name="P:System.Web.Mvc.AjaxHelper`1.ViewData">
      <summary>ビュー データ ディクショナリの厳密に型指定されたバージョンを取得します。</summary>
      <returns>ビューの、厳密に型指定されたデータ ディクショナリ。</returns>
    </member>
    <member name="T:System.Web.Mvc.AjaxRequestExtensions">
      <summary>HTTP 要求が AJAX 要求であるかどうかを判断する機能を追加することによって <see cref="T:System.Web.HttpRequestBase" /> クラスを拡張するクラスを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.AjaxRequestExtensions.IsAjaxRequest(System.Web.HttpRequestBase)">
      <summary>指定された HTTP 要求が AJAX 要求であるかどうかを判断します。</summary>
      <returns>指定された HTTP 要求が AJAX 要求である場合は true。それ以外の場合は false。</returns>
      <param name="request">HTTP 要求。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> パラメーターは null (Visual Basic では Nothing) です。</exception>
    </member>
    <member name="T:System.Web.Mvc.AllowAnonymousAttribute">
      <summary>承認時に <see cref="T:System.Web.Mvc.AuthorizeAttribute" /> をスキップするようにコントローラーとアクションをマークする属性を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.AllowAnonymousAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.AllowAnonymousAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Web.Mvc.AllowHtmlAttribute">
      <summary>プロパティの要求の検証をスキップすることにより、モデル バインディング時に HTML マークアップを要求に含めることができます (スクリプトによる攻略を防ぐため、要求の検証を無効にするすべてのモデルをアプリケーションで明示的に検証することを強くお勧めします)。</summary>
    </member>
    <member name="M:System.Web.Mvc.AllowHtmlAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.AllowHtmlAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.AllowHtmlAttribute.OnMetadataCreated(System.Web.Mvc.ModelMetadata)">
      <summary>このメソッドは、ASP.NET MVC 検証インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
      <param name="metadata">モデル メタデータ。</param>
    </member>
    <member name="T:System.Web.Mvc.AreaReference">
      <summary>
        <see cref="T:System.Web.Mvc.RemoteAttribute" /> を構築するときのコントローラー名の解釈を制御します。</summary>
    </member>
    <member name="F:System.Web.Mvc.AreaReference.UseCurrent">
      <summary>現在の領域内でコントローラーを検索します。</summary>
    </member>
    <member name="F:System.Web.Mvc.AreaReference.UseRoot">
      <summary>ルート領域内でコントローラーを検索します。</summary>
    </member>
    <member name="T:System.Web.Mvc.AreaRegistration">
      <summary>ASP.NET MVC アプリケーション内の 1 つ以上の領域を登録する方法を提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistration.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.AreaRegistration" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.AreaRegistration.AreaName">
      <summary>登録する領域の名前を取得します。</summary>
      <returns>登録する領域の名前。</returns>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistration.RegisterAllAreas">
      <summary>ASP.NET MVC アプリケーション内のすべての領域を登録します。</summary>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistration.RegisterAllAreas(System.Object)">
      <summary>指定されたユーザー定義の情報を使用して、ASP.NET MVC アプリケーション内のすべての領域を登録します。</summary>
      <param name="state">領域に渡すユーザー定義の情報を格納しているオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistration.RegisterArea(System.Web.Mvc.AreaRegistrationContext)">
      <summary>指定された領域のコンテキスト情報を使用して、ASP.NET MVC アプリケーション内の領域を登録します。</summary>
      <param name="context">領域を登録するために必要な情報をカプセル化します。</param>
    </member>
    <member name="T:System.Web.Mvc.AreaRegistrationContext">
      <summary>ASP.NET MVC アプリケーション内の領域を登録するために必要な情報をカプセル化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistrationContext.#ctor(System.String,System.Web.Routing.RouteCollection)">
      <summary>指定された領域名およびルートのコレクションを使用して、<see cref="T:System.Web.Mvc.AreaRegistrationContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="areaName">登録する領域の名前。</param>
      <param name="routes">アプリケーションのルートのコレクション。</param>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistrationContext.#ctor(System.String,System.Web.Routing.RouteCollection,System.Object)">
      <summary>指定された領域名、ルートのコレクション、およびユーザー定義データを使用して、<see cref="T:System.Web.Mvc.AreaRegistrationContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="areaName">登録する領域の名前。</param>
      <param name="routes">アプリケーションのルートのコレクション。</param>
      <param name="state">領域に渡すユーザー定義の情報を格納しているオブジェクト。</param>
    </member>
    <member name="P:System.Web.Mvc.AreaRegistrationContext.AreaName">
      <summary>登録する領域の名前を取得します。</summary>
      <returns>登録する領域の名前。</returns>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistrationContext.MapRoute(System.String,System.String)">
      <summary>指定された URL ルートをマップし、<see cref="P:System.Web.Mvc.AreaRegistrationContext.AreaName" /> プロパティで指定された領域に関連付けます。</summary>
      <returns>マップされたルートへの参照。</returns>
      <param name="name">ルートの名前。</param>
      <param name="url">ルートの URL パターン。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="url" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistrationContext.MapRoute(System.String,System.String,System.Object)">
      <summary>指定された URL ルートをマップし、指定されたルートの既定値を使用して、<see cref="P:System.Web.Mvc.AreaRegistrationContext.AreaName" /> プロパティで指定された領域に関連付けます。</summary>
      <returns>マップされたルートへの参照。</returns>
      <param name="name">ルートの名前。</param>
      <param name="url">ルートの URL パターン。</param>
      <param name="defaults">既定のルートの値を格納しているオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="url" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistrationContext.MapRoute(System.String,System.String,System.Object,System.Object)">
      <summary>指定された URL ルートをマップし、指定されたルートの既定値と制約を使用して、<see cref="P:System.Web.Mvc.AreaRegistrationContext.AreaName" /> プロパティで指定された領域に関連付けます。</summary>
      <returns>マップされたルートへの参照。</returns>
      <param name="name">ルートの名前。</param>
      <param name="url">ルートの URL パターン。</param>
      <param name="defaults">既定のルートの値を格納しているオブジェクト。</param>
      <param name="constraints">URL パラメーターとして有効な値を指定する式のセット。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="url" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistrationContext.MapRoute(System.String,System.String,System.Object,System.Object,System.String[])">
      <summary>指定された URL ルートをマップし、指定されたルートの既定値、制約、および名前空間を使用して、<see cref="P:System.Web.Mvc.AreaRegistrationContext.AreaName" /> プロパティで指定された領域に関連付けます。</summary>
      <returns>マップされたルートへの参照。</returns>
      <param name="name">ルートの名前。</param>
      <param name="url">ルートの URL パターン。</param>
      <param name="defaults">既定のルートの値を格納しているオブジェクト。</param>
      <param name="constraints">URL パラメーターとして有効な値を指定する式のセット。</param>
      <param name="namespaces">アプリケーションの名前空間の列挙可能なセット。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="url" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistrationContext.MapRoute(System.String,System.String,System.Object,System.String[])">
      <summary>指定された URL ルートをマップし、指定されたルートの既定値と名前空間を使用して、<see cref="P:System.Web.Mvc.AreaRegistrationContext.AreaName" /> プロパティで指定された領域に関連付けます。</summary>
      <returns>マップされたルートへの参照。</returns>
      <param name="name">ルートの名前。</param>
      <param name="url">ルートの URL パターン。</param>
      <param name="defaults">既定のルートの値を格納しているオブジェクト。</param>
      <param name="namespaces">アプリケーションの名前空間の列挙可能なセット。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="url" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistrationContext.MapRoute(System.String,System.String,System.String[])">
      <summary>指定された URL ルートをマップし、指定された名前空間を使用して、<see cref="P:System.Web.Mvc.AreaRegistrationContext.AreaName" /> プロパティで指定された領域に関連付けます。</summary>
      <returns>マップされたルートへの参照。</returns>
      <param name="name">ルートの名前。</param>
      <param name="url">ルートの URL パターン。</param>
      <param name="namespaces">アプリケーションの名前空間の列挙可能なセット。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="url" /> パラメーターが null です。</exception>
    </member>
    <member name="P:System.Web.Mvc.AreaRegistrationContext.Namespaces">
      <summary>アプリケーションの名前空間を取得します。</summary>
      <returns>アプリケーションの名前空間の列挙可能なセット。</returns>
    </member>
    <member name="P:System.Web.Mvc.AreaRegistrationContext.Routes">
      <summary>アプリケーションの定義されたルートのコレクションを取得します。</summary>
      <returns>アプリケーションの定義されたルートのコレクション。</returns>
    </member>
    <member name="P:System.Web.Mvc.AreaRegistrationContext.State">
      <summary>領域に渡すユーザー定義の情報を格納しているオブジェクトを取得します。</summary>
      <returns>領域に渡すユーザー定義の情報を格納しているオブジェクト。</returns>
    </member>
    <member name="T:System.Web.Mvc.AssociatedMetadataProvider">
      <summary>メタデータ プロバイダーを実装するための抽象クラスを提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.AssociatedMetadataProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.AssociatedMetadataProvider" /> クラスを初期化するために、派生クラスのコンストラクターから呼び出されます。</summary>
    </member>
    <member name="M:System.Web.Mvc.AssociatedMetadataProvider.CreateMetadata(System.Collections.Generic.IEnumerable{System.Attribute},System.Type,System.Func{System.Object},System.Type,System.String)">
      <summary>派生クラスによってオーバーライドされると、プロパティのモデル メタデータを作成します。</summary>
      <returns>プロパティのモデル メタデータ。</returns>
      <param name="attributes">属性のセット。</param>
      <param name="containerType">コンテナーの型。</param>
      <param name="modelAccessor">モデル アクセサー。</param>
      <param name="modelType">モデルの型。</param>
      <param name="propertyName">プロパティの名前。</param>
    </member>
    <member name="M:System.Web.Mvc.AssociatedMetadataProvider.FilterAttributes(System.Type,System.ComponentModel.PropertyDescriptor,System.Collections.Generic.IEnumerable{System.Attribute})">
      <summary>属性のリストを取得します。</summary>
      <returns>属性のリスト。</returns>
      <param name="containerType">コンテナーの型。</param>
      <param name="propertyDescriptor">プロパティ記述子。</param>
      <param name="attributes">属性のコンテナー。</param>
    </member>
    <member name="M:System.Web.Mvc.AssociatedMetadataProvider.GetMetadataForProperties(System.Object,System.Type)">
      <summary>モデルのプロパティのリストを返します。</summary>
      <returns>モデルのプロパティのリスト。</returns>
      <param name="container">モデル コンテナー。</param>
      <param name="containerType">コンテナーの型。</param>
    </member>
    <member name="M:System.Web.Mvc.AssociatedMetadataProvider.GetMetadataForProperty(System.Func{System.Object},System.Type,System.ComponentModel.PropertyDescriptor)">
      <summary>コンテナーの型およびプロパティ記述子を使用して指定したプロパティのメタデータを返します。</summary>
      <returns>コンテナーの型およびプロパティ記述子を使用して指定したプロパティのメタデータ。</returns>
      <param name="modelAccessor">モデル アクセサー。</param>
      <param name="containerType">コンテナーの型。</param>
      <param name="propertyDescriptor">プロパティ記述子。</param>
    </member>
    <member name="M:System.Web.Mvc.AssociatedMetadataProvider.GetMetadataForProperty(System.Func{System.Object},System.Type,System.String)">
      <summary>コンテナーの型およびプロパティ名を使用して指定したプロパティのメタデータを返します。</summary>
      <returns>コンテナーの型およびプロパティ名を使用して指定したプロパティのメタデータ。</returns>
      <param name="modelAccessor">モデル アクセサー。</param>
      <param name="containerType">コンテナーの型。</param>
      <param name="propertyName">プロパティの名前。</param>
    </member>
    <member name="M:System.Web.Mvc.AssociatedMetadataProvider.GetMetadataForType(System.Func{System.Object},System.Type)">
      <summary>モデルの型を使用して指定したプロパティのメタデータを返します。</summary>
      <returns>モデルの型を使用して指定したプロパティのメタデータ。</returns>
      <param name="modelAccessor">モデル アクセサー。</param>
      <param name="modelType">モデルの型。</param>
    </member>
    <member name="M:System.Web.Mvc.AssociatedMetadataProvider.GetTypeDescriptor(System.Type)">
      <summary>指定した型の型記述子を返します。</summary>
      <returns>型記述子。</returns>
      <param name="type">型。</param>
    </member>
    <member name="T:System.Web.Mvc.AssociatedValidatorProvider">
      <summary>検証プロバイダーを実装するクラスの抽象クラスです。</summary>
    </member>
    <member name="M:System.Web.Mvc.AssociatedValidatorProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.AssociatedMetadataProvider" /> クラスを初期化するために、派生クラスのコンストラクターから呼び出されます。</summary>
    </member>
    <member name="M:System.Web.Mvc.AssociatedValidatorProvider.GetTypeDescriptor(System.Type)">
      <summary>指定した型の型記述子を取得します。</summary>
      <returns>指定した型の型記述子。</returns>
      <param name="type">検証プロバイダーの種類。</param>
    </member>
    <member name="M:System.Web.Mvc.AssociatedValidatorProvider.GetValidators(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>メタデータおよびコントローラー コンテキストを使用して、モデルの検証コントロールを取得します。</summary>
      <returns>モデルの検証コントロール。</returns>
      <param name="metadata">メタデータ。</param>
      <param name="context">コントローラー コンテキスト。</param>
    </member>
    <member name="M:System.Web.Mvc.AssociatedValidatorProvider.GetValidators(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext,System.Collections.Generic.IEnumerable{System.Attribute})">
      <summary>メタデータ、コントローラー コンテキスト、および属性の一覧を使用して、モデルの検証コントロールを取得します。</summary>
      <returns>モデルの検証コントロール。</returns>
      <param name="metadata">メタデータ。</param>
      <param name="context">コントローラー コンテキスト。</param>
      <param name="attributes">属性の一覧。</param>
    </member>
    <member name="T:System.Web.Mvc.AsyncController">
      <summary>ASP.NET MVC 3 との下位互換性のために提供されています。</summary>
    </member>
    <member name="M:System.Web.Mvc.AsyncController.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.AsyncController" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Web.Mvc.AsyncTimeoutAttribute">
      <summary>非同期メソッドのタイムアウト値をミリ秒単位で設定するために使用する属性を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.AsyncTimeoutAttribute.#ctor(System.Int32)">
      <summary>
        <see cref="T:System.Web.Mvc.AsyncTimeoutAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="duration">タイムアウト値 (ミリ秒)。</param>
    </member>
    <member name="P:System.Web.Mvc.AsyncTimeoutAttribute.Duration">
      <summary>タイムアウト期間をミリ秒単位で取得します。</summary>
      <returns>タイムアウト期間 (ミリ秒)。</returns>
    </member>
    <member name="M:System.Web.Mvc.AsyncTimeoutAttribute.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
      <summary>非同期のアクション メソッドを実行する前に、ASP.NET によって呼び出されます。</summary>
      <param name="filterContext">フィルター コンテキスト。</param>
    </member>
    <member name="T:System.Web.Mvc.AuthorizationContext">
      <summary>
        <see cref="T:System.Web.Mvc.AuthorizeAttribute" /> 属性を使用するために必要な情報をカプセル化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.AuthorizationContext.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.AuthorizationContext" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.AuthorizationContext.#ctor(System.Web.Mvc.ControllerContext)">
      <summary>指定されたコントローラー コンテキストを使用して、<see cref="T:System.Web.Mvc.AuthorizationContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="controllerContext">結果が実行されるコンテキスト。このコンテキスト情報には、コントローラー、HTTP コンテンツ、要求コンテキスト、ルート データなどが含まれます。</param>
    </member>
    <member name="M:System.Web.Mvc.AuthorizationContext.#ctor(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor)">
      <summary>指定されたコントローラー コンテキストとアクション記述子を使用して、<see cref="T:System.Web.Mvc.AuthorizationContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="controllerContext">結果が実行されるコンテキスト。このコンテキスト情報には、コントローラー、HTTP コンテンツ、要求コンテキスト、ルート データなどが含まれます。</param>
      <param name="actionDescriptor">名前、コントローラー、パラメーター、属性、フィルターなど、アクション メソッドに関する情報を提供するオブジェクト。</param>
    </member>
    <member name="P:System.Web.Mvc.AuthorizationContext.ActionDescriptor">
      <summary>名前、コントローラー、パラメーター、属性、フィルターなど、<see cref="T:System.Web.Mvc.AuthorizeAttribute" /> 属性によってマークされたアクション メソッドに関する情報を提供します。</summary>
      <returns>
        <see cref="T:System.Web.Mvc.AuthorizeAttribute" /> 属性によってマークされたアクション メソッド用のアクション記述子です。</returns>
    </member>
    <member name="P:System.Web.Mvc.AuthorizationContext.Result">
      <summary>アクション メソッドが返す結果を取得または設定します。</summary>
      <returns>アクション メソッドが返す結果。</returns>
    </member>
    <member name="T:System.Web.Mvc.AuthorizeAttribute">
      <summary>コントローラーまたはアクション メソッドへのアクセスが、承認要件を満たすユーザーに制限されることを示します。</summary>
    </member>
    <member name="M:System.Web.Mvc.AuthorizeAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.AuthorizeAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.AuthorizeAttribute.AuthorizeCore(System.Web.HttpContextBase)">
      <summary>オーバーライドされた場合、カスタムの承認チェックのエントリ ポイントを提供します。</summary>
      <returns>ユーザーが承認された場合は true。それ以外の場合は false。</returns>
      <param name="httpContext">個々の HTTP 要求に関する HTTP 固有のすべての情報をカプセル化する HTTP コンテキスト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="httpContext" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.AuthorizeAttribute.HandleUnauthorizedRequest(System.Web.Mvc.AuthorizationContext)">
      <summary>承認されなかった HTTP 要求を処理します。</summary>
      <param name="filterContext">
        <see cref="T:System.Web.Mvc.AuthorizeAttribute" /> を使用するための情報をカプセル化します。<paramref name="filterContext" /> オブジェクトは、コントローラー、HTTP コンテキスト、要求コンテキスト、アクション結果、ルート データなどを格納します。</param>
    </member>
    <member name="M:System.Web.Mvc.AuthorizeAttribute.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
      <summary>プロセスが承認を要求したときに呼び出されます。</summary>
      <param name="filterContext">
        <see cref="T:System.Web.Mvc.AuthorizeAttribute" /> を使用するための情報をカプセル化するフィルター コンテキスト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filterContext" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.AuthorizeAttribute.OnCacheAuthorization(System.Web.HttpContextBase)">
      <summary>キャッシング モジュールが承認を要求したときに呼び出されます。</summary>
      <returns>検証ステータスへの参照。</returns>
      <param name="httpContext">個々の HTTP 要求に関する HTTP 固有のすべての情報をカプセル化する HTTP コンテキスト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="httpContext" /> パラメーターが null です。</exception>
    </member>
    <member name="P:System.Web.Mvc.AuthorizeAttribute.Roles">
      <summary>コントローラーまたはアクション メソッドへのアクセスが承認されているユーザー ロールを取得または設定します。</summary>
      <returns>コントローラーまたはアクション メソッドへのアクセスが承認されているユーザー ロール。</returns>
    </member>
    <member name="P:System.Web.Mvc.AuthorizeAttribute.TypeId">
      <summary>この属性の一意の識別子を取得します。</summary>
      <returns>この属性の一意の識別子。</returns>
    </member>
    <member name="P:System.Web.Mvc.AuthorizeAttribute.Users">
      <summary>コントローラーまたはアクション メソッドへのアクセスが承認されているユーザーを取得または設定します。</summary>
      <returns>コントローラーまたはアクション メソッドへのアクセスが承認されているユーザー。</returns>
    </member>
    <member name="T:System.Web.Mvc.BindAttribute">
      <summary>パラメーターへのモデル バインディングが発生する方法の詳細を提供するための属性を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.BindAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.BindAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.BindAttribute.Exclude">
      <summary>バインドが許可されていないプロパティ名のコンマ区切りリストを取得または設定します。</summary>
      <returns>除外リスト。</returns>
    </member>
    <member name="P:System.Web.Mvc.BindAttribute.Include">
      <summary>バインドが許可されているプロパティ名のコンマ区切りリストを取得または設定します。</summary>
      <returns>包含リスト。</returns>
    </member>
    <member name="M:System.Web.Mvc.BindAttribute.IsPropertyAllowed(System.String)">
      <summary>指定されたプロパティの使用が許可されているかどうかを判断します。</summary>
      <returns>指定されたプロパティの使用が許可されている場合は true。それ以外の場合は false。</returns>
      <param name="propertyName">プロパティの名前。</param>
    </member>
    <member name="P:System.Web.Mvc.BindAttribute.Prefix">
      <summary>アクション引数またはモデル プロパティにバインドするために、マークアップを表示するときに使用されるプレフィックスを取得または設定します。</summary>
      <returns>使用するプレフィックス。</returns>
    </member>
    <member name="T:System.Web.Mvc.BuildManagerCompiledView">
      <summary>ビュー エンジンによって表示される前に BuildManager クラスによってコンパイルされるビューの基本クラスを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.BuildManagerCompiledView.#ctor(System.Web.Mvc.ControllerContext,System.String)">
      <summary>指定したコントローラー コンテキストとビューのパスを使用して、<see cref="T:System.Web.Mvc.BuildManagerCompiledView" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="viewPath">ビューのパス。</param>
    </member>
    <member name="M:System.Web.Mvc.BuildManagerCompiledView.#ctor(System.Web.Mvc.ControllerContext,System.String,System.Web.Mvc.IViewPageActivator)">
      <summary>指定したコントローラー コンテキスト、ビューのパス、およびビュー ページ アクティベーターを使用して、<see cref="T:System.Web.Mvc.BuildManagerCompiledView" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="controllerContext">現在のコントローラーのコンテキスト情報。この情報には、HTTP コンテキスト、要求コンテキスト、ルート データ、親アクションのビュー コンテキストなどが含まれます。</param>
      <param name="viewPath">表示されるビューへのパス。</param>
      <param name="viewPageActivator">実行時にビュー ページを動的に構築するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controllerContext" /> パラメーターが null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="viewPath" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.BuildManagerCompiledView.Render(System.Web.Mvc.ViewContext,System.IO.TextWriter)">
      <summary>指定されたライター オブジェクトを使用して、指定されたビュー コンテキストを表示します。</summary>
      <param name="viewContext">ビューの表示関連の情報 (ビュー データ、一時データ、フォーム コンテキストなど)。</param>
      <param name="writer">ライター オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="viewContext" /> パラメーターが null です。</exception>
      <exception cref="T:SInvalidOperationException">特定の種類のビューのインスタンスを作成できませんでした。</exception>
    </member>
    <member name="M:System.Web.Mvc.BuildManagerCompiledView.RenderView(System.Web.Mvc.ViewContext,System.IO.TextWriter,System.Object)">
      <summary>派生クラスでオーバーライドされた場合、指定されたライター オブジェクトとオブジェクト インスタンスを使用して、指定されたビュー コンテキストを表示します。</summary>
      <param name="viewContext">ビューの表示関連の情報 (ビュー データ、一時データ、フォーム コンテキストなど)。</param>
      <param name="writer">ライター オブジェクト。</param>
      <param name="instance">ビューに使用できる追加情報が格納されたオブジェクト。</param>
    </member>
    <member name="P:System.Web.Mvc.BuildManagerCompiledView.ViewPath">
      <summary>ビューのパスを取得または設定します。</summary>
      <returns>ビューのパス。</returns>
    </member>
    <member name="T:System.Web.Mvc.BuildManagerViewEngine">
      <summary>ビュー エンジンの基本クラスを提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.BuildManagerViewEngine.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.BuildManagerViewEngine" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.BuildManagerViewEngine.#ctor(System.Web.Mvc.IViewPageActivator)">
      <summary>指定したビュー ページ アクティベーターを使用して、<see cref="T:System.Web.Mvc.BuildManagerViewEngine" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="viewPageActivator">ビュー ページ アクティベーター。</param>
    </member>
    <member name="M:System.Web.Mvc.BuildManagerViewEngine.FileExists(System.Web.Mvc.ControllerContext,System.String)">
      <summary>指定した仮想ファイル システム (パス) にファイルが存在するかどうかを示す値を取得します。</summary>
      <returns>仮想ファイル システムにファイルが存在する場合は true。それ以外の場合は false。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="virtualPath">仮想パス。</param>
    </member>
    <member name="P:System.Web.Mvc.BuildManagerViewEngine.IsPrecompiledNonUpdateableSite"></member>
    <member name="P:System.Web.Mvc.BuildManagerViewEngine.ViewPageActivator">
      <summary>ビュー ページ アクティベーターを取得します。</summary>
      <returns>ビュー ページ アクティベーター。</returns>
    </member>
    <member name="T:System.Web.Mvc.ByteArrayModelBinder">
      <summary>ブラウザー要求をバイト配列に対応付けます。</summary>
    </member>
    <member name="M:System.Web.Mvc.ByteArrayModelBinder.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ByteArrayModelBinder" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ByteArrayModelBinder.BindModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>指定されたコントローラー コンテキストおよびバインディング コンテキストを使用して、モデルをバインドします。</summary>
      <returns>バインドされたデータ オブジェクト。実装<see cref="M:System.Web.Mvc.IModelBinder.BindModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)" /></returns>
      <param name="controllerContext">コントローラーが機能するコンテキスト。このコンテキスト情報には、コントローラー、HTTP コンテンツ、要求コンテキスト、ルート データなどが含まれます。</param>
      <param name="bindingContext">モデルをバインドするコンテキスト。このコンテキストには、モデル オブジェクト、モデル名、モデルの型、プロパティ フィルター、値プロバイダーなどの情報が含まれます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bindingContext" /> パラメーターが null です。</exception>
    </member>
    <member name="T:System.Web.Mvc.CachedAssociatedMetadataProvider`1">
      <summary>キャッシュされたメタデータ プロバイダーを実装するための抽象クラスを提供します。</summary>
      <typeparam name="TModelMetadata"></typeparam>
    </member>
    <member name="M:System.Web.Mvc.CachedAssociatedMetadataProvider`1.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.CachedAssociatedMetadataProvider`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.CachedAssociatedMetadataProvider`1.CacheItemPolicy">
      <summary>キャッシュ項目のポリシーを取得します。</summary>
      <returns>キャッシュ項目のポリシー。</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedAssociatedMetadataProvider`1.CacheKeyPrefix">
      <summary>キャッシュ キーのプレフィックスを取得します。</summary>
      <returns>キャッシュ キーのプレフィックス。</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedAssociatedMetadataProvider`1.CreateMetadata(System.Collections.Generic.IEnumerable{System.Attribute},System.Type,System.Func{System.Object},System.Type,System.String)">
      <summary>派生クラスによってオーバーライドされると、プロパティのキャッシュされたモデル メタデータを作成します。</summary>
      <returns>プロパティのキャッシュされたモデル メタデータ。</returns>
      <param name="attributes">属性。</param>
      <param name="containerType">コンテナーの型。</param>
      <param name="modelAccessor">モデル アクセサー。</param>
      <param name="modelType">モデルの型。</param>
      <param name="propertyName">プロパティ名。</param>
    </member>
    <member name="M:System.Web.Mvc.CachedAssociatedMetadataProvider`1.CreateMetadataFromPrototype(`0,System.Func{System.Object})">
      <summary>最終的なメタデータを生成するためにプロトタイプとモデル アクセスを適用することでプロトタイプ メタデータを作成します。</summary>
      <returns>プロトタイプ メタデータ。</returns>
      <param name="prototype">プロトタイプ。</param>
      <param name="modelAccessor">モデル アクセサー。</param>
    </member>
    <member name="M:System.Web.Mvc.CachedAssociatedMetadataProvider`1.CreateMetadataPrototype(System.Collections.Generic.IEnumerable{System.Attribute},System.Type,System.Type,System.String)">
      <summary>メタデータ プロトタイプを作成します。</summary>
      <returns>メタデータ プロトタイプ。</returns>
      <param name="attributes">属性。</param>
      <param name="containerType">コンテナーの型。</param>
      <param name="modelType">モデルの型。</param>
      <param name="propertyName">プロパティ名。</param>
    </member>
    <member name="M:System.Web.Mvc.CachedAssociatedMetadataProvider`1.GetMetadataForProperties(System.Object,System.Type)">
      <summary>プロパティのメタデータを取得します。</summary>
      <returns>プロパティのメタデータ。</returns>
      <param name="container">コンテナー。</param>
      <param name="containerType">コンテナーの型。</param>
    </member>
    <member name="M:System.Web.Mvc.CachedAssociatedMetadataProvider`1.GetMetadataForProperty(System.Func{System.Object},System.Type,System.ComponentModel.PropertyDescriptor)">
      <summary>指定したプロパティのメタデータを返します。</summary>
      <returns>指定したプロパティのメタデータ。</returns>
      <param name="modelAccessor">モデル アクセサー。</param>
      <param name="containerType">コンテナーの型。</param>
      <param name="propertyDescriptor">プロパティ記述子。</param>
    </member>
    <member name="M:System.Web.Mvc.CachedAssociatedMetadataProvider`1.GetMetadataForProperty(System.Func{System.Object},System.Type,System.String)">
      <summary>指定したプロパティのメタデータを返します。</summary>
      <returns>指定したプロパティのメタデータ。</returns>
      <param name="modelAccessor">モデル アクセサー。</param>
      <param name="containerType">コンテナーの型。</param>
      <param name="propertyName">プロパティ名。</param>
    </member>
    <member name="M:System.Web.Mvc.CachedAssociatedMetadataProvider`1.GetMetadataForType(System.Func{System.Object},System.Type)">
      <summary>モデルの型を使用して指定したプロパティのキャッシュされたメタデータを返します。</summary>
      <returns>モデルの型を使用して指定したプロパティのキャッシュされたメタデータ。</returns>
      <param name="modelAccessor">モデル アクセサー。</param>
      <param name="modelType">コンテナーの型。</param>
    </member>
    <member name="P:System.Web.Mvc.CachedAssociatedMetadataProvider`1.PrototypeCache">
      <summary>プロトタイプ キャッシュを取得します。</summary>
      <returns>プロトタイプ キャッシュ。</returns>
    </member>
    <member name="T:System.Web.Mvc.CachedDataAnnotationsMetadataAttributes">
      <summary>
        <see cref="N:System.ComponentModel.DataAnnotations" /> 属性をキャッシュするためのコンテナーを提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsMetadataAttributes.#ctor(System.Attribute[])">
      <summary>
        <see cref="T:System.Web.Mvc.CachedDataAnnotationsMetadataAttributes" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="attributes">属性。</param>
    </member>
    <member name="P:System.Web.Mvc.CachedDataAnnotationsMetadataAttributes.DataType">
      <summary>データ型を取得します。</summary>
      <returns>データ型。</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedDataAnnotationsMetadataAttributes.Display">
      <summary>表示を取得します。</summary>
      <returns>表示。</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedDataAnnotationsMetadataAttributes.DisplayColumn">
      <summary>表示列を取得します。</summary>
      <returns>表示列。</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedDataAnnotationsMetadataAttributes.DisplayFormat">
      <summary>表示形式を取得します。</summary>
      <returns>表示形式。</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedDataAnnotationsMetadataAttributes.DisplayName">
      <summary>表示名を取得します。</summary>
      <returns>表示名。</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedDataAnnotationsMetadataAttributes.Editable">
      <summary>データ フィールドが編集可能かどうかを示します。</summary>
      <returns>フィールドが編集可能である場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedDataAnnotationsMetadataAttributes.HiddenInput">
      <summary>非表示の input を取得します。</summary>
      <returns>非表示の input。</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedDataAnnotationsMetadataAttributes.ReadOnly">
      <summary>データ フィールドが読み取り専用かどうかを示します。</summary>
      <returns>フィールドが読み取り専用である場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedDataAnnotationsMetadataAttributes.Required">
      <summary>データ フィールドが必須かどうかを示します。</summary>
      <returns>フィールドが必須である場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedDataAnnotationsMetadataAttributes.ScaffoldColumn">
      <summary>データ フィールドが scaffold かどうかを示します。</summary>
      <returns>フィールドが scaffold である場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedDataAnnotationsMetadataAttributes.UIHint">
      <summary>UI のヒントを取得します。</summary>
      <returns>UI のヒント。</returns>
    </member>
    <member name="T:System.Web.Mvc.CachedDataAnnotationsModelMetadata">
      <summary>
        <see cref="T:System.Web.Mvc.DataAnnotationsModelMetadata" /> をキャッシュするためのコンテナーを提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsModelMetadata.#ctor(System.Web.Mvc.CachedDataAnnotationsModelMetadata,System.Func{System.Object})">
      <summary>プロトタイプとモデル アクセサーを使用して、<see cref="T:System.Web.Mvc.CachedDataAnnotationsModelMetadata" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="prototype">プロトタイプ。</param>
      <param name="modelAccessor">モデル アクセサー。</param>
    </member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsModelMetadata.#ctor(System.Web.Mvc.CachedDataAnnotationsModelMetadataProvider,System.Type,System.Type,System.String,System.Collections.Generic.IEnumerable{System.Attribute})">
      <summary>プロバイダー、コンテナーの型、モデルの型、プロパティ名、および属性を使用して、<see cref="T:System.Web.Mvc.CachedDataAnnotationsModelMetadata" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="provider">プロバイダー。</param>
      <param name="containerType">コンテナーの型。</param>
      <param name="modelType">モデルの型。</param>
      <param name="propertyName">プロパティ名。</param>
      <param name="attributes">属性。</param>
    </member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsModelMetadata.ComputeConvertEmptyStringToNull">
      <summary>フォームからポストバックされる空の文字列を Nothing に変換するかどうかを示す値を取得します。値がキャッシュされている場合、キャッシュされた値が返されます。それ以外の場合、値はモデル メタデータから取得され、キャッシュに格納されます。</summary>
      <returns>フォームからポストバックされる空の文字列を Nothing に変換するかどうかを示す値。</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsModelMetadata.ComputeDataTypeName">
      <summary>データ型についてのメタ情報を取得します。値がキャッシュされている場合、キャッシュされた値が返されます。それ以外の場合、値はモデル メタデータから取得され、キャッシュに格納されます。</summary>
      <returns>データ型についてのメタ情報。</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsModelMetadata.ComputeDescription">
      <summary>モデルの説明を取得します。値がキャッシュされている場合、キャッシュされた値が返されます。それ以外の場合、値はモデル メタデータから取得され、キャッシュに格納されます。</summary>
      <returns>モデルの説明。</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsModelMetadata.ComputeDisplayFormatString">
      <summary>モデルの表示形式文字列を取得します。値がキャッシュされている場合、キャッシュされた値が返されます。それ以外の場合、値はモデル メタデータから取得され、キャッシュに格納されます。</summary>
      <returns>モデルの表示形式文字列。</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsModelMetadata.ComputeDisplayName">
      <summary>モデルの表示名を取得します。値がキャッシュされている場合、キャッシュされた値が返されます。それ以外の場合、値はモデル メタデータから取得され、キャッシュに格納されます。</summary>
      <returns>モデルの表示名。</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsModelMetadata.ComputeEditFormatString">
      <summary>モデルの編集形式文字列を取得します。値がキャッシュされている場合、キャッシュされた値が返されます。それ以外の場合、値はモデル メタデータから取得され、キャッシュに格納されます。</summary>
      <returns>モデルの編集形式文字列。</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsModelMetadata.ComputeHasNonDefaultEditFormat">
      <summary>モデルが既定以外の編集形式を使用しているかどうかを示す値を取得します。</summary>
      <returns>既定以外の編集形式が使用されているかどうかを示す値。</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsModelMetadata.ComputeHideSurroundingHtml">
      <summary>関連付けられている HTML 要素を使用して、モデル オブジェクトを表示するかどうかを示す値を取得します。関連付けられている HTML 要素を使用して、モデル オブジェクトを表示するかどうかを示す値を取得します。値がキャッシュされている場合、キャッシュされた値が返されます。それ以外の場合、値はモデル メタデータから取得され、キャッシュに格納されます。</summary>
      <returns>関連付けられている HTML 要素を使用して、モデル オブジェクトを表示するかどうかを示す値。</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsModelMetadata.ComputeHtmlEncode"></member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsModelMetadata.ComputeIsReadOnly">
      <summary>モデルが読み取り専用かどうかを示す値を取得します。値がキャッシュされている場合、キャッシュされた値が返されます。それ以外の場合、値はモデル メタデータから取得され、キャッシュに格納されます。</summary>
      <returns>モデルが読み取り専用かどうかを示す値。</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsModelMetadata.ComputeIsRequired">
      <summary>モデルが必須かどうかを示す値を取得します。値がキャッシュされている場合、キャッシュされた値が返されます。それ以外の場合、値はモデル メタデータから取得され、キャッシュに格納されます。</summary>
      <returns>モデルが必須かどうかを示す値。</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsModelMetadata.ComputeNullDisplayText">
      <summary>null 値の表示文字列を取得します。値がキャッシュされている場合、キャッシュされた値が返されます。それ以外の場合、値はモデル メタデータから取得され、キャッシュに格納されます。</summary>
      <returns>null 値の表示文字列。</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsModelMetadata.ComputeOrder">
      <summary>現在のメタデータの順序を表す値を取得します。値がキャッシュされている場合、キャッシュされた値が返されます。それ以外の場合、値はモデル メタデータから取得され、キャッシュに格納されます。</summary>
      <returns>現在のメタデータの順序を表す値。</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsModelMetadata.ComputeShortDisplayName">
      <summary>短い表示名を取得します。値がキャッシュされている場合、キャッシュされた値が返されます。それ以外の場合、値はモデル メタデータから取得され、キャッシュに格納されます。</summary>
      <returns>短い表示名。</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsModelMetadata.ComputeShowForDisplay">
      <summary>リスト ビューや詳細ビューなどの読み取り専用ビューでプロパティを表示するかどうかを示す値を取得します。値がキャッシュされている場合、キャッシュされた値が返されます。それ以外の場合、値はモデル メタデータから取得され、キャッシュに格納されます。</summary>
      <returns>リスト ビューや詳細ビューなどの読み取り専用ビューでプロパティを表示するかどうかを示す値。</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsModelMetadata.ComputeShowForEdit">
      <summary>モデルを編集可能なビューで表示するかどうかを示す値を取得または設定します。値がキャッシュされている場合、キャッシュされた値が返されます。それ以外の場合、値はモデル メタデータから取得され、キャッシュに格納されます。</summary>
      <returns>
        <see cref="T:System.Boolean" /> を返します。</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsModelMetadata.ComputeSimpleDisplayText">
      <summary>モデルの単純な表示文字列を取得します。値がキャッシュされている場合、キャッシュされた値が返されます。それ以外の場合、値はモデル メタデータから取得され、キャッシュに格納されます。</summary>
      <returns>モデルの単純な表示文字列。</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsModelMetadata.ComputeTemplateHint">
      <summary>このモデルに使用するテンプレートの候補を示すヒントを取得します。値がキャッシュされている場合、キャッシュされた値が返されます。それ以外の場合、値はモデル メタデータから取得され、キャッシュに格納されます。</summary>
      <returns>このモデルに使用するテンプレートの候補を示すヒント。</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsModelMetadata.ComputeWatermark">
      <summary>ウォーターマークとして使用できる値を取得します。値がキャッシュされている場合、キャッシュされた値が返されます。それ以外の場合、値はモデル メタデータから取得され、キャッシュに格納されます。</summary>
      <returns>ウォーターマークとして使用できる値。</returns>
    </member>
    <member name="T:System.Web.Mvc.CachedDataAnnotationsModelMetadataProvider">
      <summary>ASP.NET MVC 用の既定のキャッシュされたモデル メタデータ プロバイダーを実装します。</summary>
    </member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsModelMetadataProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.CachedDataAnnotationsModelMetadataProvider" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsModelMetadataProvider.CreateMetadataFromPrototype(System.Web.Mvc.CachedDataAnnotationsModelMetadata,System.Func{System.Object})">
      <summary>プロトタイプおよびモデル アクセサーに基づいて、キャッシュされたメタデータ クラスの実際のインスタンスのコンテナーを返します。</summary>
      <returns>キャッシュされたメタデータ クラスの実際のインスタンスのコンテナー。</returns>
      <param name="prototype">プロトタイプ。</param>
      <param name="modelAccessor">モデル アクセサー。</param>
    </member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsModelMetadataProvider.CreateMetadataPrototype(System.Collections.Generic.IEnumerable{System.Attribute},System.Type,System.Type,System.String)">
      <summary>メタデータ クラスのコンテナー プロトタイプ インスタンスを返します。</summary>
      <returns>メタデータ クラスのコンテナー プロトタイプ インスタンス。</returns>
      <param name="attributes">属性の型。</param>
      <param name="containerType">コンテナーの型。</param>
      <param name="modelType">モデルの型。</param>
      <param name="propertyName">プロパティ名。</param>
    </member>
    <member name="T:System.Web.Mvc.CachedModelMetadata`1">
      <summary>キャッシュされるメタデータのコンテナーを提供します。</summary>
      <typeparam name="TPrototypeCache">コンテナーの型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.CachedModelMetadata`1.#ctor(System.Web.Mvc.CachedDataAnnotationsModelMetadataProvider,System.Type,System.Type,System.String,`0)">
      <summary>プロトタイプに基づいてメタデータ クラスの実際のインスタンスを作成するコンストラクター。</summary>
      <param name="provider">プロバイダー。</param>
      <param name="containerType">コンテナーの型。</param>
      <param name="modelType">モデルの型。</param>
      <param name="propertyName">プロパティ名。</param>
      <param name="prototypeCache">プロトタイプ。</param>
    </member>
    <member name="M:System.Web.Mvc.CachedModelMetadata`1.#ctor(System.Web.Mvc.CachedModelMetadata{`0},System.Func{System.Object})">
      <summary>メタデータ クラスのプロトタイプ インスタンスを作成するコンストラクター。</summary>
      <param name="prototype">プロトタイプ。</param>
      <param name="modelAccessor">モデル アクセサー。</param>
    </member>
    <member name="M:System.Web.Mvc.CachedModelMetadata`1.ComputeConvertEmptyStringToNull">
      <summary>これはプロテクト メソッドであり、したがって直接呼び出すことはできません。このメソッドは、<see cref="T:System.Web.Mvc.CachedDataAnnotationsModelMetadata" /> などの派生クラスでオーバーライドされることを想定して設計されました。フォームからポストバックされる空の文字列を null に変換するかどうかを示すキャッシュされた値を取得または設定します。</summary>
      <returns>フォームからポストバックされる空の文字列を null に変換するかどうかを示すキャッシュされた値。</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedModelMetadata`1.ComputeDataTypeName">
      <summary>これはプロテクト メソッドであり、したがって直接呼び出すことはできません。このメソッドは、<see cref="T:System.Web.Mvc.CachedDataAnnotationsModelMetadata" /> などの派生クラスでオーバーライドされることを想定して設計されました。データ型についてのメタ情報を取得または設定します。</summary>
      <returns>データ型についてのメタ情報。</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedModelMetadata`1.ComputeDescription">
      <summary>これはプロテクト メソッドであり、したがって直接呼び出すことはできません。このメソッドは、<see cref="T:System.Web.Mvc.CachedDataAnnotationsModelMetadata" /> などの派生クラスでオーバーライドされることを想定して設計されました。モデルの説明を取得または設定します。</summary>
      <returns>モデルの説明。</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedModelMetadata`1.ComputeDisplayFormatString">
      <summary>これはプロテクト メソッドであり、したがって直接呼び出すことはできません。このメソッドは、<see cref="T:System.Web.Mvc.CachedDataAnnotationsModelMetadata" /> などの派生クラスでオーバーライドされることを想定して設計されました。モデルの表示形式文字列を取得または設定します。</summary>
      <returns>モデルの表示形式文字列。</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedModelMetadata`1.ComputeDisplayName">
      <summary>これはプロテクト メソッドであり、したがって直接呼び出すことはできません。このメソッドは、<see cref="T:System.Web.Mvc.CachedDataAnnotationsModelMetadata" /> などの派生クラスでオーバーライドされることを想定して設計されました。モデルの表示名を取得または設定します。</summary>
      <returns>モデルの表示名。</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedModelMetadata`1.ComputeEditFormatString">
      <summary>これはプロテクト メソッドであり、したがって直接呼び出すことはできません。このメソッドは、<see cref="T:System.Web.Mvc.CachedDataAnnotationsModelMetadata" /> などの派生クラスでオーバーライドされることを想定して設計されました。モデルの編集形式文字列を取得または設定します。</summary>
      <returns>モデルの編集形式文字列。</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedModelMetadata`1.ComputeHasNonDefaultEditFormat">
      <summary>これはプロテクト メソッドであり、したがって直接呼び出すことはできません。このメソッドは、<see cref="T:System.Web.Mvc.CachedDataAnnotationsModelMetadata" /> などの派生クラスでオーバーライドされることを想定して設計されました。</summary>
      <returns>既定以外の編集形式が使用されているかどうかを示す値。</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedModelMetadata`1.ComputeHideSurroundingHtml">
      <summary>これはプロテクト メソッドであり、したがって直接呼び出すことはできません。このメソッドは、<see cref="T:System.Web.Mvc.CachedDataAnnotationsModelMetadata" /> などの派生クラスでオーバーライドされることを想定して設計されました。関連付けられている HTML 要素を使用して、モデル オブジェクトを表示するかどうかを示すキャッシュされた値を取得または設定します。</summary>
      <returns>関連付けられている HTML 要素を使用して、モデル オブジェクトを表示するかどうかを示すキャッシュされた値。</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedModelMetadata`1.ComputeHtmlEncode"></member>
    <member name="M:System.Web.Mvc.CachedModelMetadata`1.ComputeIsReadOnly">
      <summary>これはプロテクト メソッドであり、したがって直接呼び出すことはできません。このメソッドは、<see cref="T:System.Web.Mvc.CachedDataAnnotationsModelMetadata" /> などの派生クラスでオーバーライドされることを想定して設計されました。モデルが読み取り専用かどうかを示すキャッシュされた値を取得または設定します。</summary>
      <returns>モデルが読み取り専用かどうかを示すキャッシュされた値。</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedModelMetadata`1.ComputeIsRequired">
      <summary>これはプロテクト メソッドであり、したがって直接呼び出すことはできません。このメソッドは、<see cref="T:System.Web.Mvc.CachedDataAnnotationsModelMetadata" /> などの派生クラスでオーバーライドされることを想定して設計されました。モデルが必須かどうかを示すキャッシュされた値を取得または設定します。</summary>
      <returns>モデルが必要であるかどうかを示すキャッシュされた値。</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedModelMetadata`1.ComputeNullDisplayText">
      <summary>これはプロテクト メソッドであり、したがって直接呼び出すことはできません。このメソッドは、<see cref="T:System.Web.Mvc.CachedDataAnnotationsModelMetadata" /> などの派生クラスでオーバーライドされることを想定して設計されました。null 値を表示するキャッシュされた文字列を取得または設定します。</summary>
      <returns>null 値を表示するキャッシュされた文字列。</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedModelMetadata`1.ComputeOrder">
      <summary>これはプロテクト メソッドであり、したがって直接呼び出すことはできません。このメソッドは、<see cref="T:System.Web.Mvc.CachedDataAnnotationsModelMetadata" /> などの派生クラスでオーバーライドされることを想定して設計されました。現在のメタデータの順序を表すキャッシュされた値を取得または設定します。</summary>
      <returns>現在のメタデータの順序を表すキャッシュされた値。</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedModelMetadata`1.ComputeShortDisplayName">
      <summary>これはプロテクト メソッドであり、したがって直接呼び出すことはできません。このメソッドは、<see cref="T:System.Web.Mvc.CachedDataAnnotationsModelMetadata" /> などの派生クラスでオーバーライドされることを想定して設計されました。短い表示名を取得または設定します。</summary>
      <returns>短い表示名。</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedModelMetadata`1.ComputeShowForDisplay">
      <summary>これはプロテクト メソッドであり、したがって直接呼び出すことはできません。このメソッドは、<see cref="T:System.Web.Mvc.CachedDataAnnotationsModelMetadata" /> などの派生クラスでオーバーライドされることを想定して設計されました。リスト ビューや詳細ビューなどの読み取り専用ビューでプロパティを表示するかどうかを示すキャッシュされた値を取得または設定します。</summary>
      <returns>リスト ビューや詳細ビューなどの読み取り専用ビューでプロパティを表示するかどうかを示すキャッシュされた値。</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedModelMetadata`1.ComputeShowForEdit">
      <summary>これはプロテクト メソッドであり、したがって直接呼び出すことはできません。このメソッドは、<see cref="T:System.Web.Mvc.CachedDataAnnotationsModelMetadata" /> などの派生クラスでオーバーライドされることを想定して設計されました。モデルを編集可能なビューで表示するかどうかを示すキャッシュされた値を取得または設定します。</summary>
      <returns>モデルを編集可能なビューで表示するかどうかを示すキャッシュされた値。</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedModelMetadata`1.ComputeSimpleDisplayText">
      <summary>これはプロテクト メソッドであり、したがって直接呼び出すことはできません。このメソッドは、<see cref="T:System.Web.Mvc.CachedDataAnnotationsModelMetadata" /> などの派生クラスでオーバーライドされることを想定して設計されました。モデルに表示するキャッシュされた単純な文字列を取得または設定します。</summary>
      <returns>モデルに表示するキャッシュされた単純な文字列。</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedModelMetadata`1.ComputeTemplateHint">
      <summary>これはプロテクト メソッドであり、したがって直接呼び出すことはできません。このメソッドは、<see cref="T:System.Web.Mvc.CachedDataAnnotationsModelMetadata" /> などの派生クラスでオーバーライドされることを想定して設計されました。このモデルに使用するテンプレートの候補を示すキャッシュされたヒントを取得または設定します。</summary>
      <returns>このモデルに使用するテンプレートの候補を示すキャッシュされたヒント。</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedModelMetadata`1.ComputeWatermark">
      <summary>これはプロテクト メソッドであり、したがって直接呼び出すことはできません。このメソッドは、<see cref="T:System.Web.Mvc.CachedDataAnnotationsModelMetadata" /> などの派生クラスでオーバーライドされることを想定して設計されました。ウォーターマークとして使用できるキャッシュされた値を取得または設定します。</summary>
      <returns>ウォーターマークとして使用できるキャッシュされた値。</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedModelMetadata`1.ConvertEmptyStringToNull">
      <summary>フォームからポストバックされる空の文字列を null に変換するかどうかを示すキャッシュされた値を取得または設定します。</summary>
      <returns>フォームからポストバックされる空の文字列を null に変換するかどうかを示すキャッシュされた値。</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedModelMetadata`1.DataTypeName">
      <summary>データ型についてのメタ情報を取得または設定します。</summary>
      <returns>データ型についてのメタ情報。</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedModelMetadata`1.Description">
      <summary>モデルの説明を取得または設定します。</summary>
      <returns>モデルの説明。</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedModelMetadata`1.DisplayFormatString">
      <summary>モデルの表示形式文字列を取得または設定します。</summary>
      <returns>モデルの表示形式文字列。</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedModelMetadata`1.DisplayName">
      <summary>モデルの表示名を取得または設定します。</summary>
      <returns>モデルの表示名。</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedModelMetadata`1.EditFormatString">
      <summary>モデルの編集形式文字列を取得または設定します。</summary>
      <returns>モデルの編集形式文字列。</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedModelMetadata`1.GetSimpleDisplayText">
      <summary>モデルの単純な表示文字列を取得または設定します。</summary>
      <returns>モデルの単純な表示文字列。</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedModelMetadata`1.HideSurroundingHtml">
      <summary>関連付けられている HTML 要素を使用して、モデル オブジェクトを表示するかどうかを示す値を取得または設定します。</summary>
      <returns>関連付けられている HTML 要素を使用して、モデル オブジェクトを表示するかどうかを示す値。</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedModelMetadata`1.HtmlEncode"></member>
    <member name="P:System.Web.Mvc.CachedModelMetadata`1.IsReadOnly">
      <summary>モデルが読み取り専用かどうかを示す値を取得または設定します。</summary>
      <returns>モデルが読み取り専用かどうかを示す値。</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedModelMetadata`1.IsRequired">
      <summary>モデルが必須かどうかを示す値を取得または設定します。</summary>
      <returns>モデルが必須かどうかを示す値。</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedModelMetadata`1.NullDisplayText">
      <summary>null 値の表示文字列を取得または設定します。</summary>
      <returns>null 値の表示文字列。</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedModelMetadata`1.Order">
      <summary>現在のメタデータの順序を表す値を取得または設定します。</summary>
      <returns>現在のメタデータの順序の値。</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedModelMetadata`1.PrototypeCache">
      <summary>プロトタイプ キャッシュを取得または設定します。</summary>
      <returns>プロトタイプ キャッシュ。</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedModelMetadata`1.ShortDisplayName">
      <summary>短い表示名を取得または設定します。</summary>
      <returns>短い表示名。</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedModelMetadata`1.ShowForDisplay">
      <summary>リスト ビューや詳細ビューなどの読み取り専用ビューでプロパティを表示するかどうかを示す値を取得または設定します。</summary>
      <returns>モデルを読み取り専用ビューで表示する場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedModelMetadata`1.ShowForEdit">
      <summary>モデルを編集可能なビューで表示するかどうかを示す値を取得または設定します。</summary>
      <returns>モデルを編集可能なビューで表示する場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedModelMetadata`1.SimpleDisplayText">
      <summary>モデルの単純な表示文字列を取得または設定します。</summary>
      <returns>モデルの単純な表示文字列。</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedModelMetadata`1.TemplateHint">
      <summary>このモデルに使用するテンプレートの候補を示すヒントを取得または設定します。</summary>
      <returns>このモデルに使用するテンプレートの候補を示すヒント。</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedModelMetadata`1.Watermark">
      <summary>ウォーターマークとして使用できる値を取得または設定します。</summary>
      <returns>ウォーターマークとして使用できる値。</returns>
    </member>
    <member name="T:System.Web.Mvc.CancellationTokenModelBinder">
      <summary>モデル バインダーの操作を取り消す必要があるという通知を伝達するためのメカニズムを提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.CancellationTokenModelBinder.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.CancellationTokenModelBinder" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.CancellationTokenModelBinder.BindModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>既定のキャンセル トークンを返します。</summary>
      <returns>既定のキャンセル トークン。実装<see cref="M:System.Web.Mvc.IModelBinder.BindModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)" /></returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="bindingContext">バインディング コンテキスト。</param>
    </member>
    <member name="T:System.Web.Mvc.ChildActionOnlyAttribute">
      <summary>アクション メソッドを子アクションとしてのみ呼び出す場合に使用する属性を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ChildActionOnlyAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ChildActionOnlyAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ChildActionOnlyAttribute.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
      <summary>承認が必要なときに呼び出されます。</summary>
      <param name="filterContext">子アクションへのアクセスを承認するために必要な情報をカプセル化するオブジェクト。</param>
    </member>
    <member name="T:System.Web.Mvc.ChildActionValueProvider">
      <summary>子アクションからの値の値プロバイダーを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ChildActionValueProvider.#ctor(System.Web.Mvc.ControllerContext)">
      <summary>
        <see cref="T:System.Web.Mvc.ChildActionValueProvider" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="controllerContext">コントローラー コンテキスト。</param>
    </member>
    <member name="M:System.Web.Mvc.ChildActionValueProvider.GetValue(System.String)">
      <summary>指定したキーを使用して値オブジェクトを取得します。</summary>
      <returns>指定したキーの値オブジェクト。</returns>
      <param name="key">キー。</param>
    </member>
    <member name="T:System.Web.Mvc.ChildActionValueProviderFactory">
      <summary>子アクションの値プロバイダー オブジェクトを作成するためのファクトリを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ChildActionValueProviderFactory.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ChildActionValueProviderFactory" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ChildActionValueProviderFactory.GetValueProvider(System.Web.Mvc.ControllerContext)">
      <summary>指定されたコントローラー コンテキストの <see cref="T:System.Web.Mvc.ChildActionValueProvider" /> オブジェクトを返します。</summary>
      <returns>
        <see cref="T:System.Web.Mvc.ChildActionValueProvider" /> オブジェクト。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
    </member>
    <member name="T:System.Web.Mvc.ClientDataTypeModelValidatorProvider">
      <summary>クライアント データ型のモデル検証コントロールを返します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ClientDataTypeModelValidatorProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ClientDataTypeModelValidatorProvider" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ClientDataTypeModelValidatorProvider.GetValidators(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>クライアント データ型のモデル検証コントロールを返します。</summary>
      <returns>クライアント データ型のモデル検証コントロール。</returns>
      <param name="metadata">メタデータ。</param>
      <param name="context">コンテキスト。</param>
    </member>
    <member name="P:System.Web.Mvc.ClientDataTypeModelValidatorProvider.ResourceClassKey">
      <summary>リソース クラス キーを取得します。</summary>
      <returns>リソース クラス キー。</returns>
    </member>
    <member name="T:System.Web.Mvc.CompareAttribute">
      <summary>モデルの 2 つのプロパティを比較する属性を提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.CompareAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Web.Mvc.CompareAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="otherProperty">現在のプロパティと比較するプロパティ。</param>
    </member>
    <member name="M:System.Web.Mvc.CompareAttribute.FormatErrorMessage(System.String)">
      <summary>比較エラーが発生したデータ フィールドに基づいてエラー メッセージに書式を適用します。</summary>
      <returns>書式設定されたエラー メッセージ。</returns>
      <param name="name">検証失敗の原因になったフィールドの名前。</param>
    </member>
    <member name="M:System.Web.Mvc.CompareAttribute.FormatPropertyForClientValidation(System.String)">
      <summary>アスタリスク (*) およびドットを前に付けることによって、クライアント検証のプロパティの書式を設定します。</summary>
      <returns>文字列 "*." は、プロパティの前に付けられます。</returns>
      <param name="property">プロパティ。</param>
    </member>
    <member name="M:System.Web.Mvc.CompareAttribute.GetClientValidationRules(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>指定したモデル メタデータとコントローラー コンテキストを使用して、プロパティの比較値のクライアント検証規則のリストを取得します。</summary>
      <returns>比較値のクライアント検証規則のリスト。</returns>
      <param name="metadata">モデル メタデータ。</param>
      <param name="context">コントローラー コンテキスト。</param>
    </member>
    <member name="M:System.Web.Mvc.CompareAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
      <summary>指定のオブジェクトが、比較対象のオブジェクトと等しいかどうかを判断します。</summary>
      <returns>比較するプロパティの値が値パラメーターと等しい場合は null。それ以外の場合は、比較が失敗したことを示すエラー メッセージを含む検証結果。</returns>
      <param name="value">比較するオブジェクトの値。</param>
      <param name="validationContext">検証コンテキスト。</param>
    </member>
    <member name="P:System.Web.Mvc.CompareAttribute.OtherProperty">
      <summary>現在のプロパティと比較するプロパティを取得します。</summary>
      <returns>現在のプロパティと比較するプロパティ。</returns>
    </member>
    <member name="P:System.Web.Mvc.CompareAttribute.OtherPropertyDisplayName">
      <summary>他のプロパティの表示名を取得します。</summary>
      <returns>他のプロパティの表示名。</returns>
    </member>
    <member name="T:System.Web.Mvc.ContentResult">
      <summary>アクション メソッドの結果である、ユーザー定義のコンテンツ タイプを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ContentResult.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ContentResult" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.ContentResult.Content">
      <summary>コンテンツを取得または設定します。</summary>
      <returns>コンテンツ。</returns>
    </member>
    <member name="P:System.Web.Mvc.ContentResult.ContentEncoding">
      <summary>コンテンツ エンコーディングを取得または設定します。</summary>
      <returns>コンテンツ エンコーディング。</returns>
    </member>
    <member name="P:System.Web.Mvc.ContentResult.ContentType">
      <summary>コンテンツ タイプを取得または設定します。</summary>
      <returns>コンテンツ タイプ。</returns>
    </member>
    <member name="M:System.Web.Mvc.ContentResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>
        <see cref="T:System.Web.Mvc.ActionResult" /> クラスを継承するカスタム型によって、アクション メソッドの結果の処理を有効にします。</summary>
      <param name="context">結果が実行されるコンテキスト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> パラメーターが null です。</exception>
    </member>
    <member name="T:System.Web.Mvc.Controller">
      <summary>ASP.NET MVC Web サイトへの HTTP 要求に応答するメソッドを提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Controller.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.Controller" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.Controller.ActionInvoker">
      <summary>コントローラーのアクション呼び出し元を取得します。</summary>
      <returns>アクション呼び出し元。</returns>
    </member>
    <member name="P:System.Web.Mvc.Controller.AsyncManager">
      <summary>非同期操作を提供します。</summary>
      <returns>
        <see cref="T:System.Web.Mvc.Async.AsyncManager" /> を返します。</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.BeginExecute(System.Web.Routing.RequestContext,System.AsyncCallback,System.Object)">
      <summary>指定された要求コンテキストの実行を開始します</summary>
      <returns>IAsyncController インスタンスを返します。</returns>
      <param name="requestContext">要求コンテキスト。</param>
      <param name="callback">非同期コールバック。</param>
      <param name="state">状態。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.BeginExecuteCore(System.AsyncCallback,System.Object)">
      <summary>現在のコントローラー コンテキストでアクションの呼び出しを開始します。</summary>
      <returns>IAsyncController インスタンスを返します。</returns>
      <param name="callback">コールバック。</param>
      <param name="state">状態。</param>
    </member>
    <member name="P:System.Web.Mvc.Controller.Binders">
      <summary>バインダーを取得または設定します。</summary>
      <returns>バインダー。</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.Content(System.String)">
      <summary>文字列を使用してコンテンツの結果オブジェクトを作成します。</summary>
      <returns>コンテンツの結果のインスタンス。</returns>
      <param name="content">応答に書き込むコンテンツ。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.Content(System.String,System.String)">
      <summary>文字列およびコンテンツ タイプを使用してコンテンツの結果オブジェクトを作成します。</summary>
      <returns>コンテンツの結果のインスタンス。</returns>
      <param name="content">応答に書き込むコンテンツ。</param>
      <param name="contentType">コンテンツ タイプ (MIME タイプ)。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.Content(System.String,System.String,System.Text.Encoding)">
      <summary>文字列、コンテンツ タイプ、およびコンテンツ エンコーディングを使用してコンテンツの結果オブジェクトを作成します。</summary>
      <returns>コンテンツの結果のインスタンス。</returns>
      <param name="content">応答に書き込むコンテンツ。</param>
      <param name="contentType">コンテンツ タイプ (MIME タイプ)。</param>
      <param name="contentEncoding">コンテンツ エンコーディング。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.CreateActionInvoker">
      <summary>アクション呼び出し元を作成します。</summary>
      <returns>アクション呼び出し元。</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.CreateTempDataProvider">
      <summary>一時データ プロバイダーを作成します。</summary>
      <returns>一時データ プロバイダー。</returns>
    </member>
    <member name="P:System.Web.Mvc.Controller.DisableAsyncSupport">
      <summary>コントローラーの非同期サポートを無効にするかどうかを取得します。</summary>
      <returns>コントローラーの非同期サポートを無効にする場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.Dispose">
      <summary>
        <see cref="T:System.Web.Mvc.Controller" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Controller.Dispose(System.Boolean)">
      <summary>アンマネージ リソースを解放し、必要に応じてマネージ リソースも解放します。</summary>
      <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は true。アンマネージ リソースだけを解放する場合は false。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.EndExecute(System.IAsyncResult)">
      <summary>現在のコントローラー コンテキストでアクションの呼び出しを終了します。</summary>
      <param name="asyncResult">非同期の結果。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.EndExecuteCore(System.IAsyncResult)">
      <summary>実行コアを終了します。</summary>
      <param name="asyncResult">非同期の結果。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.ExecuteCore">
      <summary>現在のコントローラー コンテキストでアクションを呼び出します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Controller.File(System.Byte[],System.String)">
      <summary>ファイルの内容およびファイルの種類を使用して FileContentResult オブジェクトを作成します。</summary>
      <returns>ファイルの内容の結果オブジェクト。</returns>
      <param name="fileContents">応答に送信するバイナリ コンテンツ。</param>
      <param name="contentType">コンテンツ タイプ (MIME タイプ)。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.File(System.Byte[],System.String,System.String)">
      <summary>ファイルの内容、コンテンツ タイプ、および対象ファイルの名前を使用して FileContentResult オブジェクトを作成します。</summary>
      <returns>ファイルの内容の結果オブジェクト。</returns>
      <param name="fileContents">応答に送信するバイナリ コンテンツ。</param>
      <param name="contentType">コンテンツ タイプ (MIME タイプ)。</param>
      <param name="fileDownloadName">ブラウザーに表示されるファイル ダウンロード ダイアログ ボックスで使用するファイル名。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.File(System.IO.Stream,System.String)">
      <summary>Stream オブジェクトおよびコンテンツ タイプを使用して FileStreamResult オブジェクトを作成します。</summary>
      <returns>ファイルの内容の結果オブジェクト。</returns>
      <param name="fileStream">応答に送信するストリーム。</param>
      <param name="contentType">コンテンツ タイプ (MIME タイプ)。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.File(System.IO.Stream,System.String,System.String)">
      <summary>Stream オブジェクト、コンテンツ タイプ、および対象ファイルの名前を使用して FileStreamResult オブジェクトを作成します。</summary>
      <returns>ファイル ストリームの結果オブジェクト。</returns>
      <param name="fileStream">応答に送信するストリーム。</param>
      <param name="contentType">コンテンツ タイプ (MIME タイプ)。</param>
      <param name="fileDownloadName">ブラウザーに表示されるファイル ダウンロード ダイアログ ボックスで使用するファイル名。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.File(System.String,System.String)">
      <summary>ファイル名およびコンテンツ タイプを使用して FilePathResult オブジェクトを作成します。</summary>
      <returns>ファイル ストリームの結果オブジェクト。</returns>
      <param name="fileName">応答に送信するファイルのパス。</param>
      <param name="contentType">コンテンツ タイプ (MIME タイプ)。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.File(System.String,System.String,System.String)">
      <summary>ファイル名、コンテンツ タイプ、およびダウンロードするファイルの名前を使用して FilePathResult オブジェクトを作成します。</summary>
      <returns>ファイル ストリームの結果オブジェクト。</returns>
      <param name="fileName">応答に送信するファイルのパス。</param>
      <param name="contentType">コンテンツ タイプ (MIME タイプ)。</param>
      <param name="fileDownloadName">ブラウザーに表示されるファイル ダウンロード ダイアログ ボックスで使用するファイル名。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.HandleUnknownAction(System.String)">
      <summary>要求がこのコントローラーと一致しているが、指定されたアクション名を持つメソッドがコントローラーで見つからない場合に呼び出されます。</summary>
      <param name="actionName">実行しようとしたアクションの名前。</param>
    </member>
    <member name="P:System.Web.Mvc.Controller.HttpContext">
      <summary>それぞれの HTTP 要求に関する HTTP 固有の情報を取得します。</summary>
      <returns>HTTP コンテキスト。</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.HttpNotFound">
      <summary>
        <see cref="T:System.Web.Mvc.HttpNotFoundResult" /> クラスの新しいインスタンスを返します。</summary>
      <returns>
        <see cref="T:System.Web.Mvc.HttpNotFoundResult" /> クラスのインスタンス。</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.HttpNotFound(System.String)">
      <summary>
        <see cref="T:System.Web.Mvc.HttpNotFoundResult" /> クラスの新しいインスタンスを返します。</summary>
      <returns>
        <see cref="T:System.Web.Mvc.HttpNotFoundResult" /> クラスのインスタンス。</returns>
      <param name="statusDescription">ステータスの説明。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.Initialize(System.Web.Routing.RequestContext)">
      <summary>コンストラクターの呼び出し時に利用できない可能性があるデータを初期化します。</summary>
      <param name="requestContext">HTTP コンテキストおよびルート データ。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.JavaScript(System.String)">
      <summary>
        <see cref="T:System.Web.Mvc.JavaScriptResult" /> オブジェクトを作成します。</summary>
      <returns>スクリプトを応答に書き込む <see cref="T:System.Web.Mvc.JavaScriptResult" /> オブジェクト。</returns>
      <param name="script">クライアントで実行する JavaScript コード。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.Json(System.Object)">
      <summary>指定されたオブジェクトを JSON (JavaScript Object Notation) 形式にシリアル化する <see cref="T:System.Web.Mvc.JsonResult" /> オブジェクトを作成します。</summary>
      <returns>指定されたオブジェクトを JSON 形式にシリアル化する JSON の結果オブジェクト。このメソッドによって作成された結果オブジェクトは、オブジェクトの実行時に ASP.NET MVC フレームワークによって応答に書き込まれます。</returns>
      <param name="data">シリアル化対象の JavaScript オブジェクト グラフ。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.Json(System.Object,System.String)">
      <summary>指定されたオブジェクトを JSON (JavaScript Object Notation) 形式にシリアル化する <see cref="T:System.Web.Mvc.JsonResult" /> オブジェクトを作成します。</summary>
      <returns>指定されたオブジェクトを JSON 形式にシリアル化する JSON の結果オブジェクト。</returns>
      <param name="data">シリアル化対象の JavaScript オブジェクト グラフ。</param>
      <param name="contentType">コンテンツ タイプ (MIME タイプ)。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.Json(System.Object,System.String,System.Text.Encoding)">
      <summary>指定されたオブジェクトを JSON (JavaScript Object Notation) 形式にシリアル化する <see cref="T:System.Web.Mvc.JsonResult" /> オブジェクトを作成します。</summary>
      <returns>指定されたオブジェクトを JSON 形式にシリアル化する JSON の結果オブジェクト。</returns>
      <param name="data">シリアル化対象の JavaScript オブジェクト グラフ。</param>
      <param name="contentType">コンテンツ タイプ (MIME タイプ)。</param>
      <param name="contentEncoding">コンテンツ エンコーディング。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.Json(System.Object,System.String,System.Text.Encoding,System.Web.Mvc.JsonRequestBehavior)">
      <summary>コンテンツ タイプ、コンテンツ エンコード、および JSON (JavaScript Object Notation) 要求動作を使用して、指定されたオブジェクトを JSON 形式にシリアル化する <see cref="T:System.Web.Mvc.JsonResult" /> オブジェクトを作成します。</summary>
      <returns>指定されたオブジェクトを JSON 形式にシリアル化する結果オブジェクト。</returns>
      <param name="data">シリアル化対象の JavaScript オブジェクト グラフ。</param>
      <param name="contentType">コンテンツ タイプ (MIME タイプ)。</param>
      <param name="contentEncoding">コンテンツ エンコーディング。</param>
      <param name="behavior">JSON 要求動作。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.Json(System.Object,System.String,System.Web.Mvc.JsonRequestBehavior)">
      <summary>指定されたコンテンツ タイプおよび JSON (JavaScript Object Notation) 要求動作を使用して、指定されたオブジェクトを JSON 形式にシリアル化する <see cref="T:System.Web.Mvc.JsonResult" /> オブジェクトを作成します。</summary>
      <returns>指定されたオブジェクトを JSON 形式にシリアル化する結果オブジェクト。</returns>
      <param name="data">シリアル化対象の JavaScript オブジェクト グラフ。</param>
      <param name="contentType">コンテンツ タイプ (MIME タイプ)。</param>
      <param name="behavior">JSON 要求動作。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.Json(System.Object,System.Web.Mvc.JsonRequestBehavior)">
      <summary>指定された JSON (JavaScript Object Notation) 要求動作を使用して、指定されたオブジェクトを JSON 形式にシリアル化する JsonResult オブジェクトを作成します。</summary>
      <returns>指定されたオブジェクトを JSON 形式にシリアル化する結果オブジェクト。</returns>
      <param name="data">シリアル化対象の JavaScript オブジェクト グラフ。</param>
      <param name="behavior">JSON 要求動作。</param>
    </member>
    <member name="P:System.Web.Mvc.Controller.ModelState">
      <summary>モデルの状態およびモデル バインディングの検証の状態を格納するモデル状態ディクショナリ オブジェクトを取得します。</summary>
      <returns>モデル状態ディクショナリ。</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
      <summary>アクション メソッドの呼び出し後に呼び出されます。</summary>
      <param name="filterContext">現在の要求およびアクションに関する情報。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
      <summary>アクション メソッドの呼び出し前に呼び出されます。</summary>
      <param name="filterContext">現在の要求およびアクションに関する情報。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.OnAuthentication(System.Web.Mvc.Filters.AuthenticationContext)">
      <summary>承認が発生したときに呼び出されます。</summary>
      <param name="filterContext">現在の要求およびアクションに関する情報。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.OnAuthenticationChallenge(System.Web.Mvc.Filters.AuthenticationChallengeContext)">
      <summary>承認チャレンジが発生したときに呼び出されます。</summary>
      <param name="filterContext">現在の要求およびアクションに関する情報。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
      <summary>承認が発生したときに呼び出されます。</summary>
      <param name="filterContext">現在の要求およびアクションに関する情報。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.OnException(System.Web.Mvc.ExceptionContext)">
      <summary>アクションでハンドルされない例外が発生したときに呼び出されます。</summary>
      <param name="filterContext">現在の要求およびアクションに関する情報。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.OnResultExecuted(System.Web.Mvc.ResultExecutedContext)">
      <summary>アクション メソッドによって返されたアクション結果が実行された後に呼び出されます。</summary>
      <param name="filterContext">現在の要求およびアクション結果に関する情報。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)">
      <summary>アクション メソッドによって返されたアクション結果が実行される前に呼び出されます。</summary>
      <param name="filterContext">現在の要求およびアクション結果に関する情報。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.PartialView">
      <summary>部分ビューを表示する <see cref="T:System.Web.Mvc.PartialViewResult" /> オブジェクトを作成します。</summary>
      <returns>部分ビューの結果オブジェクト。</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.PartialView(System.Object)">
      <summary>指定されたモデルを使用して、部分ビューを表示する <see cref="T:System.Web.Mvc.PartialViewResult" /> オブジェクトを作成します。</summary>
      <returns>部分ビューの結果オブジェクト。</returns>
      <param name="model">部分ビューによって表示されるモデル。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.PartialView(System.String)">
      <summary>指定されたビュー名を使用して、部分ビューを表示する <see cref="T:System.Web.Mvc.PartialViewResult" /> オブジェクトを作成します。</summary>
      <returns>部分ビューの結果オブジェクト。</returns>
      <param name="viewName">応答に表示するビューの名前。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.PartialView(System.String,System.Object)">
      <summary>指定されたビュー名およびモデルを使用して、部分ビューを表示する <see cref="T:System.Web.Mvc.PartialViewResult" /> オブジェクトを作成します。</summary>
      <returns>部分ビューの結果オブジェクト。</returns>
      <param name="viewName">応答に表示するビューの名前。</param>
      <param name="model">部分ビューによって表示されるモデル。</param>
    </member>
    <member name="P:System.Web.Mvc.Controller.Profile">
      <summary>HTTP コンテキスト プロファイルを取得します。</summary>
      <returns>HTTP コンテキスト プロファイル。</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.Redirect(System.String)">
      <summary>指定された URL にリダイレクトする <see cref="T:System.Web.Mvc.RedirectResult" /> オブジェクトを作成します。</summary>
      <returns>リダイレクトの結果オブジェクト。</returns>
      <param name="url">リダイレクト先の URL。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectPermanent(System.String)">
      <summary>Permanent プロパティが true に設定されている <see cref="T:System.Web.Mvc.RedirectResult" /> クラスのインスタンスを返します。</summary>
      <returns>Permanent プロパティが true に設定されている <see cref="T:System.Web.Mvc.RedirectResult" /> クラスのインスタンス。</returns>
      <param name="url">リダイレクト先の URL。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToAction(System.String)">
      <summary>アクション名を使用して、指定されたアクションにリダイレクトします。</summary>
      <returns>リダイレクトの結果オブジェクト。</returns>
      <param name="actionName">アクションの名前。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToAction(System.String,System.Object)">
      <summary>アクション名およびルート値を使用して、指定されたアクションにリダイレクトします。</summary>
      <returns>リダイレクトの結果オブジェクト。</returns>
      <param name="actionName">アクションの名前。</param>
      <param name="routeValues">ルートのパラメーター。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToAction(System.String,System.String)">
      <summary>アクション名およびコントローラー名を使用して、指定されたアクションにリダイレクトします。</summary>
      <returns>リダイレクトの結果オブジェクト。</returns>
      <param name="actionName">アクションの名前。</param>
      <param name="controllerName">コントローラーの名前。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToAction(System.String,System.String,System.Object)">
      <summary>アクション名、コントローラー名、およびルート ディクショナリを使用して、指定されたアクションにリダイレクトします。</summary>
      <returns>リダイレクトの結果オブジェクト。</returns>
      <param name="actionName">アクションの名前。</param>
      <param name="controllerName">コントローラーの名前。</param>
      <param name="routeValues">ルートのパラメーター。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToAction(System.String,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>アクション名、コントローラー名、およびルート値を使用して、指定されたアクションにリダイレクトします。</summary>
      <returns>リダイレクトの結果オブジェクト。</returns>
      <param name="actionName">アクションの名前。</param>
      <param name="controllerName">コントローラーの名前。</param>
      <param name="routeValues">ルートのパラメーター。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToAction(System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>アクション名およびルート ディクショナリを使用して、指定されたアクションにリダイレクトします。</summary>
      <returns>リダイレクトの結果オブジェクト。</returns>
      <param name="actionName">アクションの名前。</param>
      <param name="routeValues">ルートのパラメーター。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToActionPermanent(System.String)">
      <summary>指定されたアクション名を使用して、Permanent プロパティが true に設定されている <see cref="T:System.Web.Mvc.RedirectResult" /> クラスのインスタンスを返します。</summary>
      <returns>指定されたアクション名、コントローラー名、およびルート値を使用して、Permanent プロパティが true に設定されている <see cref="T:System.Web.Mvc.RedirectResult" /> クラスのインスタンス。</returns>
      <param name="actionName">アクション名。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToActionPermanent(System.String,System.Object)">
      <summary>指定されたアクション名およびルート値を使用して、Permanent プロパティが true に設定されている <see cref="T:System.Web.Mvc.RedirectResult" /> クラスのインスタンスを返します。</summary>
      <returns>指定されたアクション名およびルート値を使用して、Permanent プロパティが true に設定されている <see cref="T:System.Web.Mvc.RedirectResult" /> クラスのインスタンス。</returns>
      <param name="actionName">アクション名。</param>
      <param name="routeValues">ルート値。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToActionPermanent(System.String,System.String)">
      <summary>指定されたアクション名およびコントローラー名を使用して、Permanent プロパティが true に設定されている <see cref="T:System.Web.Mvc.RedirectResult" /> クラスのインスタンスを返します。</summary>
      <returns>指定されたアクション名およびコントローラー名を使用して、Permanent プロパティが true に設定されている <see cref="T:System.Web.Mvc.RedirectResult" /> クラスのインスタンス。</returns>
      <param name="actionName">アクション名。</param>
      <param name="controllerName">コントローラー名。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToActionPermanent(System.String,System.String,System.Object)">
      <summary>指定されたアクション名、コントローラー名、およびルート値を使用して、Permanent プロパティが true に設定されている <see cref="T:System.Web.Mvc.RedirectResult" /> クラスのインスタンスを返します。</summary>
      <returns>指定されたアクション名、コントローラー名、およびルート値を使用して、Permanent プロパティが true に設定されている <see cref="T:System.Web.Mvc.RedirectResult" /> クラスのインスタンス。</returns>
      <param name="actionName">アクション名。</param>
      <param name="controllerName">コントローラー名。</param>
      <param name="routeValues">ルート値。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToActionPermanent(System.String,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>指定されたアクション名、コントローラー名、およびルート値を使用して、Permanent プロパティが true に設定されている <see cref="T:System.Web.Mvc.RedirectResult" /> クラスのインスタンスを返します。</summary>
      <returns>指定されたアクション名、コントローラー名、およびルート値を使用して、Permanent プロパティが true に設定されている <see cref="T:System.Web.Mvc.RedirectResult" /> クラスのインスタンス。</returns>
      <param name="actionName">アクション名。</param>
      <param name="controllerName">コントローラー名。</param>
      <param name="routeValues">ルート値。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToActionPermanent(System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>指定されたアクション名およびルート値を使用して、Permanent プロパティが true に設定されている <see cref="T:System.Web.Mvc.RedirectResult" /> クラスのインスタンスを返します。</summary>
      <returns>指定されたアクション名およびルート値を使用して、Permanent プロパティが true に設定されている <see cref="T:System.Web.Mvc.RedirectResult" /> クラスのインスタンス。</returns>
      <param name="actionName">アクション名。</param>
      <param name="routeValues">ルート値。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToRoute(System.Object)">
      <summary>指定されたルート値を使用して、指定されたルートにリダイレクトします。</summary>
      <returns>ルートへのリダイレクトの結果オブジェクト。</returns>
      <param name="routeValues">ルートのパラメーター。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToRoute(System.String)">
      <summary>ルート名を使用して、指定されたルートにリダイレクトします。</summary>
      <returns>ルートへのリダイレクトの結果オブジェクト。</returns>
      <param name="routeName">ルートの名前。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToRoute(System.String,System.Object)">
      <summary>ルート名およびルート値を使用して、指定されたルートにリダイレクトします。</summary>
      <returns>ルートへのリダイレクトの結果オブジェクト。</returns>
      <param name="routeName">ルートの名前。</param>
      <param name="routeValues">ルートのパラメーター。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToRoute(System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>ルート名およびルート ディクショナリを使用して、指定されたルートにリダイレクトします。</summary>
      <returns>ルートへのリダイレクトの結果オブジェクト。</returns>
      <param name="routeName">ルートの名前。</param>
      <param name="routeValues">ルートのパラメーター。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToRoute(System.Web.Routing.RouteValueDictionary)">
      <summary>ルート ディクショナリを使用して、指定されたルートにリダイレクトします。</summary>
      <returns>ルートへのリダイレクトの結果オブジェクト。</returns>
      <param name="routeValues">ルートのパラメーター。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToRoutePermanent(System.Object)">
      <summary>指定されたルート値を使用して、true に設定された Permanent プロパティを持つ RedirectResult クラスのインスタンスを返します。</summary>
      <returns>true に設定された Permanent プロパティを持つ RedirectResult クラスのインスタンスを返します。</returns>
      <param name="routeValues">ルート名。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToRoutePermanent(System.String)">
      <summary>指定されたルート名を使用して、true に設定された Permanent プロパティを持つ RedirectResult クラスのインスタンスを返します。</summary>
      <returns>指定されたルート名を使用して、true に設定された Permanent プロパティを持つ RedirectResult クラスのインスタンスを返します。</returns>
      <param name="routeName">ルート名。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToRoutePermanent(System.String,System.Object)">
      <summary>指定されたルート名およびルート値を使用して、true に設定された Permanent プロパティを持つ RedirectResult クラスのインスタンスを返します。</summary>
      <returns>指定されたルート名およびルート値を使用して、true に設定された Permanent プロパティを持つ RedirectResult クラスのインスタンス。</returns>
      <param name="routeName">ルート名。</param>
      <param name="routeValues">ルート値。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToRoutePermanent(System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>指定されたルート名およびルート値を使用して、true に設定された Permanent プロパティを持つ RedirectResult クラスのインスタンスを返します。</summary>
      <returns>true に設定された Permanent プロパティを持つ RedirectResult クラスのインスタンス。</returns>
      <param name="routeName">ルート名。</param>
      <param name="routeValues">ルート値。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToRoutePermanent(System.Web.Routing.RouteValueDictionary)">
      <summary>指定されたルート値を使用して、true に設定された Permanent プロパティを持つ RedirectResult クラスのインスタンスを返します。</summary>
      <returns>指定されたルート値を使用して、true に設定された Permanent プロパティを持つ RedirectResult クラスのインスタンス。</returns>
      <param name="routeValues">ルート値。</param>
    </member>
    <member name="P:System.Web.Mvc.Controller.Request">
      <summary>現在の HTTP 要求の HttpRequestBase オブジェクトを取得します。</summary>
      <returns>要求オブジェクト。</returns>
    </member>
    <member name="P:System.Web.Mvc.Controller.Resolver">
      <summary>置き換え可能な依存関係競合回避モジュールの提供サービスを表します。既定では、<see cref="P:System.Web.Mvc.DependencyResolver.CurrentCache" /> を使用します。</summary>
    </member>
    <member name="P:System.Web.Mvc.Controller.Response">
      <summary>現在の HTTP 応答の HttpResponseBase オブジェクトを取得します。</summary>
      <returns>現在の HTTP 応答の HttpResponseBase オブジェクト。</returns>
    </member>
    <member name="P:System.Web.Mvc.Controller.RouteData">
      <summary>現在の要求のルート データを取得します。</summary>
      <returns>ルート データ。</returns>
    </member>
    <member name="P:System.Web.Mvc.Controller.Server">
      <summary>Web 要求の処理で使用されるメソッドを提供する HttpServerUtilityBase オブジェクトを取得します。</summary>
      <returns>HTTP サーバー オブジェクト。</returns>
    </member>
    <member name="P:System.Web.Mvc.Controller.Session">
      <summary>現在の HTTP 要求の HttpSessionStateBase オブジェクトを取得します。</summary>
      <returns>現在の HTTP 要求の HTTP セッション状態オブジェクト。</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.System#Web#Mvc#Async#IAsyncController#BeginExecute(System.Web.Routing.RequestContext,System.AsyncCallback,System.Object)">
      <summary>このメソッドは、BeginExecute メソッドを呼び出します。</summary>
      <returns>操作の結果。</returns>
      <param name="requestContext">要求コンテキスト。</param>
      <param name="callback">非同期コールバック。</param>
      <param name="state">オブジェクトの状態。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.System#Web#Mvc#Async#IAsyncController#EndExecute(System.IAsyncResult)">
      <summary>このメソッドは、EndExecute メソッドを呼び出します。</summary>
      <param name="asyncResult">操作の非同期結果。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.System#Web#Mvc#Filters#IAuthenticationFilter#OnAuthentication(System.Web.Mvc.Filters.AuthenticationContext)">
      <summary>このメソッドは、OnAuthentication メソッドを呼び出します。</summary>
      <param name="filterContext">フィルター コンテキスト。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.System#Web#Mvc#Filters#IAuthenticationFilter#OnAuthenticationChallenge(System.Web.Mvc.Filters.AuthenticationChallengeContext)">
      <summary>このメソッドは、OnAuthenticationChallenge メソッドを呼び出します。</summary>
      <param name="filterContext">フィルター コンテキスト。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.System#Web#Mvc#IActionFilter#OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
      <summary>このメソッドは、OnActionExecuted メソッドを呼び出します。</summary>
      <param name="filterContext">フィルター コンテキスト。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.System#Web#Mvc#IActionFilter#OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
      <summary>このメソッドは、OnActionExecuting メソッドを呼び出します。</summary>
      <param name="filterContext">フィルター コンテキスト。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.System#Web#Mvc#IAuthorizationFilter#OnAuthorization(System.Web.Mvc.AuthorizationContext)">
      <summary>このメソッドは、OnAuthorization メソッドを呼び出します。</summary>
      <param name="filterContext">フィルター コンテキスト。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.System#Web#Mvc#IExceptionFilter#OnException(System.Web.Mvc.ExceptionContext)">
      <summary>このメソッドは、OnException メソッドを呼び出します。</summary>
      <param name="filterContext">フィルター コンテキスト。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.System#Web#Mvc#IResultFilter#OnResultExecuted(System.Web.Mvc.ResultExecutedContext)">
      <summary>このメソッドは、OnResultExecuted メソッドを呼び出します。</summary>
      <param name="filterContext">フィルター コンテキスト。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.System#Web#Mvc#IResultFilter#OnResultExecuting(System.Web.Mvc.ResultExecutingContext)">
      <summary>このメソッドは、OnResultExecuting メソッドを呼び出します。</summary>
      <param name="filterContext">フィルター コンテキスト。</param>
    </member>
    <member name="P:System.Web.Mvc.Controller.TempDataProvider">
      <summary>次の要求のデータを格納するために使用する一時データ プロバイダー オブジェクトを取得します。</summary>
      <returns>一時データ プロバイダー。</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0)">
      <summary>コントローラーの現在の値プロバイダー内の値を使用して、指定されたモデル インスタンスを更新します。</summary>
      <returns>更新が正常に実行された場合は true。それ以外の場合は false。</returns>
      <param name="model">更新するモデル インスタンス。</param>
      <typeparam name="TModel">モデル オブジェクトの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="model" /> パラメーターまたは ValueProvider プロパティが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0,System.String)">
      <summary>コントローラーの現在の値プロバイダー内の値、およびプレフィックスを使用して、指定されたモデル インスタンスを更新します。</summary>
      <returns>更新が正常に実行された場合は true。それ以外の場合は false。</returns>
      <param name="model">更新するモデル インスタンス。</param>
      <param name="prefix">値プロバイダーでの値の検索時に使用するプレフィックス。</param>
      <typeparam name="TModel">モデル オブジェクトの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="model" /> パラメーターまたは ValueProvider プロパティが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0,System.String,System.String[])">
      <summary>コントローラーの現在の値プロバイダー内の値、プレフィックス、および更新対象プロパティを使用して、指定されたモデル インスタンスを更新します。</summary>
      <returns>更新が正常に実行された場合は true。それ以外の場合は false。</returns>
      <param name="model">更新するモデル インスタンス。</param>
      <param name="prefix">値プロバイダーでの値の検索時に使用するプレフィックス。</param>
      <param name="includeProperties">更新対象となるモデルのプロパティの一覧。</param>
      <typeparam name="TModel">モデル オブジェクトの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="model" /> パラメーターまたは ValueProvider プロパティが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0,System.String,System.String[],System.String[])">
      <summary>コントローラーの現在の値プロバイダー内の値、プレフィックス、除外対象プロパティのリスト、および更新対象プロパティのリストを使用して、指定されたモデル インスタンスを更新します。</summary>
      <returns>更新が正常に実行された場合は true。それ以外の場合は false。</returns>
      <param name="model">更新するモデル インスタンス。</param>
      <param name="prefix">値プロバイダーでの値の検索時に使用するプレフィックス。</param>
      <param name="includeProperties">更新対象となるモデルのプロパティの一覧。</param>
      <param name="excludeProperties">更新から明示的に除外するプロパティの一覧。これらのプロパティは、includeProperties パラメーター リストで指定されている場合でも除外されます。</param>
      <typeparam name="TModel">モデル オブジェクトの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="model" /> パラメーターまたは ValueProvider プロパティが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0,System.String,System.String[],System.String[],System.Web.Mvc.IValueProvider)">
      <summary>値プロバイダー内の値、プレフィックス、除外対象プロパティのリスト、および更新対象プロパティのリストを使用して、指定されたモデル インスタンスを更新します。</summary>
      <returns>更新が正常に実行された場合は true。それ以外の場合は false。</returns>
      <param name="model">更新するモデル インスタンス。</param>
      <param name="prefix">値プロバイダーでの値の検索時に使用するプレフィックス。</param>
      <param name="includeProperties">更新対象となるモデルのプロパティの一覧。</param>
      <param name="excludeProperties">更新から明示的に除外するプロパティの一覧。これらのプロパティは、includeProperties パラメーター リストで指定されている場合でも除外されます。</param>
      <param name="valueProvider">モデルの更新に使用する値のディクショナリ。</param>
      <typeparam name="TModel">モデル オブジェクトの型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0,System.String,System.String[],System.Web.Mvc.IValueProvider)">
      <summary>値プロバイダー内の値、プレフィックス、および更新対象プロパティを使用して、指定されたモデル インスタンスを更新します。</summary>
      <returns>更新が正常に実行された場合は true。それ以外の場合は false。</returns>
      <param name="model">更新するモデル インスタンス。</param>
      <param name="prefix">値プロバイダーでの値の検索時に使用するプレフィックス。</param>
      <param name="includeProperties">更新対象となるモデルのプロパティの一覧。</param>
      <param name="valueProvider">モデルの更新に使用する値のディクショナリ。</param>
      <typeparam name="TModel">モデル オブジェクトの型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0,System.String,System.Web.Mvc.IValueProvider)">
      <summary>値プロバイダー内の値、および更新対象プロパティのリストを使用して、指定されたモデル インスタンスを更新します。</summary>
      <returns>更新が正常に実行された場合は true。それ以外の場合は false。</returns>
      <param name="model">更新するモデル インスタンス。</param>
      <param name="prefix">更新対象となるモデルのプロパティの一覧。</param>
      <param name="valueProvider">モデルの更新に使用する値のディクショナリ。</param>
      <typeparam name="TModel">モデル オブジェクトの型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0,System.String[])">
      <summary>コントローラーの現在の値プロバイダー内の値、および更新対象プロパティを使用して、指定されたモデル インスタンスを更新します。</summary>
      <returns>更新が正常に実行された場合は true。それ以外の場合は false。</returns>
      <param name="model">更新するモデル インスタンス。</param>
      <param name="includeProperties">更新対象となるモデルのプロパティの一覧。</param>
      <typeparam name="TModel">モデル オブジェクトの型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0,System.String[],System.Web.Mvc.IValueProvider)">
      <summary>値プロバイダー内の値、および更新対象プロパティのリストを使用して、指定されたモデル インスタンスを更新します。</summary>
      <returns>更新が正常に実行された場合は true。それ以外の場合は false。</returns>
      <param name="model">更新するモデル インスタンス。</param>
      <param name="includeProperties">更新対象となるモデルのプロパティの一覧。</param>
      <param name="valueProvider">モデルの更新に使用する値のディクショナリ。</param>
      <typeparam name="TModel">モデル オブジェクトの型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0,System.Web.Mvc.IValueProvider)">
      <summary>値プロバイダー内の値を使用して、指定されたモデル インスタンスを更新します。</summary>
      <returns>更新が正常に実行された場合は true。それ以外の場合は false。</returns>
      <param name="model">更新するモデル インスタンス。</param>
      <param name="valueProvider">モデルの更新に使用する値のディクショナリ。</param>
      <typeparam name="TModel">モデル オブジェクトの型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryValidateModel(System.Object)">
      <summary>指定されたモデル インスタンスを検証します。</summary>
      <returns>モデルの検証が有効である場合は true。それ以外の場合は false。</returns>
      <param name="model">検証するモデル。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryValidateModel(System.Object,System.String)">
      <summary>HTML プレフィックスを使用して、指定されたモデル インスタンスを検証します。</summary>
      <returns>モデルの検証が有効である場合は true。それ以外の場合は false。</returns>
      <param name="model">検証するモデル。</param>
      <param name="prefix">モデル プロバイダーでの値の検索時に使用するプレフィックス。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0)">
      <summary>コントローラーの現在の値プロバイダー内の値を使用して、指定されたモデル インスタンスを更新します。</summary>
      <param name="model">更新するモデル インスタンス。</param>
      <typeparam name="TModel">モデル オブジェクトの型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0,System.String)">
      <summary>コントローラーの現在の値プロバイダー内の値、およびプレフィックスを使用して、指定されたモデル インスタンスを更新します。</summary>
      <param name="model">更新するモデル インスタンス。</param>
      <param name="prefix">値プロバイダーでの値の検索時に使用するプレフィックス。</param>
      <typeparam name="TModel">モデル オブジェクトの型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0,System.String,System.String[])">
      <summary>コントローラーの現在の値プロバイダー内の値、プレフィックス、および更新対象プロパティを使用して、指定されたモデル インスタンスを更新します。</summary>
      <param name="model">更新するモデル インスタンス。</param>
      <param name="prefix">値プロバイダーでの値の検索時に使用するプレフィックス。</param>
      <param name="includeProperties">更新対象となるモデルのプロパティの一覧。</param>
      <typeparam name="TModel">モデル オブジェクトの型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0,System.String,System.String[],System.String[])">
      <summary>コントローラーの現在の値プロバイダー内の値、プレフィックス、除外対象プロパティのリスト、および更新対象プロパティのリストを使用して、指定されたモデル インスタンスを更新します。</summary>
      <param name="model">更新するモデル インスタンス。</param>
      <param name="prefix">値プロバイダーでの値の検索時に使用するプレフィックス。</param>
      <param name="includeProperties">更新対象となるモデルのプロパティの一覧。</param>
      <param name="excludeProperties">更新から明示的に除外するプロパティの一覧。これらのプロパティは、includeProperties リストで指定されている場合でも除外されます。</param>
      <typeparam name="TModel">モデル オブジェクトの型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0,System.String,System.String[],System.String[],System.Web.Mvc.IValueProvider)">
      <summary>値プロバイダー内の値、プレフィックス、除外対象プロパティのリスト、および更新対象プロパティのリストを使用して、指定されたモデル インスタンスを更新します。</summary>
      <param name="model">更新するモデル インスタンス。</param>
      <param name="prefix">値プロバイダーでの値の検索時に使用するプレフィックス。</param>
      <param name="includeProperties">更新対象となるモデルのプロパティの一覧。</param>
      <param name="excludeProperties">更新から明示的に除外するプロパティの一覧。これらのプロパティは、includeProperties パラメーター リストで指定されている場合でも除外されます。</param>
      <param name="valueProvider">モデルの更新に使用する値のディクショナリ。</param>
      <typeparam name="TModel">モデル オブジェクトの型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0,System.String,System.String[],System.Web.Mvc.IValueProvider)">
      <summary>値プロバイダー内の値、プレフィックス、および更新対象プロパティのリストを使用して、指定されたモデル インスタンスを更新します。</summary>
      <param name="model">更新するモデル インスタンス。</param>
      <param name="prefix">値プロバイダーでの値の検索時に使用するプレフィックス。</param>
      <param name="includeProperties">更新対象となるモデルのプロパティの一覧。</param>
      <param name="valueProvider">モデルの更新に使用する値のディクショナリ。</param>
      <typeparam name="TModel">モデル オブジェクトの型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0,System.String,System.Web.Mvc.IValueProvider)">
      <summary>値プロバイダー内の値、プレフィックス、および更新対象プロパティのリストを使用して、指定されたモデル インスタンスを更新します。</summary>
      <param name="model">更新するモデル インスタンス。</param>
      <param name="prefix">更新対象となるモデルのプロパティの一覧。</param>
      <param name="valueProvider">モデルの更新に使用する値のディクショナリ。</param>
      <typeparam name="TModel">モデル オブジェクトの型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0,System.String[])">
      <summary>コントローラー オブジェクトの現在の値プロバイダー内の値を使用して、指定されたモデル インスタンスを更新します。</summary>
      <param name="model">更新するモデル インスタンス。</param>
      <param name="includeProperties">更新対象となるモデルのプロパティの一覧。</param>
      <typeparam name="TModel">モデル オブジェクトの型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0,System.String[],System.Web.Mvc.IValueProvider)">
      <summary>値プロバイダー内の値、プレフィックス、および更新対象プロパティのリストを使用して、指定されたモデル インスタンスを更新します。</summary>
      <param name="model">更新するモデル インスタンス。</param>
      <param name="includeProperties">更新対象となるモデルのプロパティの一覧。</param>
      <param name="valueProvider">モデルの更新に使用する値のディクショナリ。</param>
      <typeparam name="TModel">モデル オブジェクトの型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0,System.Web.Mvc.IValueProvider)">
      <summary>値プロバイダー内の値を使用して、指定されたモデル インスタンスを更新します。</summary>
      <param name="model">更新するモデル インスタンス。</param>
      <param name="valueProvider">モデルの更新に使用する値のディクショナリ。</param>
      <typeparam name="TModel">モデル オブジェクトの型。</typeparam>
    </member>
    <member name="P:System.Web.Mvc.Controller.Url">
      <summary>ルーティングを使用して URL を生成するために使用する URL ヘルパー オブジェクトを取得します。</summary>
      <returns>URL ヘルパー オブジェクト。</returns>
    </member>
    <member name="P:System.Web.Mvc.Controller.User">
      <summary>現在の HTTP 要求のユーザーのセキュリティ情報を取得します。</summary>
      <returns>現在の HTTP 要求のユーザーのセキュリティ情報。</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.ValidateModel(System.Object)">
      <summary>指定されたモデル インスタンスを検証します。</summary>
      <param name="model">検証するモデル。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.ValidateModel(System.Object,System.String)">
      <summary>HTML プレフィックスを使用して、指定されたモデル インスタンスを検証します。</summary>
      <param name="model">検証するモデル。</param>
      <param name="prefix">モデル プロバイダーでの値の検索時に使用するプレフィックス。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.View">
      <summary>応答にビューを表示する <see cref="T:System.Web.Mvc.ViewResult" /> オブジェクトを作成します。</summary>
      <returns>応答にビューを表示する <see cref="M:System.Web.Mvc.Controller.View" /> の結果。</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.View(System.Object)">
      <summary>モデルを使用して、応答にビューを表示する <see cref="T:System.Web.Mvc.ViewResult" /> オブジェクトを作成します。</summary>
      <returns>ビューの結果。</returns>
      <param name="model">ビューによって表示されるモデル。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.View(System.String)">
      <summary>ビュー名を使用して、ビューを表示する <see cref="T:System.Web.Mvc.ViewResult" /> オブジェクトを作成します。</summary>
      <returns>ビューの結果。</returns>
      <param name="viewName">応答に表示するビューの名前。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.View(System.String,System.Object)">
      <summary>指定された IView オブジェクトを表示する <see cref="T:System.Web.Mvc.ViewResult" /> オブジェクトを作成します。</summary>
      <returns>ビューの結果。</returns>
      <param name="viewName">応答に表示するビュー。</param>
      <param name="model">ビューによって表示されるモデル。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.View(System.String,System.String)">
      <summary>ビュー名およびマスター ページ名を使用して、応答にビューを表示する <see cref="T:System.Web.Mvc.ViewResult" /> オブジェクトを作成します。</summary>
      <returns>ビューの結果。</returns>
      <param name="viewName">応答に表示するビューの名前。</param>
      <param name="masterName">ビューの表示時に使用するマスター ページまたはテンプレートの名前。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.View(System.String,System.String,System.Object)">
      <summary>ビュー名、マスター ページ名、およびモデルを使用して、ビューを表示する <see cref="T:System.Web.Mvc.ViewResult" /> オブジェクトを作成します。</summary>
      <returns>ビューの結果。</returns>
      <param name="viewName">応答に表示するビューの名前。</param>
      <param name="masterName">ビューの表示時に使用するマスター ページまたはテンプレートの名前。</param>
      <param name="model">ビューによって表示されるモデル。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.View(System.Web.Mvc.IView)">
      <summary>指定された IView オブジェクトを表示する <see cref="T:System.Web.Mvc.ViewResult" /> オブジェクトを作成します。</summary>
      <returns>ビューの結果。</returns>
      <param name="view">応答に表示するビュー。</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.View(System.Web.Mvc.IView,System.Object)">
      <summary>指定された <see cref="T:System.Web.Mvc.IView" /> オブジェクトを表示する <see cref="T:System.Web.Mvc.ViewResult" /> オブジェクトを作成します。</summary>
      <returns>ビューの結果。</returns>
      <param name="view">応答に表示するビュー。</param>
      <param name="model">ビューによって表示されるモデル。</param>
    </member>
    <member name="P:System.Web.Mvc.Controller.ViewEngineCollection">
      <summary>ビュー エンジン コレクションを取得します。</summary>
      <returns>ビュー エンジン コレクション。</returns>
    </member>
    <member name="T:System.Web.Mvc.ControllerActionInvoker">
      <summary>コントローラーのアクション メソッドを呼び出すクラスを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ControllerActionInvoker" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.ControllerActionInvoker.Binders">
      <summary>アクションに関連付けられたモデル バインダーを取得または設定します。</summary>
      <returns>アクションに関連付けられたモデル バインダー。</returns>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.CreateActionResult(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Object)">
      <summary>アクションの結果を作成します。</summary>
      <returns>アクションの結果オブジェクト。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="actionDescriptor">アクション記述子。</param>
      <param name="actionReturnValue">アクションの戻り値。</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.FindAction(System.Web.Mvc.ControllerContext,System.Web.Mvc.ControllerDescriptor,System.String)">
      <summary>アクション メソッドに関する情報を検索します。</summary>
      <returns>アクション メソッドに関する情報。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="controllerDescriptor">コントローラー記述子。</param>
      <param name="actionName">アクションの名前。</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.GetControllerDescriptor(System.Web.Mvc.ControllerContext)">
      <summary>指定されたコントローラー コンテキストを使用して、コントローラーに関する情報を取得します。</summary>
      <returns>コントローラーに関する情報。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.GetFilters(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor)">
      <summary>アクション フィルターに関する情報を取得します。</summary>
      <returns>アクション フィルターに関する情報。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="actionDescriptor">アクション記述子。</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.GetParameterValue(System.Web.Mvc.ControllerContext,System.Web.Mvc.ParameterDescriptor)">
      <summary>指定されたアクション メソッド パラメーターの値を取得します。</summary>
      <returns>アクション メソッド パラメーターの値。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="parameterDescriptor">パラメーター記述子。</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.GetParameterValues(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor)">
      <summary>アクション メソッド パラメーターの値を取得します。</summary>
      <returns>アクション メソッド パラメーターの値。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="actionDescriptor">アクション記述子。</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.InvokeAction(System.Web.Mvc.ControllerContext,System.String)">
      <summary>指定されたコントローラー コンテキストを使用して、指定されたアクションを呼び出します。</summary>
      <returns>アクションの実行結果。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="actionName">呼び出されるアクションの名前。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controllerContext" /> パラメーターが null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="actionName" /> パラメーターが null または空です。</exception>
      <exception cref="T:System.Threading.ThreadAbortException">アクションの呼び出し中にスレッドが中止されました。</exception>
      <exception cref="T:System.Exception">アクションの呼び出し中に予期しないエラーが発生しました。</exception>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定されたパラメーターおよびコントローラー コンテキストを使用して、指定されたアクション メソッドを呼び出します。</summary>
      <returns>アクション メソッドの実行結果。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="actionDescriptor">アクション記述子。</param>
      <param name="parameters">パラメーター。</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.InvokeActionMethodWithFilters(System.Web.Mvc.ControllerContext,System.Collections.Generic.IList{System.Web.Mvc.IActionFilter},System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定されたパラメーター、コントローラー コンテキスト、およびアクション フィルターを使用して、指定されたアクション メソッドを呼び出します。</summary>
      <returns>
        <see cref="T:System.Web.Mvc.ActionFilterAttribute" /> クラスの ActionExecuted メソッドのコンテキスト。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="filters">アクション フィルター。</param>
      <param name="actionDescriptor">アクション記述子。</param>
      <param name="parameters">パラメーター。</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.InvokeActionResult(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionResult)">
      <summary>指定されたコントローラー コンテキストを使用して、指定されたアクションの結果を呼び出します。</summary>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="actionResult">アクションの結果。</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.InvokeActionResultWithFilters(System.Web.Mvc.ControllerContext,System.Collections.Generic.IList{System.Web.Mvc.IResultFilter},System.Web.Mvc.ActionResult)">
      <summary>指定されたアクション フィルターおよびコントローラー コンテキストを使用して、指定されたアクションの結果を呼び出します。</summary>
      <returns>
        <see cref="T:System.Web.Mvc.ActionFilterAttribute" /> クラスの ResultExecuted メソッドのコンテキスト。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="filters">アクション フィルター。</param>
      <param name="actionResult">アクションの結果。</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.InvokeAuthenticationFilters(System.Web.Mvc.ControllerContext,System.Collections.Generic.IList{System.Web.Mvc.Filters.IAuthenticationFilter},System.Web.Mvc.ActionDescriptor)"></member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.InvokeAuthenticationFiltersChallenge(System.Web.Mvc.ControllerContext,System.Collections.Generic.IList{System.Web.Mvc.Filters.IAuthenticationFilter},System.Web.Mvc.ActionDescriptor,System.Web.Mvc.ActionResult)"></member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.InvokeAuthorizationFilters(System.Web.Mvc.ControllerContext,System.Collections.Generic.IList{System.Web.Mvc.IAuthorizationFilter},System.Web.Mvc.ActionDescriptor)">
      <summary>指定されたアクション記述子およびコントローラー コンテキストを使用して、指定された承認フィルターを呼び出します。</summary>
      <returns>
        <see cref="T:System.Web.Mvc.AuthorizeAttribute" /> オブジェクトのコンテキスト。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="filters">承認フィルター。</param>
      <param name="actionDescriptor">アクション記述子。</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.InvokeExceptionFilters(System.Web.Mvc.ControllerContext,System.Collections.Generic.IList{System.Web.Mvc.IExceptionFilter},System.Exception)">
      <summary>指定された例外およびコントローラー コンテキストを使用して、指定された例外フィルターを呼び出します。</summary>
      <returns>
        <see cref="T:System.Web.Mvc.HandleErrorAttribute" /> オブジェクトのコンテキスト。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="filters">例外フィルター。</param>
      <param name="exception">例外。</param>
    </member>
    <member name="T:System.Web.Mvc.ControllerBase">
      <summary>すべての MVC コントローラーの基本クラスを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ControllerBase.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ControllerBase" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.ControllerBase.ControllerContext">
      <summary>コントローラー コンテキストを取得または設定します。</summary>
      <returns>コントローラー コンテキスト。</returns>
    </member>
    <member name="M:System.Web.Mvc.ControllerBase.Execute(System.Web.Routing.RequestContext)">
      <summary>指定された要求コンテキストを実行します。</summary>
      <param name="requestContext">要求コンテキスト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestContext" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.ControllerBase.ExecuteCore">
      <summary>要求を実行します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ControllerBase.Initialize(System.Web.Routing.RequestContext)">
      <summary>指定された要求コンテキストを初期化します。</summary>
      <param name="requestContext">要求コンテキスト。</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerBase.System#Web#Mvc#IController#Execute(System.Web.Routing.RequestContext)">
      <summary>指定された要求コンテキストを実行します。</summary>
      <param name="requestContext">要求コンテキスト。</param>
    </member>
    <member name="P:System.Web.Mvc.ControllerBase.TempData">
      <summary>一時データのディクショナリを取得または設定します。</summary>
      <returns>一時データのディクショナリ。</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerBase.ValidateRequest">
      <summary>この要求の検証が有効かどうかを示す値を取得または設定します。</summary>
      <returns>この要求の検証が有効な場合は true。それ以外の場合は false。既定値は true です。</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerBase.ValueProvider">
      <summary>コントローラーの値プロバイダーを取得または設定します。</summary>
      <returns>コントローラーの値プロバイダー。</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerBase.ViewBag">
      <summary>動的なビュー データ ディクショナリを取得します。</summary>
      <returns>動的なビュー データのディクショナリ。</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerBase.ViewData">
      <summary>ビュー データのディクショナリを取得または設定します。</summary>
      <returns>ビュー データのディクショナリ。</returns>
    </member>
    <member name="T:System.Web.Mvc.ControllerBuilder">
      <summary>コントローラーを動的に構築するクラスを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ControllerBuilder.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ControllerBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.ControllerBuilder.Current">
      <summary>現在のコントローラー ビルダー オブジェクトを取得します。</summary>
      <returns>現在のコントローラー ビルダー。</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerBuilder.DefaultNamespaces">
      <summary>既定の名前空間を取得します。</summary>
      <returns>既定の名前空間。</returns>
    </member>
    <member name="M:System.Web.Mvc.ControllerBuilder.GetControllerFactory">
      <summary>関連付けられているコントローラー ファクトリを取得します。</summary>
      <returns>コントローラー ファクトリ。</returns>
    </member>
    <member name="M:System.Web.Mvc.ControllerBuilder.SetControllerFactory(System.Type)">
      <summary>指定された型を使用して、コントローラー ファクトリを設定します。</summary>
      <param name="controllerFactoryType">コントローラー ファクトリの型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controllerFactoryType" /> パラメーターが null です。</exception>
      <exception cref="T:System.ArgumentException">コントローラー ファクトリを <paramref name="controllerFactoryType" /> パラメーターで指定されている種類から割り当てられません。</exception>
      <exception cref="T:System.InvalidOperationException">コントローラー ファクトリの設定中にエラーが発生しました。</exception>
    </member>
    <member name="M:System.Web.Mvc.ControllerBuilder.SetControllerFactory(System.Web.Mvc.IControllerFactory)">
      <summary>指定されたコントローラー ファクトリを設定します。</summary>
      <param name="controllerFactory">コントローラー ファクトリ。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controllerFactory" /> パラメーターが null です。</exception>
    </member>
    <member name="T:System.Web.Mvc.ControllerContext">
      <summary>
        <see cref="T:System.Web.Routing.RouteBase" /> および <see cref="T:System.Web.Mvc.ControllerBase" /> の指定されたインスタンスと一致する HTTP 要求に関する情報をカプセル化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ControllerContext.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ControllerContext" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ControllerContext.#ctor(System.Web.HttpContextBase,System.Web.Routing.RouteData,System.Web.Mvc.ControllerBase)">
      <summary>指定された HTTP コンテキスト、URL ルート データ、およびコントローラーを使用して、<see cref="T:System.Web.Mvc.ControllerContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="httpContext">HTTP コンテキスト。</param>
      <param name="routeData">ルート データ。</param>
      <param name="controller">コントローラー。</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerContext.#ctor(System.Web.Mvc.ControllerContext)">
      <summary>指定されたコントローラー コンテキストを使用して、<see cref="T:System.Web.Mvc.ControllerContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controllerContext" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.ControllerContext.#ctor(System.Web.Routing.RequestContext,System.Web.Mvc.ControllerBase)">
      <summary>指定された要求コンテキストおよびコントローラーを使用して、<see cref="T:System.Web.Mvc.ControllerContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="requestContext">要求コンテキスト。</param>
      <param name="controller">コントローラー。</param>
      <exception cref="T:System.ArgumentNullException">一方または両方のパラメーターが null です。</exception>
    </member>
    <member name="P:System.Web.Mvc.ControllerContext.Controller">
      <summary>コントローラーを取得または設定します。</summary>
      <returns>コントローラー。</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerContext.DisplayMode">
      <summary>表示モードを取得します。</summary>
      <returns>表示モード。</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerContext.HttpContext">
      <summary>HTTP コンテキストを取得または設定します。</summary>
      <returns>HTTP コンテキスト。</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerContext.IsChildAction">
      <summary>関連付けられたアクション メソッドが子アクションかどうかを示す値を取得します。</summary>
      <returns>関連付けられたアクション メソッドが子アクションの場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerContext.ParentActionViewContext">
      <summary>親アクション メソッドのビュー コンテキスト情報を格納しているオブジェクトを取得します。</summary>
      <returns>親アクション メソッドのビュー コンテキスト情報を格納しているオブジェクト。</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerContext.RequestContext">
      <summary>要求コンテキストを取得または設定します。</summary>
      <returns>要求コンテキスト。</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerContext.RouteData">
      <summary>URL ルート データを取得または設定します。</summary>
      <returns>URL ルート データ。</returns>
    </member>
    <member name="T:System.Web.Mvc.ControllerDescriptor">
      <summary>名前、種類、アクションなど、コントローラーを説明する情報をカプセル化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ControllerDescriptor.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ControllerDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.ControllerDescriptor.ControllerName">
      <summary>コントローラーの名前を取得します。</summary>
      <returns>コントローラーの名前。</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerDescriptor.ControllerType">
      <summary>コントローラーの種類を取得します。</summary>
      <returns>コントローラーの種類。</returns>
    </member>
    <member name="M:System.Web.Mvc.ControllerDescriptor.FindAction(System.Web.Mvc.ControllerContext,System.String)">
      <summary>指定された名前およびコントローラー コンテキストを使用して、アクション メソッドを検索します。</summary>
      <returns>アクション メソッドに関する情報。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="actionName">アクションの名前。</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerDescriptor.GetCanonicalActions">
      <summary>コントローラー内のアクション メソッド記述子のリストを取得します。</summary>
      <returns>コントローラー内のアクション メソッド記述子のリスト。</returns>
    </member>
    <member name="M:System.Web.Mvc.ControllerDescriptor.GetCustomAttributes(System.Boolean)">
      <summary>このメンバーに定義されているカスタム属性を取得します (名前付き属性を除く)。</summary>
      <returns>カスタム属性の配列、カスタム属性が存在しない場合は空の配列。</returns>
      <param name="inherit">継承されたカスタム属性の階層チェーンを参照する場合は true。それ以外の場合は false。</param>
      <exception cref="T:System.TypeLoadException">カスタム属性の型を読み込むことができません。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">このメンバーには、<paramref name="attributeType" /> 型の属性が複数定義されています。</exception>
    </member>
    <member name="M:System.Web.Mvc.ControllerDescriptor.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>このメンバーに定義されている、指定された型のカスタム属性を取得します (名前付き属性を除く)。</summary>
      <returns>カスタム属性の配列、カスタム属性が存在しない場合は空の配列。</returns>
      <param name="attributeType">カスタム属性の型。</param>
      <param name="inherit">継承されたカスタム属性の階層チェーンを参照する場合は true。それ以外の場合は false。</param>
      <exception cref="T:System.TypeLoadException">カスタム属性の型を読み込むことができません。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">このメンバーには、<paramref name="attributeType" /> 型の属性が複数定義されています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> パラメーターは null (Visual Basic では Nothing) です。</exception>
    </member>
    <member name="M:System.Web.Mvc.ControllerDescriptor.GetFilterAttributes(System.Boolean)">
      <summary>フィルター属性を取得します。</summary>
      <returns>フィルター属性。</returns>
      <param name="useCache">キャッシュを使用する必要がある場合は true。それ以外の場合は false。</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerDescriptor.IsDefined(System.Type,System.Boolean)">
      <summary>指定されたカスタム属性のインスタンスが 1 つ以上このメンバーに定義されているかどうかを示す値を取得します。</summary>
      <returns>
        <paramref name="attributeType" /> がこのメンバーに定義されている場合は true。それ以外の場合は false。</returns>
      <param name="attributeType">カスタム属性の型。</param>
      <param name="inherit">継承されたカスタム属性の階層チェーンを参照する場合は true。それ以外の場合は false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> パラメーターは null (Visual Basic では Nothing) です。</exception>
    </member>
    <member name="P:System.Web.Mvc.ControllerDescriptor.UniqueId">
      <summary>派生クラスで実装された場合、限定的な初期化を使用してコントローラー記述子の一意の ID を取得します。</summary>
      <returns>一意の ID。</returns>
    </member>
    <member name="T:System.Web.Mvc.ControllerInstanceFilterProvider">
      <summary>コントローラーを <see cref="T:System.Web.Mvc.FilterProviderCollection" /> インスタンスに追加します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ControllerInstanceFilterProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ControllerInstanceFilterProvider" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ControllerInstanceFilterProvider.GetFilters(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor)">
      <summary>コントローラー インスタンスのフィルターのコレクションを返します。</summary>
      <returns>コントローラー インスタンスのフィルターのコレクション。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="actionDescriptor">アクション記述子。</param>
    </member>
    <member name="T:System.Web.Mvc.CustomModelBinderAttribute">
      <summary>カスタム モデル バインダーを呼び出す属性を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.CustomModelBinderAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.CustomModelBinderAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.CustomModelBinderAttribute.GetBinder">
      <summary>関連付けられたモデル バインダーを取得します。</summary>
      <returns>
        <see cref="T:System.Web.Mvc.IModelBinder" /> インターフェイスを実装するオブジェクトへの参照。</returns>
    </member>
    <member name="T:System.Web.Mvc.DataAnnotationsModelMetadata">
      <summary>データ モデルの共通のメタデータ、<see cref="T:System.Web.Mvc.DataAnnotationsModelMetadataProvider" /> クラス、および <see cref="T:System.Web.Mvc.DataAnnotationsModelValidator" /> クラスのコンテナーを提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelMetadata.#ctor(System.Web.Mvc.DataAnnotationsModelMetadataProvider,System.Type,System.Func{System.Object},System.Type,System.String,System.ComponentModel.DataAnnotations.DisplayColumnAttribute)">
      <summary>
        <see cref="T:System.Web.Mvc.DataAnnotationsModelMetadataProvider" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="provider">データの注釈モデルのメタデータ プロバイダー。</param>
      <param name="containerType">コンテナーの型。</param>
      <param name="modelAccessor">モデル アクセサー。</param>
      <param name="modelType">モデルの型。</param>
      <param name="propertyName">プロパティの名前。</param>
      <param name="displayColumnAttribute">表示列の属性。</param>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelMetadata.GetSimpleDisplayText">
      <summary>モデル データの単純なテキストを返します。</summary>
      <returns>モデル データの単純なテキスト。</returns>
    </member>
    <member name="T:System.Web.Mvc.DataAnnotationsModelMetadataProvider">
      <summary>ASP.NET MVC 用の既定のモデル メタデータ プロバイダーを実装します。</summary>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelMetadataProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.DataAnnotationsModelMetadataProvider" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelMetadataProvider.CreateMetadata(System.Collections.Generic.IEnumerable{System.Attribute},System.Type,System.Func{System.Object},System.Type,System.String)">
      <summary>指定したプロパティのメタデータを取得します。</summary>
      <returns>プロパティのメタデータ。</returns>
      <param name="attributes">属性。</param>
      <param name="containerType">コンテナーの型。</param>
      <param name="modelAccessor">モデル アクセサー。</param>
      <param name="modelType">モデルの型。</param>
      <param name="propertyName">プロパティの名前。</param>
    </member>
    <member name="T:System.Web.Mvc.DataAnnotationsModelValidationFactory">
      <summary>
        <see cref="T:System.Web.Mvc.DataAnnotationsModelValidatorProvider" /> インスタンスを作成するメソッドを表します。</summary>
    </member>
    <member name="T:System.Web.Mvc.DataAnnotationsModelValidator">
      <summary>モデルの検証コントロールを提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidator.#ctor(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext,System.ComponentModel.DataAnnotations.ValidationAttribute)">
      <summary>
        <see cref="T:System.Web.Mvc.DataAnnotationsModelValidator" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="metadata">モデルのメタデータ。</param>
      <param name="context">モデルのコントローラー コンテキスト。</param>
      <param name="attribute">モデルの検証属性。</param>
    </member>
    <member name="P:System.Web.Mvc.DataAnnotationsModelValidator.Attribute">
      <summary>モデルの検証コントロールの検証属性を取得します。</summary>
      <returns>モデルの検証コントロールの検証属性。</returns>
    </member>
    <member name="P:System.Web.Mvc.DataAnnotationsModelValidator.ErrorMessage">
      <summary>検証エラーのエラー メッセージを取得します。</summary>
      <returns>検証エラーのエラー メッセージ。</returns>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidator.GetClientValidationRules">
      <summary>クライアント検証規則のコレクションを取得します。</summary>
      <returns>クライアント検証規則のコレクション。</returns>
    </member>
    <member name="P:System.Web.Mvc.DataAnnotationsModelValidator.IsRequired">
      <summary>モデルの検証が必要であるかどうかを示す値を取得します。</summary>
      <returns>モデルの検証が必要である場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidator.Validate(System.Object)">
      <summary>モデルの検証エラー メッセージの一覧を返します。</summary>
      <returns>モデルの検証エラー メッセージの一覧。エラーが発生しなかった場合は、空の一覧。</returns>
      <param name="container">モデルのコンテナー。</param>
    </member>
    <member name="T:System.Web.Mvc.DataAnnotationsModelValidator`1">
      <summary>指定した検証型のモデル検証コントロールを提供します。</summary>
      <typeparam name="TAttribute"></typeparam>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidator`1.#ctor(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext,`0)">
      <summary>
        <see cref="T:System.Web.Mvc.DataAnnotationsModelValidator" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="metadata">モデルのメタデータ。</param>
      <param name="context">モデルのコントローラー コンテキスト。</param>
      <param name="attribute">モデルの検証属性。</param>
    </member>
    <member name="P:System.Web.Mvc.DataAnnotationsModelValidator`1.Attribute">
      <summary>モデルの検証コントロールから検証属性を取得します。</summary>
      <returns>モデルの検証コントロールから取得された検証属性。</returns>
    </member>
    <member name="T:System.Web.Mvc.DataAnnotationsModelValidatorProvider">
      <summary>ASP.NET MVC 用の既定の検証プロバイダーを実装します。</summary>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidatorProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.DataAnnotationsModelValidatorProvider" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.DataAnnotationsModelValidatorProvider.AddImplicitRequiredAttributeForValueTypes">
      <summary>非 null 許容値型が必要かどうかを示す値を取得または設定します。</summary>
      <returns>非 null 許容値型が必要な場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidatorProvider.GetValidators(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext,System.Collections.Generic.IEnumerable{System.Attribute})">
      <summary>検証コントロールの一覧を取得します。</summary>
      <returns>検証コントロールの一覧。</returns>
      <param name="metadata">メタデータ。</param>
      <param name="context">コンテキスト。</param>
      <param name="attributes">検証属性のリスト。</param>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidatorProvider.RegisterAdapter(System.Type,System.Type)">
      <summary>クライアント側の検証を行うアダプターを登録します。</summary>
      <param name="attributeType">検証属性の型。</param>
      <param name="adapterType">アダプターの型。</param>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidatorProvider.RegisterAdapterFactory(System.Type,System.Web.Mvc.DataAnnotationsModelValidationFactory)">
      <summary>検証プロバイダー用のアダプター ファクトリを登録します。</summary>
      <param name="attributeType">属性の型。</param>
      <param name="factory">指定した属性の <see cref="T:System.Web.Mvc.ModelValidator" /> オブジェクトの作成に使用するファクトリ。</param>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidatorProvider.RegisterDefaultAdapter(System.Type)">
      <summary>既定のアダプターを登録します。</summary>
      <param name="adapterType">アダプターの型。</param>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidatorProvider.RegisterDefaultAdapterFactory(System.Web.Mvc.DataAnnotationsModelValidationFactory)">
      <summary>既定のアダプター ファクトリを登録します。</summary>
      <param name="factory">既定のアダプターの <see cref="T:System.Web.Mvc.ModelValidator" /> オブジェクトの作成に使用するファクトリ。</param>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidatorProvider.RegisterDefaultValidatableObjectAdapter(System.Type)">
      <summary>既定のオブジェクト検証を行うアダプターを登録します。</summary>
      <param name="adapterType">アダプターの型。</param>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidatorProvider.RegisterDefaultValidatableObjectAdapterFactory(System.Web.Mvc.DataAnnotationsValidatableObjectAdapterFactory)">
      <summary>既定のオブジェクト検証プロバイダー用のアダプター ファクトリを登録します。</summary>
      <param name="factory">ファクトリ。</param>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidatorProvider.RegisterValidatableObjectAdapter(System.Type,System.Type)">
      <summary>オブジェクト検証を行うアダプターを登録します。</summary>
      <param name="modelType">モデルの型。</param>
      <param name="adapterType">アダプターの型。</param>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidatorProvider.RegisterValidatableObjectAdapterFactory(System.Type,System.Web.Mvc.DataAnnotationsValidatableObjectAdapterFactory)">
      <summary>オブジェクト検証プロバイダー用のアダプター ファクトリを登録します。</summary>
      <param name="modelType">モデルの型。</param>
      <param name="factory">ファクトリ。</param>
    </member>
    <member name="T:System.Web.Mvc.DataAnnotationsValidatableObjectAdapterFactory">
      <summary>
        <see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject" /> に基づく検証コントロールのファクトリを提供します。</summary>
    </member>
    <member name="T:System.Web.Mvc.DataErrorInfoModelValidatorProvider">
      <summary>エラー情報モデルの検証コントロールのコンテナーです。</summary>
    </member>
    <member name="M:System.Web.Mvc.DataErrorInfoModelValidatorProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.DataErrorInfoModelValidatorProvider" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.DataErrorInfoModelValidatorProvider.GetValidators(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>エラー情報モデルの検証コントロールの一覧を取得します。</summary>
      <returns>エラー情報モデルの検証コントロールの一覧。</returns>
      <param name="metadata">モデル メタデータ。</param>
      <param name="context">コントローラー コンテキスト。</param>
    </member>
    <member name="T:System.Web.Mvc.DefaultControllerFactory">
      <summary>既定で登録されるコントローラー ファクトリを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.DefaultControllerFactory.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.DefaultControllerFactory" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.DefaultControllerFactory.#ctor(System.Web.Mvc.IControllerActivator)">
      <summary>コントローラー アクティベーターを使用して、<see cref="T:System.Web.Mvc.DefaultControllerFactory" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="controllerActivator">コントローラー アクティベーター インターフェイスを実装するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultControllerFactory.CreateController(System.Web.Routing.RequestContext,System.String)">
      <summary>指定された要求コンテキストを使用して、指定されたコントローラーを作成します。</summary>
      <returns>コントローラー。</returns>
      <param name="requestContext">HTTP コンテンツ、ルート データなどを含む HTTP 要求のコンテキスト。</param>
      <param name="controllerName">コントローラーの名前。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestContext" /> パラメーターが null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="controllerName" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.DefaultControllerFactory.GetControllerInstance(System.Web.Routing.RequestContext,System.Type)">
      <summary>指定した要求コンテキストおよびコントローラーの種類のコントローラー インスタンスを取得します。</summary>
      <returns>コントローラー インスタンス。</returns>
      <param name="requestContext">HTTP コンテンツ、ルート データなどを含む HTTP 要求のコンテキスト。</param>
      <param name="controllerType">コントローラーの種類。</param>
      <exception cref="T:System.Web.HttpException">
        <paramref name="controllerType" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="controllerType" /> を割り当てることができません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="controllerType" /> のインスタンスを作成できません。</exception>
    </member>
    <member name="M:System.Web.Mvc.DefaultControllerFactory.GetControllerSessionBehavior(System.Web.Routing.RequestContext,System.Type)">
      <summary>コントローラーのセッション動作を返します。</summary>
      <returns>コントローラーのセッション動作。</returns>
      <param name="requestContext">要求コンテキスト。</param>
      <param name="controllerType">コントローラーの種類。</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultControllerFactory.GetControllerType(System.Web.Routing.RequestContext,System.String)">
      <summary>指定した名前および要求コンテキストのコントローラーの種類を取得します。</summary>
      <returns>コントローラーの種類。</returns>
      <param name="requestContext">HTTP コンテンツ、ルート データなどを含む HTTP 要求のコンテキスト。</param>
      <param name="controllerName">コントローラーの名前。</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultControllerFactory.ReleaseController(System.Web.Mvc.IController)">
      <summary>指定されたコントローラーを解放します。</summary>
      <param name="controller">解放するコントローラー。</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultControllerFactory.System#Web#Mvc#IControllerFactory#GetControllerSessionBehavior(System.Web.Routing.RequestContext,System.String)">
      <summary>この API は、ASP.NET MVC インフラストラクチャをサポートします。コードから直接使用するためのものではありません。このメソッドは、<see cref="M:System.Web.Mvc.DefaultControllerFactory.GetControllerSessionBehavior(System.Web.Routing.RequestContext,System.Type)" /> メソッドを呼び出します。</summary>
      <returns>コントローラーのセッション動作。</returns>
      <param name="requestContext">要求コンテキスト。</param>
      <param name="controllerName">コントローラー名。</param>
    </member>
    <member name="T:System.Web.Mvc.DefaultModelBinder">
      <summary>ブラウザー要求をデータ オブジェクトに対応付けます。このクラスは、モデル バインダーの具象実装を提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.DefaultModelBinder" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.DefaultModelBinder.Binders">
      <summary>アプリケーションのモデル バインダーを取得または設定します。</summary>
      <returns>アプリケーションのモデル バインダー。</returns>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.BindModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>指定されたコントローラー コンテキストおよびバインディング コンテキストを使用して、モデルをバインドします。</summary>
      <returns>バインドされたオブジェクト。</returns>
      <param name="controllerContext">コントローラーが機能するコンテキスト。このコンテキスト情報には、コントローラー、HTTP コンテンツ、要求コンテキスト、ルート データなどが含まれます。</param>
      <param name="bindingContext">モデルをバインドするコンテキスト。このコンテキストには、モデル オブジェクト、モデル名、モデルの型、プロパティ フィルター、値プロバイダーなどの情報が含まれます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bindingContext " /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.BindProperty(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext,System.ComponentModel.PropertyDescriptor)">
      <summary>指定されたコントローラー コンテキストとバインディング コンテキストおよび指定されたプロパティ記述子を使用して、指定されたプロパティをバインドします。</summary>
      <param name="controllerContext">コントローラーが機能するコンテキスト。このコンテキスト情報には、コントローラー、HTTP コンテンツ、要求コンテキスト、ルート データなどが含まれます。</param>
      <param name="bindingContext">モデルをバインドするコンテキスト。このコンテキストには、モデル オブジェクト、モデル名、モデルの型、プロパティ フィルター、値プロバイダーなどの情報が含まれます。</param>
      <param name="propertyDescriptor">バインド対象のプロパティについて説明します。記述子は、コンポーネントの型、プロパティの型、プロパティ値などの情報を提供します。また、プロパティ値を取得または設定するメソッドを提供します。</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.CreateModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext,System.Type)">
      <summary>指定されたコントローラー コンテキストおよびバインディング コンテキストを使用して、指定されたモデル型を作成します。</summary>
      <returns>指定した型のデータ オブジェクト。</returns>
      <param name="controllerContext">コントローラーが機能するコンテキスト。このコンテキスト情報には、コントローラー、HTTP コンテンツ、要求コンテキスト、ルート データなどが含まれます。</param>
      <param name="bindingContext">モデルをバインドするコンテキスト。このコンテキストには、モデル オブジェクト、モデル名、モデルの型、プロパティ フィルター、値プロバイダーなどの情報が含まれます。</param>
      <param name="modelType">返すモデル オブジェクトの型。</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.CreateSubIndexName(System.String,System.Int32)">
      <summary>大きいインデックスを構成するコンポーネントのカテゴリに基づいてインデックス (サブインデックス) を作成します。指定するインデックス値は整数です。</summary>
      <returns>サブインデックスの名前。</returns>
      <param name="prefix">サブインデックスのプレフィックス。</param>
      <param name="index">インデックス値。</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.CreateSubIndexName(System.String,System.String)">
      <summary>大きいインデックスを構成するコンポーネントのカテゴリに基づいてインデックス (サブインデックス) を作成します。指定するインデックス値は文字列です。</summary>
      <returns>サブインデックスの名前。</returns>
      <param name="prefix">サブインデックスのプレフィックス。</param>
      <param name="index">インデックス値。</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.CreateSubPropertyName(System.String,System.String)">
      <summary>指定されたプレフィックスおよびプロパティ名を使用して、サブプロパティの名前を作成します。</summary>
      <returns>サブプロパティの名前。</returns>
      <param name="prefix">サブプロパティのプレフィックス。</param>
      <param name="propertyName">プロパティの名前。</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.GetFilteredModelProperties(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>指定した <paramref name="binding context" /> によって設定されたプロパティ フィルターの制限に一致するプロパティのセットを返します。</summary>
      <returns>プロパティ記述子の列挙可能なセット。</returns>
      <param name="controllerContext">コントローラーが機能するコンテキスト。このコンテキスト情報には、コントローラー、HTTP コンテンツ、要求コンテキスト、ルート データなどが含まれます。</param>
      <param name="bindingContext">モデルをバインドするコンテキスト。このコンテキストには、モデル オブジェクト、モデル名、モデルの型、プロパティ フィルター、値プロバイダーなどの情報が含まれます。</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.GetModelProperties(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>指定されたコントローラー コンテキストおよびバインディング コンテキストを使用して、モデルのプロパティを返します。</summary>
      <returns>プロパティ記述子のコレクション。</returns>
      <param name="controllerContext">コントローラーが機能するコンテキスト。このコンテキスト情報には、コントローラー、HTTP コンテンツ、要求コンテキスト、ルート データなどが含まれます。</param>
      <param name="bindingContext">モデルをバインドするコンテキスト。このコンテキストには、モデル オブジェクト、モデル名、モデルの型、プロパティ フィルター、値プロバイダーなどの情報が含まれます。</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.GetPropertyValue(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext,System.ComponentModel.PropertyDescriptor,System.Web.Mvc.IModelBinder)">
      <summary>指定されたコントローラー コンテキスト、バインディング コンテキスト、プロパティ記述子、およびプロティ バインダーを使用して、プロパティの値を返します。</summary>
      <returns>プロパティ値を表すオブジェクト。</returns>
      <param name="controllerContext">コントローラーが機能するコンテキスト。このコンテキスト情報には、コントローラー、HTTP コンテンツ、要求コンテキスト、ルート データなどが含まれます。</param>
      <param name="bindingContext">モデルをバインドするコンテキスト。このコンテキストには、モデル オブジェクト、モデル名、モデルの型、プロパティ フィルター、値プロバイダーなどの情報が含まれます。</param>
      <param name="propertyDescriptor">アクセスするプロパティの記述子。記述子は、コンポーネントの型、プロパティの型、プロパティ値などの情報を提供します。また、プロパティ値を取得または設定するメソッドを提供します。</param>
      <param name="propertyBinder">プロパティをバインドする方法を提供するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.GetTypeDescriptor(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>コントローラー コンテキストおよびバインディング コンテキストによって指定された型の記述子オブジェクトを返します。</summary>
      <returns>カスタムの型記述子オブジェクト。</returns>
      <param name="controllerContext">コントローラーが機能するコンテキスト。このコンテキスト情報には、コントローラー、HTTP コンテンツ、要求コンテキスト、ルート データなどが含まれます。</param>
      <param name="bindingContext">モデルをバインドするコンテキスト。このコンテキストには、モデル オブジェクト、モデル名、モデルの型、プロパティ フィルター、値プロバイダーなどの情報が含まれます。</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.IsModelValid(System.Web.Mvc.ModelBindingContext)">
      <summary>指定されたバインディング コンテキストのデータ モデルが有効かどうかを判断します。</summary>
      <returns>モデルが有効な場合は true。それ以外の場合は false。</returns>
      <param name="bindingContext">モデルをバインドするコンテキスト。このコンテキストには、モデル オブジェクト、モデル名、モデルの型、プロパティ フィルター、値プロバイダーなどの情報が含まれます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bindingContext" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.OnModelUpdated(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>モデルが更新されたときに呼び出されます。</summary>
      <param name="controllerContext">コントローラーが機能するコンテキスト。このコンテキスト情報には、コントローラー、HTTP コンテンツ、要求コンテキスト、ルート データなどが含まれます。</param>
      <param name="bindingContext">モデルをバインドするコンテキスト。このコンテキストには、モデル オブジェクト、モデル名、モデルの型、プロパティ フィルター、値プロバイダーなどの情報が含まれます。</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.OnModelUpdating(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>モデルの更新時に呼び出されます。</summary>
      <returns>モデルが更新中の場合は true。それ以外の場合は false。</returns>
      <param name="controllerContext">コントローラーが機能するコンテキスト。このコンテキスト情報には、コントローラー、HTTP コンテンツ、要求コンテキスト、ルート データなどが含まれます。</param>
      <param name="bindingContext">モデルをバインドするコンテキスト。このコンテキストには、モデル オブジェクト、モデル名、モデルの型、プロパティ フィルター、値プロバイダーなどの情報が含まれます。</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.OnPropertyValidated(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext,System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>指定されたプロパティが検証されたときに呼び出されます。</summary>
      <param name="controllerContext">コントローラーが機能するコンテキスト。このコンテキスト情報には、コントローラー、HTTP コンテンツ、要求コンテキスト、ルート データなどが含まれます。</param>
      <param name="bindingContext">モデルをバインドするコンテキスト。このコンテキストには、モデル オブジェクト、モデル名、モデルの型、プロパティ フィルター、値プロバイダーなどの情報が含まれます。</param>
      <param name="propertyDescriptor">検証対象のプロパティについて説明します。記述子は、コンポーネントの型、プロパティの型、プロパティ値などの情報を提供します。また、プロパティ値を取得または設定するメソッドを提供します。</param>
      <param name="value">プロパティに設定する値。</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.OnPropertyValidating(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext,System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>指定されたプロパティの検証時に呼び出されます。</summary>
      <returns>プロパティが検証中の場合は true。それ以外の場合は false。</returns>
      <param name="controllerContext">コントローラーが機能するコンテキスト。このコンテキスト情報には、コントローラー、HTTP コンテンツ、要求コンテキスト、ルート データなどが含まれます。</param>
      <param name="bindingContext">モデルをバインドするコンテキスト。このコンテキストには、モデル オブジェクト、モデル名、モデルの型、プロパティ フィルター、値プロバイダーなどの情報が含まれます。</param>
      <param name="propertyDescriptor">検証対象のプロパティについて説明します。記述子は、コンポーネントの型、プロパティの型、プロパティ値などの情報を提供します。また、プロパティ値を取得または設定するメソッドを提供します。</param>
      <param name="value">プロパティに設定する値。</param>
    </member>
    <member name="P:System.Web.Mvc.DefaultModelBinder.ResourceClassKey">
      <summary>ローカライズ済みの文字列値が含まれるリソース ファイル (クラス キー) の名前を取得または設定します。</summary>
      <returns>リソース ファイル (クラス キー) の名前。</returns>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.SetProperty(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext,System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>指定されたコントローラー コンテキスト、バインディング コンテキスト、およびプロパティ値を使用して、指定されたプロパティを設定します。</summary>
      <param name="controllerContext">コントローラーが機能するコンテキスト。このコンテキスト情報には、コントローラー、HTTP コンテンツ、要求コンテキスト、ルート データなどが含まれます。</param>
      <param name="bindingContext">モデルをバインドするコンテキスト。このコンテキストには、モデル オブジェクト、モデル名、モデルの型、プロパティ フィルター、値プロバイダーなどの情報が含まれます。</param>
      <param name="propertyDescriptor">設定対象のプロパティについて説明します。記述子は、コンポーネントの型、プロパティの型、プロパティ値などの情報を提供します。また、プロパティ値を取得または設定するメソッドを提供します。</param>
      <param name="value">プロパティに設定する値。</param>
    </member>
    <member name="T:System.Web.Mvc.DefaultViewLocationCache">
      <summary>ビューの場所のメモリ キャッシュを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.DefaultViewLocationCache.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.DefaultViewLocationCache" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.DefaultViewLocationCache.#ctor(System.TimeSpan)">
      <summary>指定されたキャッシュ期間を使用して、<see cref="T:System.Web.Mvc.DefaultViewLocationCache" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="timeSpan">キャッシュの期間。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="timeSpan" /> パラメーターの Ticks 属性が負数に設定されています。</exception>
    </member>
    <member name="M:System.Web.Mvc.DefaultViewLocationCache.GetViewLocation(System.Web.HttpContextBase,System.String)">
      <summary>指定された HTTP コンテキストおよびキャッシュ キーを使用して、ビューの既定の場所を取得します。</summary>
      <returns>ビューの既定の場所。</returns>
      <param name="httpContext">HTTP コンテキスト。</param>
      <param name="key">キャッシュ キー。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="httpContext" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.DefaultViewLocationCache.InsertViewLocation(System.Web.HttpContextBase,System.String,System.String)">
      <summary>指定された HTTP コンテキスト、キャッシュ キー、および仮想パスを使用して、指定された仮想パスにビューを挿入します。</summary>
      <param name="httpContext">HTTP コンテキスト。</param>
      <param name="key">キャッシュ キー。</param>
      <param name="virtualPath">仮想パス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="httpContext" /> パラメーターが null です。</exception>
    </member>
    <member name="F:System.Web.Mvc.DefaultViewLocationCache.Null">
      <summary>ビューの場所の空キャッシュを作成します。</summary>
    </member>
    <member name="P:System.Web.Mvc.DefaultViewLocationCache.TimeSpan">
      <summary>キャッシュの期間を取得または設定します。</summary>
      <returns>キャッシュの期間。</returns>
    </member>
    <member name="T:System.Web.Mvc.DependencyResolver">
      <summary>
        <see cref="T:System.Web.Mvc.IDependencyResolver" /> または共通サービス ロケーターの IServiceLocator インターフェイスを実装する依存関係競合回避モジュールの登録ポイントを提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.DependencyResolver.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.DependencyResolver" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.DependencyResolver.Current">
      <summary>依存関係競合回避モジュールの実装を取得します。</summary>
      <returns>依存関係競合回避モジュールの実装。</returns>
    </member>
    <member name="P:System.Web.Mvc.DependencyResolver.InnerCurrent">
      <summary>この API は、ASP.NET MVC インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
      <returns>依存関係競合回避モジュールの実装。</returns>
    </member>
    <member name="M:System.Web.Mvc.DependencyResolver.InnerSetResolver(System.Func{System.Type,System.Object},System.Func{System.Type,System.Collections.Generic.IEnumerable{System.Object}})">
      <summary>この API は、ASP.NET MVC インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
      <param name="getService">サービスを提供する関数。</param>
      <param name="getServices">サービスを提供する関数。</param>
    </member>
    <member name="M:System.Web.Mvc.DependencyResolver.InnerSetResolver(System.Object)">
      <summary>この API は、ASP.NET MVC インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
      <param name="commonServiceLocator">共通のサービス ロケーター。</param>
    </member>
    <member name="M:System.Web.Mvc.DependencyResolver.InnerSetResolver(System.Web.Mvc.IDependencyResolver)">
      <summary>この API は、ASP.NET MVC インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
      <param name="resolver">依存関係競合回避モジュールを実装するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.DependencyResolver.SetResolver(System.Func{System.Type,System.Object},System.Func{System.Type,System.Collections.Generic.IEnumerable{System.Object}})">
      <summary>指定されたサービスのデリゲートと指定されたサービス コレクションのデリゲートを使用して、依存関係競合回避モジュールの登録ポイントを提供します。</summary>
      <param name="getService">サービス委任。</param>
      <param name="getServices">サービス委任。</param>
    </member>
    <member name="M:System.Web.Mvc.DependencyResolver.SetResolver(System.Object)">
      <summary>サービス ロケーターのインターフェイスを使用する場合、指定された共通サービス ロケーターを使用して、依存関係競合回避モジュールの登録ポイントを提供します。</summary>
      <param name="commonServiceLocator">共通のサービス ロケーター。</param>
    </member>
    <member name="M:System.Web.Mvc.DependencyResolver.SetResolver(System.Web.Mvc.IDependencyResolver)">
      <summary>指定された依存関係競合回避モジュールのインターフェイスを使用して、依存関係競合回避モジュールの登録ポイントを提供します。</summary>
      <param name="resolver">依存関係競合回避モジュール。</param>
    </member>
    <member name="T:System.Web.Mvc.DependencyResolverExtensions">
      <summary>
        <see cref="M:System.Web.Mvc.IDependencyResolver.GetService(System.Type)" /> および <see cref="M:System.Web.Mvc.IDependencyResolver.GetServices(System.Type)" /> のタイプ セーフな実装を提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.DependencyResolverExtensions.GetService``1(System.Web.Mvc.IDependencyResolver)">
      <summary>任意のオブジェクト作成をサポートする、単独で登録されているサービスを解決します。</summary>
      <returns>要求されたサービスまたはオブジェクト。</returns>
      <param name="resolver">このメソッドによって拡張される依存関係競合回避モジュール インスタンス。</param>
      <typeparam name="TService">要求されたサービスまたはオブジェクトの型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.DependencyResolverExtensions.GetServices``1(System.Web.Mvc.IDependencyResolver)">
      <summary>複数登録されているサービスを解決します。</summary>
      <returns>要求されたサービス。</returns>
      <param name="resolver">このメソッドによって拡張される依存関係競合回避モジュール インスタンス。</param>
      <typeparam name="TService">要求されたサービスの型。</typeparam>
    </member>
    <member name="T:System.Web.Mvc.DictionaryValueProvider`1">
      <summary>
        <see cref="T:System.Collections.Generic.IDictionary`2" /> インターフェイスを実装するコレクションから値を取得する値プロバイダーの基本クラスを表します。</summary>
      <typeparam name="TValue">値の型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.DictionaryValueProvider`1.#ctor(System.Collections.Generic.IDictionary{System.String,`0},System.Globalization.CultureInfo)">
      <summary>
        <see cref="T:System.Web.Mvc.DictionaryValueProvider`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dictionary">値プロバイダーの初期化に使用される名前と値のペア。</param>
      <param name="culture">カルチャの名前、書記体系、使用する暦など、特定のカルチャについての情報。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.DictionaryValueProvider`1.ContainsPrefix(System.String)">
      <summary>指定したプレフィックスがコレクションに含まれているかどうかを判断します。</summary>
      <returns>指定したプレフィックスがコレクションに含まれている場合は true。それ以外の場合は false。</returns>
      <param name="prefix">検索対象のプレフィックス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="prefix" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.DictionaryValueProvider`1.GetKeysFromPrefix(System.String)">
      <summary>プレフィックスからキーを取得します。</summary>
      <returns>プレフィックスからのキー。</returns>
      <param name="prefix">プレフィックス。</param>
    </member>
    <member name="M:System.Web.Mvc.DictionaryValueProvider`1.GetValue(System.String)">
      <summary>指定したキーおよびコントローラー コンテキストを使用して、値オブジェクトを返します。</summary>
      <returns>指定したキーの値オブジェクト。</returns>
      <param name="key">取得する値オブジェクトのキー。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> パラメーターが null です。</exception>
    </member>
    <member name="T:System.Web.Mvc.EmptyModelMetadataProvider">
      <summary>メタデータを必要としないデータ モデル用の空のメタデータ プロバイダーを提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.EmptyModelMetadataProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.EmptyModelMetadataProvider" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.EmptyModelMetadataProvider.CreateMetadata(System.Collections.Generic.IEnumerable{System.Attribute},System.Type,System.Func{System.Object},System.Type,System.String)">
      <summary>
        <see cref="T:System.Web.Mvc.ModelMetadata" /> クラスの新しいインスタンスを作成します。</summary>
      <returns>
        <see cref="T:System.Web.Mvc.ModelMetadata" /> クラスの新しいインスタンス。</returns>
      <param name="attributes">属性。</param>
      <param name="containerType">コンテナーの型。</param>
      <param name="modelAccessor">モデル アクセサー。</param>
      <param name="modelType">モデルの型。</param>
      <param name="propertyName">モデルの名前。</param>
    </member>
    <member name="T:System.Web.Mvc.EmptyModelValidatorProvider">
      <summary>検証コントロールを必要としないモデルに対して空の検証コントロール プロバイダーを提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.EmptyModelValidatorProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.EmptyModelValidatorProvider" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.EmptyModelValidatorProvider.GetValidators(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>空のモデル検証コントロールを取得します。</summary>
      <returns>空のモデル検証コントロール。</returns>
      <param name="metadata">メタデータ。</param>
      <param name="context">コンテキスト。</param>
    </member>
    <member name="T:System.Web.Mvc.EmptyResult">
      <summary>何も返さないコントローラー アクション メソッドなど、何も実行されない結果を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.EmptyResult.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.EmptyResult" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.EmptyResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>指定された結果コンテキストを実行します。</summary>
      <param name="context">結果コンテキスト。</param>
    </member>
    <member name="T:System.Web.Mvc.ExceptionContext">
      <summary>
        <see cref="T:System.Web.Mvc.HandleErrorAttribute" /> クラスを使用するためのコンテキストを提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ExceptionContext.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ExceptionContext" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ExceptionContext.#ctor(System.Web.Mvc.ControllerContext,System.Exception)">
      <summary>指定されたコントローラー コンテキストを使用して、指定された例外に対応する <see cref="T:System.Web.Mvc.ExceptionContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="exception">例外。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> パラメーターが null です。</exception>
    </member>
    <member name="P:System.Web.Mvc.ExceptionContext.Exception">
      <summary>例外オブジェクトを取得または設定します。</summary>
      <returns>例外オブジェクト。</returns>
    </member>
    <member name="P:System.Web.Mvc.ExceptionContext.ExceptionHandled">
      <summary>例外が処理されたかどうかを示す値を取得または設定します。</summary>
      <returns>例外が処理された場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Web.Mvc.ExceptionContext.Result">
      <summary>アクションの結果を取得または設定します。</summary>
      <returns>アクションの結果。</returns>
    </member>
    <member name="T:System.Web.Mvc.ExpressionHelper">
      <summary>式からモデル名を取得するためのヘルパー クラスです。</summary>
    </member>
    <member name="M:System.Web.Mvc.ExpressionHelper.GetExpressionText(System.Linq.Expressions.LambdaExpression)">
      <summary>ラムダ式からモデル名を取得します。</summary>
      <returns>モデル名。</returns>
      <param name="expression">式。</param>
    </member>
    <member name="M:System.Web.Mvc.ExpressionHelper.GetExpressionText(System.String)">
      <summary>文字列式からモデル名を取得します。</summary>
      <returns>モデル名。</returns>
      <param name="expression">式。</param>
    </member>
    <member name="T:System.Web.Mvc.FieldValidationMetadata">
      <summary>クライアント側フィールド検証メタデータのコンテナーです。</summary>
    </member>
    <member name="M:System.Web.Mvc.FieldValidationMetadata.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.FieldValidationMetadata" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.FieldValidationMetadata.FieldName">
      <summary>データ フィールドの名前を取得または設定します。</summary>
      <returns>データ フィールドの名前。</returns>
    </member>
    <member name="P:System.Web.Mvc.FieldValidationMetadata.ReplaceValidationMessageContents">
      <summary>検証メッセージの内容をクライアント検証エラーで置き換えるかどうかを示す値を取得または設定します。</summary>
      <returns>検証メッセージの内容をクライアント検証エラーで置き換える場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Web.Mvc.FieldValidationMetadata.ValidationMessageId">
      <summary>検証コントロールのメッセージ ID を取得または設定します。</summary>
      <returns>検証コントロールのメッセージ ID。</returns>
    </member>
    <member name="P:System.Web.Mvc.FieldValidationMetadata.ValidationRules">
      <summary>クライアント検証規則を取得します。</summary>
      <returns>クライアント検証規則。</returns>
    </member>
    <member name="T:System.Web.Mvc.FileContentResult">
      <summary>バイナリ ファイルの内容を応答に送信します。</summary>
    </member>
    <member name="M:System.Web.Mvc.FileContentResult.#ctor(System.Byte[],System.String)">
      <summary>指定されたファイルの内容およびコンテンツ タイプを使用して、<see cref="T:System.Web.Mvc.FileContentResult" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="fileContents">応答に送信するバイト配列。</param>
      <param name="contentType">応答に使用するコンテンツ タイプ。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileContents" /> パラメーターが null です。</exception>
    </member>
    <member name="P:System.Web.Mvc.FileContentResult.FileContents">
      <summary>応答に送信するバイナリ コンテンツ。</summary>
      <returns>ファイルの内容。</returns>
    </member>
    <member name="M:System.Web.Mvc.FileContentResult.WriteFile(System.Web.HttpResponseBase)">
      <summary>ファイルの内容を応答に書き込みます。</summary>
      <param name="response">応答。</param>
    </member>
    <member name="T:System.Web.Mvc.FilePathResult">
      <summary>ファイルの内容を応答に送信します。</summary>
    </member>
    <member name="M:System.Web.Mvc.FilePathResult.#ctor(System.String,System.String)">
      <summary>指定されたファイル名およびコンテンツ タイプを使用して、<see cref="T:System.Web.Mvc.FilePathResult" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="fileName">応答に送信するファイルの名前。</param>
      <param name="contentType">応答のコンテンツ タイプ。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fileName" /> パラメーターが null または空です。</exception>
    </member>
    <member name="P:System.Web.Mvc.FilePathResult.FileName">
      <summary>応答に送信されるファイルのパスを取得または設定します。</summary>
      <returns>応答に送信されるファイルのパス。</returns>
    </member>
    <member name="M:System.Web.Mvc.FilePathResult.WriteFile(System.Web.HttpResponseBase)">
      <summary>ファイルを応答に書き込みます。</summary>
      <param name="response">応答。</param>
    </member>
    <member name="T:System.Web.Mvc.FileResult">
      <summary>バイナリ ファイルの内容を応答に送信するために使用される基本クラスを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.FileResult.#ctor(System.String)">
      <summary>
        <see cref="T:System.Web.Mvc.FileResult" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="contentType">コンテンツ タイプ。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="contentType" /> パラメーターが null または空です。</exception>
    </member>
    <member name="P:System.Web.Mvc.FileResult.ContentType">
      <summary>応答に使用するコンテンツ タイプを取得します。</summary>
      <returns>コンテンツ タイプ。</returns>
    </member>
    <member name="M:System.Web.Mvc.FileResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>
        <see cref="T:System.Web.Mvc.ActionResult" /> クラスを継承するカスタム型によって、アクション メソッドの結果の処理を有効にします。</summary>
      <param name="context">結果が実行されるコンテキスト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> パラメーターが null です。</exception>
    </member>
    <member name="P:System.Web.Mvc.FileResult.FileDownloadName">
      <summary>ファイル ダウンロード ダイアログ ボックスが、指定されたファイル名と共にブラウザーに表示されるように、Content-Disposition ヘッダーを取得または設定します。</summary>
      <returns>ファイルの名前。</returns>
    </member>
    <member name="M:System.Web.Mvc.FileResult.WriteFile(System.Web.HttpResponseBase)">
      <summary>ファイルを応答に書き込みます。</summary>
      <param name="response">応答。</param>
    </member>
    <member name="T:System.Web.Mvc.FileStreamResult">
      <summary>
        <see cref="T:System.IO.Stream" /> インスタンスを使用して、バイナリ コンテンツを応答に送信します。</summary>
    </member>
    <member name="M:System.Web.Mvc.FileStreamResult.#ctor(System.IO.Stream,System.String)">
      <summary>
        <see cref="T:System.Web.Mvc.FileStreamResult" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="fileStream">応答に送信するストリーム。</param>
      <param name="contentType">応答に使用するコンテンツ タイプ。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileStream" /> パラメーターが null です。</exception>
    </member>
    <member name="P:System.Web.Mvc.FileStreamResult.FileStream">
      <summary>応答に送信されるストリームを取得します。</summary>
      <returns>ファイル ストリーム。</returns>
    </member>
    <member name="M:System.Web.Mvc.FileStreamResult.WriteFile(System.Web.HttpResponseBase)">
      <summary>ファイルを応答に書き込みます。</summary>
      <param name="response">応答。</param>
    </member>
    <member name="T:System.Web.Mvc.Filter">
      <summary>1 つ以上のフィルター インターフェイスの実装、フィルターの順序、およびフィルターのスコープへの参照を格納するメタデータ クラスを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Filter.#ctor(System.Object,System.Web.Mvc.FilterScope,System.Nullable{System.Int32})">
      <summary>
        <see cref="T:System.Web.Mvc.Filter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="instance">インスタンス。</param>
      <param name="scope">スコープ。</param>
      <param name="order">順序。</param>
    </member>
    <member name="F:System.Web.Mvc.Filter.DefaultOrder">
      <summary>フィルターの既定の順序を指定するための定数を表します。</summary>
    </member>
    <member name="P:System.Web.Mvc.Filter.Instance">
      <summary>このクラスのインスタンスを取得します。</summary>
      <returns>このクラスのインスタンス。</returns>
    </member>
    <member name="P:System.Web.Mvc.Filter.Order">
      <summary>フィルターを適用する順序を取得します。</summary>
      <returns>フィルターを適用する順序。</returns>
    </member>
    <member name="P:System.Web.Mvc.Filter.Scope">
      <summary>フィルターのスコープの順序を取得します。</summary>
      <returns>フィルターのスコープの順序。</returns>
    </member>
    <member name="T:System.Web.Mvc.FilterAttribute">
      <summary>アクションおよび結果フィルター属性の基本クラスを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.FilterAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.FilterAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.FilterAttribute.AllowMultiple">
      <summary>フィルター属性の複数のインスタンスを指定できるかどうかを示す値を取得または設定します。</summary>
      <returns>フィルター属性の複数のインスタンスを指定できる場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Web.Mvc.FilterAttribute.Order">
      <summary>アクション フィルターの実行順序を取得または設定します。</summary>
      <returns>アクション フィルターの実行順序。</returns>
    </member>
    <member name="T:System.Web.Mvc.FilterAttributeFilterProvider">
      <summary>フィルター属性のフィルター プロバイダーを定義します。</summary>
    </member>
    <member name="M:System.Web.Mvc.FilterAttributeFilterProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.FilterAttributeFilterProvider" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.FilterAttributeFilterProvider.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.Web.Mvc.FilterAttributeFilterProvider" /> クラスの新しいインスタンスを初期化し、オプションで属性インスタンスをキャッシュします。</summary>
      <param name="cacheAttributeInstances">属性インスタンスをキャッシュする場合は true。それ以外の場合は false。</param>
    </member>
    <member name="M:System.Web.Mvc.FilterAttributeFilterProvider.GetActionAttributes(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor)">
      <summary>カスタム アクション属性のコレクションを取得します。</summary>
      <returns>カスタム アクション属性のコレクション。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="actionDescriptor">アクション記述子。</param>
    </member>
    <member name="M:System.Web.Mvc.FilterAttributeFilterProvider.GetControllerAttributes(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor)">
      <summary>コントローラー属性のコレクションを取得します。</summary>
      <returns>コントローラー属性のコレクション。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="actionDescriptor">アクション記述子。</param>
    </member>
    <member name="M:System.Web.Mvc.FilterAttributeFilterProvider.GetFilters(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor)">
      <summary>すべてのフィルター プロバイダーのフィルターを 1 つのコレクションに集約します。</summary>
      <returns>すべてのフィルター プロバイダーのコレクション フィルター。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="actionDescriptor">アクション記述子。</param>
    </member>
    <member name="T:System.Web.Mvc.FilterInfo">
      <summary>使用できるアクション フィルターに関する情報をカプセル化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.FilterInfo.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.FilterInfo" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.FilterInfo.#ctor(System.Collections.Generic.IEnumerable{System.Web.Mvc.Filter})">
      <summary>指定されたフィルターのコレクションを使用して、<see cref="T:System.Web.Mvc.FilterInfo" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="filters">フィルターのコレクション。</param>
    </member>
    <member name="P:System.Web.Mvc.FilterInfo.ActionFilters">
      <summary>アプリケーション内のすべてのアクション フィルターを取得します。</summary>
      <returns>アクション フィルター。</returns>
    </member>
    <member name="P:System.Web.Mvc.FilterInfo.AuthenticationFilters">
      <summary>アプリケーション内のすべての認証フィルターを取得します。</summary>
      <returns>認証フィルターの一覧。</returns>
    </member>
    <member name="P:System.Web.Mvc.FilterInfo.AuthorizationFilters">
      <summary>アプリケーション内のすべての承認フィルターを取得します。</summary>
      <returns>承認フィルター。</returns>
    </member>
    <member name="P:System.Web.Mvc.FilterInfo.ExceptionFilters">
      <summary>アプリケーション内のすべての例外フィルターを取得します。</summary>
      <returns>例外フィルター。</returns>
    </member>
    <member name="P:System.Web.Mvc.FilterInfo.ResultFilters">
      <summary>アプリケーション内のすべての結果フィルターを取得します。</summary>
      <returns>結果フィルター。</returns>
    </member>
    <member name="T:System.Web.Mvc.FilterProviderCollection">
      <summary>アプリケーションのフィルター プロバイダーのコレクションを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.FilterProviderCollection.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.FilterProviderCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.FilterProviderCollection.#ctor(System.Collections.Generic.IList{System.Web.Mvc.IFilterProvider})">
      <summary>フィルター プロバイダーの指定された一覧を使用して、<see cref="T:System.Web.Mvc.FilterProviderCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="providers">フィルター プロバイダーの一覧。</param>
    </member>
    <member name="M:System.Web.Mvc.FilterProviderCollection.ClearItems">
      <summary>コレクションからすべての要素を削除します。</summary>
    </member>
    <member name="M:System.Web.Mvc.FilterProviderCollection.GetFilters(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor)">
      <summary>フィルター プロバイダーのコレクションを返します。</summary>
      <returns>フィルター プロバイダーのコレクション。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="actionDescriptor">アクション記述子。</param>
    </member>
    <member name="M:System.Web.Mvc.FilterProviderCollection.InsertItem(System.Int32,System.Web.Mvc.IFilterProvider)">
      <summary>コレクション内の指定したインデックスの位置に要素を挿入します。</summary>
      <param name="index">項目を挿入する位置の 0 から始まるインデックス。</param>
      <param name="item">挿入するオブジェクト。値は、参照型に対しては null にすることができます。</param>
    </member>
    <member name="M:System.Web.Mvc.FilterProviderCollection.RemoveItem(System.Int32)">
      <summary>コレクションの指定されたインデックス位置にある要素を削除します。</summary>
      <param name="index">削除する要素の 0 から始まるインデックス。</param>
    </member>
    <member name="M:System.Web.Mvc.FilterProviderCollection.SetItem(System.Int32,System.Web.Mvc.IFilterProvider)">
      <summary>指定したインデックス位置にある要素を置き換えます。</summary>
      <param name="index">置き換える要素の 0 から始まるインデックス番号。</param>
      <param name="item">指定したインデックス位置に存在する要素の新しい値。値は、参照型に対しては null にすることができます。</param>
    </member>
    <member name="T:System.Web.Mvc.FilterProviders">
      <summary>フィルターの登録ポイントを提供します。</summary>
    </member>
    <member name="P:System.Web.Mvc.FilterProviders.Providers">
      <summary>フィルターの登録ポイントを提供します。</summary>
      <returns>フィルターのコレクション。</returns>
    </member>
    <member name="T:System.Web.Mvc.FilterScope">
      <summary>同じフィルターの種類とフィルターの順序で ASP.NET MVC フィルターを実行する際の順序を指定する値を定義します。</summary>
    </member>
    <member name="F:System.Web.Mvc.FilterScope.Action">
      <summary>
        <see cref="F:System.Web.Mvc.FilterScope.Last" /> の前と <see cref="F:System.Web.Mvc.FilterScope.Controller" /> の後の順序を指定します。</summary>
    </member>
    <member name="F:System.Web.Mvc.FilterScope.Controller">
      <summary>
        <see cref="F:System.Web.Mvc.FilterScope.Action" /> の前と <see cref="F:System.Web.Mvc.FilterScope.Global" /> の後の順序を指定します。</summary>
    </member>
    <member name="F:System.Web.Mvc.FilterScope.First">
      <summary>1 つ目を指定します。</summary>
    </member>
    <member name="F:System.Web.Mvc.FilterScope.Global">
      <summary>
        <see cref="F:System.Web.Mvc.FilterScope.Controller" /> の前と <see cref="F:System.Web.Mvc.FilterScope.First" /> の後の順序を指定します。</summary>
    </member>
    <member name="F:System.Web.Mvc.FilterScope.Last">
      <summary>最後を指定します。</summary>
    </member>
    <member name="T:System.Web.Mvc.FormCollection">
      <summary>アプリケーションのフォーム値プロバイダーを格納します。</summary>
    </member>
    <member name="M:System.Web.Mvc.FormCollection.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.FormCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.FormCollection.#ctor(System.Collections.Specialized.NameValueCollection)">
      <summary>
        <see cref="T:System.Web.Mvc.FormCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="collection">コレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.FormCollection.GetValue(System.String)">
      <summary>指定された値プロバイダーを取得します。</summary>
      <returns>値プロバイダー。</returns>
      <param name="name">取得する値プロバイダーの名前。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.FormCollection.System#Web#Mvc#IValueProvider#ContainsPrefix(System.String)">
      <summary>値プロバイダーに、指定したプレフィックスを持つエントリが含まれているかどうかを示す値を取得します。</summary>
      <returns>指定されたプレフィックスを持つエントリが値プロバイダーに格納されている場合は true。それ以外の場合は false。</returns>
      <param name="prefix">検索対象のプレフィックス。</param>
    </member>
    <member name="M:System.Web.Mvc.FormCollection.System#Web#Mvc#IValueProvider#GetValue(System.String)">
      <summary>指定したキーを使用して値プロバイダーから値を取得します。</summary>
      <returns>値プロバイダーから取得された値。</returns>
      <param name="key">キー。</param>
    </member>
    <member name="M:System.Web.Mvc.FormCollection.ToValueProvider">
      <summary>値プロバイダーが含まれているディクショナリを返します。</summary>
      <returns>値プロバイダーのディクショナリ。</returns>
    </member>
    <member name="T:System.Web.Mvc.FormContext">
      <summary>HTML フォームからの入力データを検証および処理するために必要な情報をカプセル化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.FormContext.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.FormContext" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.FormContext.FieldValidators">
      <summary>フォームのフィールド検証コントロールを取得します。</summary>
      <returns>フォームのフィールド検証コントロールのディクショナリ。</returns>
    </member>
    <member name="P:System.Web.Mvc.FormContext.FormId">
      <summary>フォーム識別子を取得または設定します。</summary>
      <returns>フォーム識別子。</returns>
    </member>
    <member name="M:System.Web.Mvc.FormContext.GetJsonValidationMetadata">
      <summary>フォーム識別子およびフォームのフィールド検証値を格納している、シリアル化されたオブジェクトを返します。</summary>
      <returns>フォーム識別子およびフォームのフィールド検証値を格納している、シリアル化されたオブジェクト。</returns>
    </member>
    <member name="M:System.Web.Mvc.FormContext.GetValidationMetadataForField(System.String)">
      <summary>指定した入力フィールドの検証値を返します。</summary>
      <returns>フィールド入力の検証対象の値。</returns>
      <param name="fieldName">検証値の取得対象フィールドの名前。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fieldName" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.FormContext.GetValidationMetadataForField(System.String,System.Boolean)">
      <summary>指定した入力フィールドの検証値および検証値が見つからない場合の処理方法を示す値を返します。</summary>
      <returns>フィールド入力の検証対象の値。</returns>
      <param name="fieldName">検証値の取得対象フィールドの名前。</param>
      <param name="createIfNotFound">検証値が見つからないときにその検証値を作成する場合は true。それ以外の場合は false。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fieldName" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.FormContext.RenderedField(System.String)">
      <summary>指定したフィールドがフォームで表示されたかどうかを示す値を返します。</summary>
      <returns>フィールドが表示された場合は true。それ以外の場合は false。</returns>
      <param name="fieldName">フィールド名。</param>
    </member>
    <member name="M:System.Web.Mvc.FormContext.RenderedField(System.String,System.Boolean)">
      <summary>指定したフィールドがフォームで表示されたかどうかを示す値を設定します。</summary>
      <param name="fieldName">フィールド名。</param>
      <param name="value">フォームでフィールドが表示されたことを指定する場合は true。それ以外の場合は false。</param>
    </member>
    <member name="P:System.Web.Mvc.FormContext.ReplaceValidationSummary">
      <summary>クライアント検証エラーを動的に検証の概要に追加するかどうかを決定します。</summary>
      <returns>クライアント検証エラーを検証の概要に追加する場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Web.Mvc.FormContext.ValidationSummaryId">
      <summary>検証の概要の識別子を取得または設定します。</summary>
      <returns>検証の概要の識別子。</returns>
    </member>
    <member name="T:System.Web.Mvc.FormMethod">
      <summary>フォームの HTTP 要求の種類を列挙します。</summary>
    </member>
    <member name="F:System.Web.Mvc.FormMethod.Get">
      <summary>GET 要求を指定します。</summary>
    </member>
    <member name="F:System.Web.Mvc.FormMethod.Post">
      <summary>POST 要求を指定します。</summary>
    </member>
    <member name="T:System.Web.Mvc.FormValueProvider">
      <summary>
        <see cref="T:System.Collections.Specialized.NameValueCollection" /> オブジェクトに格納されているフォーム値の値プロバイダーを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.FormValueProvider.#ctor(System.Web.Mvc.ControllerContext)">
      <summary>
        <see cref="T:System.Web.Mvc.FormValueProvider" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="controllerContext">現在の HTTP 要求に関する情報をカプセル化するオブジェクト。</param>
    </member>
    <member name="T:System.Web.Mvc.FormValueProviderFactory">
      <summary>フォームの値プロバイダー オブジェクトの新しいインスタンスを作成するクラスを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.FormValueProviderFactory.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.FormValueProviderFactory" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.FormValueProviderFactory.GetValueProvider(System.Web.Mvc.ControllerContext)">
      <summary>指定したコントローラー コンテキストを使用して、フォームの値プロバイダー オブジェクトを返します。</summary>
      <returns>フォームの値プロバイダー オブジェクト。</returns>
      <param name="controllerContext">現在の HTTP 要求に関する情報をカプセル化するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controllerContext" /> パラメーターが null です。</exception>
    </member>
    <member name="T:System.Web.Mvc.GlobalFilterCollection">
      <summary>すべてのグローバル フィルターを含むクラスを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.GlobalFilterCollection.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.GlobalFilterCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.GlobalFilterCollection.Add(System.Object)">
      <summary>指定したフィルターをグローバル フィルターのコレクションに追加します。</summary>
      <param name="filter">フィルター。</param>
    </member>
    <member name="M:System.Web.Mvc.GlobalFilterCollection.Add(System.Object,System.Int32)">
      <summary>指定したフィルターの実行順序を使用して、指定したフィルターをグローバル フィルター コレクションに追加します。</summary>
      <param name="filter">フィルター。</param>
      <param name="order">フィルターの実行順序。</param>
    </member>
    <member name="M:System.Web.Mvc.GlobalFilterCollection.Clear">
      <summary>グローバル フィルターのコレクションからすべてのフィルターを削除します。</summary>
    </member>
    <member name="M:System.Web.Mvc.GlobalFilterCollection.Contains(System.Object)">
      <summary>フィルターがグローバル フィルターのコレクションにあるかどうかを判断します。</summary>
      <returns>
        <paramref name="filter" /> がグローバル フィルターのコレクション内で見つかった場合は true。それ以外の場合は false。</returns>
      <param name="filter">フィルター。</param>
    </member>
    <member name="P:System.Web.Mvc.GlobalFilterCollection.Count">
      <summary>グローバル フィルターのコレクションに含まれるフィルターの数を取得します。</summary>
      <returns>グローバル フィルターのコレクションに含まれるフィルターの数。</returns>
    </member>
    <member name="M:System.Web.Mvc.GlobalFilterCollection.GetEnumerator">
      <summary>グローバル フィルターのコレクションを反復処理する列挙子を返します。</summary>
      <returns>グローバル フィルターのコレクションを反復処理する列挙子。</returns>
    </member>
    <member name="M:System.Web.Mvc.GlobalFilterCollection.Remove(System.Object)">
      <summary>指定したフィルターに一致するすべてのフィルターを削除します。</summary>
      <param name="filter">削除するフィルター。</param>
    </member>
    <member name="M:System.Web.Mvc.GlobalFilterCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>この API は、ASP.NET MVC インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
      <returns>グローバル フィルターのコレクションを反復処理する列挙子。</returns>
    </member>
    <member name="M:System.Web.Mvc.GlobalFilterCollection.System#Web#Mvc#IFilterProvider#GetFilters(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor)">
      <summary>この API は、ASP.NET MVC インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
      <returns>グローバル フィルターのコレクションを反復処理する列挙子。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="actionDescriptor">アクション記述子。</param>
    </member>
    <member name="T:System.Web.Mvc.GlobalFilters">
      <summary>グローバル フィルターのコレクションを表します。</summary>
    </member>
    <member name="P:System.Web.Mvc.GlobalFilters.Filters">
      <summary>グローバル フィルターのコレクションを取得または設定します。</summary>
      <returns>グローバル フィルターのコレクション。</returns>
    </member>
    <member name="T:System.Web.Mvc.HandleErrorAttribute">
      <summary>アクション メソッドがスローした例外の処理に使用される属性を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.HandleErrorAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.HandleErrorAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.HandleErrorAttribute.ExceptionType">
      <summary>例外の型を取得または設定します。</summary>
      <returns>例外の型。</returns>
    </member>
    <member name="P:System.Web.Mvc.HandleErrorAttribute.Master">
      <summary>例外情報を表示するマスター ビューを取得または設定します。</summary>
      <returns>マスター ビュー。</returns>
    </member>
    <member name="M:System.Web.Mvc.HandleErrorAttribute.OnException(System.Web.Mvc.ExceptionContext)">
      <summary>例外が発生したときに呼び出されます。</summary>
      <param name="filterContext">アクション フィルター コンテキスト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filterContext" /> パラメーターが null です。</exception>
    </member>
    <member name="P:System.Web.Mvc.HandleErrorAttribute.TypeId">
      <summary>この属性の一意の識別子を取得します。</summary>
      <returns>この属性の一意の識別子。</returns>
    </member>
    <member name="P:System.Web.Mvc.HandleErrorAttribute.View">
      <summary>例外情報を表示するページ ビューを取得または設定します。</summary>
      <returns>ページ ビュー。</returns>
    </member>
    <member name="T:System.Web.Mvc.HandleErrorInfo">
      <summary>アクション メソッドがスローしたエラーを処理するための情報をカプセル化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.HandleErrorInfo.#ctor(System.Exception,System.String,System.String)">
      <summary>
        <see cref="T:System.Web.Mvc.HandleErrorInfo" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="exception">例外。</param>
      <param name="controllerName">コントローラーの名前。</param>
      <param name="actionName">アクションの名前。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> パラメーターが null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="controllerName" /> パラメーターまたは <paramref name="actionName" /> パラメーターが null または空です。</exception>
    </member>
    <member name="P:System.Web.Mvc.HandleErrorInfo.ActionName">
      <summary>例外がスローされたときに実行されていたアクションの名前を取得または設定します。</summary>
      <returns>アクションの名前。</returns>
    </member>
    <member name="P:System.Web.Mvc.HandleErrorInfo.ControllerName">
      <summary>例外をスローしたアクション メソッドが含まれるコントローラーの名前を取得または設定します。</summary>
      <returns>コントローラーの名前。</returns>
    </member>
    <member name="P:System.Web.Mvc.HandleErrorInfo.Exception">
      <summary>例外オブジェクトを取得または設定します。</summary>
      <returns>例外オブジェクト。</returns>
    </member>
    <member name="T:System.Web.Mvc.HiddenInputAttribute">
      <summary>プロパティまたはフィールド値を非表示の input 要素として表示するかどうかを示すための属性を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.HiddenInputAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.HiddenInputAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.HiddenInputAttribute.DisplayValue">
      <summary>非表示の input 要素の値を表示するかどうかを示す値を取得または設定します。</summary>
      <returns>値を表示する必要がある場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="T:System.Web.Mvc.Html5DateRenderingMode">
      <summary>HTML5 のデータ表示モードを列挙します。</summary>
    </member>
    <member name="F:System.Web.Mvc.Html5DateRenderingMode.CurrentCulture">
      <summary>現在のカルチャ書式。</summary>
    </member>
    <member name="F:System.Web.Mvc.Html5DateRenderingMode.Rfc3339">
      <summary>RFC 3339 書式。</summary>
    </member>
    <member name="T:System.Web.Mvc.HtmlHelper">
      <summary>ビュー内の HTML コントロールの表示をサポートします。</summary>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.#ctor(System.Web.Mvc.ViewContext,System.Web.Mvc.IViewDataContainer)">
      <summary>指定されたビュー コンテキストおよびビュー データ コンテナーを使用して、<see cref="T:System.Web.Mvc.HtmlHelper" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="viewContext">ビュー コンテキスト。</param>
      <param name="viewDataContainer">ビュー データ コンテナー。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Web.Mvc.ViewContext" /> パラメーターまたは viewDataContainer パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.#ctor(System.Web.Mvc.ViewContext,System.Web.Mvc.IViewDataContainer,System.Web.Routing.RouteCollection)">
      <summary>指定されたビュー コンテキスト、ビュー データ コンテナー、およびルート コレクションを使用して、<see cref="T:System.Web.Mvc.HtmlHelper" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="viewContext">ビュー コンテキスト。</param>
      <param name="viewDataContainer">ビュー データ コンテナー。</param>
      <param name="routeCollection">ルート コレクション。</param>
      <exception cref="T:System.ArgumentNullException">1 つ以上のパラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.AnonymousObjectToHtmlAttributes(System.Object)">
      <summary>指定した HTML 属性のアンダースコア文字 (_) をハイフン (-) に置き換えます。</summary>
      <returns>ハイフンに置き換えられるアンダースコア文字が使用されている HTML 属性。</returns>
      <param name="htmlAttributes">HTML 属性。</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.AntiForgeryToken">
      <summary>フォームの送信時に検証される隠しフォーム フィールド (偽造防止トークン) を生成します。</summary>
      <returns>生成されたフォーム フィールド (偽造防止トークン)。</returns>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.AntiForgeryToken(System.String)">
      <summary>フォームの送信時に検証される隠しフォーム フィールド (偽造防止トークン) を生成します。フィールド値は、指定された salt 値を使用して生成されます。</summary>
      <returns>生成されたフォーム フィールド (偽造防止トークン)。</returns>
      <param name="salt">salt 値。空でない任意の文字列を指定できます。</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.AntiForgeryToken(System.String,System.String,System.String)">
      <summary>フォームの送信時に検証される隠しフォーム フィールド (偽造防止トークン) を生成します。フィールド値は、指定された salt 値、ドメイン、およびパスを使用して生成されます。</summary>
      <returns>生成されたフォーム フィールド (偽造防止トークン)。</returns>
      <param name="salt">salt 値。空でない任意の文字列を指定できます。</param>
      <param name="domain">アプリケーション ドメイン。</param>
      <param name="path">仮想パス。</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.AttributeEncode(System.Object)">
      <summary>指定された属性値を HTML エンコードされた文字列に変換します。</summary>
      <returns>HTML エンコードされた文字列。値パラメーターが null または空の場合、このメソッドは空の文字列を返します。</returns>
      <param name="value">エンコードするオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.AttributeEncode(System.String)">
      <summary>指定された属性値を HTML エンコードされた文字列に変換します。</summary>
      <returns>HTML エンコードされた文字列。値パラメーターが null または空の場合、このメソッドは空の文字列を返します。</returns>
      <param name="value">エンコードする文字列。</param>
    </member>
    <member name="P:System.Web.Mvc.HtmlHelper.ClientValidationEnabled">
      <summary>クライアント検証が有効であるかどうかを示す値を取得または設定します。</summary>
      <returns>クライアント検証が有効な場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.EnableClientValidation">
      <summary>ブラウザーでクライアント スクリプトを使用して実行される入力検証を有効にします。</summary>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.EnableClientValidation(System.Boolean)">
      <summary>クライアント検証を有効または無効にします。</summary>
      <param name="enabled">クライアント側の検証を有効にする場合は true。それ以外の場合は false。</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.EnableUnobtrusiveJavaScript">
      <summary>控えめな JavaScript を有効または無効にします。</summary>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.EnableUnobtrusiveJavaScript(System.Boolean)">
      <summary>控えめな JavaScript を有効または無効にします。</summary>
      <param name="enabled">控え目な JavaScript を有効にする場合は true。それ以外の場合は false。</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.Encode(System.Object)">
      <summary>指定されたオブジェクトの値を HTML エンコードされた文字列に変換します。</summary>
      <returns>HTML エンコードされた文字列。</returns>
      <param name="value">エンコードするオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.Encode(System.String)">
      <summary>指定された文字列を HTML エンコードされた文字列に変換します。</summary>
      <returns>HTML エンコードされた文字列。</returns>
      <param name="value">エンコードする文字列。</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.FormatValue(System.Object,System.String)">
      <summary>値の書式を設定します。</summary>
      <returns>書式適用済みの値。</returns>
      <param name="value">値。</param>
      <param name="format">形式文字列。</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.GenerateIdFromName(System.String)">
      <summary>指定された要素名を使用して、HTML 要素の ID を作成します。</summary>
      <returns>HTML 要素の ID。</returns>
      <param name="name">HTML 要素の名前。</param>
      <exception cref="T:System.ArgumentNullException">name パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.GenerateIdFromName(System.String,System.String)">
      <summary>指定された要素名、および名前に含まれるドットを置き換える文字列を使用して、HTML 要素の ID を作成します。</summary>
      <returns>HTML 要素の ID。</returns>
      <param name="name">HTML 要素の名前。</param>
      <param name="idAttributeDotReplacement">名前パラメーターに含まれるドット (.) を置き換える文字列。</param>
      <exception cref="T:System.ArgumentNullException">name パラメーターまたは idAttributeDotReplacement パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.GenerateLink(System.Web.Routing.RequestContext,System.Web.Routing.RouteCollection,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定されたアクション メソッドにリンクする HTML アンカー要素 (a 要素) を生成します。ユーザーは、通信プロトコル、ホストの名前、および URL フラグメントを指定できます。</summary>
      <returns>指定されたアクション メソッドにリンクする HTML 要素。</returns>
      <param name="requestContext">HTTP 要求のコンテキスト。</param>
      <param name="routeCollection">URL ルートのコレクション。</param>
      <param name="linkText">リンクに表示されるテキスト キャプション。</param>
      <param name="routeName">仮想パスを返すために使用されるルートの名前。</param>
      <param name="actionName">アクション メソッドの名前。</param>
      <param name="controllerName">コントローラーの名前。</param>
      <param name="protocol">通信プロトコル (HTTP、HTTPS など)。このパラメーターが null である場合、プロトコルの既定値は HTTP です。</param>
      <param name="hostName">ホストの名前。</param>
      <param name="fragment">フラグメント識別子。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。</param>
      <param name="htmlAttributes">この要素の HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.GenerateLink(System.Web.Routing.RequestContext,System.Web.Routing.RouteCollection,System.String,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定されたアクション メソッドにリンクする HTML アンカー要素 (a 要素) を生成します。</summary>
      <returns>指定されたアクション メソッドにリンクする HTML 要素。</returns>
      <param name="requestContext">HTTP 要求のコンテキスト。</param>
      <param name="routeCollection">URL ルートのコレクション。</param>
      <param name="linkText">リンクに表示されるテキスト キャプション。</param>
      <param name="routeName">仮想パスを返すために使用されるルートの名前。</param>
      <param name="actionName">アクション メソッドの名前。</param>
      <param name="controllerName">コントローラーの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。</param>
      <param name="htmlAttributes">この要素の HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.GenerateRouteLink(System.Web.Routing.RequestContext,System.Web.Routing.RouteCollection,System.String,System.String,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定された URL ルートにリンクする HTML アンカー要素 (a 要素) を生成します。ユーザーは、通信プロトコル、ホストの名前、および URL フラグメントを指定できます。</summary>
      <returns>指定された URL ルートにリンクする HTML 要素。</returns>
      <param name="requestContext">HTTP 要求のコンテキスト。</param>
      <param name="routeCollection">URL ルートのコレクション。</param>
      <param name="linkText">リンクに表示されるテキスト キャプション。</param>
      <param name="routeName">仮想パスを返すために使用されるルートの名前。</param>
      <param name="protocol">通信プロトコル (HTTP、HTTPS など)。このパラメーターが null である場合、プロトコルの既定値は HTTP です。</param>
      <param name="hostName">ホストの名前。</param>
      <param name="fragment">フラグメント識別子。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。</param>
      <param name="htmlAttributes">この要素の HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.GenerateRouteLink(System.Web.Routing.RequestContext,System.Web.Routing.RouteCollection,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定された URL ルートにリンクする HTML アンカー要素 (a 要素) を生成します。</summary>
      <returns>指定された URL ルートにリンクする HTML 要素。</returns>
      <param name="requestContext">HTTP 要求のコンテキスト。</param>
      <param name="routeCollection">URL ルートのコレクション。</param>
      <param name="linkText">リンクに表示されるテキスト キャプション。</param>
      <param name="routeName">仮想パスを返すために使用されるルートの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。</param>
      <param name="htmlAttributes">この要素の HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.GetFormMethodString(System.Web.Mvc.FormMethod)">
      <summary>フォームの入力を処理する HTTP メソッド (GET または POST) を文字列として返します。</summary>
      <returns>フォーム メソッドを表す文字列 ("get" または "post")。</returns>
      <param name="method">フォームを処理する HTTP メソッド。</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.GetInputTypeString(System.Web.Mvc.InputType)">
      <summary>HTML 入力コントロールのタイプを文字列として返します。</summary>
      <returns>入力の型を表す文字列 ("checkbox"、"hidden"、"password"、"radio"、または "text")。</returns>
      <param name="inputType">入力の型の列挙。</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.GetUnobtrusiveValidationAttributes(System.String)">
      <summary>指定された HTML の name 属性を使用して、控えめな JavaScript の検証属性のコレクションを取得します。</summary>
      <returns>控えめな JavaScript の検証属性のコレクション。</returns>
      <param name="name">HTML の name 属性。</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.GetUnobtrusiveValidationAttributes(System.String,System.Web.Mvc.ModelMetadata)">
      <summary>指定された HTML の name 属性とモデル メタデータを使用して、控えめな JavaScript の検証属性のコレクションを取得します。</summary>
      <returns>控えめな JavaScript の検証属性のコレクション。</returns>
      <param name="name">HTML の name 属性。</param>
      <param name="metadata">モデル メタデータ。</param>
    </member>
    <member name="P:System.Web.Mvc.HtmlHelper.Html5DateRenderingMode">
      <summary>HTML5 のデータ表示モードを取得または設定します。</summary>
      <returns>HTML5 のデータ表示モード。</returns>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.HttpMethodOverride(System.String)">
      <summary>クライアントで使用された指定の HTTP データ転送メソッドのオーバーライド メソッドを識別する非表示の input 要素を返します。</summary>
      <returns>クライアントが使用した HTTP データ転送メソッドを使用するオーバーライド メソッド。</returns>
      <param name="httpMethod">クライアントで使用された HTTP データ転送メソッド (DELETE、HEAD、または PUT)。</param>
      <exception cref="T:System.ArgumentNullException">httpVerb パラメーターが "PUT"、"DELETE"、または "HEAD" ではありません。</exception>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.HttpMethodOverride(System.Web.Mvc.HttpVerbs)">
      <summary>クライアントで使用された HTTP データ転送メソッドを表す指定の動詞のオーバーライド メソッドを識別する非表示の input 要素を返します。</summary>
      <returns>クライアントが使用した HTTP データ転送メソッドを表す動詞を使用するオーバーライド メソッド。</returns>
      <param name="httpVerb">クライアントが使用した HTTP データ転送メソッドを表す動詞。</param>
      <exception cref="T:System.ArgumentNullException">httpVerb パラメーターが "PUT"、"DELETE"、または "HEAD" ではありません。</exception>
    </member>
    <member name="P:System.Web.Mvc.HtmlHelper.IdAttributeDotReplacement">
      <summary>要素の ID 属性でピリオドの代わりに挿入する文字を取得または設定します。</summary>
      <returns>要素の ID 属性でピリオドの代わりに挿入する文字。</returns>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.ObjectToDictionary(System.Object)">
      <summary>関連付けられた値が含まれるキーとして各パブリック インスタンスのプロパティを辞書に追加することで、オブジェクトから辞書を作成します。派生型からのパブリック プロパティも公開します。これは通常、匿名型のオブジェクトで使用されます。</summary>
      <returns>プロパティの名前とプロパティの値で作成された辞書。</returns>
      <param name="value">変換されるオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.Raw(System.Object)">
      <summary>HTML エンコードされていないマークアップを返します。</summary>
      <returns>エンコードなしの HTML マークアップ。</returns>
      <param name="value">HTML マークアップ。</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.Raw(System.String)">
      <summary>HTML エンコードされていないマークアップを返します。</summary>
      <returns>エンコードなしの HTML マークアップ。</returns>
      <param name="value">HTML マークアップ。</param>
    </member>
    <member name="P:System.Web.Mvc.HtmlHelper.RouteCollection">
      <summary>アプリケーションのルートのコレクションを取得または設定します。</summary>
      <returns>アプリケーションのルートのコレクション。</returns>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.SetValidationMessageElement(System.String)">
      <summary>
        <see cref="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessage(System.Web.Mvc.HtmlHelper,System.String)" /> および他のオーバーロードによって生成される検証メッセージをラップするために使用される要素名を設定します。</summary>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.SetValidationSummaryMessageElement(System.String)">
      <summary>
        <see cref="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper)" /> および他のオーバーロード内のトップレベルのメッセージをラップするために使用される要素名を設定します。</summary>
    </member>
    <member name="P:System.Web.Mvc.HtmlHelper.UnobtrusiveJavaScriptEnabled">
      <summary>控えめな JavaScript が有効であるかどうかを示す値を取得または設定します。</summary>
      <returns>控えめな JavaScript が有効である場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="F:System.Web.Mvc.HtmlHelper.ValidationInputCssClassName">
      <summary>検証エラーが発生したときに入力フィールドのスタイルを設定するために使用される CSS クラスの名前。</summary>
    </member>
    <member name="F:System.Web.Mvc.HtmlHelper.ValidationInputValidCssClassName">
      <summary>入力が有効である場合に入力フィールドのスタイルを設定するために使用される CSS クラスの名前。</summary>
    </member>
    <member name="F:System.Web.Mvc.HtmlHelper.ValidationMessageCssClassName">
      <summary>検証エラーが発生したときにエラー メッセージのスタイルを設定するために使用される CSS クラスの名前。</summary>
    </member>
    <member name="P:System.Web.Mvc.HtmlHelper.ValidationMessageElement">
      <summary>
        <see cref="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessage(System.Web.Mvc.HtmlHelper,System.String)" /> および他のオーバーロードによって生成される検証メッセージをラップするために使用される要素名。</summary>
    </member>
    <member name="F:System.Web.Mvc.HtmlHelper.ValidationMessageValidCssClassName">
      <summary>入力が有効である場合に検証メッセージのスタイルを設定するために使用される CSS クラスの名前。</summary>
    </member>
    <member name="F:System.Web.Mvc.HtmlHelper.ValidationSummaryCssClassName">
      <summary>検証の概要エラー メッセージのスタイルを設定するために使用される CSS クラスの名前。</summary>
    </member>
    <member name="P:System.Web.Mvc.HtmlHelper.ValidationSummaryMessageElement">
      <summary>
        <see cref="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper)" /> および他のオーバーロード内のトップレベルのメッセージをラップするために使用される要素名。</summary>
    </member>
    <member name="F:System.Web.Mvc.HtmlHelper.ValidationSummaryValidCssClassName">
      <summary>入力が有効である場合に検証の概要のスタイルを設定するために使用される CSS クラスの名前。</summary>
    </member>
    <member name="P:System.Web.Mvc.HtmlHelper.ViewBag">
      <summary>ビュー バッグを取得します。</summary>
      <returns>ビュー バッグ。</returns>
    </member>
    <member name="P:System.Web.Mvc.HtmlHelper.ViewContext">
      <summary>ビューのコンテキスト情報を取得または設定します。</summary>
      <returns>ビューのコンテキスト。</returns>
    </member>
    <member name="P:System.Web.Mvc.HtmlHelper.ViewData">
      <summary>現在のビュー データ ディクショナリを取得します。</summary>
      <returns>ビュー データ ディクショナリ。</returns>
    </member>
    <member name="P:System.Web.Mvc.HtmlHelper.ViewDataContainer">
      <summary>ビュー データ コンテナーを取得または設定します。</summary>
      <returns>ビュー データ コンテナー。</returns>
    </member>
    <member name="T:System.Web.Mvc.HtmlHelper`1">
      <summary>厳密に型指定されたビュー内に HTML コントロールを表示するためのサポートを表します。</summary>
      <typeparam name="TModel">モデルの型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper`1.#ctor(System.Web.Mvc.ViewContext,System.Web.Mvc.IViewDataContainer)">
      <summary>指定されたビュー コンテキストおよびビュー データ コンテナーを使用して、<see cref="T:System.Web.Mvc.HtmlHelper`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="viewContext">ビュー コンテキスト。</param>
      <param name="viewDataContainer">ビュー データ コンテナー。</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper`1.#ctor(System.Web.Mvc.ViewContext,System.Web.Mvc.IViewDataContainer,System.Web.Routing.RouteCollection)">
      <summary>指定されたビュー コンテキスト、ビュー データ コンテナー、およびルート コレクションを使用して、<see cref="T:System.Web.Mvc.HtmlHelper`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="viewContext">ビュー コンテキスト。</param>
      <param name="viewDataContainer">ビュー データ コンテナー。</param>
      <param name="routeCollection">ルート コレクション。</param>
    </member>
    <member name="P:System.Web.Mvc.HtmlHelper`1.ViewBag">
      <summary>ビュー バッグを取得します。</summary>
      <returns>ビュー バッグ。</returns>
    </member>
    <member name="P:System.Web.Mvc.HtmlHelper`1.ViewData">
      <summary>厳密に型指定されたビュー データ ディクショナリを取得します。</summary>
      <returns>厳密に型指定されたビュー データ ディクショナリ。</returns>
    </member>
    <member name="T:System.Web.Mvc.HttpDeleteAttribute">
      <summary>アクション メソッドが HTTP DELETE 要求だけを処理するよう制限するために使用する属性を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpDeleteAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.HttpDeleteAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpDeleteAttribute.IsValidForRequest(System.Web.Mvc.ControllerContext,System.Reflection.MethodInfo)">
      <summary>アクション メソッド DELETE 要求が指定されたコントローラー コンテキストで有効かどうかを決定します。</summary>
      <returns>アクション メソッド要求が指定されたコントローラー コンテキストで有効の場合は true、それ以外の場合は false。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="methodInfo">アクション メソッドに関する情報。</param>
    </member>
    <member name="T:System.Web.Mvc.HttpFileCollectionValueProvider">
      <summary>HTTP ファイルのコレクションの値に使用する値プロバイダーを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpFileCollectionValueProvider.#ctor(System.Web.Mvc.ControllerContext)">
      <summary>
        <see cref="T:System.Web.Mvc.HttpFileCollectionValueProvider" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="controllerContext">現在の HTTP 要求に関する情報をカプセル化するオブジェクト。</param>
    </member>
    <member name="T:System.Web.Mvc.HttpFileCollectionValueProviderFactory">
      <summary>HTTP ファイル コレクションの値プロバイダー オブジェクトの新しいインスタンスを作成するクラスを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpFileCollectionValueProviderFactory.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.HttpFileCollectionValueProviderFactory" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpFileCollectionValueProviderFactory.GetValueProvider(System.Web.Mvc.ControllerContext)">
      <summary>指定されたコントローラー コンテキストの値プロバイダー オブジェクトを返します。</summary>
      <returns>HTTP ファイル コレクションの値プロバイダー。</returns>
      <param name="controllerContext">HTTP 要求に関する情報をカプセル化しているオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controllerContext" /> パラメーターが null です。</exception>
    </member>
    <member name="T:System.Web.Mvc.HttpGetAttribute">
      <summary>アクション メソッドが HTTP GET 要求だけを処理するよう制限するために使用する属性を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpGetAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.HttpGetAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpGetAttribute.IsValidForRequest(System.Web.Mvc.ControllerContext,System.Reflection.MethodInfo)">
      <summary>アクション メソッド GET 要求が指定されたコントローラー コンテキストで有効かどうかを決定します。</summary>
      <returns>アクション メソッド要求が指定されたコントローラー コンテキストで有効の場合は true、それ以外の場合は false。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="methodInfo">アクション メソッドに関する情報。</param>
    </member>
    <member name="T:System.Web.Mvc.HttpHeadAttribute">
      <summary>HTTP 要求が HTTP HEAD メソッドでなければならないことを指定します。</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpHeadAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.HttpHeadAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpHeadAttribute.IsValidForRequest(System.Web.Mvc.ControllerContext,System.Reflection.MethodInfo)">
      <summary>アクション メソッド要求が指定されたコントローラー コンテキストで有効かどうかを決定します。</summary>
      <returns>アクション メソッド要求が指定されたコントローラー コンテキストで有効の場合は true、それ以外の場合は false。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="methodInfo">アクション メソッドに関する情報。</param>
    </member>
    <member name="T:System.Web.Mvc.HttpNotFoundResult">
      <summary>要求されたリソースが見つからなかったことを示すために使用されるオブジェクトを定義します。</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpNotFoundResult.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.HttpNotFoundResult" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpNotFoundResult.#ctor(System.String)">
      <summary>ステータスの説明を使用して、<see cref="T:System.Web.Mvc.HttpNotFoundResult" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="statusDescription">ステータスの説明。</param>
    </member>
    <member name="T:System.Web.Mvc.HttpOptionsAttribute">
      <summary>メソッドが HTTP OPTIONS 要求だけを処理するよう制限するために使用する属性を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpOptionsAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.HttpOptionsAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpOptionsAttribute.IsValidForRequest(System.Web.Mvc.ControllerContext,System.Reflection.MethodInfo)">
      <summary>アクション メソッド要求が指定されたコントローラー コンテキストで有効かどうかを決定します。</summary>
      <returns>アクション メソッド要求が指定されたコントローラー コンテキストで有効の場合は true、それ以外の場合は false。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="methodInfo">アクション メソッドに関する情報。</param>
    </member>
    <member name="T:System.Web.Mvc.HttpPatchAttribute">
      <summary>アクション メソッドが HTTP PATCH 要求だけを処理するよう制限するために使用する属性を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpPatchAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.HttpPatchAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpPatchAttribute.IsValidForRequest(System.Web.Mvc.ControllerContext,System.Reflection.MethodInfo)">
      <summary>アクション メソッド要求が指定されたコントローラー コンテキストで有効かどうかを決定します。</summary>
      <returns>アクション メソッド要求が指定されたコントローラー コンテキストで有効の場合は true、それ以外の場合は false。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="methodInfo">アクション メソッドに関する情報。</param>
    </member>
    <member name="T:System.Web.Mvc.HttpPostAttribute">
      <summary>メソッドが HTTP POST 要求だけを処理するよう制限するために使用する属性を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpPostAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.HttpPostAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpPostAttribute.IsValidForRequest(System.Web.Mvc.ControllerContext,System.Reflection.MethodInfo)">
      <summary>アクション メソッド POST 要求が指定されたコントローラー コンテキストで有効かどうかを決定します。</summary>
      <returns>アクション メソッド要求が指定されたコントローラー コンテキストで有効の場合は true、それ以外の場合は false。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="methodInfo">アクション メソッドに関する情報。</param>
    </member>
    <member name="T:System.Web.Mvc.HttpPostedFileBaseModelBinder">
      <summary>ポストされたファイルにモデルをバインドします。</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpPostedFileBaseModelBinder.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.HttpPostedFileBaseModelBinder" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpPostedFileBaseModelBinder.BindModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>モデルをバインドします。</summary>
      <returns>バインドされた値。実装<see cref="M:System.Web.Mvc.IModelBinder.BindModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)" /></returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="bindingContext">バインディング コンテキスト。</param>
      <exception cref="T:System.ArgumentNullException">一方または両方のパラメーターが null です。</exception>
    </member>
    <member name="T:System.Web.Mvc.HttpPutAttribute">
      <summary>メソッドが HTTP PUT 要求だけを処理するよう制限するために使用する属性を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpPutAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.HttpPutAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpPutAttribute.IsValidForRequest(System.Web.Mvc.ControllerContext,System.Reflection.MethodInfo)">
      <summary>アクション メソッドの PUT 要求が指定されたコントローラー コンテキストで有効かどうかを決定します。</summary>
      <returns>アクション メソッド要求が指定されたコントローラー コンテキストで有効の場合は true、それ以外の場合は false。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="methodInfo">アクション メソッドに関する情報。</param>
    </member>
    <member name="T:System.Web.Mvc.HttpRequestExtensions">
      <summary>Web 要求中にクライアントが送信した HTTP 値を格納する <see cref="T:System.Web.HttpRequestBase" /> クラスを拡張します。</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpRequestExtensions.GetHttpMethodOverride(System.Web.HttpRequestBase)">
      <summary>クライアントによって使用された HTTP データ転送メソッド オーバーライドを取得します。</summary>
      <returns>クライアントで使用された HTTP データ転送メソッド オーバーライド。</returns>
      <param name="request">Web 要求中にクライアントが送信した HTTP 値を格納するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> パラメーターが null です。</exception>
      <exception cref="T:System.NotImplementedException">HTTP データ転送メソッド オーバーライドが実装されませんでした。</exception>
    </member>
    <member name="T:System.Web.Mvc.HttpStatusCodeResult">
      <summary>アクション結果を返す方法として特定の HTTP 応答状態コードおよび説明を提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpStatusCodeResult.#ctor(System.Int32)">
      <summary>ステータス コードを使用して、<see cref="T:System.Web.Mvc.HttpStatusCodeResult" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="statusCode">ステータス コード。</param>
    </member>
    <member name="M:System.Web.Mvc.HttpStatusCodeResult.#ctor(System.Int32,System.String)">
      <summary>状態コードおよびステータスの説明を使用して、<see cref="T:System.Web.Mvc.HttpStatusCodeResult" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="statusCode">ステータス コード。</param>
      <param name="statusDescription">ステータスの説明。</param>
    </member>
    <member name="M:System.Web.Mvc.HttpStatusCodeResult.#ctor(System.Net.HttpStatusCode)">
      <summary>ステータス コードを使用して、<see cref="T:System.Web.Mvc.HttpStatusCodeResult" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="statusCode">ステータス コード。</param>
    </member>
    <member name="M:System.Web.Mvc.HttpStatusCodeResult.#ctor(System.Net.HttpStatusCode,System.String)">
      <summary>状態コードおよびステータスの説明を使用して、<see cref="T:System.Web.Mvc.HttpStatusCodeResult" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="statusCode">ステータス コード。</param>
      <param name="statusDescription">ステータスの説明。</param>
    </member>
    <member name="M:System.Web.Mvc.HttpStatusCodeResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>
        <see cref="T:System.Web.Mvc.ActionResult" /> クラスを継承するカスタム型によって、アクション メソッドの結果の処理を有効にします。</summary>
      <param name="context">結果が実行されるコンテキスト。このコンテキスト情報には、コントローラー、HTTP コンテンツ、要求コンテキスト、ルート データなどが含まれます。</param>
    </member>
    <member name="P:System.Web.Mvc.HttpStatusCodeResult.StatusCode">
      <summary>HTTP 状態コードを取得します。</summary>
      <returns>HTTP ステータス コード。</returns>
    </member>
    <member name="P:System.Web.Mvc.HttpStatusCodeResult.StatusDescription">
      <summary>HTTP 状態の説明を取得します。</summary>
      <returns>HTTP 状態の説明。</returns>
    </member>
    <member name="T:System.Web.Mvc.HttpUnauthorizedResult">
      <summary>認証されていない HTTP 要求の結果を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpUnauthorizedResult.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.HttpUnauthorizedResult" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpUnauthorizedResult.#ctor(System.String)">
      <summary>ステータスの説明を使用して、<see cref="T:System.Web.Mvc.HttpUnauthorizedResult" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="statusDescription">ステータスの説明。</param>
    </member>
    <member name="T:System.Web.Mvc.HttpVerbs">
      <summary>HTTP 動詞を列挙します。</summary>
    </member>
    <member name="F:System.Web.Mvc.HttpVerbs.Delete">
      <summary>指定された URI の削除を要求します。</summary>
    </member>
    <member name="F:System.Web.Mvc.HttpVerbs.Get">
      <summary>要求の URI で識別される情報またはエンティティを取得します。</summary>
    </member>
    <member name="F:System.Web.Mvc.HttpVerbs.Head">
      <summary>要求の URI で識別される情報またはエンティティのメッセージ ヘッダーを取得します。</summary>
    </member>
    <member name="F:System.Web.Mvc.HttpVerbs.Options">
      <summary>要求の URI で識別される要求/応答チェーンで使用可能な通信オプションに関する情報の要求を表します。</summary>
    </member>
    <member name="F:System.Web.Mvc.HttpVerbs.Patch">
      <summary>要求エンティティで記述される一連の変更を要求の URI で識別されるリソースに適用することを要求します。</summary>
    </member>
    <member name="F:System.Web.Mvc.HttpVerbs.Post">
      <summary>新しいエンティティを URI への追加としてポストします。</summary>
    </member>
    <member name="F:System.Web.Mvc.HttpVerbs.Put">
      <summary>URI で識別されるエンティティを置き換えます。</summary>
    </member>
    <member name="T:System.Web.Mvc.IActionFilter">
      <summary>アクション フィルターで使用されるメソッドを定義します。</summary>
    </member>
    <member name="M:System.Web.Mvc.IActionFilter.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
      <summary>アクション メソッドの実行後に呼び出されます。</summary>
      <param name="filterContext">フィルター コンテキスト。</param>
    </member>
    <member name="M:System.Web.Mvc.IActionFilter.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
      <summary>アクション メソッドの実行前に呼び出されます。</summary>
      <param name="filterContext">フィルター コンテキスト。</param>
    </member>
    <member name="T:System.Web.Mvc.IActionInvoker">
      <summary>HTTP 要求への応答としてアクションを呼び出すために使用される、アクションの呼び出し元のコントラクトを定義します。</summary>
    </member>
    <member name="M:System.Web.Mvc.IActionInvoker.InvokeAction(System.Web.Mvc.ControllerContext,System.String)">
      <summary>指定されたコントローラー コンテキストを使用して、指定されたアクションを呼び出します。</summary>
      <returns>アクションが見つかった場合は true。それ以外の場合は false。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="actionName">アクションの名前。</param>
    </member>
    <member name="T:System.Web.Mvc.IActionInvokerFactory">
      <summary>現在の要求の <see cref="T:System.Web.Mvc.IActionInvoker" /> インスタンスを作成するために使用します。</summary>
    </member>
    <member name="M:System.Web.Mvc.IActionInvokerFactory.CreateInstance">
      <summary>現在の要求のアクション呼び出し元のインスタンスを作成します。</summary>
      <returns>作成された <see cref="T:System.Web.Mvc.IActionInvoker" />。</returns>
    </member>
    <member name="T:System.Web.Mvc.IAuthorizationFilter">
      <summary>承認フィルターに必要なメソッドを定義します。</summary>
    </member>
    <member name="M:System.Web.Mvc.IAuthorizationFilter.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
      <summary>承認が必要なときに呼び出されます。</summary>
      <param name="filterContext">フィルター コンテキスト。</param>
    </member>
    <member name="T:System.Web.Mvc.IClientValidatable">
      <summary>検証コントロールがクライアント検証をサポートするかどうかを実行時に ASP.NET MVC 検証フレームワークで調査する方法を提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.IClientValidatable.GetClientValidationRules(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>クラスで実装される場合、そのクラスのクライアント検証規則を返します。</summary>
      <returns>この検証コントロールのクライアント検証規則。</returns>
      <param name="metadata">モデル メタデータ。</param>
      <param name="context">コントローラー コンテキスト。</param>
    </member>
    <member name="T:System.Web.Mvc.IController">
      <summary>コントローラーに必要なメソッドを定義します。</summary>
    </member>
    <member name="M:System.Web.Mvc.IController.Execute(System.Web.Routing.RequestContext)">
      <summary>指定された要求コンテキストを実行します。</summary>
      <param name="requestContext">要求コンテキスト。</param>
    </member>
    <member name="T:System.Web.Mvc.IControllerActivator">
      <summary>依存関係の挿入を使用してコントローラーをどのようにインスタンス化するかを詳細に制御できます。</summary>
    </member>
    <member name="M:System.Web.Mvc.IControllerActivator.Create(System.Web.Routing.RequestContext,System.Type)">
      <summary>クラスで実装される場合、コントローラーを作成します。</summary>
      <returns>作成されたコントローラー。</returns>
      <param name="requestContext">要求コンテキスト。</param>
      <param name="controllerType">コントローラーの種類。</param>
    </member>
    <member name="T:System.Web.Mvc.IControllerFactory">
      <summary>コントローラー ファクトリに必要なメソッドを定義します。</summary>
    </member>
    <member name="M:System.Web.Mvc.IControllerFactory.CreateController(System.Web.Routing.RequestContext,System.String)">
      <summary>指定された要求コンテキストを使用して、指定されたコントローラーを作成します。</summary>
      <returns>コントローラー。</returns>
      <param name="requestContext">要求コンテキスト。</param>
      <param name="controllerName">コントローラーの名前。</param>
    </member>
    <member name="M:System.Web.Mvc.IControllerFactory.GetControllerSessionBehavior(System.Web.Routing.RequestContext,System.String)">
      <summary>コントローラーのセッション動作を取得します。</summary>
      <returns>コントローラーのセッション動作。</returns>
      <param name="requestContext">要求コンテキスト。</param>
      <param name="controllerName">取得するセッション動作のコントローラーの名前。</param>
    </member>
    <member name="M:System.Web.Mvc.IControllerFactory.ReleaseController(System.Web.Mvc.IController)">
      <summary>指定されたコントローラーを解放します。</summary>
      <param name="controller">コントローラー。</param>
    </member>
    <member name="T:System.Web.Mvc.IDependencyResolver">
      <summary>サービスの場所と依存関係解決を簡略化するメソッドを定義します。</summary>
    </member>
    <member name="M:System.Web.Mvc.IDependencyResolver.GetService(System.Type)">
      <summary>任意のオブジェクト作成をサポートする、単独で登録されているサービスを解決します。</summary>
      <returns>要求されたサービスまたはオブジェクト。</returns>
      <param name="serviceType">要求されたサービスまたはオブジェクトの型。</param>
    </member>
    <member name="M:System.Web.Mvc.IDependencyResolver.GetServices(System.Type)">
      <summary>複数登録されているサービスを解決します。</summary>
      <returns>要求されたサービス。</returns>
      <param name="serviceType">要求されたサービスの型。</param>
    </member>
    <member name="T:System.Web.Mvc.IEnumerableValueProvider">
      <summary>列挙可能にする機能を持つ特殊な <see cref="T:System.Web.Mvc.IValueProvider" /> を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.IEnumerableValueProvider.GetKeysFromPrefix(System.String)">
      <summary>プレフィックスからキーを取得します。</summary>
      <returns>キー。</returns>
      <param name="prefix">プレフィックス。</param>
    </member>
    <member name="T:System.Web.Mvc.IExceptionFilter">
      <summary>例外フィルターに必要なメソッドを定義します。</summary>
    </member>
    <member name="M:System.Web.Mvc.IExceptionFilter.OnException(System.Web.Mvc.ExceptionContext)">
      <summary>例外が発生したときに呼び出されます。</summary>
      <param name="filterContext">フィルター コンテキスト。</param>
    </member>
    <member name="T:System.Web.Mvc.IFilterProvider">
      <summary>フィルターを検索するためのインターフェイスを提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.IFilterProvider.GetFilters(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor)">
      <summary>サービス ロケーター内のすべての <see cref="T:System.Web.Mvc.IFilterProvider" /> インスタンスを格納している列挙子を返します。</summary>
      <returns>サービス ロケーター内のすべての <see cref="T:System.Web.Mvc.IFilterProvider" /> インスタンスを格納している列挙子。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="actionDescriptor">アクション記述子。</param>
    </member>
    <member name="T:System.Web.Mvc.IMetadataAware">
      <summary>公開される属性のインターフェイスを <see cref="T:System.Web.Mvc.AssociatedMetadataProvider" /> クラスに提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.IMetadataAware.OnMetadataCreated(System.Web.Mvc.ModelMetadata)">
      <summary>クラスで実装される場合、モデル メタデータ作成プロセスにメタデータを提供します。</summary>
      <param name="metadata">モデル メタデータ。</param>
    </member>
    <member name="T:System.Web.Mvc.IMethodInfoActionDescriptor">
      <summary>
        <see cref="P:System.Web.Mvc.IMethodInfoActionDescriptor.MethodInfo" /> を提供する <see cref="T:System.Web.Mvc.ActionDescriptor" /> 型のオプションのインターフェイス。</summary>
    </member>
    <member name="P:System.Web.Mvc.IMethodInfoActionDescriptor.MethodInfo">
      <summary>MethodInfo を取得する</summary>
    </member>
    <member name="T:System.Web.Mvc.IModelBinder">
      <summary>モデル バインダーに必要なメソッドを定義します。</summary>
    </member>
    <member name="M:System.Web.Mvc.IModelBinder.BindModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>指定されたコントローラー コンテキストおよびバインディング コンテキストを使用して、モデルを値にバインドします。</summary>
      <returns>バインドされた値。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="bindingContext">バインディング コンテキスト。</param>
    </member>
    <member name="T:System.Web.Mvc.IModelBinderProvider">
      <summary>
        <see cref="T:System.Web.Mvc.IModelBinder" /> インターフェイスを実装するクラスのモデル バインディングの動的実装を可能にするメソッドを定義します。</summary>
    </member>
    <member name="M:System.Web.Mvc.IModelBinderProvider.GetBinder(System.Type)">
      <summary>指定された型のモデル バインダーを返します。</summary>
      <returns>指定された型のモデル バインダー。</returns>
      <param name="modelType">モデルの型。</param>
    </member>
    <member name="T:System.Web.Mvc.IMvcFilter">
      <summary>フィルターの順序を指定するメンバー、および複数のフィルターが許可されるかどうかを定義します。</summary>
    </member>
    <member name="P:System.Web.Mvc.IMvcFilter.AllowMultiple">
      <summary>クラスで実装される場合、複数のフィルターが許可されるかどうかを示す値を取得または設定します。</summary>
      <returns>複数のフィルターが許可される場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Web.Mvc.IMvcFilter.Order">
      <summary>クラスで実装される場合、フィルターの順序を取得します。</summary>
      <returns>フィルターの順序。</returns>
    </member>
    <member name="T:System.Web.Mvc.InputType">
      <summary>入力コントロールの種類を列挙します。</summary>
    </member>
    <member name="F:System.Web.Mvc.InputType.CheckBox">
      <summary>チェック ボックス</summary>
    </member>
    <member name="F:System.Web.Mvc.InputType.Hidden">
      <summary>隠しフィールド</summary>
    </member>
    <member name="F:System.Web.Mvc.InputType.Password">
      <summary>パスワード ボックス</summary>
    </member>
    <member name="F:System.Web.Mvc.InputType.Radio">
      <summary>オプション ボタン</summary>
    </member>
    <member name="F:System.Web.Mvc.InputType.Text">
      <summary>テキスト ボックス</summary>
    </member>
    <member name="T:System.Web.Mvc.IResultFilter">
      <summary>結果フィルターに必要なメソッドを定義します。</summary>
    </member>
    <member name="M:System.Web.Mvc.IResultFilter.OnResultExecuted(System.Web.Mvc.ResultExecutedContext)">
      <summary>アクション結果の実行後に呼び出されます。</summary>
      <param name="filterContext">フィルター コンテキスト。</param>
    </member>
    <member name="M:System.Web.Mvc.IResultFilter.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)">
      <summary>アクション結果の実行前に呼び出されます。</summary>
      <param name="filterContext">フィルター コンテキスト。</param>
    </member>
    <member name="T:System.Web.Mvc.IRouteWithArea">
      <summary>ASP.NET MVC アプリケーションの領域にルートを関連付けます。</summary>
    </member>
    <member name="P:System.Web.Mvc.IRouteWithArea.Area">
      <summary>ルートを関連付ける領域の名前を取得します。</summary>
      <returns>ルートを関連付ける領域の名前。</returns>
    </member>
    <member name="T:System.Web.Mvc.ITempDataProvider">
      <summary>次の要求で表示されるデータを格納する一時データ プロバイダーのコントラクトを定義します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ITempDataProvider.LoadTempData(System.Web.Mvc.ControllerContext)">
      <summary>一時データを読み込みます。</summary>
      <returns>一時データ。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
    </member>
    <member name="M:System.Web.Mvc.ITempDataProvider.SaveTempData(System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>一時データを保存します。</summary>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="values">値。</param>
    </member>
    <member name="T:System.Web.Mvc.ITempDataProviderFactory">
      <summary>コントローラーの <see cref="T:System.Web.Mvc.ITempDataProvider" /> インスタンスを作成するために使用します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ITempDataProviderFactory.CreateInstance">
      <summary>コントローラーの <see cref="T:System.Web.Mvc.ITempDataProvider" /> のインスタンスを作成します。</summary>
      <returns>作成された <see cref="T:System.Web.Mvc.ITempDataProvider" />。</returns>
    </member>
    <member name="T:System.Web.Mvc.IUnvalidatedValueProvider">
      <summary>要求の検証をスキップできる <see cref="T:System.Web.Mvc.IValueProvider" /> インターフェイスを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.IUnvalidatedValueProvider.GetValue(System.String,System.Boolean)">
      <summary>指定されたキーに関連付けられているオブジェクトの値を取得します。</summary>
      <returns>指定したキーのオブジェクトの値。</returns>
      <param name="key">キー。</param>
      <param name="skipValidation">検証をスキップする必要がある場合は true。それ以外の場合は false。</param>
    </member>
    <member name="T:System.Web.Mvc.IValueProvider">
      <summary>ASP.NET MVC の値プロバイダーに必要なメソッドを定義します。</summary>
    </member>
    <member name="M:System.Web.Mvc.IValueProvider.ContainsPrefix(System.String)">
      <summary>指定したプレフィックスがコレクションに含まれているかどうかを判断します。</summary>
      <returns>指定したプレフィックスがコレクションに含まれている場合は true。それ以外の場合は false。</returns>
      <param name="prefix">検索対象のプレフィックス。</param>
    </member>
    <member name="M:System.Web.Mvc.IValueProvider.GetValue(System.String)">
      <summary>指定したキーを使用して値オブジェクトを取得します。</summary>
      <returns>指定されたキーのオブジェクトの値。キーが見つからない場合は null。</returns>
      <param name="key">取得する値オブジェクトのキー。</param>
    </member>
    <member name="T:System.Web.Mvc.IView">
      <summary>ビューに必要なメソッドを定義します。</summary>
    </member>
    <member name="M:System.Web.Mvc.IView.Render(System.Web.Mvc.ViewContext,System.IO.TextWriter)">
      <summary>指定されたライター オブジェクトを使用して、指定されたビュー コンテキストを表示します。</summary>
      <param name="viewContext">ビュー コンテキスト。</param>
      <param name="writer">ライター オブジェクト。</param>
    </member>
    <member name="T:System.Web.Mvc.IViewDataContainer">
      <summary>ビュー データ ディクショナリに必要なメソッドを定義します。</summary>
    </member>
    <member name="P:System.Web.Mvc.IViewDataContainer.ViewData">
      <summary>ビュー データ ディクショナリを取得または設定します。</summary>
      <returns>ビュー データ ディクショナリ。</returns>
    </member>
    <member name="T:System.Web.Mvc.IViewEngine">
      <summary>ビュー エンジンに必要なメソッドを定義します。</summary>
    </member>
    <member name="M:System.Web.Mvc.IViewEngine.FindPartialView(System.Web.Mvc.ControllerContext,System.String,System.Boolean)">
      <summary>指定されたコントローラー コンテキストを使用して指定された部分ビューを検索します。</summary>
      <returns>部分ビュー。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="partialViewName">部分ビューの名前。</param>
      <param name="useCache">キャッシュされたビューが存在するときに、ビュー エンジンがそのキャッシュされたビューを返すように指定する場合は true。それ以外の場合は false。</param>
    </member>
    <member name="M:System.Web.Mvc.IViewEngine.FindView(System.Web.Mvc.ControllerContext,System.String,System.String,System.Boolean)">
      <summary>指定されたコントローラー コンテキストを使用して、指定されたビューを検索します。</summary>
      <returns>ページ ビュー。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="viewName">ビューの名前。</param>
      <param name="masterName">マスターの名前。</param>
      <param name="useCache">キャッシュされたビューが存在するときに、ビュー エンジンがそのキャッシュされたビューを返すように指定する場合は true。それ以外の場合は false。</param>
    </member>
    <member name="M:System.Web.Mvc.IViewEngine.ReleaseView(System.Web.Mvc.ControllerContext,System.Web.Mvc.IView)">
      <summary>指定されたコントローラー コンテキストを使用して、指定されたビューを解放します。</summary>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="view">ビュー。</param>
    </member>
    <member name="T:System.Web.Mvc.IViewLocationCache">
      <summary>ビューの場所をメモリにキャッシュするために必要なメソッドを定義します。</summary>
    </member>
    <member name="M:System.Web.Mvc.IViewLocationCache.GetViewLocation(System.Web.HttpContextBase,System.String)">
      <summary>指定された HTTP コンテキストおよびキャッシュ キーを使用して、ビューの場所を取得します。</summary>
      <returns>ビューの場所。</returns>
      <param name="httpContext">HTTP コンテキスト。</param>
      <param name="key">キャッシュ キー。</param>
    </member>
    <member name="M:System.Web.Mvc.IViewLocationCache.InsertViewLocation(System.Web.HttpContextBase,System.String,System.String)">
      <summary>指定された HTTP コンテキストおよびキャッシュ キーを使用して、指定されたビューの場所をキャッシュに挿入します。</summary>
      <param name="httpContext">HTTP コンテキスト。</param>
      <param name="key">キャッシュ キー。</param>
      <param name="virtualPath">仮想パス。</param>
    </member>
    <member name="T:System.Web.Mvc.IViewPageActivator">
      <summary>依存関係の挿入を使用してビュー ページをどのように作成するかを詳細に制御できます。</summary>
    </member>
    <member name="M:System.Web.Mvc.IViewPageActivator.Create(System.Web.Mvc.ControllerContext,System.Type)">
      <summary>依存関係の挿入を使用してビュー ページをどのように作成するかを詳細に制御できます。</summary>
      <returns>作成されたビュー ページ。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="type">コントローラーの種類。</param>
    </member>
    <member name="T:System.Web.Mvc.JavaScriptResult">
      <summary>応答に JavaScript コンテンツを送信します。</summary>
    </member>
    <member name="M:System.Web.Mvc.JavaScriptResult.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.JavaScriptResult" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.JavaScriptResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>
        <see cref="T:System.Web.Mvc.ActionResult" /> クラスを継承するカスタム型によって、アクション メソッドの結果の処理を有効にします。</summary>
      <param name="context">結果が実行されるコンテキスト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> パラメーターが null です。</exception>
    </member>
    <member name="P:System.Web.Mvc.JavaScriptResult.Script">
      <summary>スクリプトを取得または設定します。</summary>
      <returns>スクリプト。</returns>
    </member>
    <member name="T:System.Web.Mvc.JQueryFormValueProvider">
      <summary>JQuery フォーム値プロバイダーは、要求フォーム内の JQuery 形式のデータを処理するために使用されます。</summary>
    </member>
    <member name="M:System.Web.Mvc.JQueryFormValueProvider.#ctor(System.Web.Mvc.ControllerContext)">
      <summary>JQuery フォーム ValueProvider の新しいインスタンスを構築する</summary>
      <param name="controllerContext">ValueProvider が機能するコンテキスト。</param>
    </member>
    <member name="T:System.Web.Mvc.JQueryFormValueProviderFactory">
      <summary>JQuery フォーム データを処理するために必要な ValueProvider を提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.JQueryFormValueProviderFactory.#ctor">
      <summary>JQuery フォーム ValueProvider を提供するファクトリの新しいインスタンスを構築します。</summary>
    </member>
    <member name="M:System.Web.Mvc.JQueryFormValueProviderFactory.GetValueProvider(System.Web.Mvc.ControllerContext)">
      <summary>適切な ValueProvider を返します。</summary>
      <param name="controllerContext">ValueProvider が機能するコンテキスト。</param>
    </member>
    <member name="T:System.Web.Mvc.JsonRequestBehavior">
      <summary>クライアントからの HTTP GET 要求を許可するかどうかを指定します。</summary>
    </member>
    <member name="F:System.Web.Mvc.JsonRequestBehavior.AllowGet">
      <summary>クライアントからの HTTP GET 要求を許可します。</summary>
    </member>
    <member name="F:System.Web.Mvc.JsonRequestBehavior.DenyGet">
      <summary>クライアントからの HTTP GET 要求を許可しません。</summary>
    </member>
    <member name="T:System.Web.Mvc.JsonResult">
      <summary>JSON 形式のコンテンツを応答に送信するために使用されるクラスを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.JsonResult.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.JsonResult" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.JsonResult.ContentEncoding">
      <summary>コンテンツ エンコーディングを取得または設定します。</summary>
      <returns>コンテンツ エンコーディング。</returns>
    </member>
    <member name="P:System.Web.Mvc.JsonResult.ContentType">
      <summary>コンテンツ タイプを取得または設定します。</summary>
      <returns>コンテンツ タイプ。</returns>
    </member>
    <member name="P:System.Web.Mvc.JsonResult.Data">
      <summary>データを取得または設定します。</summary>
      <returns>データ。</returns>
    </member>
    <member name="M:System.Web.Mvc.JsonResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>
        <see cref="T:System.Web.Mvc.ActionResult" /> クラスを継承するカスタム型によって、アクション メソッドの結果の処理を有効にします。</summary>
      <param name="context">結果が実行されるコンテキスト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> パラメーターが null です。</exception>
    </member>
    <member name="P:System.Web.Mvc.JsonResult.JsonRequestBehavior">
      <summary>クライアントからの HTTP GET 要求を許可するかどうかを示す値を取得または設定します。</summary>
      <returns>クライアントからの HTTP GET 要求を許可するかどうかを示す値。</returns>
    </member>
    <member name="P:System.Web.Mvc.JsonResult.MaxJsonLength">
      <summary>データの最大長を取得または設定します。</summary>
      <returns>データの最大長。</returns>
    </member>
    <member name="P:System.Web.Mvc.JsonResult.RecursionLimit">
      <summary>再帰の制限を取得または設定します。</summary>
      <returns>再帰の制限。</returns>
    </member>
    <member name="T:System.Web.Mvc.JsonValueProviderFactory">
      <summary>アクション メソッドを有効にして、JSON 形式のテキストを送受信し、アクション メソッドのパラメーターに対して JSON テキストのモデル バインディングを行います。</summary>
    </member>
    <member name="M:System.Web.Mvc.JsonValueProviderFactory.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.JsonValueProviderFactory" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.JsonValueProviderFactory.GetValueProvider(System.Web.Mvc.ControllerContext)">
      <summary>指定されたコントローラー コンテキストの JSON 値プロバイダー オブジェクトを返します。</summary>
      <returns>指定されたコントローラー コンテキストの JSON 値プロバイダー オブジェクト。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
    </member>
    <member name="T:System.Web.Mvc.LinqBinaryModelBinder">
      <summary>ブラウザー要求を LINQ <see cref="T:System.Data.Linq.Binary" /> オブジェクトに対応付けます。</summary>
    </member>
    <member name="M:System.Web.Mvc.LinqBinaryModelBinder.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.LinqBinaryModelBinder" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.LinqBinaryModelBinder.BindModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>指定されたコントローラー コンテキストおよびバインディング コンテキストを使用して、モデルをバインドします。</summary>
      <returns>バインドされたデータ オブジェクト。モデルをバインドできない場合、このメソッドは null. を返します。実装<see cref="M:System.Web.Mvc.IModelBinder.BindModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)" />.</returns>
      <param name="controllerContext">コントローラーが機能するコンテキスト。このコンテキスト情報には、コントローラー、HTTP コンテンツ、要求コンテキスト、ルート データなどが含まれます。</param>
      <param name="bindingContext">モデルをバインドするコンテキスト。このコンテキストには、モデル オブジェクト、モデル名、モデルの型、プロパティ フィルター、値プロバイダーなどの情報が含まれます。</param>
    </member>
    <member name="T:System.Web.Mvc.MaxLengthAttributeAdapter">
      <summary>MaxLengthAttribute 属性のアダプターを提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.MaxLengthAttributeAdapter.#ctor(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext,System.ComponentModel.DataAnnotations.MaxLengthAttribute)">
      <summary>MaxLengthAttribute クラスの新しいインスタンスを初期化します。</summary>
      <param name="metadata">モデル メタデータ。</param>
      <param name="context">コントローラー コンテキスト。</param>
      <param name="attribute">MaxLength 属性。</param>
    </member>
    <member name="M:System.Web.Mvc.MaxLengthAttributeAdapter.GetClientValidationRules">
      <summary>最大長チェックに対するクライアント検証規則の一覧を取得します。</summary>
      <returns>チェックに対するクライアント検証規則のリスト。</returns>
    </member>
    <member name="T:System.Web.Mvc.MinLengthAttributeAdapter">
      <summary>MinLengthAttribute 属性のアダプターを提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.MinLengthAttributeAdapter.#ctor(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext,System.ComponentModel.DataAnnotations.MinLengthAttribute)">
      <summary>MinLengthAttribute クラスの新しいインスタンスを初期化します。</summary>
      <param name="metadata">モデル メタデータ。</param>
      <param name="context">コントローラー コンテキスト。</param>
      <param name="attribute">最小長の属性。</param>
    </member>
    <member name="M:System.Web.Mvc.MinLengthAttributeAdapter.GetClientValidationRules">
      <summary>最小長チェックに対するクライアント検証規則の一覧を取得します。</summary>
      <returns>チェックに対するクライアント検証規則のリスト。</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelBinderAttribute">
      <summary>モデルの型をモデル ビルダーの型に関連付けるために使用される属性を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderAttribute.#ctor(System.Type)">
      <summary>
        <see cref="T:System.Web.Mvc.ModelBinderAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="binderType">バインダーの型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="binderType" /> パラメーターが null です。</exception>
    </member>
    <member name="P:System.Web.Mvc.ModelBinderAttribute.BinderType">
      <summary>バインダーの型を取得または設定します。</summary>
      <returns>バインダーの型。</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderAttribute.GetBinder">
      <summary>モデル バインダーのインスタンスを取得します。</summary>
      <returns>
        <see cref="T:System.Web.Mvc.IModelBinder" /> インターフェイスを実装するオブジェクトへの参照。</returns>
      <exception cref="T:System.InvalidOperationException">モデル バインダーのインスタンスの作成中に、エラーが発生しました。</exception>
    </member>
    <member name="T:System.Web.Mvc.ModelBinderDictionary">
      <summary>アプリケーションのすべてのモデル バインダーをバインダーの型で並べ替えたリストを格納するクラスを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ModelBinderDictionary" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.Add(System.Collections.Generic.KeyValuePair{System.Type,System.Web.Mvc.IModelBinder})">
      <summary>指定された項目をモデル バインダー ディクショナリに追加します。</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" /> インスタンスに追加するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> オブジェクトが読み取り専用です。</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.Add(System.Type,System.Web.Mvc.IModelBinder)">
      <summary>指定されたキーを使用して、指定された項目をモデル バインダー ディクショナリに追加します。</summary>
      <param name="key">追加する要素のキー。</param>
      <param name="value">追加する要素の値。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> オブジェクトが読み取り専用です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">同じキーを持つ要素が、<see cref="T:System.Collections.Generic.IDictionary`2" /> オブジェクトに既に存在します。</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.Clear">
      <summary>モデル バインダー ディクショナリからすべての項目を削除します。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> オブジェクトが読み取り専用です。</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.Contains(System.Collections.Generic.KeyValuePair{System.Type,System.Web.Mvc.IModelBinder})">
      <summary>指定された値がモデル バインダー ディクショナリに含まれているかどうかを判断します。</summary>
      <returns>
        <paramref name="item" /> がモデル バインダー ディクショナリ内に存在する場合は true。それ以外の場合は false。</returns>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" /> オブジェクト内で検索するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.ContainsKey(System.Type)">
      <summary>指定されたキーを持つ要素がモデル バインダー ディクショナリに含まれているかどうかを判断します。</summary>
      <returns>指定されたキーを持つ要素がモデル バインダー ディクショナリに格納されている場合は true。それ以外の場合は false。</returns>
      <param name="key">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> オブジェクト内で検索されるキー。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.Type,System.Web.Mvc.IModelBinder}[],System.Int32)">
      <summary>指定されたインデックスを開始位置として、モデル バインダー ディクショナリの要素を配列にコピーします。</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.ICollection`1" /> から要素がコピーされる 1 次元の配列。この配列には、0 から始まるインデックスを使用する必要があります。</param>
      <param name="arrayIndex">コピーの開始位置となる、<paramref name="array" /> の 0 から始まるインデックス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> が多次元です。または<paramref name="arrayIndex" /> が <paramref name="array" /> の長さ以上です。またはコピー元の <see cref="T:System.Collections.Generic.ICollection`1" /> オブジェクトの要素数が、<paramref name="arrayIndex" /> からコピー先の配列の末尾までに格納できる数を超えています。 または<paramref name="T" /> 型が、コピー先の配列の型に自動的にキャストできません。</exception>
    </member>
    <member name="P:System.Web.Mvc.ModelBinderDictionary.Count">
      <summary>モデル バインダー ディクショナリに含まれる要素の数を取得します。</summary>
      <returns>モデル バインダー ディクショナリに含まれる要素の数。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBinderDictionary.DefaultBinder">
      <summary>既定のモデル バインダーを取得または設定します。</summary>
      <returns>既定のモデル バインダー。</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.GetBinder(System.Type)">
      <summary>指定された型のモデル バインダーを取得します。</summary>
      <returns>モデル バインダー。</returns>
      <param name="modelType">取得するモデルの型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="modelType" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.GetBinder(System.Type,System.Boolean)">
      <summary>指定された型のモデル バインダーまたは既定のモデル バインダーを取得します。</summary>
      <returns>モデル バインダー。</returns>
      <param name="modelType">取得するモデルの型。</param>
      <param name="fallbackToDefault">既定のモデル バインダーを取得する場合は true。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="modelType" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.GetEnumerator">
      <summary>コレクションを反復処理するために使用できる列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBinderDictionary.IsReadOnly">
      <summary>モデル バインダー ディクショナリが読み取り専用かどうかを示す値を取得します。</summary>
      <returns>モデル バインダー ディクショナリが読み取り専用である場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBinderDictionary.Item(System.Type)">
      <summary>
        <see cref="T:System.Web.Mvc.IModelBinder" /> インターフェイスを実装するオブジェクト内で、指定されたキーを取得または設定します。</summary>
      <returns>指定された項目のキー。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBinderDictionary.Keys">
      <summary>モデル バインダー ディクショナリ内のキーが格納されているコレクションを取得します。</summary>
      <returns>モデル バインダー ディクショナリ内のキーが格納されているコレクション。</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.Remove(System.Collections.Generic.KeyValuePair{System.Type,System.Web.Mvc.IModelBinder})">
      <summary>モデル バインダー ディクショナリ内で最初に見つかった指定の要素を削除します。</summary>
      <returns>
        <paramref name="item" /> がモデル バインダー ディクショナリから正常に削除された場合は true。それ以外の場合は false。このメソッドは、<paramref name="item" /> がモデル バインダー ディクショナリ内で見つからない場合にも false を返します。</returns>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" /> オブジェクトから削除するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> オブジェクトが読み取り専用です。</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.Remove(System.Type)">
      <summary>指定したキーを持つ要素をモデル バインダー ディクショナリから削除します。</summary>
      <returns>要素が正常に削除された場合は true。それ以外の場合は false。このメソッドは、<paramref name="key" /> がモデル バインダー ディクショナリ内で見つからない場合にも false を返します。</returns>
      <param name="key">削除する要素のキー。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> オブジェクトが読み取り専用です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションの反復処理に使用できる列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.TryGetValue(System.Type,System.Web.Mvc.IModelBinder@)">
      <summary>指定されたキーに関連付けられている値を取得します。</summary>
      <returns>指定されたキーを持つ要素が <see cref="T:System.Collections.Generic.IDictionary`2" /> を実装するオブジェクトに格納されている場合は true。それ以外の場合は false。</returns>
      <param name="key">取得する値のキー。</param>
      <param name="value">このメソッドから制御が戻るとき、指定されたキーが見つかった場合はそのキーに関連付けられている値。それ以外の場合は <paramref name="value" /> パラメーターの型の既定値。このパラメーターは初期化せずに渡されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が null です。</exception>
    </member>
    <member name="P:System.Web.Mvc.ModelBinderDictionary.Values">
      <summary>モデル バインダー ディクショナリ内の値が格納されているコレクションを取得します。</summary>
      <returns>モデル バインダー ディクショナリ内の値が格納されているコレクション。</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelBinderProviderCollection">
      <summary>モデル バインダー プロバイダーのコレクションを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderProviderCollection.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ModelBinderProviderCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderProviderCollection.#ctor(System.Collections.Generic.IList{System.Web.Mvc.IModelBinderProvider})">
      <summary>モデル バインダー プロバイダーの一覧を使用して、<see cref="T:System.Web.Mvc.ModelBinderProviderCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="list">モデル バインダー プロバイダーの一覧。</param>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderProviderCollection.ClearItems">
      <summary>コレクションからすべての要素を削除します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderProviderCollection.GetBinder(System.Type)">
      <summary>指定された型のモデル バインダーを返します。</summary>
      <returns>指定された型のモデル バインダー。</returns>
      <param name="modelType">モデル バインダーの型。</param>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderProviderCollection.InsertItem(System.Int32,System.Web.Mvc.IModelBinderProvider)">
      <summary>指定したインデックス位置にある ModelBinderProviderCollection にモデル バインダー プロバイダーを挿入します。</summary>
      <param name="index">インデックス。</param>
      <param name="item">モデル バインダー プロバイダー。</param>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderProviderCollection.RemoveItem(System.Int32)">
      <summary>コレクションの指定されたインデックス位置にある要素を削除します。</summary>
      <param name="index">削除する要素の 0 から始まるインデックス。</param>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderProviderCollection.SetItem(System.Int32,System.Web.Mvc.IModelBinderProvider)">
      <summary>指定したインデックス位置にあるモデル バインダー プロバイダー要素を置き換えます。</summary>
      <param name="index">インデックス。</param>
      <param name="item">モデル バインダー プロバイダー。</param>
    </member>
    <member name="T:System.Web.Mvc.ModelBinderProviders">
      <summary>モデル バインダー プロバイダーのコンテナーを提供します。</summary>
    </member>
    <member name="P:System.Web.Mvc.ModelBinderProviders.BinderProviders">
      <summary>依存関係の挿入を使用しないアプリケーションのモデル バインダー プロバイダーの登録ポイントを提供します。</summary>
      <returns>モデル バインダー プロバイダーのコレクション。</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelBinders">
      <summary>アプリケーションのモデル バインダーへのグローバル アクセスを提供します。</summary>
    </member>
    <member name="P:System.Web.Mvc.ModelBinders.Binders">
      <summary>アプリケーションのモデル バインダーを取得します。</summary>
      <returns>アプリケーションのモデル バインダー。</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelBindingContext">
      <summary>モデル バインダーが動作するコンテキストを提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelBindingContext.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ModelBindingContext" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelBindingContext.#ctor(System.Web.Mvc.ModelBindingContext)">
      <summary>バインディング コンテキストを使用して、<see cref="T:System.Web.Mvc.ModelBindingContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="bindingContext">バインディング コンテキスト。</param>
    </member>
    <member name="P:System.Web.Mvc.ModelBindingContext.FallbackToEmptyPrefix">
      <summary>バインダーが空のプレフィックスを使用する必要があるかどうかを示す値を取得または設定します。</summary>
      <returns>バインダーが空のプレフィックスを使用する必要がある場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBindingContext.Model">
      <summary>モデルを取得または設定します。</summary>
      <returns>モデル。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBindingContext.ModelMetadata">
      <summary>モデル メタデータを取得または設定します。</summary>
      <returns>モデル メタデータ。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBindingContext.ModelName">
      <summary>モデルの名前を取得または設定します。</summary>
      <returns>モデルの名前。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBindingContext.ModelState">
      <summary>モデルの状態を取得または設定します。</summary>
      <returns>モデルの状態。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBindingContext.ModelType">
      <summary>モデルの型を取得または設定します。</summary>
      <returns>モデルの型。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBindingContext.PropertyFilter">
      <summary>プロパティ フィルターを取得または設定します。</summary>
      <returns>プロパティ フィルター。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBindingContext.PropertyMetadata">
      <summary>プロパティのメタデータを取得します。</summary>
      <returns>プロパティのメタデータ。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBindingContext.ValueProvider">
      <summary>値プロバイダーを取得または設定します。</summary>
      <returns>値プロバイダー。</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelError">
      <summary>モデル バインディング時に発生するエラーを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelError.#ctor(System.Exception)">
      <summary>指定された例外を使用して、<see cref="T:System.Web.Mvc.ModelError" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="exception">例外。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelError.#ctor(System.Exception,System.String)">
      <summary>指定された例外およびエラー メッセージを使用して、<see cref="T:System.Web.Mvc.ModelError" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="exception">例外。</param>
      <param name="errorMessage">エラー メッセージ。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelError.#ctor(System.String)">
      <summary>指定されたエラー メッセージを使用して、<see cref="T:System.Web.Mvc.ModelError" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="errorMessage">エラー メッセージ。</param>
    </member>
    <member name="P:System.Web.Mvc.ModelError.ErrorMessage">
      <summary>エラー メッセージを取得または設定します。</summary>
      <returns>エラー メッセージ。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelError.Exception">
      <summary>例外オブジェクトを取得または設定します。</summary>
      <returns>例外オブジェクト。</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelErrorCollection">
      <summary>
        <see cref="T:System.Web.Mvc.ModelError" /> のインスタンスのコレクション。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelErrorCollection.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ModelErrorCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelErrorCollection.Add(System.Exception)">
      <summary>指定された <see cref="T:System.Exception" /> オブジェクトをモデル エラー コレクションに追加します。</summary>
      <param name="exception">例外。</param>
    </member>
    <member name="M:System.Web.Mvc.ModelErrorCollection.Add(System.String)">
      <summary>指定されたエラー メッセージをモデル エラー コレクションに追加します。</summary>
      <param name="errorMessage">エラー メッセージ。</param>
    </member>
    <member name="T:System.Web.Mvc.ModelMetadata">
      <summary>データ モデルの共通のメタデータ、<see cref="T:System.Web.Mvc.ModelMetadataProvider" /> クラス、および <see cref="T:System.Web.Mvc.ModelValidator" /> クラスのコンテナーを提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadata.#ctor(System.Web.Mvc.ModelMetadataProvider,System.Type,System.Func{System.Object},System.Type,System.String)">
      <summary>
        <see cref="T:System.Web.Mvc.ModelMetadata" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="provider">プロバイダー。</param>
      <param name="containerType">コンテナーの型。</param>
      <param name="modelAccessor">モデル アクセサー。</param>
      <param name="modelType">モデルの型。</param>
      <param name="propertyName">モデルの名前。</param>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.AdditionalValues">
      <summary>モデルについてのその他のメタデータを格納しているディクショナリを取得します。</summary>
      <returns>モデルについてのその他のメタデータを格納しているディクショナリ。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.Container">
      <summary>モデルのコンテナー オブジェクトへの参照。モデルがプロパティを表す場合は null 以外です。</summary>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.ContainerType">
      <summary>モデルのコンテナーの型を取得または設定します。</summary>
      <returns>モデルのコンテナーの型。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.ConvertEmptyStringToNull">
      <summary>フォームからポストバックされる空の文字列を null に変換するかどうかを示す値を取得または設定します。</summary>
      <returns>フォームからポストバックされる空の文字列が null に変換される場合は true。それ以外の場合は false。既定値は、true です。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.DataTypeName">
      <summary>データ型についてのメタ情報を取得または設定します。</summary>
      <returns>データ型についてのメタ情報。</returns>
    </member>
    <member name="F:System.Web.Mvc.ModelMetadata.DefaultOrder">
      <summary>既定の順序の値 (10000)。</summary>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.Description">
      <summary>モデルの説明を取得または設定します。</summary>
      <returns>モデルの説明。既定値は null です。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.DisplayFormatString">
      <summary>モデルの表示形式文字列を取得または設定します。</summary>
      <returns>モデルの表示形式文字列。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.DisplayName">
      <summary>モデルの表示名を取得または設定します。</summary>
      <returns>モデルの表示名。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.EditFormatString">
      <summary>モデルの編集形式文字列を取得または設定します。</summary>
      <returns>モデルの編集形式文字列。</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadata.FromLambdaExpression``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Web.Mvc.ViewDataDictionary{``0})">
      <summary>モデルの <see cref="T:System.Linq.Expressions.Expression" /> パラメーターからメタデータを返します。</summary>
      <returns>メタデータ。</returns>
      <param name="expression">モデルを識別する式。</param>
      <param name="viewData">ビュー データ ディクショナリ。</param>
      <typeparam name="TParameter">パラメーターの型。</typeparam>
      <typeparam name="TValue">値の型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadata.FromStringExpression(System.String,System.Web.Mvc.ViewDataDictionary)">
      <summary>モデルの式パラメーターからメタデータを取得します。</summary>
      <returns>モデルのメタデータ。</returns>
      <param name="expression">モデルを識別する式。</param>
      <param name="viewData">ビュー データ ディクショナリ。</param>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadata.GetDisplayName">
      <summary>モデルの表示名を取得します。</summary>
      <returns>モデルの表示名。</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadata.GetSimpleDisplayText">
      <summary>モデルの簡単な説明を返します。</summary>
      <returns>モデルの簡単な説明。</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadata.GetValidators(System.Web.Mvc.ControllerContext)">
      <summary>モデルの検証コントロールの一覧を取得します。</summary>
      <returns>モデルの検証コントロールの一覧。</returns>
      <param name="context">コントローラー コンテキスト。</param>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.HideSurroundingHtml">
      <summary>関連付けられている HTML 要素を使用して、モデル オブジェクトを表示するかどうかを示す値を取得または設定します。</summary>
      <returns>モデル オブジェクトが含まれる関連付けられている HTML 要素を、オブジェクトと併せて表示する場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.HtmlEncode"></member>
    <member name="P:System.Web.Mvc.ModelMetadata.IsComplexType">
      <summary>モデルが複合型であるかどうかを示す値を取得または設定します。</summary>
      <returns>MVC フレームワークによってモデルが複合型であると見なされるかどうかを示す値。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.IsNullableValueType">
      <summary>型が null 許容型かどうかを示す値を取得します。</summary>
      <returns>型が null 許容型である場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.IsReadOnly">
      <summary>モデルが読み取り専用かどうかを示す値を取得または設定します。</summary>
      <returns>モデルが読み取り専用である場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.IsRequired">
      <summary>モデルが必須かどうかを示す値を取得または設定します。</summary>
      <returns>モデルが必須である場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.Model">
      <summary>モデルの値を取得します。</summary>
      <returns>モデルの値。<see cref="T:System.Web.Mvc.ModelMetadata" /> の詳細については、Brad Wilson のブログの「ASP.NET MVC 2 Templates, Part 2: ModelMetadata」を参照してください</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.ModelType">
      <summary>モデルの型を取得します。</summary>
      <returns>モデルの型。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.NullDisplayText">
      <summary>null 値の表示文字列を取得または設定します。</summary>
      <returns>null 値の表示文字列。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.Order">
      <summary>現在のメタデータの順序を表す値を取得または設定します。</summary>
      <returns>現在のメタデータの順序の値。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.Properties">
      <summary>モデルのプロパティを記述するモデル メタデータ オブジェクトのコレクションを取得します。</summary>
      <returns>モデルのプロパティを記述するモデル メタデータ オブジェクトのコレクション。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.PropertyName">
      <summary>プロパティ名を取得します。</summary>
      <returns>プロパティ名。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.Provider">
      <summary>プロバイダーを取得または設定します。</summary>
      <returns>プロバイダー。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.RequestValidationEnabled">
      <summary>要求の検証が有効であるかどうかを示す値を取得または設定します。</summary>
      <returns>要求の検証が有効である場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.ShortDisplayName">
      <summary>短い表示名を取得または設定します。</summary>
      <returns>短い表示名。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.ShowForDisplay">
      <summary>リスト ビューや詳細ビューなどの読み取り専用ビューでプロパティを表示するかどうかを示す値を取得または設定します。</summary>
      <returns>モデルを読み取り専用ビューで表示する場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.ShowForEdit">
      <summary>モデルを編集可能なビューで表示するかどうかを示す値を取得または設定します。</summary>
      <returns>モデルを編集可能なビューで表示する場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.SimpleDisplayText">
      <summary>モデルの単純な表示文字列を取得または設定します。</summary>
      <returns>モデルの単純な表示文字列。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.TemplateHint">
      <summary>このモデルに使用するテンプレートの候補を示すヒントを取得または設定します。</summary>
      <returns>このモデルに使用するテンプレートの候補を示すヒント。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.Watermark">
      <summary>ウォーターマークとして使用できる値を取得または設定します。</summary>
      <returns>ウォーターマーク。</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelMetadataProvider">
      <summary>カスタム メタデータ プロバイダーの抽象基本クラスです。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadataProvider.#ctor">
      <summary>派生クラスでオーバーライドされた場合、<see cref="T:System.Web.Mvc.ModelMetadataProvider" /> クラスから派生されたオブジェクトの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadataProvider.GetMetadataForProperties(System.Object,System.Type)">
      <summary>モデルの各プロパティの <see cref="T:System.Web.Mvc.ModelMetadata" /> オブジェクトを取得します。</summary>
      <returns>モデルの各プロパティの <see cref="T:System.Web.Mvc.ModelMetadata" /> オブジェクト。</returns>
      <param name="container">コンテナー。</param>
      <param name="containerType">コンテナーの型。</param>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadataProvider.GetMetadataForProperty(System.Func{System.Object},System.Type,System.String)">
      <summary>指定したプロパティのメタデータを取得します。</summary>
      <returns>プロパティの <see cref="T:System.Web.Mvc.ModelMetadata" /> オブジェクト。</returns>
      <param name="modelAccessor">モデル アクセサー。</param>
      <param name="containerType">コンテナーの型。</param>
      <param name="propertyName">メタデータ モデルを取得する対象のプロパティ。</param>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadataProvider.GetMetadataForType(System.Func{System.Object},System.Type)">
      <summary>指定したモデル アクセサーおよびモデルの型のメタデータを取得します。</summary>
      <returns>指定したモデル アクセサーおよびモデルの型の <see cref="T:System.Web.Mvc.ModelMetadata" /> オブジェクト。</returns>
      <param name="modelAccessor">モデル アクセサー。</param>
      <param name="modelType">モデルの型。</param>
    </member>
    <member name="T:System.Web.Mvc.ModelMetadataProviders">
      <summary>現在の <see cref="T:System.Web.Mvc.ModelMetadataProvider" /> インスタンス用のコンテナーを提供します。</summary>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadataProviders.Current">
      <summary>現在の <see cref="T:System.Web.Mvc.ModelMetadataProvider" /> オブジェクトを取得または設定します。</summary>
      <returns>現在の <see cref="T:System.Web.Mvc.ModelMetadataProvider" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelState">
      <summary>アクション メソッド引数のプロパティまたはアクション メソッド引数自体へのモデル バインドの状態をカプセル化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelState.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ModelState" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.ModelState.Errors">
      <summary>モデル バインディング中に発生したエラーを格納している <see cref="T:System.Web.Mvc.ModelErrorCollection" /> オブジェクトを返します。</summary>
      <returns>エラー。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelState.Value">
      <summary>モデル バインド中にバインディングが行われていた値をカプセル化する <see cref="T:System.Web.Mvc.ValueProviderResult" /> オブジェクトを返します。</summary>
      <returns>値。</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelStateDictionary">
      <summary>検証情報を含めて、アクション メソッドへのポストされたフォームのバインド試行の状態を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ModelStateDictionary" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.#ctor(System.Web.Mvc.ModelStateDictionary)">
      <summary>指定されたモデル状態ディクショナリからコピーされた値を使用して、<see cref="T:System.Web.Mvc.ModelStateDictionary" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dictionary">モデル状態ディクショナリ。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary " /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Web.Mvc.ModelState})">
      <summary>指定された項目をモデル状態ディクショナリに追加します。</summary>
      <param name="item">モデル状態ディクショナリに追加するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">モデル状態ディクショナリが読み取り専用です。</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.Add(System.String,System.Web.Mvc.ModelState)">
      <summary>指定されたキーと値を持つ要素をモデル状態ディクショナリに追加します。</summary>
      <param name="key">追加する要素のキー。</param>
      <param name="value">追加する要素の値。</param>
      <exception cref="T:System.NotSupportedException">モデル状態ディクショナリが読み取り専用です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">指定されたキーを持つ要素が、既にモデル状態ディクショナリにあります。</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.AddModelError(System.String,System.Exception)">
      <summary>指定されたキーに関連付けられたモデル状態ディクショナリのエラー コレクションに、指定されたモデル エラーを追加します。</summary>
      <param name="key">キー。</param>
      <param name="exception">例外。</param>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.AddModelError(System.String,System.String)">
      <summary>指定されたエラー メッセージを、指定されたキーに関連付けられたモデル状態ディクショナリのエラー コレクションに追加します。</summary>
      <param name="key">キー。</param>
      <param name="errorMessage">エラー メッセージ。</param>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.Clear">
      <summary>モデル状態ディクショナリからすべての項目を削除します。</summary>
      <exception cref="T:System.NotSupportedException">モデル状態ディクショナリが読み取り専用です。</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Web.Mvc.ModelState})">
      <summary>特定の値がモデル状態ディクショナリに格納されているかどうかを判断します。</summary>
      <returns>
        <paramref name="item" /> がモデル状態ディクショナリ内に存在する場合は true。それ以外の場合は false。</returns>
      <param name="item">モデル状態ディクショナリ内で検索するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.ContainsKey(System.String)">
      <summary>指定されたキーがモデル状態ディクショナリに格納されているかどうかを判断します。</summary>
      <returns>指定されたキーがモデル状態ディクショナリに格納されている場合は true。それ以外の場合は false。</returns>
      <param name="key">モデル状態ディクショナリ内で検索するキー。</param>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Web.Mvc.ModelState}[],System.Int32)">
      <summary>指定されたインデックスを開始位置として、モデル状態ディクショナリの要素を配列にコピーします。</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.ICollection`1" /> オブジェクトから要素がコピーされる先の 1 次元配列。この配列には、0 から始まるインデックスを使用する必要があります。</param>
      <param name="arrayIndex">コピーの開始位置となる、<paramref name="array" /> の 0 から始まるインデックス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> が多次元です。または<paramref name="arrayIndex" /> が <paramref name="array" /> の長さ以上です。またはソース コレクションに含まれる要素数が、<paramref name="arrayIndex" /> からコピー先の <paramref name="array" /> の末尾までに格納できる数を超えています。または<paramref name="T" /> 型が、コピー先の <paramref name="array" /> の型に自動的にキャストできません。</exception>
    </member>
    <member name="P:System.Web.Mvc.ModelStateDictionary.Count">
      <summary>コレクション内のキーと値のペアの数を取得します。</summary>
      <returns>コレクション内のキーと値のペア数。</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.GetEnumerator">
      <summary>コレクションを反復処理するために使用できる列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelStateDictionary.IsReadOnly">
      <summary>コレクションが読み取り専用かどうかを示す値を取得します。</summary>
      <returns>コレクションが読み取り専用である場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelStateDictionary.IsValid">
      <summary>このモデル状態ディクショナリのインスタンスが有効であるかどうかを示す値を取得します。</summary>
      <returns>このインスタンスが有効である場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.IsValidField(System.String)">
      <summary>指定されたキーに関連付けられているか指定されたキーをプレフィックスとする <see cref="T:System.Web.Mvc.ModelError" /> オブジェクトが存在するかどうかを判断します。</summary>
      <returns>指定されたキーに関連付けられた値がモデル状態ディクショナリに含まれている場合は true。それ以外の場合は false。</returns>
      <param name="key">キー。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> パラメーターが null です。</exception>
    </member>
    <member name="P:System.Web.Mvc.ModelStateDictionary.Item(System.String)">
      <summary>指定したキーに関連付けられている値を取得または設定します。</summary>
      <returns>モデル状態項目。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelStateDictionary.Keys">
      <summary>ディクショナリ内のキーが格納されているコレクションを取得します。</summary>
      <returns>モデル状態ディクショナリのキーが格納されているコレクション。</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.Merge(System.Web.Mvc.ModelStateDictionary)">
      <summary>指定された <see cref="T:System.Web.Mvc.ModelStateDictionary" /> オブジェクトからこのディクショナリに値をコピーし、キーが同じである場合は既存の値を上書きします。</summary>
      <param name="dictionary">ディクショナリ。</param>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Web.Mvc.ModelState})">
      <summary>モデル状態ディクショナリから最初に見つかった指定のオブジェクトを削除します。</summary>
      <returns>
        <paramref name="item" /> がモデル状態ディクショナリから正常に削除された場合は true。それ以外の場合は false。このメソッドは、<paramref name="item" /> がモデル状態ディクショナリ内で見つからない場合にも false を返します。</returns>
      <param name="item">モデル状態ディクショナリから削除するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">モデル状態ディクショナリが読み取り専用です。</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.Remove(System.String)">
      <summary>指定されたキーを持つ要素をモデル状態ディクショナリから削除します。</summary>
      <returns>要素が正常に削除された場合は true。それ以外の場合は false。このメソッドは、<paramref name="key" /> がモデル状態ディクショナリ内で見つからない場合にも false を返します。</returns>
      <param name="key">削除する要素のキー。</param>
      <exception cref="T:System.NotSupportedException">モデル状態ディクショナリが読み取り専用です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.SetModelValue(System.String,System.Web.Mvc.ValueProviderResult)">
      <summary>指定された値プロバイダー ディクショナリを使用して、指定されたキーの値を設定します。</summary>
      <param name="key">キー。</param>
      <param name="value">値。</param>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理するために使用できる列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.TryGetValue(System.String,System.Web.Mvc.ModelState@)">
      <summary>指定されたキーに関連付けられている値の取得を試みます。</summary>
      <returns>指定されたキーを持つ要素が <see cref="T:System.Collections.Generic.IDictionary`2" /> を実装するオブジェクトに格納されている場合は true。それ以外の場合は false。</returns>
      <param name="key">取得する値のキー。</param>
      <param name="value">このメソッドから制御が戻るとき、指定されたキーが見つかった場合はそのキーに関連付けられている値。それ以外の場合は <paramref name="value" /> パラメーターの型の既定値。このパラメーターは初期化せずに渡されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が null です。</exception>
    </member>
    <member name="P:System.Web.Mvc.ModelStateDictionary.Values">
      <summary>ディクショナリ内の値が格納されているコレクションを取得します。</summary>
      <returns>モデル状態ディクショナリの値が格納されているコレクション。</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelValidationResult">
      <summary>検証結果のコンテナーを提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelValidationResult.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ModelValidationResult" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.ModelValidationResult.MemberName">
      <summary>メンバーの名前を取得または設定します。</summary>
      <returns>メンバーの名前。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelValidationResult.Message">
      <summary>検証結果のメッセージを取得または設定します。</summary>
      <returns>検証結果のメッセージ。</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelValidator">
      <summary>検証ロジックを実装するための基本クラスを提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelValidator.#ctor(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>
        <see cref="T:System.Web.Mvc.ModelValidator" /> クラスを初期化するために、派生クラスのコンストラクターから呼び出されます。</summary>
      <param name="metadata">メタデータ。</param>
      <param name="controllerContext">コントローラー コンテキスト。</param>
    </member>
    <member name="P:System.Web.Mvc.ModelValidator.ControllerContext">
      <summary>コントローラー コンテキストを取得します。</summary>
      <returns>コントローラー コンテキスト。</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelValidator.GetClientValidationRules">
      <summary>派生クラスで実装された場合、クライアント検証用のメタデータを返します。</summary>
      <returns>クライアント検証用のメタデータ。</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelValidator.GetModelValidator(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>モデルの複合モデル検証コントロールを返します。</summary>
      <returns>モデルの複合モデル検証コントロール。</returns>
      <param name="metadata">メタデータ。</param>
      <param name="context">コントローラー コンテキスト。</param>
    </member>
    <member name="P:System.Web.Mvc.ModelValidator.IsRequired">
      <summary>モデル プロパティが必要かどうかを示す値を取得または設定します。</summary>
      <returns>モデル プロパティが必須である場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelValidator.Metadata">
      <summary>モデルの検証コントロール用のメタデータを取得します。</summary>
      <returns>モデルの検証コントロール用のメタデータ。</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelValidator.Validate(System.Object)">
      <summary>派生クラスとして実装された場合、オブジェクトを検証します。</summary>
      <returns>検証結果の一覧。</returns>
      <param name="container">コンテナー。</param>
    </member>
    <member name="T:System.Web.Mvc.ModelValidatorProvider">
      <summary>モデルの検証コントロールの一覧を提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelValidatorProvider.#ctor">
      <summary>派生クラスで実装された場合、<see cref="T:System.Web.Mvc.ModelValidatorProvider" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelValidatorProvider.GetValidators(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>検証コントロールの一覧を取得します。</summary>
      <returns>検証コントロールの一覧。</returns>
      <param name="metadata">メタデータ。</param>
      <param name="context">コンテキスト。</param>
    </member>
    <member name="T:System.Web.Mvc.ModelValidatorProviderCollection">
      <summary>モデルの検証コントロール プロバイダーのコレクションを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelValidatorProviderCollection.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ModelValidatorProviderCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelValidatorProviderCollection.#ctor(System.Collections.Generic.IList{System.Web.Mvc.ModelValidatorProvider})">
      <summary>モデル検証プロバイダーのリストを使用して、<see cref="T:System.Web.Mvc.ModelValidatorProviderCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="list">モデル検証プロバイダーのリスト。</param>
    </member>
    <member name="M:System.Web.Mvc.ModelValidatorProviderCollection.ClearItems">
      <summary>コレクションからすべての要素を削除します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelValidatorProviderCollection.GetValidators(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>モデルの検証コントロールのリストを返します。</summary>
      <returns>モデルの検証コントロールのリスト。</returns>
      <param name="metadata">モデル メタデータ。</param>
      <param name="context">コントローラー コンテキスト。</param>
    </member>
    <member name="M:System.Web.Mvc.ModelValidatorProviderCollection.InsertItem(System.Int32,System.Web.Mvc.ModelValidatorProvider)">
      <summary>モデルの検証コントロール プロバイダーをコレクションに挿入します。</summary>
      <param name="index">項目を挿入する位置の 0 から始まるインデックス。</param>
      <param name="item">挿入するモデルの検証コントロール プロバイダー オブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.ModelValidatorProviderCollection.RemoveItem(System.Int32)">
      <summary>コレクションの指定されたインデックス位置にある要素を削除します。</summary>
      <param name="index">削除する要素の 0 から始まるインデックス。</param>
    </member>
    <member name="M:System.Web.Mvc.ModelValidatorProviderCollection.SetItem(System.Int32,System.Web.Mvc.ModelValidatorProvider)">
      <summary>指定したインデックス位置にあるモデルの検証コントロール プロバイダー要素を置き換えます。</summary>
      <param name="index">置き換えるモデルの検証コントロール プロバイダー要素の 0 から始まるインデックス。</param>
      <param name="item">モデルの検証コントロール プロバイダー要素の新しい値。</param>
    </member>
    <member name="T:System.Web.Mvc.ModelValidatorProviders">
      <summary>現在の検証プロバイダー用のコンテナーを提供します。</summary>
    </member>
    <member name="P:System.Web.Mvc.ModelValidatorProviders.Providers">
      <summary>モデルの検証コントロール プロバイダーのコレクションを取得します。</summary>
      <returns>モデルの検証コントロール プロバイダーのコレクション。</returns>
    </member>
    <member name="T:System.Web.Mvc.MultiSelectList">
      <summary>ユーザーが複数の項目を選択できる、項目の一覧を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.MultiSelectList.#ctor(System.Collections.IEnumerable)">
      <summary>一覧に含める指定された項目を使用して、<see cref="T:System.Web.Mvc.MultiSelectList" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="items">項目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="items" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.MultiSelectList.#ctor(System.Collections.IEnumerable,System.Collections.IEnumerable)">
      <summary>一覧に含める指定された項目と選択された値を使用して、<see cref="T:System.Web.Mvc.MultiSelectList" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="items">項目。</param>
      <param name="selectedValues">選択された値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="items" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.MultiSelectList.#ctor(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable)">
      <summary>一覧に含める項目、選択された値、無効になった値を使用して、MultiSelectList クラスの新しいインスタンスを初期化します。</summary>
      <param name="items">リストの各 <see cref="T:System.Web.Mvc.SelectListItem" /> を構築するために使用される項目。</param>
      <param name="selectedValues">選択された値のフィールド。対応する <see cref="T:System.Web.Mvc.SelectListItem" /> の Selected プロパティを照合するために使用されます。</param>
      <param name="disabledValues">無効である値。対応する <see cref="T:System.Web.Mvc.SelectListItem" /> の Disabled プロパティを照合するために使用されます。</param>
    </member>
    <member name="M:System.Web.Mvc.MultiSelectList.#ctor(System.Collections.IEnumerable,System.String,System.String)">
      <summary>一覧に含める項目、データ値フィールド、およびデータ テキスト フィールドを使用して、<see cref="T:System.Web.Mvc.MultiSelectList" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="items">項目。</param>
      <param name="dataValueField">データ値フィールド。</param>
      <param name="dataTextField">データ テキスト フィールド。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="items" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.MultiSelectList.#ctor(System.Collections.IEnumerable,System.String,System.String,System.Collections.IEnumerable)">
      <summary>一覧に含める項目、データ値フィールド、データ テキスト フィールド、および選択された値を使用して、<see cref="T:System.Web.Mvc.MultiSelectList" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="items">項目。</param>
      <param name="dataValueField">データ値フィールド。</param>
      <param name="dataTextField">データ テキスト フィールド。</param>
      <param name="selectedValues">選択された値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="items" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.MultiSelectList.#ctor(System.Collections.IEnumerable,System.String,System.String,System.Collections.IEnumerable,System.Collections.IEnumerable)">
      <summary>一覧に含める項目、データ値フィールド、データ テキスト フィールド、選択された値、および無効になった値を使用して、MultiSelectList クラスの新しいインスタンスを初期化します。</summary>
      <param name="items">リストの各 <see cref="T:System.Web.Mvc.SelectListItem" /> を構築するために使用される項目。</param>
      <param name="dataValueField">データ値フィールド。対応する <see cref="T:System.Web.Mvc.SelectListItem" /> の Value プロパティを照合するために使用されます。</param>
      <param name="dataTextField">データ テキスト フィールド。対応する <see cref="T:System.Web.Mvc.SelectListItem" /> の Text プロパティを照合するために使用されます。</param>
      <param name="selectedValues">選択された値のフィールド。対応する <see cref="T:System.Web.Mvc.SelectListItem" /> の Selected プロパティを照合するために使用されます。</param>
      <param name="disabledValues">無効である値。対応する <see cref="T:System.Web.Mvc.SelectListItem" /> の Disabled プロパティを照合するために使用されます。</param>
    </member>
    <member name="M:System.Web.Mvc.MultiSelectList.#ctor(System.Collections.IEnumerable,System.String,System.String,System.String)">
      <summary>一覧に含める項目、データ値フィールド、データ テキスト フィールド、およびデータ グループ フィールドを使用して、MultiSelectList クラスの新しいインスタンスを初期化します。</summary>
      <param name="items">リストの各 <see cref="T:System.Web.Mvc.SelectListItem" /> を構築するために使用される項目。</param>
      <param name="dataValueField">データ値フィールド。対応する <see cref="T:System.Web.Mvc.SelectListItem" /> の Value プロパティを照合するために使用されます。</param>
      <param name="dataTextField">データ テキスト フィールド。対応する <see cref="T:System.Web.Mvc.SelectListItem" /> の Text プロパティを照合するために使用されます。</param>
      <param name="dataGroupField">データ グループ フィールド。対応する <see cref="T:System.Web.Mvc.SelectListItem" /> の Group プロパティを照合するために使用されます。</param>
    </member>
    <member name="M:System.Web.Mvc.MultiSelectList.#ctor(System.Collections.IEnumerable,System.String,System.String,System.String,System.Collections.IEnumerable)">
      <summary>一覧に含める項目、データ値フィールド、データ テキスト フィールド、データ グループ フィールド、および選択された値を使用して、MultiSelectList クラスの新しいインスタンスを初期化します。</summary>
      <param name="items">リストの各 <see cref="T:System.Web.Mvc.SelectListItem" /> を構築するために使用される項目。</param>
      <param name="dataValueField">データ値フィールド。対応する <see cref="T:System.Web.Mvc.SelectListItem" /> の Value プロパティを照合するために使用されます。</param>
      <param name="dataTextField">データ テキスト フィールド。対応する <see cref="T:System.Web.Mvc.SelectListItem" /> の Text プロパティを照合するために使用されます。</param>
      <param name="dataGroupField">データ グループ フィールド。対応する <see cref="T:System.Web.Mvc.SelectListItem" /> の Group プロパティを照合するために使用されます。</param>
      <param name="selectedValues">選択された値のフィールド。対応する <see cref="T:System.Web.Mvc.SelectListItem" /> の Selected プロパティを照合するために使用されます。</param>
    </member>
    <member name="M:System.Web.Mvc.MultiSelectList.#ctor(System.Collections.IEnumerable,System.String,System.String,System.String,System.Collections.IEnumerable,System.Collections.IEnumerable)">
      <summary>一覧に含める項目、データ値フィールド、データ テキスト フィールド、データ グループ フィールド、選択された値、無効になった値を使用して、MultiSelectList クラスの新しいインスタンスを初期化します。</summary>
      <param name="items">リストの各 <see cref="T:System.Web.Mvc.SelectListItem" /> を構築するために使用される項目。</param>
      <param name="dataValueField">データ値フィールド。対応する <see cref="T:System.Web.Mvc.SelectListItem" /> の Value プロパティを照合するために使用されます。</param>
      <param name="dataTextField">データ テキスト フィールド。対応する <see cref="T:System.Web.Mvc.SelectListItem" /> の Text プロパティを照合するために使用されます。</param>
      <param name="dataGroupField">データ グループ フィールド。対応する <see cref="T:System.Web.Mvc.SelectListItem" /> の Group プロパティを照合するために使用されます。</param>
      <param name="selectedValues">選択された値のフィールド。対応する <see cref="T:System.Web.Mvc.SelectListItem" /> の Selected プロパティを照合するために使用されます。</param>
      <param name="disabledValues">無効である値。対応する <see cref="T:System.Web.Mvc.SelectListItem" /> の Disabled プロパティを照合するために使用されます。</param>
    </member>
    <member name="M:System.Web.Mvc.MultiSelectList.#ctor(System.Collections.IEnumerable,System.String,System.String,System.String,System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable)">
      <summary>一覧に含める項目、データ値フィールド、データ テキスト フィールド、データ グループ フィールド、選択された値、無効になった値、および無効になったグループを使用して、MultiSelectList クラスの新しいインスタンスを初期化します。</summary>
      <param name="items">リストの各 <see cref="T:System.Web.Mvc.SelectListItem" /> を構築するために使用される項目。</param>
      <param name="dataValueField">データ値フィールド。対応する <see cref="T:System.Web.Mvc.SelectListItem" /> の Value プロパティを照合するために使用されます。</param>
      <param name="dataTextField">データ テキスト フィールド。対応する <see cref="T:System.Web.Mvc.SelectListItem" /> の Text プロパティを照合するために使用されます。</param>
      <param name="dataGroupField">データ グループ フィールド。対応する <see cref="T:System.Web.Mvc.SelectListItem" /> の Group プロパティを照合するために使用されます。</param>
      <param name="selectedValues">選択された値のフィールド。対応する <see cref="T:System.Web.Mvc.SelectListItem" /> の Selected プロパティを照合するために使用されます。</param>
      <param name="disabledValues">無効である値。対応する <see cref="T:System.Web.Mvc.SelectListItem" /> の Disabled プロパティを照合するために使用されます。</param>
      <param name="disabledGroups">無効であるグループ。対応する <see cref="T:System.Web.Mvc.SelectListGroup" /> の Disabled プロパティを照合するために使用されます。</param>
    </member>
    <member name="P:System.Web.Mvc.MultiSelectList.DataGroupField">
      <summary>データ グループ フィールドを取得します。</summary>
    </member>
    <member name="P:System.Web.Mvc.MultiSelectList.DataTextField">
      <summary>データ テキスト フィールドを取得または設定します。</summary>
      <returns>データ テキスト フィールド。</returns>
    </member>
    <member name="P:System.Web.Mvc.MultiSelectList.DataValueField">
      <summary>データ値フィールドを取得または設定します。</summary>
      <returns>データ値フィールド。</returns>
    </member>
    <member name="P:System.Web.Mvc.MultiSelectList.DisabledGroups">
      <summary>無効になったグループを取得します。</summary>
    </member>
    <member name="P:System.Web.Mvc.MultiSelectList.DisabledValues">
      <summary>無効になった値を取得します。</summary>
    </member>
    <member name="M:System.Web.Mvc.MultiSelectList.GetEnumerator">
      <summary>コレクションを反復処理するために使用できる列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="P:System.Web.Mvc.MultiSelectList.Items">
      <summary>一覧に含まれる項目を取得または設定します。</summary>
      <returns>一覧に含まれる項目。</returns>
    </member>
    <member name="P:System.Web.Mvc.MultiSelectList.SelectedValues">
      <summary>選択された値を取得または設定します。</summary>
      <returns>選択された値。</returns>
    </member>
    <member name="M:System.Web.Mvc.MultiSelectList.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理するために使用できる列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="T:System.Web.Mvc.MvcFilter">
      <summary>派生クラスで実装された場合、1 つ以上のフィルター インターフェイスの実装、フィルターの順序、およびフィルターのスコープへの参照を格納するメタデータ クラスを提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcFilter.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.MvcFilter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcFilter.#ctor(System.Boolean,System.Int32)">
      <summary>
        <see cref="T:System.Web.Mvc.MvcFilter" /> クラスの新しいインスタンスを初期化し、フィルターの順序、および複数のフィルターが許可されるかどうかを指定します。</summary>
      <param name="allowMultiple">同じ型の複数のフィルターが許可されることを指定する場合は true。それ以外の場合は false。</param>
      <param name="order">フィルターの順序。</param>
    </member>
    <member name="P:System.Web.Mvc.MvcFilter.AllowMultiple">
      <summary>フィルター属性の複数のインスタンスを指定できるかどうかを示す値を取得します。</summary>
      <returns>フィルター属性の複数のインスタンスが許可される場合は true。それ以外の場合は false。実装<see cref="P:System.Web.Mvc.IMvcFilter.AllowMultiple" />.</returns>
    </member>
    <member name="P:System.Web.Mvc.MvcFilter.Order">
      <summary>フィルターを適用する順序を示す値を取得します。</summary>
      <returns>フィルターを適用する順序を示す値。実装<see cref="P:System.Web.Mvc.IMvcFilter.Order" />.</returns>
    </member>
    <member name="T:System.Web.Mvc.MvcHandler">
      <summary>HTTP 要求を処理するコントローラーを選択します。</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.#ctor(System.Web.Routing.RequestContext)">
      <summary>
        <see cref="T:System.Web.Mvc.MvcHandler" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="requestContext">要求コンテキスト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestContext" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.AddVersionHeader(System.Web.HttpContextBase)">
      <summary>指定された HTTP コンテキストを使用してバージョン ヘッダーを追加します。</summary>
      <param name="httpContext">HTTP コンテキスト。</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)">
      <summary>非同期要求処理を開始するために、ASP.NET によって呼び出されます。</summary>
      <returns>非同期呼び出しの状態。</returns>
      <param name="httpContext">HTTP コンテキスト。</param>
      <param name="callback">非同期コールバック メソッド。</param>
      <param name="state">非同期オブジェクトの状態。</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.BeginProcessRequest(System.Web.HttpContextBase,System.AsyncCallback,System.Object)">
      <summary>基本 HTTP コンテキストを使用して非同期要求の処理を開始するために、ASP.NET によって呼び出されます。</summary>
      <returns>非同期呼び出しの状態。</returns>
      <param name="httpContext">HTTP コンテキスト。</param>
      <param name="callback">非同期コールバック メソッド。</param>
      <param name="state">非同期オブジェクトの状態。</param>
    </member>
    <member name="P:System.Web.Mvc.MvcHandler.DisableMvcResponseHeader">
      <summary>MVC 応答ヘッダーが無効かどうかを示す値を取得または設定します。</summary>
      <returns>MVC 応答ヘッダーが無効の場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.EndProcessRequest(System.IAsyncResult)">
      <summary>非同期要求処理の終了時に、ASP.NET によって呼び出されます。</summary>
      <param name="asyncResult">非同期の結果。</param>
    </member>
    <member name="P:System.Web.Mvc.MvcHandler.IsReusable">
      <summary>別の要求で <see cref="T:System.Web.IHttpHandler" /> インスタンスを使用できるかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Web.IHttpHandler" /> インスタンスが再利用可能な場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="F:System.Web.Mvc.MvcHandler.MvcVersionHeaderName">
      <summary>ASP.NET MVC バージョンのヘッダー名を格納します。</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.ProcessRequest(System.Web.HttpContext)">
      <summary>指定された HTTP 要求コンテキストを使用して要求を処理します。</summary>
      <param name="httpContext">HTTP コンテキスト。</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.ProcessRequest(System.Web.HttpContextBase)">
      <summary>指定された基本 HTTP 要求コンテキストを使用して要求を処理します。</summary>
      <param name="httpContext">HTTP コンテキスト。</param>
    </member>
    <member name="P:System.Web.Mvc.MvcHandler.RequestContext">
      <summary>要求コンテキストを取得します。</summary>
      <returns>要求コンテキスト。</returns>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.System#Web#IHttpAsyncHandler#BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)">
      <summary>基本 HTTP コンテキストを使用して非同期要求の処理を開始するために、ASP.NET によって呼び出されます。</summary>
      <returns>非同期呼び出しの状態。</returns>
      <param name="context">HTTP コンテキスト。</param>
      <param name="cb">非同期コールバック メソッド。</param>
      <param name="extraData">データ。</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.System#Web#IHttpAsyncHandler#EndProcessRequest(System.IAsyncResult)">
      <summary>非同期要求処理の終了時に、ASP.NET によって呼び出されます。</summary>
      <param name="result">非同期の結果。</param>
    </member>
    <member name="P:System.Web.Mvc.MvcHandler.System#Web#IHttpHandler#IsReusable">
      <summary>別の要求で <see cref="T:System.Web.IHttpHandler" /> インスタンスを使用できるかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Web.IHttpHandler" /> インスタンスが再利用可能な場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.System#Web#IHttpHandler#ProcessRequest(System.Web.HttpContext)">
      <summary>
        <see cref="T:System.Web.IHttpHandler" /> インターフェイスを実装するカスタム HTTP ハンドラーによって、HTTP Web 要求の処理を有効にします。</summary>
      <param name="httpContext">HTTP 要求を処理するために使用される、組み込みのサーバー オブジェクト (Request、Response、Session、Server など) への参照を提供する <see cref="T:System.Web.HttpContext" /> オブジェクト。</param>
    </member>
    <member name="T:System.Web.Mvc.MvcHtmlString">
      <summary>再度エンコードしてはならない HTML エンコードされた文字列を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcHtmlString.#ctor(System.String)">
      <summary>
        <see cref="T:System.Web.Mvc.MvcHtmlString" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">作成する文字列。値が割り当てられていない場合、オブジェクトは空の文字列値を使用して作成されます。</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHtmlString.Create(System.String)">
      <summary>指定したテキスト値を使用して、HTML エンコードされた文字列を作成します。</summary>
      <returns>HTML エンコードされた文字列。</returns>
      <param name="value">作成する文字列の値。</param>
    </member>
    <member name="F:System.Web.Mvc.MvcHtmlString.Empty">
      <summary>空の HTML 文字列を格納します。</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcHtmlString.IsNullOrEmpty(System.Web.Mvc.MvcHtmlString)">
      <summary>指定された文字列にコンテンツが含まれているかどうか、または null や空でないかどうかを判定します。</summary>
      <returns>文字列が null または空の場合は true。それ以外の場合は false。</returns>
      <param name="value">文字列。</param>
    </member>
    <member name="T:System.Web.Mvc.MvcHttpHandler">
      <summary>HTTP 要求を検証し、処理します。</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcHttpHandler.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.MvcHttpHandler" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcHttpHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)">
      <summary>非同期要求処理を開始するために、ASP.NET によって呼び出されます。</summary>
      <returns>非同期呼び出しの状態。</returns>
      <param name="httpContext">HTTP コンテキスト。</param>
      <param name="callback">非同期コールバック メソッド。</param>
      <param name="state">状態。</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHttpHandler.BeginProcessRequest(System.Web.HttpContextBase,System.AsyncCallback,System.Object)">
      <summary>非同期要求処理を開始するために、ASP.NET によって呼び出されます。</summary>
      <returns>非同期呼び出しの状態。</returns>
      <param name="httpContext">基本 HTTP コンテキスト。</param>
      <param name="callback">非同期コールバック メソッド。</param>
      <param name="state">状態。</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHttpHandler.EndProcessRequest(System.IAsyncResult)">
      <summary>非同期要求処理の終了時に、ASP.NET によって呼び出されます。</summary>
      <param name="asyncResult">非同期の結果。</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHttpHandler.System#Web#IHttpAsyncHandler#BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)">
      <summary>非同期要求処理を開始するために、ASP.NET によって呼び出されます。</summary>
      <returns>非同期呼び出しの状態。</returns>
      <param name="context">コンテキスト。</param>
      <param name="cb">非同期コールバック メソッド。</param>
      <param name="extraData">データを格納しているオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHttpHandler.System#Web#IHttpAsyncHandler#EndProcessRequest(System.IAsyncResult)">
      <summary>非同期要求処理の終了時に、ASP.NET によって呼び出されます。</summary>
      <param name="result">非同期操作の状態。</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHttpHandler.VerifyAndProcessRequest(System.Web.IHttpHandler,System.Web.HttpContextBase)">
      <summary>HTTP 要求を検証し、処理します。</summary>
      <param name="httpHandler">HTTP ハンドラー。</param>
      <param name="httpContext">HTTP コンテキスト。</param>
    </member>
    <member name="T:System.Web.Mvc.MvcRouteHandler">
      <summary>IHttpHandler インターフェイスを実装するオブジェクトを作成し、そのオブジェクトに要求コンテキストを渡します。</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcRouteHandler.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.MvcRouteHandler" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcRouteHandler.#ctor(System.Web.Mvc.IControllerFactory)">
      <summary>指定されたファクトリ コントローラー オブジェクトを使用して、<see cref="T:System.Web.Mvc.MvcRouteHandler" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="controllerFactory">コントローラー ファクトリ。</param>
    </member>
    <member name="M:System.Web.Mvc.MvcRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)">
      <summary>指定された HTTP コンテキストを使用して HTTP ハンドラーを返します。</summary>
      <returns>HTTP ハンドラー。</returns>
      <param name="requestContext">要求コンテキスト。</param>
    </member>
    <member name="M:System.Web.Mvc.MvcRouteHandler.GetSessionStateBehavior(System.Web.Routing.RequestContext)">
      <summary>セッションの動作を返します。</summary>
      <returns>セッション動作。</returns>
      <param name="requestContext">要求コンテキスト。</param>
    </member>
    <member name="M:System.Web.Mvc.MvcRouteHandler.System#Web#Routing#IRouteHandler#GetHttpHandler(System.Web.Routing.RequestContext)">
      <summary>指定された要求コンテキストを使用して HTTP ハンドラーを返します。</summary>
      <returns>HTTP ハンドラー。</returns>
      <param name="requestContext">要求コンテキスト。</param>
    </member>
    <member name="T:System.Web.Mvc.MvcWebRazorHostFactory">
      <summary>
        <see cref="T:System.Web.Mvc.MvcWebPageRazorHost" /> ファイルのインスタンスを作成します。</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcWebRazorHostFactory.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.MvcWebRazorHostFactory" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcWebRazorHostFactory.CreateHost(System.String,System.String)">
      <summary>Razor ホストを作成します。</summary>
      <returns>Razor ホスト。</returns>
      <param name="virtualPath">ターゲット ファイルへの仮想パス。</param>
      <param name="physicalPath">ターゲット ファイルへの物理パス。</param>
    </member>
    <member name="T:System.Web.Mvc.NameValueCollectionExtensions">
      <summary>指定されたディクショナリにコレクションをコピーできるように、NameValueCollection オブジェクトを拡張します。</summary>
    </member>
    <member name="M:System.Web.Mvc.NameValueCollectionExtensions.CopyTo(System.Collections.Specialized.NameValueCollection,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定されたコレクションを指定されたコピー先にコピーします。</summary>
      <param name="collection">コレクション。</param>
      <param name="destination">コピー先。</param>
    </member>
    <member name="M:System.Web.Mvc.NameValueCollectionExtensions.CopyTo(System.Collections.Specialized.NameValueCollection,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
      <summary>指定されたコレクションを指定されたコピー先にコピーし、任意で元のエントリを置き換えます。</summary>
      <param name="collection">コレクション。</param>
      <param name="destination">コピー先。</param>
      <param name="replaceEntries">元のエントリを置き換える場合は true。それ以外の場合は false。</param>
    </member>
    <member name="T:System.Web.Mvc.NameValueCollectionValueProvider">
      <summary>
        <see cref="T:System.Collections.Specialized.NameValueCollection" /> オブジェクトから値を取得する値プロバイダーの基本クラスを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.NameValueCollectionValueProvider.#ctor(System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection,System.Globalization.CultureInfo)">
      <summary>指定した検証されていないコレクションを使用して、<see cref="T:System.Web.Mvc.NameValueCollectionValueProvider" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="collection">プロバイダーの初期化に使用される値を格納しているコレクション。</param>
      <param name="unvalidatedCollection">プロバイダーの初期化に使用される値を格納しているコレクション。このコレクションは、検証されません。</param>
      <param name="culture">ターゲット カルチャに関する情報を格納しているオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.NameValueCollectionValueProvider.#ctor(System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection,System.Globalization.CultureInfo,System.Boolean)">
      <summary>名前値コレクション プロバイダーを初期化します。</summary>
      <param name="collection">要求からのキー値のコレクション。</param>
      <param name="unvalidatedCollection">要求からの未検証のキー値のコレクション。</param>
      <param name="culture">値が使用されるカルチャ。</param>
      <param name="jQueryToMvcRequestNormalizationRequired">複雑な Javascript オブジェクトをサーバーに送信し、MVC で理解できる方法でエンコードされない場合の jQuery POST。このフラグは、要求が MVC フォーム - https://aspnetwebstack.codeplex.com/workitem/1564 に正規化される必要がある場合に設定する必要があります。</param>
    </member>
    <member name="M:System.Web.Mvc.NameValueCollectionValueProvider.#ctor(System.Collections.Specialized.NameValueCollection,System.Globalization.CultureInfo)">
      <summary>
        <see cref="T:System.Web.Mvc.NameValueCollectionValueProvider" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="collection">プロバイダーの初期化に使用される値を格納しているコレクション。</param>
      <param name="culture">ターゲット カルチャに関する情報を格納しているオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.NameValueCollectionValueProvider.ContainsPrefix(System.String)">
      <summary>指定したプレフィックスがコレクションに含まれているかどうかを判断します。</summary>
      <returns>指定したプレフィックスがコレクションに含まれている場合は true。それ以外の場合は false。</returns>
      <param name="prefix">検索対象のプレフィックス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="prefix" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.NameValueCollectionValueProvider.GetKeysFromPrefix(System.String)">
      <summary>指定したプレフィックスを使用してキーを取得します。</summary>
      <returns>キー。</returns>
      <param name="prefix">プレフィックス。</param>
    </member>
    <member name="M:System.Web.Mvc.NameValueCollectionValueProvider.GetValue(System.String)">
      <summary>指定したキーを使用して値オブジェクトを返します。</summary>
      <returns>指定したキーの値オブジェクト。</returns>
      <param name="key">取得する値オブジェクトのキー。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.NameValueCollectionValueProvider.GetValue(System.String,System.Boolean)">
      <summary>指定したキーおよび検証ディレクティブを使用して、値オブジェクトを返します。</summary>
      <returns>指定したキーの値オブジェクト。</returns>
      <param name="key">キー。</param>
      <param name="skipValidation">検証をスキップする必要がある場合は true。それ以外の場合は false。</param>
    </member>
    <member name="T:System.Web.Mvc.NoAsyncTimeoutAttribute">
      <summary>
        <see cref="T:System.Web.Mvc.AsyncTimeoutAttribute" /> 属性の便利なラッパーを提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.NoAsyncTimeoutAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.NoAsyncTimeoutAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Web.Mvc.NonActionAttribute">
      <summary>コントローラー メソッドがアクション メソッドではないことを示すための属性を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.NonActionAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.NonActionAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.NonActionAttribute.IsValidForRequest(System.Web.Mvc.ControllerContext,System.Reflection.MethodInfo)">
      <summary>この属性で、指定されたコントローラー コンテキストを使用してアクション メソッドではないメソッドをマークするかどうかを確認します。</summary>
      <returns>アクション メソッドではない有効なメソッドをこの属性でマークする場合は true。それ以外の場合は false。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="methodInfo">メソッド情報。</param>
    </member>
    <member name="T:System.Web.Mvc.OutputCacheAttribute">
      <summary>出力がキャッシュされるアクション メソッドをマークするために使用される属性を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.OutputCacheAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.OutputCacheAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.CacheProfile">
      <summary>キャッシュ プロファイル名を取得または設定します。</summary>
      <returns>キャッシュ プロファイル名。</returns>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.ChildActionCache">
      <summary>子アクション キャッシュを取得または設定します。</summary>
      <returns>子アクション キャッシュ。</returns>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.Duration">
      <summary>キャッシュの存続期間 (秒) を取得または設定します。</summary>
      <returns>キャッシュの存続期間。</returns>
    </member>
    <member name="M:System.Web.Mvc.OutputCacheAttribute.IsChildActionCacheActive(System.Web.Mvc.ControllerContext)">
      <summary>子アクション キャッシュがアクティブであるかどうかを示す値を返します。</summary>
      <returns>子アクション キャッシュがアクティブである場合は true。それ以外の場合は false。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.Location">
      <summary>場所を取得または設定します。</summary>
      <returns>場所。</returns>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.NoStore">
      <summary>キャッシュを格納するかどうかを示す値を取得または設定します。</summary>
      <returns>キャッシュを格納する必要がある場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Web.Mvc.OutputCacheAttribute.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
      <summary>このメソッドは、<see cref="M:System.Web.Mvc.IActionFilter.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)" /> の実装であり、ASP.NET MVC インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
      <param name="filterContext">フィルター コンテキスト。</param>
    </member>
    <member name="M:System.Web.Mvc.OutputCacheAttribute.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
      <summary>このメソッドは、<see cref="M:System.Web.Mvc.IActionFilter.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)" /> の実装であり、ASP.NET MVC インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
      <param name="filterContext">フィルター コンテキスト。</param>
    </member>
    <member name="M:System.Web.Mvc.OutputCacheAttribute.OnException(System.Web.Mvc.ExceptionContext)">
      <summary>このメソッドは、<see cref="M:System.Web.Mvc.IExceptionFilter.OnException(System.Web.Mvc.ExceptionContext)" /> の実装であり、ASP.NET MVC インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
      <param name="filterContext">フィルター コンテキスト。</param>
    </member>
    <member name="M:System.Web.Mvc.OutputCacheAttribute.OnResultExecuted(System.Web.Mvc.ResultExecutedContext)">
      <summary>このメソッドは、<see cref="M:System.Web.Mvc.IResultFilter.OnResultExecuted(System.Web.Mvc.ResultExecutedContext)" /> の実装であり、ASP.NET MVC インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
      <param name="filterContext">フィルター コンテキスト。</param>
    </member>
    <member name="M:System.Web.Mvc.OutputCacheAttribute.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)">
      <summary>アクション結果の実行前に呼び出されます。</summary>
      <param name="filterContext">
        <see cref="T:System.Web.Mvc.AuthorizeAttribute" /> を使用するための情報をカプセル化するフィルター コンテキスト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filterContext" /> パラメーターが null です。</exception>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.SqlDependency">
      <summary>SQL 依存関係を取得または設定します。</summary>
      <returns>SQL 依存関係。</returns>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.VaryByContentEncoding">
      <summary>コンテンツ エンコーディング指定を取得または設定します。</summary>
      <returns>コンテンツ エンコーディング指定。</returns>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.VaryByCustom">
      <summary>カスタム指定の値を取得または設定します。</summary>
      <returns>カスタム指定の値。</returns>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.VaryByHeader">
      <summary>ヘッダー指定の値を取得または設定します。</summary>
      <returns>ヘッダー指定の値。</returns>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.VaryByParam">
      <summary>パラメーター指定の値を取得または設定します。</summary>
      <returns>パラメーター指定の値。</returns>
    </member>
    <member name="T:System.Web.Mvc.OverrideActionFiltersAttribute">
      <summary>オーバーライド フィルターに関連付けられた属性を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.OverrideActionFiltersAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.OverrideActionFiltersAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.OverrideActionFiltersAttribute.FiltersToOverride">
      <summary>このインスタンスでオーバーライドするフィルターを取得します。</summary>
      <returns>このインスタンスでオーバーライドするフィルター。</returns>
    </member>
    <member name="T:System.Web.Mvc.OverrideAuthenticationAttribute">
      <summary>認証に関連付けられた属性を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.OverrideAuthenticationAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.OverrideAuthenticationAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.OverrideAuthenticationAttribute.FiltersToOverride">
      <summary>このインスタンスでオーバーライドするフィルターを取得します。</summary>
      <returns>このインスタンスでオーバーライドするフィルター。</returns>
    </member>
    <member name="T:System.Web.Mvc.OverrideAuthorizationAttribute">
      <summary>認証に関連付けられた属性を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.OverrideAuthorizationAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.OverrideAuthorizationAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.OverrideAuthorizationAttribute.FiltersToOverride">
      <summary>このインスタンスでオーバーライドするフィルターを取得します。</summary>
      <returns>このインスタンスでオーバーライドするフィルター。</returns>
    </member>
    <member name="T:System.Web.Mvc.OverrideExceptionFiltersAttribute">
      <summary>例外フィルターに関連付けられた属性を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.OverrideExceptionFiltersAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.OverrideExceptionFiltersAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.OverrideExceptionFiltersAttribute.FiltersToOverride">
      <summary>このインスタンスでオーバーライドするフィルターを取得します。</summary>
      <returns>このインスタンスでオーバーライドするフィルター。</returns>
    </member>
    <member name="T:System.Web.Mvc.OverrideResultFiltersAttribute">
      <summary>結果フィルターに関連付けられた属性を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.OverrideResultFiltersAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.OverrideResultFiltersAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.OverrideResultFiltersAttribute.FiltersToOverride">
      <summary>このインスタンスでオーバーライドするフィルターを取得します。</summary>
      <returns>このインスタンスでオーバーライドするフィルター。</returns>
    </member>
    <member name="T:System.Web.Mvc.ParameterBindingInfo">
      <summary>アクション メソッド パラメーターをデータ モデルにバインドするための情報をカプセル化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ParameterBindingInfo.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ParameterBindingInfo" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.ParameterBindingInfo.Binder">
      <summary>モデル バインダーを取得します。</summary>
      <returns>モデル バインダー。</returns>
    </member>
    <member name="P:System.Web.Mvc.ParameterBindingInfo.Exclude">
      <summary>バインドを無効にするプロパティ名のコンマ区切りリストを取得します。</summary>
      <returns>除外リスト。</returns>
    </member>
    <member name="P:System.Web.Mvc.ParameterBindingInfo.Include">
      <summary>バインドを有効にするプロパティ名のコンマ区切りリストを取得します。</summary>
      <returns>包含リスト。</returns>
    </member>
    <member name="P:System.Web.Mvc.ParameterBindingInfo.Prefix">
      <summary>MVC フレームワークが値をアクション パラメーターまたはモデル プロパティにバインドするときに使用されるプレフィックスを取得します。</summary>
      <returns>プレフィックス。</returns>
    </member>
    <member name="T:System.Web.Mvc.ParameterDescriptor">
      <summary>パラメーターを説明する情報を格納します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ParameterDescriptor.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ParameterDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.ParameterDescriptor.ActionDescriptor">
      <summary>アクション記述子を取得します。</summary>
      <returns>アクション記述子。</returns>
    </member>
    <member name="P:System.Web.Mvc.ParameterDescriptor.BindingInfo">
      <summary>バインディング情報を取得します。</summary>
      <returns>バインディング情報。</returns>
    </member>
    <member name="P:System.Web.Mvc.ParameterDescriptor.DefaultValue">
      <summary>パラメーターの既定値を取得します。</summary>
      <returns>パラメーターの既定値。</returns>
    </member>
    <member name="M:System.Web.Mvc.ParameterDescriptor.GetCustomAttributes(System.Boolean)">
      <summary>このメンバーに定義されているカスタム属性の配列を返します (名前付き属性を除く)。</summary>
      <returns>カスタム属性の配列、カスタム属性が存在しない場合は空の配列。</returns>
      <param name="inherit">継承されたカスタム属性の階層チェーンを参照する場合は true。それ以外の場合は false。</param>
      <exception cref="T:System.TypeLoadException">カスタム属性の型を読み込むことができません。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">このメンバーには、<paramref name="attributeType" /> 型の属性が複数定義されています。</exception>
    </member>
    <member name="M:System.Web.Mvc.ParameterDescriptor.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>型によって識別される、このメンバーに定義されているカスタム属性の配列を返します。</summary>
      <returns>カスタム属性の配列、カスタム属性が存在しない場合は空の配列。</returns>
      <param name="attributeType">カスタム属性の型。</param>
      <param name="inherit">継承されたカスタム属性の階層チェーンを参照する場合は true。それ以外の場合は false。</param>
      <exception cref="T:System.TypeLoadException">カスタム属性の型を読み込むことができません。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">このメンバーには、<paramref name="attributeType" /> 型の属性が複数定義されています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.ParameterDescriptor.IsDefined(System.Type,System.Boolean)">
      <summary>このメンバーにカスタム属性の型のインスタンスが 1 つ以上定義されているかどうかを示します。</summary>
      <returns>このメンバーに対してカスタム属性の型が定義されている場合は true。それ以外の場合は false。</returns>
      <param name="attributeType">カスタム属性の型。</param>
      <param name="inherit">継承されたカスタム属性の階層チェーンを参照する場合は true。それ以外の場合は false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> パラメーターが null です。</exception>
    </member>
    <member name="P:System.Web.Mvc.ParameterDescriptor.ParameterName">
      <summary>パラメーターの名前を取得します。</summary>
      <returns>パラメーターの名前。</returns>
    </member>
    <member name="P:System.Web.Mvc.ParameterDescriptor.ParameterType">
      <summary>パラメーターの型を取得します。</summary>
      <returns>パラメーターの型。</returns>
    </member>
    <member name="T:System.Web.Mvc.PartialViewResult">
      <summary>部分ビューを応答に送信するために使用される基本クラスを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.PartialViewResult.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.PartialViewResult" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.PartialViewResult.FindView(System.Web.Mvc.ControllerContext)">
      <summary>ビューを表示するために使用される <see cref="T:System.Web.Mvc.ViewEngineResult" /> オブジェクトを返します。</summary>
      <returns>ビュー エンジンの結果。</returns>
      <param name="context">コントローラー コンテキスト。</param>
      <exception cref="T:System.InvalidOperationException">メソッドによるビューの検索中にエラーが発生しました。</exception>
    </member>
    <member name="T:System.Web.Mvc.PreApplicationStartCode">
      <summary>ASP.NET Razor のアプリケーション開始前のスタート コードの登録ポイントを提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.PreApplicationStartCode.Start">
      <summary>Razor のアプリケーション開始前のスタート コードを登録します。</summary>
    </member>
    <member name="T:System.Web.Mvc.QueryStringValueProvider">
      <summary>
        <see cref="T:System.Collections.Specialized.NameValueCollection" /> オブジェクトに格納されているクエリ文字列の値プロバイダーを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.QueryStringValueProvider.#ctor(System.Web.Mvc.ControllerContext)">
      <summary>
        <see cref="T:System.Web.Mvc.QueryStringValueProvider" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="controllerContext">現在の HTTP 要求に関する情報をカプセル化するオブジェクト。</param>
    </member>
    <member name="T:System.Web.Mvc.QueryStringValueProviderFactory">
      <summary>クエリ文字列の値プロバイダー オブジェクトの新しいインスタンスを作成するクラスを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.QueryStringValueProviderFactory.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.QueryStringValueProviderFactory" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.QueryStringValueProviderFactory.GetValueProvider(System.Web.Mvc.ControllerContext)">
      <summary>指定されたコントローラー コンテキストの値プロバイダー オブジェクトを返します。</summary>
      <returns>クエリ文字列の値プロバイダー オブジェクト。</returns>
      <param name="controllerContext">現在の HTTP 要求に関する情報をカプセル化するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controllerContext" /> パラメーターが null です。</exception>
    </member>
    <member name="T:System.Web.Mvc.RangeAttributeAdapter">
      <summary>
        <see cref="T:System.ComponentModel.DataAnnotations.RangeAttribute" /> 属性のアダプターを提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.RangeAttributeAdapter.#ctor(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext,System.ComponentModel.DataAnnotations.RangeAttribute)">
      <summary>
        <see cref="T:System.ComponentModel.DataAnnotations.RangeAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="metadata">モデル メタデータ。</param>
      <param name="context">コントローラー コンテキスト。</param>
      <param name="attribute">範囲属性。</param>
    </member>
    <member name="M:System.Web.Mvc.RangeAttributeAdapter.GetClientValidationRules">
      <summary>範囲チェックのクライアント検証規則の一覧を取得します。</summary>
      <returns>範囲チェックのクライアント検証規則の一覧。</returns>
    </member>
    <member name="T:System.Web.Mvc.RazorView">
      <summary>Razor 構文を使用するビューの作成に使用されるクラスを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.RazorView.#ctor(System.Web.Mvc.ControllerContext,System.String,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
        <see cref="T:System.Web.Mvc.RazorView" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="viewPath">ビューのパス。</param>
      <param name="layoutPath">レイアウトまたはマスター ページ。</param>
      <param name="runViewStartPages">ビューの前にビュー開始ファイルを実行する必要があるかどうかを示す値。</param>
      <param name="viewStartFileExtensions">ビュー開始ファイルの検索時に使用される拡張子のセット。</param>
    </member>
    <member name="M:System.Web.Mvc.RazorView.#ctor(System.Web.Mvc.ControllerContext,System.String,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Web.Mvc.IViewPageActivator)">
      <summary>ビュー ページ アクティベーターを使用して、<see cref="T:System.Web.Mvc.RazorView" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="viewPath">ビューのパス。</param>
      <param name="layoutPath">レイアウトまたはマスター ページ。</param>
      <param name="runViewStartPages">ビューの前にビュー開始ファイルを実行する必要があるかどうかを示す値。</param>
      <param name="viewStartFileExtensions">ビュー開始ファイルの検索時に使用される拡張子のセット。</param>
      <param name="viewPageActivator">ビュー ページ アクティベーター。</param>
    </member>
    <member name="P:System.Web.Mvc.RazorView.LayoutPath">
      <summary>レイアウトまたはマスター ページを取得します。</summary>
      <returns>レイアウトまたはマスター ページ。</returns>
    </member>
    <member name="M:System.Web.Mvc.RazorView.RenderView(System.Web.Mvc.ViewContext,System.IO.TextWriter,System.Object)">
      <summary>指定されたライターと <see cref="T:System.Web.Mvc.WebViewPage" /> のインスタンスを使用して、指定されたビュー コンテキストを表示します。</summary>
      <param name="viewContext">ビュー コンテキスト。</param>
      <param name="writer">ビューを応答に表示するために使用されるライター。</param>
      <param name="instance">
        <see cref="T:System.Web.Mvc.WebViewPage" /> インスタンス。</param>
    </member>
    <member name="P:System.Web.Mvc.RazorView.RunViewStartPages">
      <summary>ビューの前にビュー開始ファイルを実行する必要があるかどうかを示す値を取得します。</summary>
      <returns>ビューの前にビュー開始ファイルを実行する必要があるかどうかを示す値。</returns>
    </member>
    <member name="P:System.Web.Mvc.RazorView.ViewStartFileExtensions">
      <summary>ビュー開始ファイルの検索時に使用されるファイル拡張子のセットを取得または設定します。</summary>
      <returns>ビュー開始ファイルの検索時に使用されるファイル拡張子のセット。</returns>
    </member>
    <member name="T:System.Web.Mvc.RazorViewEngine">
      <summary>ASP.NET Razor 構文を使用する Web ページを表示するために使用されるビュー エンジンを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.RazorViewEngine.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.RazorViewEngine" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.RazorViewEngine.#ctor(System.Web.Mvc.IViewPageActivator)">
      <summary>ビュー ページ アクティベーターを使用して、<see cref="T:System.Web.Mvc.RazorViewEngine" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="viewPageActivator">ビュー ページ アクティベーター。</param>
    </member>
    <member name="M:System.Web.Mvc.RazorViewEngine.CreatePartialView(System.Web.Mvc.ControllerContext,System.String)">
      <summary>指定したコントローラー コンテキストおよび部分パスを使用して、部分ビューを作成します。</summary>
      <returns>部分ビュー。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="partialPath">部分ビューへのパス。</param>
    </member>
    <member name="M:System.Web.Mvc.RazorViewEngine.CreateView(System.Web.Mvc.ControllerContext,System.String,System.String)">
      <summary>指定されたコントローラー コンテキストとビューおよびマスター ビューのパスを使用して、ビューを作成します。</summary>
      <returns>ビュー。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="viewPath">ビューのパス。</param>
      <param name="masterPath">マスター ビューのパス。</param>
    </member>
    <member name="T:System.Web.Mvc.RedirectResult">
      <summary>指定された URI にリダイレクトすることにより、アプリケーション アクションの処理を制御します。</summary>
    </member>
    <member name="M:System.Web.Mvc.RedirectResult.#ctor(System.String)">
      <summary>
        <see cref="T:System.Web.Mvc.RedirectResult" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="url">ターゲット URL。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="url" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.RedirectResult.#ctor(System.String,System.Boolean)">
      <summary>指定された URL および永続的なリダイレクトのフラグを使用して、<see cref="T:System.Web.Mvc.RedirectResult" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="url">URL。</param>
      <param name="permanent">リダイレクトを永続的にする必要があるかどうかを示す値。</param>
    </member>
    <member name="M:System.Web.Mvc.RedirectResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>
        <see cref="T:System.Web.Mvc.ActionResult" /> クラスを継承するカスタム型によって、アクション メソッドの結果の処理を有効にします。</summary>
      <param name="context">結果が実行されるコンテキスト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> パラメーターが null です。</exception>
    </member>
    <member name="P:System.Web.Mvc.RedirectResult.Permanent">
      <summary>リダイレクトを永続的にする必要があるかどうかを示す値を取得します。</summary>
      <returns>リダイレクトを永続的にする必要がある場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Web.Mvc.RedirectResult.Url">
      <summary>ターゲット URL を取得または設定します。</summary>
      <returns>ターゲット URL。</returns>
    </member>
    <member name="T:System.Web.Mvc.RedirectToRouteResult">
      <summary>指定されたルート値ディクショナリを使用してリダイレクトを実行する結果を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.RedirectToRouteResult.#ctor(System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>指定されたルート名およびルート値を使用して、<see cref="T:System.Web.Mvc.RedirectToRouteResult" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="routeName">ルートの名前。</param>
      <param name="routeValues">ルート値。</param>
    </member>
    <member name="M:System.Web.Mvc.RedirectToRouteResult.#ctor(System.String,System.Web.Routing.RouteValueDictionary,System.Boolean)">
      <summary>指定されたルート名、ルート値、および永続的なリダイレクトのフラグを使用して、<see cref="T:System.Web.Mvc.RedirectToRouteResult" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="routeName">ルートの名前。</param>
      <param name="routeValues">ルート値。</param>
      <param name="permanent">リダイレクトを永続的にする必要があるかどうかを示す値。</param>
    </member>
    <member name="M:System.Web.Mvc.RedirectToRouteResult.#ctor(System.Web.Routing.RouteValueDictionary)">
      <summary>指定されたルート値を使用して、<see cref="T:System.Web.Mvc.RedirectToRouteResult" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="routeValues">ルート値。</param>
    </member>
    <member name="M:System.Web.Mvc.RedirectToRouteResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>
        <see cref="T:System.Web.Mvc.ActionResult" /> クラスを継承するカスタム型によって、アクション メソッドの結果の処理を有効にします。</summary>
      <param name="context">結果が実行されるコンテキスト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> パラメーターが null です。</exception>
    </member>
    <member name="P:System.Web.Mvc.RedirectToRouteResult.Permanent">
      <summary>リダイレクトを永続的にする必要があるかどうかを示す値を取得します。</summary>
      <returns>リダイレクトを永続的にする必要がある場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Web.Mvc.RedirectToRouteResult.RouteName">
      <summary>ルートの名前を取得または設定します。</summary>
      <returns>ルートの名前。</returns>
    </member>
    <member name="P:System.Web.Mvc.RedirectToRouteResult.RouteValues">
      <summary>ルート値を取得または設定します。</summary>
      <returns>ルート値。</returns>
    </member>
    <member name="T:System.Web.Mvc.ReflectedActionDescriptor">
      <summary>リフレクションされたアクション メソッドを説明する情報を格納します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ReflectedActionDescriptor.#ctor(System.Reflection.MethodInfo,System.String,System.Web.Mvc.ControllerDescriptor)">
      <summary>
        <see cref="T:System.Web.Mvc.ReflectedActionDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="methodInfo">アクション メソッド情報。</param>
      <param name="actionName">アクションの名前。</param>
      <param name="controllerDescriptor">コントローラー記述子。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="methodInfo" /> パラメーターまたは <paramref name="controllerDescriptor" /> パラメーターのいずれかが null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="actionName" /> パラメーターが null または空です。</exception>
    </member>
    <member name="P:System.Web.Mvc.ReflectedActionDescriptor.ActionName">
      <summary>アクションの名前を取得します。</summary>
      <returns>アクションの名前。</returns>
    </member>
    <member name="P:System.Web.Mvc.ReflectedActionDescriptor.ControllerDescriptor">
      <summary>コントローラー記述子を取得します。</summary>
      <returns>コントローラー記述子。</returns>
    </member>
    <member name="M:System.Web.Mvc.ReflectedActionDescriptor.Execute(System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定されたアクション メソッド パラメーターを使用して、指定されたコントローラー コンテキストを実行します。</summary>
      <returns>アクションの戻り値。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="parameters">パラメーター。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameters" /> パラメーターまたは <paramref name="controllerContext" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.ReflectedActionDescriptor.GetCustomAttributes(System.Boolean)">
      <summary>このメンバーに定義されているカスタム属性の配列を返します (名前付き属性を除く)。</summary>
      <returns>カスタム属性の配列、カスタム属性が存在しない場合は空の配列。</returns>
      <param name="inherit">継承されたカスタム属性の階層チェーンを参照する場合は true。それ以外の場合は false。</param>
      <exception cref="T:System.TypeLoadException">カスタム属性の型を読み込むことができません。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">このメンバーには、<paramref name="attributeType" /> 型の属性が複数定義されています。</exception>
    </member>
    <member name="M:System.Web.Mvc.ReflectedActionDescriptor.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>型によって識別される、このメンバーに定義されているカスタム属性の配列を返します。</summary>
      <returns>カスタム属性の配列、カスタム属性が存在しない場合は空の配列。</returns>
      <param name="attributeType">カスタム属性の型。</param>
      <param name="inherit">継承されたカスタム属性の階層チェーンを参照する場合は true。それ以外の場合は false。</param>
      <exception cref="T:System.TypeLoadException">カスタム属性の型を読み込むことができません。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">このメンバーには、<paramref name="attributeType" /> 型の属性が複数定義されています。</exception>
    </member>
    <member name="M:System.Web.Mvc.ReflectedActionDescriptor.GetFilterAttributes(System.Boolean)">
      <summary>フィルター属性を取得します。</summary>
      <returns>フィルター属性。</returns>
      <param name="useCache">キャッシュを使用する場合は true。それ以外の場合は false。</param>
    </member>
    <member name="M:System.Web.Mvc.ReflectedActionDescriptor.GetParameters">
      <summary>アクション メソッドのパラメーターを取得します。</summary>
      <returns>アクション メソッドのパラメーター。</returns>
    </member>
    <member name="M:System.Web.Mvc.ReflectedActionDescriptor.GetSelectors">
      <summary>アクション セレクターを取得します。</summary>
      <returns>アクション セレクター。</returns>
    </member>
    <member name="M:System.Web.Mvc.ReflectedActionDescriptor.IsDefined(System.Type,System.Boolean)">
      <summary>このメンバーにカスタム属性の型のインスタンスが 1 つ以上定義されているかどうかを示します。</summary>
      <returns>このメンバーに対してカスタム属性の型が定義されている場合は true。それ以外の場合は false。</returns>
      <param name="attributeType">カスタム属性の型。</param>
      <param name="inherit">継承されたカスタム属性の階層チェーンを参照する場合は true。それ以外の場合は false。</param>
    </member>
    <member name="P:System.Web.Mvc.ReflectedActionDescriptor.MethodInfo">
      <summary>アクション メソッド情報を取得または設定します。</summary>
      <returns>アクション メソッド情報。</returns>
    </member>
    <member name="P:System.Web.Mvc.ReflectedActionDescriptor.UniqueId">
      <summary>限定的な初期化を使用して、リフレクションされたアクション記述子の一意の ID を取得します。</summary>
      <returns>一意の ID。</returns>
    </member>
    <member name="T:System.Web.Mvc.ReflectedControllerDescriptor">
      <summary>リフレクションされたコントローラーを説明する情報を格納します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ReflectedControllerDescriptor.#ctor(System.Type)">
      <summary>
        <see cref="T:System.Web.Mvc.ReflectedControllerDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="controllerType">コントローラーの種類。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controllerType" /> パラメーターが null です。</exception>
    </member>
    <member name="P:System.Web.Mvc.ReflectedControllerDescriptor.ControllerType">
      <summary>コントローラーの種類を取得します。</summary>
      <returns>コントローラーの種類。</returns>
    </member>
    <member name="M:System.Web.Mvc.ReflectedControllerDescriptor.FindAction(System.Web.Mvc.ControllerContext,System.String)">
      <summary>指定されたコントローラー コンテキストを使用して、指定されたアクションを検索します。</summary>
      <returns>アクションに関する情報。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="actionName">アクションの名前。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controllerContext" /> パラメーターが null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="actionName" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.ReflectedControllerDescriptor.GetCanonicalActions">
      <summary>コントローラーのアクションのリストを返します。</summary>
      <returns>コントローラーのアクション記述子のリスト。</returns>
    </member>
    <member name="M:System.Web.Mvc.ReflectedControllerDescriptor.GetCustomAttributes(System.Boolean)">
      <summary>このメンバーに定義されているカスタム属性の配列を返します (名前付き属性を除く)。</summary>
      <returns>カスタム属性の配列、カスタム属性が存在しない場合は空の配列。</returns>
      <param name="inherit">継承されたカスタム属性の階層チェーンを参照する場合は true。それ以外の場合は false。</param>
      <exception cref="T:System.TypeLoadException">カスタム属性の型を読み込むことができません。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">このメンバーには、<paramref name="attributeType" /> 型の属性が複数定義されています。</exception>
    </member>
    <member name="M:System.Web.Mvc.ReflectedControllerDescriptor.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>型によって識別される、このメンバーに定義されているカスタム属性の配列を返します。</summary>
      <returns>カスタム属性の配列、カスタム属性が存在しない場合は空の配列。</returns>
      <param name="attributeType">カスタム属性の型。</param>
      <param name="inherit">継承されたカスタム属性の階層チェーンを参照する場合は true。それ以外の場合は false。</param>
      <exception cref="T:System.TypeLoadException">カスタム属性の型を読み込むことができません。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">このメンバーには、<paramref name="attributeType" /> 型の属性が複数定義されています。</exception>
    </member>
    <member name="M:System.Web.Mvc.ReflectedControllerDescriptor.GetFilterAttributes(System.Boolean)">
      <summary>フィルター属性を取得します。</summary>
      <returns>フィルター属性。</returns>
      <param name="useCache">キャッシュを使用する場合は true。それ以外の場合は false。</param>
    </member>
    <member name="M:System.Web.Mvc.ReflectedControllerDescriptor.IsDefined(System.Type,System.Boolean)">
      <summary>このメンバーにカスタム属性の型のインスタンスが 1 つ以上定義されているかどうかを示す値を返します。</summary>
      <returns>このメンバーに対してカスタム属性の型が定義されている場合は true。それ以外の場合は false。</returns>
      <param name="attributeType">カスタム属性の型。</param>
      <param name="inherit">継承されたカスタム属性の階層チェーンを参照する場合は true。それ以外の場合は false。</param>
    </member>
    <member name="T:System.Web.Mvc.ReflectedParameterDescriptor">
      <summary>リフレクションされたアクション メソッド パラメーターを説明する情報を格納します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ReflectedParameterDescriptor.#ctor(System.Reflection.ParameterInfo,System.Web.Mvc.ActionDescriptor)">
      <summary>
        <see cref="T:System.Web.Mvc.ReflectedParameterDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="parameterInfo">パラメーター情報。</param>
      <param name="actionDescriptor">アクション記述子。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameterInfo" /> パラメーターまたは <paramref name="actionDescriptor" /> パラメーターが null です。</exception>
    </member>
    <member name="P:System.Web.Mvc.ReflectedParameterDescriptor.ActionDescriptor">
      <summary>アクション記述子を取得します。</summary>
      <returns>アクション記述子。</returns>
    </member>
    <member name="P:System.Web.Mvc.ReflectedParameterDescriptor.BindingInfo">
      <summary>バインディング情報を取得します。</summary>
      <returns>バインディング情報。</returns>
    </member>
    <member name="P:System.Web.Mvc.ReflectedParameterDescriptor.DefaultValue">
      <summary>リフレクションされたパラメーターの既定値を取得します。</summary>
      <returns>リフレクションされたパラメーターの既定値。</returns>
    </member>
    <member name="M:System.Web.Mvc.ReflectedParameterDescriptor.GetCustomAttributes(System.Boolean)">
      <summary>このメンバーに定義されているカスタム属性の配列を返します (名前付き属性を除く)。</summary>
      <returns>カスタム属性の配列、カスタム属性が存在しない場合は空の配列。</returns>
      <param name="inherit">継承されたカスタム属性の階層チェーンを参照する場合は true。それ以外の場合は false。</param>
      <exception cref="T:System.TypeLoadException">カスタム属性の型を読み込むことができません。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">このメンバーには、<paramref name="attributeType" /> 型の属性が複数定義されています。</exception>
    </member>
    <member name="M:System.Web.Mvc.ReflectedParameterDescriptor.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>型によって識別される、このメンバーに定義されているカスタム属性の配列を返します。</summary>
      <returns>カスタム属性の配列、カスタム属性が存在しない場合は空の配列。</returns>
      <param name="attributeType">カスタム属性の型。</param>
      <param name="inherit">継承されたカスタム属性の階層チェーンを参照する場合は true。それ以外の場合は false。</param>
      <exception cref="T:System.TypeLoadException">カスタム属性の型を読み込むことができません。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">このメンバーには、<paramref name="attributeType" /> 型の属性が複数定義されています。</exception>
    </member>
    <member name="M:System.Web.Mvc.ReflectedParameterDescriptor.IsDefined(System.Type,System.Boolean)">
      <summary>このメンバーにカスタム属性の型のインスタンスが 1 つ以上定義されているかどうかを示す値を返します。</summary>
      <returns>このメンバーに対してカスタム属性の型が定義されている場合は true。それ以外の場合は false。</returns>
      <param name="attributeType">カスタム属性の型。</param>
      <param name="inherit">継承されたカスタム属性の階層チェーンを参照する場合は true。それ以外の場合は false。</param>
    </member>
    <member name="P:System.Web.Mvc.ReflectedParameterDescriptor.ParameterInfo">
      <summary>パラメーター情報を取得または設定します。</summary>
      <returns>パラメーター情報。</returns>
    </member>
    <member name="P:System.Web.Mvc.ReflectedParameterDescriptor.ParameterName">
      <summary>パラメーターの名前を取得します。</summary>
      <returns>パラメーターの名前。</returns>
    </member>
    <member name="P:System.Web.Mvc.ReflectedParameterDescriptor.ParameterType">
      <summary>パラメーターの型を取得します。</summary>
      <returns>パラメーターの型。</returns>
    </member>
    <member name="T:System.Web.Mvc.RegularExpressionAttributeAdapter">
      <summary>
        <see cref="T:System.ComponentModel.DataAnnotations.RegularExpressionAttribute" /> 属性のアダプターを提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.RegularExpressionAttributeAdapter.#ctor(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext,System.ComponentModel.DataAnnotations.RegularExpressionAttribute)">
      <summary>
        <see cref="T:System.Web.Mvc.RegularExpressionAttributeAdapter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="metadata">モデル メタデータ。</param>
      <param name="context">コントローラー コンテキスト。</param>
      <param name="attribute">正規表現属性。</param>
    </member>
    <member name="M:System.Web.Mvc.RegularExpressionAttributeAdapter.GetClientValidationRules">
      <summary>正規表現のクライアント検証規則の一覧を取得します。</summary>
      <returns>正規表現のクライアント検証規則の一覧。</returns>
    </member>
    <member name="T:System.Web.Mvc.RemoteAttribute">
      <summary>jQuery 検証プラグイン リモート検証コントロールを使用する属性を提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.RemoteAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.RemoteAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.RemoteAttribute.#ctor(System.String)">
      <summary>指定されたルート名を使用して、<see cref="T:System.Web.Mvc.RemoteAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="routeName">ルート名。</param>
    </member>
    <member name="M:System.Web.Mvc.RemoteAttribute.#ctor(System.String,System.String)">
      <summary>指定されたアクション メソッド名とコントローラー名を使用して、<see cref="T:System.Web.Mvc.RemoteAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="action">アクション メソッドの名前。</param>
      <param name="controller">コントローラーの名前。</param>
    </member>
    <member name="M:System.Web.Mvc.RemoteAttribute.#ctor(System.String,System.String,System.String)">
      <summary>指定されたアクション メソッド名、コントローラー名、および領域名を使用して、<see cref="T:System.Web.Mvc.RemoteAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="action">アクション メソッドの名前。</param>
      <param name="controller">コントローラーの名前。</param>
      <param name="areaName">領域の名前。</param>
    </member>
    <member name="M:System.Web.Mvc.RemoteAttribute.#ctor(System.String,System.String,System.Web.Mvc.AreaReference)">
      <summary>
        <see cref="T:System.Web.Mvc.RemoteAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="action">ルート名。</param>
      <param name="controller">コントローラーの名前。</param>
      <param name="areaReference">
        <see cref="F:System.Web.Mvc.AreaReference.UseRoot" /> の場合に、ルート内でコントローラーを検索します。それ以外の場合は、現在の領域で検索します。</param>
    </member>
    <member name="P:System.Web.Mvc.RemoteAttribute.AdditionalFields">
      <summary>検証で必要な追加フィールドを取得または設定します。</summary>
      <returns>検証に必要な追加のフィールド。</returns>
    </member>
    <member name="M:System.Web.Mvc.RemoteAttribute.FormatAdditionalFieldsForClientValidation(System.String)">
      <summary>検証フィールド名のコンマ区切り文字列を返します。</summary>
      <returns>検証フィールド名のコンマ区切り文字列。</returns>
      <param name="property">検証プロパティの名前。</param>
    </member>
    <member name="M:System.Web.Mvc.RemoteAttribute.FormatErrorMessage(System.String)">
      <summary>検証が失敗したときに表示するエラー メッセージの書式を設定します。</summary>
      <returns>書式設定されたエラー メッセージ。</returns>
      <param name="name">エラー メッセージに表示される名前。</param>
    </member>
    <member name="M:System.Web.Mvc.RemoteAttribute.FormatPropertyForClientValidation(System.String)">
      <summary>アスタリスク (*) およびドットを前に付けることによって、クライアント検証のプロパティの書式を設定します。</summary>
      <returns>文字列 "*"。プロパティの前に付けられます。</returns>
      <param name="property">プロパティ。</param>
    </member>
    <member name="M:System.Web.Mvc.RemoteAttribute.GetClientValidationRules(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>プロパティのクライアント検証規則のリストを取得します。</summary>
      <returns>プロパティのリモート クライアント検証規則のリスト。</returns>
      <param name="metadata">モデル メタデータ。</param>
      <param name="context">コントローラー コンテキスト。</param>
    </member>
    <member name="M:System.Web.Mvc.RemoteAttribute.GetUrl(System.Web.Mvc.ControllerContext)">
      <summary>リモート検証呼び出しの URL を取得します。</summary>
      <returns>リモート検証呼び出しの URL。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
    </member>
    <member name="P:System.Web.Mvc.RemoteAttribute.HttpMethod">
      <summary>リモート検証に使用する HTTP メソッドを取得または設定します。</summary>
      <returns>リモート検証で使用される HTTP メソッド。既定値は "Get" です。</returns>
    </member>
    <member name="M:System.Web.Mvc.RemoteAttribute.IsValid(System.Object)">
      <summary>このメソッドは、常に true を返します。</summary>
      <returns>true</returns>
      <param name="value">検証ターゲット。</param>
    </member>
    <member name="P:System.Web.Mvc.RemoteAttribute.RouteData">
      <summary>ルート データ ディクショナリを取得します。</summary>
      <returns>ルート データ ディクショナリ。</returns>
    </member>
    <member name="P:System.Web.Mvc.RemoteAttribute.RouteName">
      <summary>ルート名を取得または設定します。</summary>
      <returns>ルート名。</returns>
    </member>
    <member name="P:System.Web.Mvc.RemoteAttribute.Routes">
      <summary>ルート テーブルからルート コレクションを取得します。</summary>
      <returns>ルート テーブルのルート コレクション。</returns>
    </member>
    <member name="T:System.Web.Mvc.RequiredAttributeAdapter">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.RequiredAttributeAttribute" /> 属性のアダプターを提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.RequiredAttributeAdapter.#ctor(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext,System.ComponentModel.DataAnnotations.RequiredAttribute)">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.RequiredAttributeAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="metadata">モデル メタデータ。</param>
      <param name="context">コントローラー コンテキスト。</param>
      <param name="attribute">必須属性。</param>
    </member>
    <member name="M:System.Web.Mvc.RequiredAttributeAdapter.GetClientValidationRules">
      <summary>必須値のクライアント検証規則の一覧を取得します。</summary>
      <returns>必須値のクライアント検証規則の一覧。</returns>
    </member>
    <member name="T:System.Web.Mvc.RequireHttpsAttribute">
      <summary>セキュリティ保護されていない HTTP 要求を HTTPS を介して強制的に再送信する属性を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.RequireHttpsAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.RequireHttpsAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.RequireHttpsAttribute.HandleNonHttpsRequest(System.Web.Mvc.AuthorizationContext)">
      <summary>アクション メソッドに送信されるセキュリティ保護されていない HTTP 要求を処理します。</summary>
      <param name="filterContext">
        <see cref="T:System.Web.Mvc.RequireHttpsAttribute" /> 属性を使用するために必要な情報をカプセル化するオブジェクト。</param>
      <exception cref="T:System.InvalidOperationException">HTTP 要求に無効な転送メソッド オーバーライドが含まれています。すべての GET 要求は無効と見なされます。</exception>
    </member>
    <member name="M:System.Web.Mvc.RequireHttpsAttribute.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
      <summary>要求がセキュリティ保護されている (HTTPS) かどうかを判断し、保護されていない場合は <see cref="M:System.Web.Mvc.RequireHttpsAttribute.HandleNonHttpsRequest(System.Web.Mvc.AuthorizationContext)" /> メソッドを呼び出します。</summary>
      <param name="filterContext">
        <see cref="T:System.Web.Mvc.RequireHttpsAttribute" /> 属性を使用するために必要な情報をカプセル化するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filterContext" /> パラメーターが null です。</exception>
    </member>
    <member name="T:System.Web.Mvc.ResultExecutedContext">
      <summary>
        <see cref="T:System.Web.Mvc.ActionFilterAttribute" /> クラスの <see cref="M:System.Web.Mvc.ActionFilterAttribute.OnResultExecuted(System.Web.Mvc.ResultExecutedContext)" /> メソッドのコンテキストを提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ResultExecutedContext.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ResultExecutedContext" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ResultExecutedContext.#ctor(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionResult,System.Boolean,System.Exception)">
      <summary>
        <see cref="T:System.Web.Mvc.ResultExecutedContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="result">結果オブジェクト。</param>
      <param name="canceled">実行を取り消す場合は true。それ以外の場合は false。</param>
      <param name="exception">例外オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="result" /> パラメーターが null です。</exception>
    </member>
    <member name="P:System.Web.Mvc.ResultExecutedContext.Canceled">
      <summary>この <see cref="T:System.Web.Mvc.ResultExecutedContext" /> インスタンスが取り消されたかどうかを示す値を取得または設定します。</summary>
      <returns>このインスタンスが取り消された場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Web.Mvc.ResultExecutedContext.Exception">
      <summary>例外オブジェクトを取得または設定します。</summary>
      <returns>例外オブジェクト。</returns>
    </member>
    <member name="P:System.Web.Mvc.ResultExecutedContext.ExceptionHandled">
      <summary>例外が処理されたかどうかを示す値を取得または設定します。</summary>
      <returns>例外が処理された場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Web.Mvc.ResultExecutedContext.Result">
      <summary>アクションの結果を取得または設定します。</summary>
      <returns>アクションの結果。</returns>
    </member>
    <member name="T:System.Web.Mvc.ResultExecutingContext">
      <summary>
        <see cref="T:System.Web.Mvc.ActionFilterAttribute" /> クラスの <see cref="M:System.Web.Mvc.ActionFilterAttribute.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)" /> メソッドのコンテキストを提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ResultExecutingContext.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ResultExecutingContext" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ResultExecutingContext.#ctor(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionResult)">
      <summary>指定されたコントローラー コンテキストとアクション結果を使用して、<see cref="T:System.Web.Mvc.ResultExecutingContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="result">アクションの結果。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="result" /> パラメーターが null です。</exception>
    </member>
    <member name="P:System.Web.Mvc.ResultExecutingContext.Cancel">
      <summary>この <see cref="T:System.Web.Mvc.ResultExecutingContext" /> 値が "cancel" であるかどうかを示す値を取得または設定します。</summary>
      <returns>値が "cancel" である場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Web.Mvc.ResultExecutingContext.Result">
      <summary>アクションの結果を取得または設定します。</summary>
      <returns>アクションの結果。</returns>
    </member>
    <member name="T:System.Web.Mvc.RouteAreaAttribute">
      <summary>このコントローラーで定義されるすべてのルートに対して設定する領域を定義します。</summary>
    </member>
    <member name="M:System.Web.Mvc.RouteAreaAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.RouteAreaAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.RouteAreaAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Web.Mvc.RouteAreaAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="areaName">領域の名前。値が null の場合、ターゲット コントローラーの名前空間から領域名の推定を試みます。</param>
    </member>
    <member name="P:System.Web.Mvc.RouteAreaAttribute.AreaName">
      <summary>このコントローラーで定義されるすべてのルートに対して設定する領域名を取得します。値が null の場合、ターゲット コントローラーの名前空間から領域名の推定を試みます。</summary>
      <returns>このコントローラーで定義されるすべてのルートに対して設定する領域名。</returns>
    </member>
    <member name="P:System.Web.Mvc.RouteAreaAttribute.AreaPrefix">
      <summary>この領域のルートに適用する URL プレフィックスを取得します。既定値は領域の名前です。</summary>
      <returns>この領域のルートに適用する URL プレフィックス。</returns>
    </member>
    <member name="T:System.Web.Mvc.RouteAttribute">
      <summary>ルートを介してコントローラーまたはアクションを直接公開するための、コントローラーまたはアクション上の場所。コントローラー上にある場合、System.Web.Mvc.RouteAttribute を持たないアクションに適用されます。</summary>
    </member>
    <member name="M:System.Web.Mvc.RouteAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.RouteAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.RouteAttribute.#ctor(System.String)">
      <summary>指定されたテンプレートで <see cref="T:System.Web.Mvc.RouteAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="template">照合対象のルート パターン。</param>
    </member>
    <member name="P:System.Web.Mvc.RouteAttribute.Name">
      <summary>ルートの名前を取得または設定します。</summary>
      <returns>ルートの名前。</returns>
    </member>
    <member name="P:System.Web.Mvc.RouteAttribute.Order">
      <summary>ルートの適用順序を取得します。</summary>
      <returns>ルートの適用順序。</returns>
    </member>
    <member name="M:System.Web.Mvc.RouteAttribute.System#Web#Mvc#Routing#IDirectRouteFactory#CreateRoute(System.Web.Mvc.Routing.DirectRouteFactoryContext)">
      <summary>ダイレクト ルートのエントリを作成します。</summary>
      <returns>ダイレクト ルートのエントリ。</returns>
      <param name="context">ルートの作成に使用するコンテキスト。</param>
    </member>
    <member name="P:System.Web.Mvc.RouteAttribute.Template">
      <summary>照合対象のルート パターンを取得します。</summary>
      <returns>照合するパターン。</returns>
    </member>
    <member name="T:System.Web.Mvc.RouteCollectionAttributeRoutingExtensions">
      <summary>ルート コレクション属性のルーティング拡張機能を提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionAttributeRoutingExtensions.MapMvcAttributeRoutes(System.Web.Routing.RouteCollection)">
      <summary>属性が定義されたアプリケーションのルートをマップします。</summary>
      <param name="routes">ルートのコレクション。</param>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionAttributeRoutingExtensions.MapMvcAttributeRoutes(System.Web.Routing.RouteCollection,System.Web.Mvc.Routing.IDirectRouteProvider)">
      <summary>属性が定義されたアプリケーションのルートをマップします。</summary>
      <param name="directRouteProvider">ルートのマッピングに使用する <see cref="T:System.Web.Mvc.Routing.IDirectRouteProvider" />。</param>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionAttributeRoutingExtensions.MapMvcAttributeRoutes(System.Web.Routing.RouteCollection,System.Web.Mvc.Routing.IInlineConstraintResolver)">
      <summary>属性が定義されたアプリケーションのルートをマップします。</summary>
      <param name="routes">ルートのコレクション。</param>
      <param name="constraintResolver">ルート テンプレートでインラインの制約を解決するために使用する <see cref="T:System.Web.Mvc.Routing.IInlineConstraintResolver" />。</param>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionAttributeRoutingExtensions.MapMvcAttributeRoutes(System.Web.Routing.RouteCollection,System.Web.Mvc.Routing.IInlineConstraintResolver,System.Web.Mvc.Routing.IDirectRouteProvider)">
      <summary>属性が定義されたアプリケーションのルートをマップします。</summary>
      <param name="constraintResolver">ルート テンプレートでインラインの制約を解決するために使用する <see cref="T:System.Web.Mvc.Routing.IInlineConstraintResolver" />。</param>
      <param name="directRouteProvider">ルートのマッピングに使用する <see cref="T:System.Web.Mvc.Routing.IDirectRouteProvider" />。</param>
    </member>
    <member name="T:System.Web.Mvc.RouteCollectionExtensions">
      <summary>MVC ルーティング用に <see cref="T:System.Web.Routing.RouteCollection" /> オブジェクトを拡張します。</summary>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.GetVirtualPathForArea(System.Web.Routing.RouteCollection,System.Web.Routing.RequestContext,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>現在の領域で URL を生成した結果であるルートと仮想パスに関する情報を格納しているオブジェクトを返します。</summary>
      <returns>現在の領域で URL を生成した結果であるルートと仮想パスに関する情報を格納しているオブジェクト。</returns>
      <param name="routes">アプリケーションのルートを格納しているオブジェクト。</param>
      <param name="requestContext">要求されたルートに関する情報をカプセル化しているオブジェクト。</param>
      <param name="name">URL パスに関する情報を取得するときに使用するルート名。</param>
      <param name="values">ルートのパラメーターが含まれるオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.GetVirtualPathForArea(System.Web.Routing.RouteCollection,System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)">
      <summary>現在の領域で URL を生成した結果であるルートと仮想パスに関する情報を格納しているオブジェクトを返します。</summary>
      <returns>現在の領域で URL を生成した結果であるルートと仮想パスに関する情報を格納しているオブジェクト。</returns>
      <param name="routes">アプリケーションのルートを格納しているオブジェクト。</param>
      <param name="requestContext">要求されたルートに関する情報をカプセル化しているオブジェクト。</param>
      <param name="values">ルートのパラメーターが含まれるオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.IgnoreRoute(System.Web.Routing.RouteCollection,System.String)">
      <summary>使用可能なルートのリストで、指定された URL ルートを無視します。</summary>
      <param name="routes">アプリケーションのルートのコレクション。</param>
      <param name="url">無視するルートの URL パターン。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="routes" /> パラメーターまたは <paramref name="url" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.IgnoreRoute(System.Web.Routing.RouteCollection,System.String,System.Object)">
      <summary>使用可能なルートのリストおよび制約のリストで、指定された URL ルートを無視します。</summary>
      <param name="routes">アプリケーションのルートのコレクション。</param>
      <param name="url">無視するルートの URL パターン。</param>
      <param name="constraints">
        <paramref name="url" /> パラメーターの値を指定する式のセット。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="routes" /> パラメーターまたは <paramref name="url" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.MapRoute(System.Web.Routing.RouteCollection,System.String,System.String)">
      <summary>指定された URL ルートをマップします。</summary>
      <returns>マップされたルートへの参照。</returns>
      <param name="routes">アプリケーションのルートのコレクション。</param>
      <param name="name">マップするルートの名前。</param>
      <param name="url">ルートの URL パターン。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="routes" /> パラメーターまたは <paramref name="url" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.MapRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object)">
      <summary>指定された URL ルートをマップし、既定のルートの値を設定します。</summary>
      <returns>マップされたルートへの参照。</returns>
      <param name="routes">アプリケーションのルートのコレクション。</param>
      <param name="name">マップするルートの名前。</param>
      <param name="url">ルートの URL パターン。</param>
      <param name="defaults">既定のルートの値を格納しているオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="routes" /> パラメーターまたは <paramref name="url" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.MapRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object,System.Object)">
      <summary>指定された URL ルートをマップし、既定のルートの値および制約を設定します。</summary>
      <returns>マップされたルートへの参照。</returns>
      <param name="routes">アプリケーションのルートのコレクション。</param>
      <param name="name">マップするルートの名前。</param>
      <param name="url">ルートの URL パターン。</param>
      <param name="defaults">既定のルートの値を格納しているオブジェクト。</param>
      <param name="constraints">
        <paramref name="url" /> パラメーターの値を指定する式のセット。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="routes" /> パラメーターまたは <paramref name="url" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.MapRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object,System.Object,System.String[])">
      <summary>指定された URL ルートをマップし、既定のルートの値、制約、および名前空間を設定します。</summary>
      <returns>マップされたルートへの参照。</returns>
      <param name="routes">アプリケーションのルートのコレクション。</param>
      <param name="name">マップするルートの名前。</param>
      <param name="url">ルートの URL パターン。</param>
      <param name="defaults">既定のルートの値を格納しているオブジェクト。</param>
      <param name="constraints">
        <paramref name="url" /> パラメーターの値を指定する式のセット。</param>
      <param name="namespaces">アプリケーションの名前空間のセット。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="routes" /> パラメーターまたは <paramref name="url" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.MapRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object,System.String[])">
      <summary>指定された URL ルートをマップし、既定のルートの値および名前空間を設定します。</summary>
      <returns>マップされたルートへの参照。</returns>
      <param name="routes">アプリケーションのルートのコレクション。</param>
      <param name="name">マップするルートの名前。</param>
      <param name="url">ルートの URL パターン。</param>
      <param name="defaults">既定のルートの値を格納しているオブジェクト。</param>
      <param name="namespaces">アプリケーションの名前空間のセット。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="routes" /> パラメーターまたは <paramref name="url" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.MapRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.String[])">
      <summary>指定された URL ルートをマップし、名前空間を設定します。</summary>
      <returns>マップされたルートへの参照。</returns>
      <param name="routes">アプリケーションのルートのコレクション。</param>
      <param name="name">マップするルートの名前。</param>
      <param name="url">ルートの URL パターン。</param>
      <param name="namespaces">アプリケーションの名前空間のセット。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="routes" /> パラメーターまたは <paramref name="url" /> パラメーターが null です。</exception>
    </member>
    <member name="T:System.Web.Mvc.RouteDataValueProvider">
      <summary>
        <see cref="T:System.Collections.Generic.IDictionary`2" /> インターフェイスを実装するオブジェクトに格納されているルート データの値プロバイダーを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.RouteDataValueProvider.#ctor(System.Web.Mvc.ControllerContext)">
      <summary>
        <see cref="T:System.Web.Mvc.RouteDataValueProvider" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="controllerContext">HTTP 要求に関する情報が含まれるオブジェクト。</param>
    </member>
    <member name="T:System.Web.Mvc.RouteDataValueProviderFactory">
      <summary>ルート データの値プロバイダー オブジェクトを作成するためのファクトリを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.RouteDataValueProviderFactory.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.RouteDataValueProviderFactory" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.RouteDataValueProviderFactory.GetValueProvider(System.Web.Mvc.ControllerContext)">
      <summary>指定されたコントローラー コンテキストの値プロバイダー オブジェクトを返します。</summary>
      <returns>値プロバイダー オブジェクト。</returns>
      <param name="controllerContext">現在の HTTP 要求に関する情報をカプセル化するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controllerContext" /> パラメーターが null です。</exception>
    </member>
    <member name="T:System.Web.Mvc.RoutePrefixAttribute">
      <summary>コントローラーに、コントローラー内のすべてのアクションに適用されるルート プレフィックスで注釈を付けます。</summary>
    </member>
    <member name="M:System.Web.Mvc.RoutePrefixAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.RoutePrefixAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.RoutePrefixAttribute.#ctor(System.String)">
      <summary>指定されたプレフィックスで <see cref="T:System.Web.Mvc.RoutePrefixAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="prefix">コントローラーのルート プレフィックス。</param>
    </member>
    <member name="P:System.Web.Mvc.RoutePrefixAttribute.Prefix">
      <summary>ルート プレフィックスを取得します。</summary>
      <returns>ルートのプレフィックス。</returns>
    </member>
    <member name="T:System.Web.Mvc.SelectList">
      <summary>ユーザーが 1 つの項目を選択できる一覧を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.SelectList.#ctor(System.Collections.IEnumerable)">
      <summary>一覧の指定された項目を使用して、<see cref="T:System.Web.Mvc.SelectList" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="items">項目。</param>
    </member>
    <member name="M:System.Web.Mvc.SelectList.#ctor(System.Collections.IEnumerable,System.Object)">
      <summary>一覧の指定された項目と選択された値を使用して、<see cref="T:System.Web.Mvc.SelectList" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="items">項目。</param>
      <param name="selectedValue">選択された値。</param>
    </member>
    <member name="M:System.Web.Mvc.SelectList.#ctor(System.Collections.IEnumerable,System.Object,System.Collections.IEnumerable)">
      <summary>一覧の指定された項目、選択された値、無効になった値を使用して、SelectList クラスの新しいインスタンスを初期化します。</summary>
      <param name="items">リストの各 <see cref="T:System.Web.Mvc.SelectListItem" /> を構築するために使用される項目。</param>
      <param name="selectedValue">選択された値。対応する <see cref="T:System.Web.Mvc.SelectListItem" /> の Selected プロパティを照合するために使用されます。</param>
      <param name="disabledValues">無効である値。対応する <see cref="T:System.Web.Mvc.SelectListItem" /> の Disabled プロパティを照合するために使用されます。</param>
    </member>
    <member name="M:System.Web.Mvc.SelectList.#ctor(System.Collections.IEnumerable,System.String,System.String)">
      <summary>一覧の指定された項目、データ値フィールド、およびデータ テキスト フィールドを使用して、<see cref="T:System.Web.Mvc.SelectList" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="items">項目。</param>
      <param name="dataValueField">データ値フィールド。</param>
      <param name="dataTextField">データ テキスト フィールド。</param>
    </member>
    <member name="M:System.Web.Mvc.SelectList.#ctor(System.Collections.IEnumerable,System.String,System.String,System.Object)">
      <summary>一覧の指定された項目、データ値フィールド、データ テキスト フィールド、および選択された値を使用して、<see cref="T:System.Web.Mvc.SelectList" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="items">項目。</param>
      <param name="dataValueField">データ値フィールド。</param>
      <param name="dataTextField">データ テキスト フィールド。</param>
      <param name="selectedValue">選択された値。</param>
    </member>
    <member name="M:System.Web.Mvc.SelectList.#ctor(System.Collections.IEnumerable,System.String,System.String,System.Object,System.Collections.IEnumerable)">
      <summary>一覧の指定された項目、データ値フィールド、データ テキスト フィールド、選択された値、および無効になった値を使用して、SelectList クラスの新しいインスタンスを初期化します。</summary>
      <param name="items">リストの各 <see cref="T:System.Web.Mvc.SelectListItem" /> を構築するために使用される項目。</param>
      <param name="dataValueField">データ値フィールド。対応する <see cref="T:System.Web.Mvc.SelectListItem" /> の Value プロパティを照合するために使用されます。</param>
      <param name="dataTextField">データ テキスト フィールド。対応する <see cref="T:System.Web.Mvc.SelectListItem" /> の Text プロパティを照合するために使用されます。</param>
      <param name="selectedValue">選択された値。対応する <see cref="T:System.Web.Mvc.SelectListItem" /> の Selected プロパティを照合するために使用されます。</param>
      <param name="disabledValues">無効である値。対応する <see cref="T:System.Web.Mvc.SelectListItem" /> の Disabled プロパティを照合するために使用されます。</param>
    </member>
    <member name="M:System.Web.Mvc.SelectList.#ctor(System.Collections.IEnumerable,System.String,System.String,System.String,System.Object)">
      <summary>一覧の指定された項目、データ値フィールド、データ テキスト フィールド、データ グループ フィールド、および選択された値を使用して、SelectList クラスの新しいインスタンスを初期化します。</summary>
      <param name="items">リストの各 <see cref="T:System.Web.Mvc.SelectListItem" /> を構築するために使用される項目。</param>
      <param name="dataValueField">データ値フィールド。対応する <see cref="T:System.Web.Mvc.SelectListItem" /> の Value プロパティを照合するために使用されます。</param>
      <param name="dataTextField">データ テキスト フィールド。対応する <see cref="T:System.Web.Mvc.SelectListItem" /> の Text プロパティを照合するために使用されます。</param>
      <param name="dataGroupField">データ グループ フィールド。対応する <see cref="T:System.Web.Mvc.SelectListItem" /> の Group プロパティを照合するために使用されます。</param>
      <param name="selectedValue">選択された値。対応する <see cref="T:System.Web.Mvc.SelectListItem" /> の Selected プロパティを照合するために使用されます。</param>
    </member>
    <member name="M:System.Web.Mvc.SelectList.#ctor(System.Collections.IEnumerable,System.String,System.String,System.String,System.Object,System.Collections.IEnumerable)">
      <summary>一覧の指定された項目、データ値フィールド、データ テキスト フィールド、データ グループ フィールド、選択された値、および無効になった値を使用して、SelectList クラスの新しいインスタンスを初期化します。</summary>
      <param name="items">リストの各 <see cref="T:System.Web.Mvc.SelectListItem" /> を構築するために使用される項目。</param>
      <param name="dataValueField">データ値フィールド。対応する <see cref="T:System.Web.Mvc.SelectListItem" /> の Value プロパティを照合するために使用されます。</param>
      <param name="dataTextField">データ テキスト フィールド。対応する <see cref="T:System.Web.Mvc.SelectListItem" /> の Text プロパティを照合するために使用されます。</param>
      <param name="dataGroupField">データ グループ フィールド。対応する <see cref="T:System.Web.Mvc.SelectListItem" /> の Group プロパティを照合するために使用されます。</param>
      <param name="selectedValue">選択された値。対応する <see cref="T:System.Web.Mvc.SelectListItem" /> の Selected プロパティを照合するために使用されます。</param>
      <param name="disabledValues">無効である値。対応する <see cref="T:System.Web.Mvc.SelectListItem" /> の Disabled プロパティを照合するために使用されます。</param>
    </member>
    <member name="M:System.Web.Mvc.SelectList.#ctor(System.Collections.IEnumerable,System.String,System.String,System.String,System.Object,System.Collections.IEnumerable,System.Collections.IEnumerable)">
      <summary>一覧の指定された項目、データ値フィールド、データ テキスト フィールド、データ グループ フィールドを使用して、SelectList クラスの新しいインスタンスを初期化します。選択された値、無効になった値、および無効になったグループ。</summary>
      <param name="items">リストの各 <see cref="T:System.Web.Mvc.SelectListItem" /> を構築するために使用される項目。</param>
      <param name="dataValueField">データ値フィールド。対応する <see cref="T:System.Web.Mvc.SelectListItem" /> の Value プロパティを照合するために使用されます。</param>
      <param name="dataTextField">データ テキスト フィールド。対応する <see cref="T:System.Web.Mvc.SelectListItem" /> の Text プロパティを照合するために使用されます。</param>
      <param name="dataGroupField">データ グループ フィールド。対応する <see cref="T:System.Web.Mvc.SelectListItem" /> の Group プロパティを照合するために使用されます。</param>
      <param name="selectedValue">選択された値。対応する <see cref="T:System.Web.Mvc.SelectListItem" /> の Selected プロパティを照合するために使用されます。</param>
      <param name="disabledValues">無効である値。対応する <see cref="T:System.Web.Mvc.SelectListItem" /> の Disabled プロパティを照合するために使用されます。</param>
      <param name="disabledGroups">無効であるグループ。対応する <see cref="T:System.Web.Mvc.SelectListGroup" /> の Disabled プロパティを照合するために使用されます。</param>
    </member>
    <member name="P:System.Web.Mvc.SelectList.SelectedValue">
      <summary>ユーザーが選択したリスト値を取得します。</summary>
      <returns>選択された値。</returns>
    </member>
    <member name="T:System.Web.Mvc.SelectListGroup">
      <summary>optgroup の HTML 要素とその属性を表します。選択リストで、名前が同じである複数のグループがサポートされています。参照の等価性と比較されます。</summary>
    </member>
    <member name="M:System.Web.Mvc.SelectListGroup.#ctor"></member>
    <member name="P:System.Web.Mvc.SelectListGroup.Disabled">
      <summary>この <see cref="T:System.Web.Mvc.SelectListGroup" /> が無効かどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:System.Web.Mvc.SelectListGroup.Name">
      <summary>optgroup のラベルの値を表します。</summary>
    </member>
    <member name="T:System.Web.Mvc.SelectListItem">
      <summary>
        <see cref="T:System.Web.Mvc.SelectList" /> クラスのインスタンス内の選択された項目を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.SelectListItem.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.SelectListItem" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.SelectListItem.Disabled">
      <summary>この <see cref="T:System.Web.Mvc.SelectListItem" /> が無効かどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:System.Web.Mvc.SelectListItem.Group">
      <summary>このアイテムがラップされる optgroup の HTML 要素を表します。選択リストで、名前が同じである複数のグループがサポートされています。参照の等価性と比較されます。</summary>
    </member>
    <member name="P:System.Web.Mvc.SelectListItem.Selected">
      <summary>この <see cref="T:System.Web.Mvc.SelectListItem" /> が選択されているかどうかを示す値を取得または設定します。</summary>
      <returns>項目が選択されている場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Web.Mvc.SelectListItem.Text">
      <summary>選択されている項目のテキストを取得または設定します。</summary>
      <returns>テキスト。</returns>
    </member>
    <member name="P:System.Web.Mvc.SelectListItem.Value">
      <summary>選択されている項目の値を取得または設定します。</summary>
      <returns>値。</returns>
    </member>
    <member name="T:System.Web.Mvc.SessionStateAttribute">
      <summary>コントローラーのセッション状態を指定します。</summary>
    </member>
    <member name="M:System.Web.Mvc.SessionStateAttribute.#ctor(System.Web.SessionState.SessionStateBehavior)">
      <summary>
        <see cref="T:System.Web.Mvc.SessionStateAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="behavior">セッション状態の型。</param>
    </member>
    <member name="P:System.Web.Mvc.SessionStateAttribute.Behavior">
      <summary>コントローラーのセッション状態の動作を取得します。</summary>
      <returns>コントローラーのセッション状態の動作。</returns>
    </member>
    <member name="T:System.Web.Mvc.SessionStateTempDataProvider">
      <summary>現在の <see cref="T:System.Web.Mvc.TempDataDictionary" /> オブジェクトにセッション状態データを提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.SessionStateTempDataProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.SessionStateTempDataProvider" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.SessionStateTempDataProvider.LoadTempData(System.Web.Mvc.ControllerContext)">
      <summary>指定されたコントローラー コンテキストを使用して一時データを読み込みます。</summary>
      <returns>一時データ。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <exception cref="T:System.InvalidOperationException">セッション コンテキストの取得中にエラーが発生しました。</exception>
    </member>
    <member name="M:System.Web.Mvc.SessionStateTempDataProvider.SaveTempData(System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定されたコントローラー コンテキストを使用して、指定された値を一時データ ディクショナリに保存します。</summary>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="values">値。</param>
      <exception cref="T:System.InvalidOperationException">セッション コンテキストの取得中にエラーが発生しました。</exception>
    </member>
    <member name="T:System.Web.Mvc.StringLengthAttributeAdapter">
      <summary>
        <see cref="T:System.ComponentModel.DataAnnotations.StringLengthAttribute" /> 属性のアダプターを提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.StringLengthAttributeAdapter.#ctor(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext,System.ComponentModel.DataAnnotations.StringLengthAttribute)">
      <summary>
        <see cref="T:System.Web.Mvc.StringLengthAttributeAdapter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="metadata">モデル メタデータ。</param>
      <param name="context">コントローラー コンテキスト。</param>
      <param name="attribute">文字列長の属性。</param>
    </member>
    <member name="M:System.Web.Mvc.StringLengthAttributeAdapter.GetClientValidationRules">
      <summary>文字列長のクライアント検証規則の一覧を取得します。</summary>
      <returns>文字列長のクライアント検証規則の一覧。</returns>
    </member>
    <member name="T:System.Web.Mvc.TempDataDictionary">
      <summary>ある要求から次の要求までの間だけ保持されるデータ セットを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.TempDataDictionary" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.Add(System.String,System.Object)">
      <summary>指定されたキーおよび値を持つ要素を <see cref="T:System.Collections.Generic.IDictionary`2" /> オブジェクトに追加します。</summary>
      <param name="key">追加する要素のキー。</param>
      <param name="value">追加する要素の値。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> オブジェクトが読み取り専用です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">同じキーを持つ要素が、<see cref="T:System.Collections.Generic.IDictionary`2" /> オブジェクトに既に存在します。</exception>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.Clear">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> インスタンスからすべての項目を削除します。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> オブジェクトが読み取り専用です。</exception>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.ContainsKey(System.String)">
      <summary>指定されたキーを持つ要素が <see cref="T:System.Collections.Generic.IDictionary`2" /> インスタンスに格納されているかどうかを判断します。</summary>
      <returns>指定されたキーを持つ要素が <see cref="T:System.Collections.Generic.IDictionary`2" /> インスタンスに格納されている場合は true。それ以外の場合は false。</returns>
      <param name="key">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> インスタンス内で検索されるキー。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.ContainsValue(System.Object)">
      <summary>指定された値がディクショナリに含まれているかどうかを判断します。</summary>
      <returns>指定した値がディクショナリに含まれている場合は true。それ以外の場合は false。</returns>
      <param name="value">値。</param>
    </member>
    <member name="P:System.Web.Mvc.TempDataDictionary.Count">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> オブジェクト内の要素の数を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> オブジェクト内の要素の数。</returns>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.GetEnumerator">
      <summary>列挙子を取得します。</summary>
      <returns>列挙子。</returns>
    </member>
    <member name="P:System.Web.Mvc.TempDataDictionary.Item(System.String)">
      <summary>指定されたキーを持つオブジェクトを取得または設定します。</summary>
      <returns>指定したキーを持つオブジェクト。</returns>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.Keep">
      <summary>ディクショナリ内のすべてのキーに保持マークを付けます。</summary>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.Keep(System.String)">
      <summary>ディクショナリ内の指定したキーに保持マークを付けます。</summary>
      <param name="key">ディクショナリ内の保持するキー。</param>
    </member>
    <member name="P:System.Web.Mvc.TempDataDictionary.Keys">
      <summary>
        <see cref="T:System.Collections.Generic.IDictionary`2" /> オブジェクト内の要素のキーを格納している <see cref="T:System.Collections.Generic.ICollection`1" /> オブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IDictionary`2" /> オブジェクト内の要素のキー。</returns>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.Load(System.Web.Mvc.ControllerContext,System.Web.Mvc.ITempDataProvider)">
      <summary>指定されたデータ プロバイダーを使用して、指定されたコントローラー コンテキストを読み込みます。</summary>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="tempDataProvider">一時データ プロバイダー。</param>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.Peek(System.String)">
      <summary>指定されたキーに関連付けられている要素を格納するオブジェクトを返します。キーは削除対象としてマークされません。</summary>
      <returns>指定されたキーに関連付けられている要素を格納するオブジェクト。</returns>
      <param name="key">返される要素のキー。</param>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.Remove(System.String)">
      <summary>指定されたキーを持つ要素を <see cref="T:System.Collections.Generic.IDictionary`2" /> オブジェクトから削除します。</summary>
      <returns>要素が正常に削除された場合は true。それ以外の場合は false。このメソッドは、<paramref name="key" /> が <see cref="T:System.Collections.Generic.IDictionary`2" /> で見つからなかった場合にも false を返します。インスタンス。</returns>
      <param name="key">削除する要素のキー。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> オブジェクトが読み取り専用です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.Save(System.Web.Mvc.ControllerContext,System.Web.Mvc.ITempDataProvider)">
      <summary>指定されたデータ プロバイダーを使用して、指定されたコントローラー コンテキストを保存します。</summary>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="tempDataProvider">一時データ プロバイダー。</param>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>指定されたキーと値のペアをディクショナリに追加します。</summary>
      <param name="keyValuePair">キーと値のペア。</param>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>既定の等値比較子を使用して、指定した要素がシーケンスに含まれているかどうかを判断します。</summary>
      <returns>指定したキーと値のペアがディクショナリに含まれている場合は true。それ以外の場合は false。</returns>
      <param name="keyValuePair">検索するキーと値のペア。</param>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.System#Collections#Generic#ICollection{T}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>指定された配列の指定されたインデックス位置にキーと値のペアをコピーします。</summary>
      <param name="array">対象となる配列。</param>
      <param name="index">インデックス。</param>
    </member>
    <member name="P:System.Web.Mvc.TempDataDictionary.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>ディクショナリが読み取り専用かどうかを示す値を取得します。</summary>
      <returns>ディクショナリが読み取り専用である場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>指定されたキーと値のペアをディクショナリから削除します。</summary>
      <returns>キーと値のペアが正常に削除された場合は true。それ以外の場合は false。</returns>
      <param name="keyValuePair">キーと値のペア。</param>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションの反復処理に使用できる列挙子を返します。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.TryGetValue(System.String,System.Object@)">
      <summary>指定されたキーを持つ要素の値を取得します。</summary>
      <returns>指定されたキーを持つ要素が <see cref="T:System.Collections.Generic.IDictionary`2" /> を実装するオブジェクトに格納されている場合は true。それ以外の場合は false。</returns>
      <param name="key">取得する値のキー。</param>
      <param name="value">このメソッドが返されるときに、指定したキーが見つかった場合は、そのキーに関連付けられている値。それ以外の場合は <paramref name="value" /> パラメーターの型に対する既定値。このパラメーターは初期化せずに渡されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が null です。</exception>
    </member>
    <member name="P:System.Web.Mvc.TempDataDictionary.Values">
      <summary>
        <see cref="T:System.Collections.Generic.IDictionary`2" /> オブジェクト内の値を格納する <see cref="T:System.Collections.Generic.ICollection`1" /> オブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IDictionary`2" /> を実装するオブジェクト内の要素の値。</returns>
    </member>
    <member name="T:System.Web.Mvc.TemplateInfo">
      <summary>現在のテンプレート コンテキストに関する情報をカプセル化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.TemplateInfo.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.TemplateInfo" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.TemplateInfo.FormattedModelValue">
      <summary>書式指定済みのモデル値を取得または設定します。</summary>
      <returns>書式指定済みのモデル値。</returns>
    </member>
    <member name="M:System.Web.Mvc.TemplateInfo.GetFullHtmlFieldId(System.String)">
      <summary>指定された HTML の name 属性を使用して、フィールドの完全な DOM ID を取得します。</summary>
      <returns>完全な DOM ID。</returns>
      <param name="partialFieldName">HTML の name 属性の値。</param>
    </member>
    <member name="M:System.Web.Mvc.TemplateInfo.GetFullHtmlFieldName(System.String)">
      <summary>指定された HTML の name 属性を使用して、フィールドの完全修飾名 (プレフィックスを含む) を取得します。</summary>
      <returns>フィールドのプレフィックス付きの名前。</returns>
      <param name="partialFieldName">HTML の name 属性の値。</param>
    </member>
    <member name="P:System.Web.Mvc.TemplateInfo.HtmlFieldPrefix">
      <summary>HTML フィールドのプレフィックスを取得または設定します。</summary>
      <returns>HTML フィールドのプレフィックス。</returns>
    </member>
    <member name="P:System.Web.Mvc.TemplateInfo.TemplateDepth">
      <summary>ユーザーが表示したオブジェクトの数を格納します。</summary>
      <returns>オブジェクト数。</returns>
    </member>
    <member name="M:System.Web.Mvc.TemplateInfo.Visited(System.Web.Mvc.ModelMetadata)">
      <summary>ユーザーがテンプレートを表示したことがあるかどうかを判断します。</summary>
      <returns>ユーザーがテンプレートを表示したことがある場合は true。それ以外の場合は false。</returns>
      <param name="metadata">モデルを記述する情報をカプセル化しているオブジェクト。</param>
    </member>
    <member name="T:System.Web.Mvc.UrlHelper">
      <summary>アプリケーション内で ASP.NET MVC の URL を構築するメソッドを格納します。</summary>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.UrlHelper" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.#ctor(System.Web.Routing.RequestContext)">
      <summary>指定された要求コンテキストを使用して、<see cref="T:System.Web.Mvc.UrlHelper" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="requestContext">現在の要求および一致したルートに関する情報を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.#ctor(System.Web.Routing.RequestContext,System.Web.Routing.RouteCollection)">
      <summary>指定された要求コンテキストおよびルート コレクションを使用して、<see cref="T:System.Web.Mvc.UrlHelper" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="requestContext">現在の要求および一致したルートに関する情報を格納するオブジェクト。</param>
      <param name="routeCollection">ルートのコレクション。</param>
      <exception cref="ArgumentNullException">
        <paramref name="requestContext" /> パラメーターまたは <paramref name="routeCollection" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Action">
      <summary>アクション メソッドへの完全修飾 URL への文字列を生成します。</summary>
      <returns>アクション メソッドへの完全修飾 URL への文字列。</returns>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Action(System.String)">
      <summary>指定されたアクション名を使用して、アクション メソッドへの完全修飾 URL を生成します。</summary>
      <returns>アクション メソッドへの完全修飾 URL。</returns>
      <param name="actionName">アクション メソッドの名前。</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Action(System.String,System.Object)">
      <summary>指定されたアクション名およびルート値を使用して、アクション メソッドへの完全修飾 URL を生成します。</summary>
      <returns>アクション メソッドへの完全修飾 URL。</returns>
      <param name="actionName">アクション メソッドの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。オブジェクトのプロパティを調べることで、リフレクションを介してパラメーターが取得されます。通常、このオブジェクトは、オブジェクト初期化子構文を使用して作成されます。</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Action(System.String,System.String)">
      <summary>指定されたアクション名およびコントローラー名を使用して、アクション メソッドへの完全修飾 URL を生成します。</summary>
      <returns>アクション メソッドへの完全修飾 URL。</returns>
      <param name="actionName">アクション メソッドの名前。</param>
      <param name="controllerName">コントローラーの名前。</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Action(System.String,System.String,System.Object)">
      <summary>指定されたアクション名、コントローラー名、およびルート値を使用して、アクション メソッドへの完全修飾 URL を生成します。</summary>
      <returns>アクション メソッドへの完全修飾 URL。</returns>
      <param name="actionName">アクション メソッドの名前。</param>
      <param name="controllerName">コントローラーの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。オブジェクトのプロパティを調べることで、リフレクションを介してパラメーターが取得されます。通常、このオブジェクトは、オブジェクト初期化子構文を使用して作成されます。</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Action(System.String,System.String,System.Object,System.String)">
      <summary>指定されたアクション名、コントローラー名、ルート値、および使用されるプロトコルを使用して、アクション メソッドへの完全修飾 URL を生成します。</summary>
      <returns>アクション メソッドへの完全修飾 URL。</returns>
      <param name="actionName">アクション メソッドの名前。</param>
      <param name="controllerName">コントローラーの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。オブジェクトのプロパティを調べることで、リフレクションを介してパラメーターが取得されます。通常、このオブジェクトは、オブジェクト初期化子構文を使用して作成されます。</param>
      <param name="protocol">URL のプロトコル (たとえば、"http"、"https")。</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Action(System.String,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>指定されたアクション名、コントローラー名、およびルート値を使用して、アクション メソッドへの完全修飾 URL を生成します。</summary>
      <returns>アクション メソッドへの完全修飾 URL。</returns>
      <param name="actionName">アクション メソッドの名前。</param>
      <param name="controllerName">コントローラーの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Action(System.String,System.String,System.Web.Routing.RouteValueDictionary,System.String)">
      <summary>指定されたアクション名、コントローラー名、ルート値、および使用されるプロトコルを使用して、アクション メソッドの完全修飾 URL を生成します。</summary>
      <returns>アクション メソッドへの完全修飾 URL。</returns>
      <param name="actionName">アクション メソッドの名前。</param>
      <param name="controllerName">コントローラーの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。</param>
      <param name="protocol">URL のプロトコル (たとえば、"http"、"https")。</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Action(System.String,System.String,System.Web.Routing.RouteValueDictionary,System.String,System.String)">
      <summary>指定されたアクション名、コントローラー名、ルート値、使用されるプロトコル、およびホスト名を使用して、アクション メソッドへの完全修飾 URL を生成します。</summary>
      <returns>アクション メソッドへの完全修飾 URL。</returns>
      <param name="actionName">アクション メソッドの名前。</param>
      <param name="controllerName">コントローラーの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。</param>
      <param name="protocol">URL のプロトコル (たとえば、"http"、"https")。</param>
      <param name="hostName">URL のホスト名。</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Action(System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>指定されたアクション名およびルート値に対応するアクション メソッドへの完全修飾 URL を生成します。</summary>
      <returns>アクション メソッドへの完全修飾 URL。</returns>
      <param name="actionName">アクション メソッドの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Content(System.String)">
      <summary>仮想 (相対) パスをアプリケーション絶対パスに変換します。</summary>
      <returns>アプリケーション絶対パス。</returns>
      <param name="contentPath">コンテンツの仮想パス。</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Encode(System.String)">
      <summary>URL 文字列内の特殊文字を文字エンティティにエンコードします。</summary>
      <returns>エンコードされた URL 文字列。</returns>
      <param name="url">エンコードするテキスト。</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.GenerateContentUrl(System.String,System.Web.HttpContextBase)">
      <summary>コンテンツ URL が含まれる文字列を返します。</summary>
      <returns>コンテンツ URL を含む文字列。</returns>
      <param name="contentPath">コンテンツのパス。</param>
      <param name="httpContext">HTTP コンテキスト。</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.GenerateUrl(System.String,System.String,System.String,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteCollection,System.Web.Routing.RequestContext,System.Boolean)">
      <summary>URL が含まれる文字列を返します。</summary>
      <returns>URL を含む文字列。</returns>
      <param name="routeName">ルート名。</param>
      <param name="actionName">アクション名。</param>
      <param name="controllerName">コントローラー名。</param>
      <param name="protocol">HTTP プロトコル。</param>
      <param name="hostName">ホスト名。</param>
      <param name="fragment">フラグメント。</param>
      <param name="routeValues">ルート値。</param>
      <param name="routeCollection">ルート コレクション。</param>
      <param name="requestContext">要求コンテキスト。</param>
      <param name="includeImplicitMvcValues">暗黙の MVC 値を含める場合は true。それ以外の場合は false。</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.GenerateUrl(System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteCollection,System.Web.Routing.RequestContext,System.Boolean)">
      <summary>URL が含まれる文字列を返します。</summary>
      <returns>URL を含む文字列。</returns>
      <param name="routeName">ルート名。</param>
      <param name="actionName">アクション名。</param>
      <param name="controllerName">コントローラー名。</param>
      <param name="routeValues">ルート値。</param>
      <param name="routeCollection">ルート コレクション。</param>
      <param name="requestContext">要求コンテキスト。</param>
      <param name="includeImplicitMvcValues">暗黙の MVC 値を含める場合は true。それ以外の場合は false。</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.HttpRouteUrl(System.String,System.Object)">
      <summary>指定されたルート値の完全修飾 URL を生成します。</summary>
      <returns>指定されたルート値の完全修飾 URL。</returns>
      <param name="routeName">ルート名。</param>
      <param name="routeValues">ルート値。</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.HttpRouteUrl(System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>指定されたルート値の完全修飾 URL を生成します。</summary>
      <returns>指定されたルート値の完全修飾 URL。</returns>
      <param name="routeName">ルート名。</param>
      <param name="routeValues">ルート値。</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.IsLocalUrl(System.String)">
      <summary>URL がローカルかどうかを示す値を返します。</summary>
      <returns>URL がローカルである場合は true。それ以外の場合は false。</returns>
      <param name="url">URL。</param>
    </member>
    <member name="P:System.Web.Mvc.UrlHelper.RequestContext">
      <summary>定義されているルートと一致する HTTP 要求に関する情報を取得します。</summary>
      <returns>要求コンテキスト。</returns>
    </member>
    <member name="P:System.Web.Mvc.UrlHelper.RouteCollection">
      <summary>アプリケーションに登録されるルートを格納しているコレクションを取得します。</summary>
      <returns>ルート コレクション。</returns>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.RouteUrl(System.Object)">
      <summary>指定されたルート値の完全修飾 URL を生成します。</summary>
      <returns>完全修飾 URL。</returns>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。オブジェクトのプロパティを調べることで、リフレクションを介してパラメーターが取得されます。通常、このオブジェクトは、オブジェクト初期化子構文を使用して作成されます。</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.RouteUrl(System.String)">
      <summary>指定されたルート名の完全修飾 URL を生成します。</summary>
      <returns>完全修飾 URL。</returns>
      <param name="routeName">URL を生成するために使用するルートの名前。</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.RouteUrl(System.String,System.Object)">
      <summary>ルート名を使用して、指定されたルート値の完全修飾 URL を生成します。</summary>
      <returns>完全修飾 URL。</returns>
      <param name="routeName">URL を生成するために使用するルートの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。オブジェクトのプロパティを調べることで、リフレクションを介してパラメーターが取得されます。通常、このオブジェクトは、オブジェクト初期化子構文を使用して作成されます。</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.RouteUrl(System.String,System.Object,System.String)">
      <summary>ルート名および使用されるプロトコルを使用して、指定されたルート値の完全修飾 URL を生成します。</summary>
      <returns>完全修飾 URL。</returns>
      <param name="routeName">URL を生成するために使用するルートの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。オブジェクトのプロパティを調べることで、リフレクションを介してパラメーターが取得されます。通常、このオブジェクトは、オブジェクト初期化子構文を使用して作成されます。</param>
      <param name="protocol">URL のプロトコル (たとえば、"http"、"https")。</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.RouteUrl(System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>ルート名を使用して、指定されたルート値の完全修飾 URL を生成します。</summary>
      <returns>完全修飾 URL。</returns>
      <param name="routeName">URL を生成するために使用するルートの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.RouteUrl(System.String,System.Web.Routing.RouteValueDictionary,System.String,System.String)">
      <summary>指定されたルート名、使用されるプロトコル、およびホスト名を使用して、指定されたルート値の完全修飾 URL を生成します。</summary>
      <returns>完全修飾 URL。</returns>
      <param name="routeName">URL を生成するために使用するルートの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。</param>
      <param name="protocol">URL のプロトコル (たとえば、"http"、"https")。</param>
      <param name="hostName">URL のホスト名。</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.RouteUrl(System.Web.Routing.RouteValueDictionary)">
      <summary>指定されたルート値の完全修飾 URL を生成します。</summary>
      <returns>完全修飾 URL。</returns>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。</param>
    </member>
    <member name="T:System.Web.Mvc.UrlParameter">
      <summary>ルーティング時に <see cref="T:System.Web.Mvc.MvcHandler" /> クラスで使用される省略可能なパラメーターを表します。</summary>
    </member>
    <member name="F:System.Web.Mvc.UrlParameter.Optional">
      <summary>省略可能なパラメーターの読み取り専用の値を格納します。</summary>
    </member>
    <member name="M:System.Web.Mvc.UrlParameter.ToString">
      <summary>空の文字列を返します。このメソッドは、ASP.NET MVC インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
      <returns>空の文字列。</returns>
    </member>
    <member name="T:System.Web.Mvc.ValidatableObjectAdapter">
      <summary>検証できるオブジェクト アダプターを提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ValidatableObjectAdapter.#ctor(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>
        <see cref="T:System.Web.Mvc.ValidatableObjectAdapter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="metadata">モデル メタデータ。</param>
      <param name="context">コントローラー コンテキスト。</param>
    </member>
    <member name="M:System.Web.Mvc.ValidatableObjectAdapter.Validate(System.Object)">
      <summary>指定されたオブジェクトを検証します。</summary>
      <returns>検証結果の一覧。</returns>
      <param name="container">コンテナー。</param>
    </member>
    <member name="T:System.Web.Mvc.ValidateAntiForgeryTokenAttribute">
      <summary>要求の偽造防止に使用される属性を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ValidateAntiForgeryTokenAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ValidateAntiForgeryTokenAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ValidateAntiForgeryTokenAttribute.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
      <summary>承認が必要なときに呼び出されます。</summary>
      <param name="filterContext">フィルター コンテキスト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filterContext" /> パラメーターが null です。</exception>
    </member>
    <member name="P:System.Web.Mvc.ValidateAntiForgeryTokenAttribute.Salt">
      <summary>salt 文字列を取得または設定します。</summary>
      <returns>salt 文字列。</returns>
    </member>
    <member name="T:System.Web.Mvc.ValidateInputAttribute">
      <summary>入力を検証する必要があるアクション メソッドをマークするために使用される属性を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ValidateInputAttribute.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.Web.Mvc.ValidateInputAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="enableValidation">検証を有効にする場合は true。</param>
    </member>
    <member name="P:System.Web.Mvc.ValidateInputAttribute.EnableValidation">
      <summary>検証を有効にするかどうかを示す値を取得または設定します。</summary>
      <returns>検証が有効である場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Web.Mvc.ValidateInputAttribute.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
      <summary>承認が必要なときに呼び出されます。</summary>
      <param name="filterContext">フィルター コンテキスト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filterContext" /> パラメーターが null です。</exception>
    </member>
    <member name="T:System.Web.Mvc.ValueProviderCollection">
      <summary>アプリケーションの値プロバイダー オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderCollection.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ValueProviderCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderCollection.#ctor(System.Collections.Generic.IList{System.Web.Mvc.IValueProvider})">
      <summary>
        <see cref="T:System.Web.Mvc.ValueProviderCollection" /> クラスの新しいインスタンスを初期化し、指定した値プロバイダーを登録します。</summary>
      <param name="list">登録する値プロバイダーのリスト。</param>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderCollection.ContainsPrefix(System.String)">
      <summary>指定したプレフィックスがコレクションに含まれているかどうかを判断します。</summary>
      <returns>指定したプレフィックスがコレクションに含まれている場合は true。それ以外の場合は false。</returns>
      <param name="prefix">検索対象のプレフィックス。</param>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderCollection.GetKeysFromPrefix(System.String)">
      <summary>指定したプレフィックスを使用してキーを取得します。</summary>
      <returns>キー。</returns>
      <param name="prefix">プレフィックス。</param>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderCollection.GetValue(System.String)">
      <summary>指定したキーを使用して値オブジェクトを返します。</summary>
      <returns>指定したキーの値オブジェクト。</returns>
      <param name="key">取得する値オブジェクトのキー。</param>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderCollection.GetValue(System.String,System.Boolean)">
      <summary>指定したキーおよびスキップ検証パラメーターを使用して、値オブジェクトを返します。</summary>
      <returns>指定したキーの値オブジェクト。</returns>
      <param name="key">取得する値オブジェクトのキー。</param>
      <param name="skipValidation">検証をスキップする必要がある場合は true。それ以外の場合は false。</param>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderCollection.InsertItem(System.Int32,System.Web.Mvc.IValueProvider)">
      <summary>このコレクション内の指定したインデックス位置に、指定した値プロバイダー オブジェクトを挿入します。</summary>
      <param name="index">値プロバイダーを挿入するコレクション内の 0 から始まるインデックス位置。</param>
      <param name="item">挿入する値プロバイダー オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderCollection.SetItem(System.Int32,System.Web.Mvc.IValueProvider)">
      <summary>指定したインデックス位置にある値プロバイダーを新しい値プロバイダーに置き換えます。</summary>
      <param name="index">置き換える要素の 0 から始まるインデックス番号。</param>
      <param name="item">指定したインデックス位置に存在する要素の新しい値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> パラメーターが null です。</exception>
    </member>
    <member name="T:System.Web.Mvc.ValueProviderDictionary">
      <summary>注意: この API は、互換性のために残されています。アプリケーションの値プロバイダーのディクショナリを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.#ctor(System.Web.Mvc.ControllerContext)">
      <summary>
        <see cref="T:System.Web.Mvc.ValueProviderDictionary" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="controllerContext">コントローラー コンテキスト。</param>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Web.Mvc.ValueProviderResult})">
      <summary>指定された項目を値プロバイダーのコレクションに追加します。</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" /> オブジェクトに追加するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> オブジェクトが読み取り専用です。</exception>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.Add(System.String,System.Object)">
      <summary>指定されたキーと値を持つ要素を値プロバイダーのコレクションに追加します。</summary>
      <param name="key">追加する要素のキー。</param>
      <param name="value">追加する要素の値。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> オブジェクトが読み取り専用です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">指定されたキーを持つ要素が、<see cref="T:System.Collections.Generic.IDictionary`2" /> オブジェクトに既に存在します。</exception>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.Add(System.String,System.Web.Mvc.ValueProviderResult)">
      <summary>指定されたキーと値を持つ要素を値プロバイダーのコレクションに追加します。</summary>
      <param name="key">追加する要素のキー。</param>
      <param name="value">追加する要素の値。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> オブジェクトが読み取り専用です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">指定されたキーを持つ要素が、<see cref="T:System.Collections.Generic.IDictionary`2" /> オブジェクトに既に存在します。</exception>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.Clear">
      <summary>値プロバイダーのコレクションからすべての項目を削除します。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> オブジェクトが読み取り専用です。</exception>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Web.Mvc.ValueProviderResult})">
      <summary>指定された項目が値プロバイダーのコレクションに含まれているかどうかを判断します。</summary>
      <returns>
        <paramref name="item" /> が値プロバイダーのコレクション内で見つかった場合は true。それ以外の場合は false。</returns>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" /> インスタンス内で検索するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.ContainsKey(System.String)">
      <summary>指定されたキーを持つ要素が値プロバイダーのコレクションに含まれているかどうかを判断します。</summary>
      <returns>指定されたキーを持つ要素が値プロバイダーのコレクションに格納されている場合は true。それ以外の場合は false。</returns>
      <param name="key">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> インスタンス内で検索する要素のキー。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が null です。</exception>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderDictionary.ControllerContext">
      <summary>コントローラー コンテキストを取得または設定します。</summary>
      <returns>コントローラー コンテキスト。</returns>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Web.Mvc.ValueProviderResult}[],System.Int32)">
      <summary>指定したインデックスを開始位置として、配列にコレクション要素をコピーします。</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.ICollection`1" /> オブジェクトから要素がコピーされる先の 1 次元配列。この配列には、0 から始まるインデックスを使用する必要があります。</param>
      <param name="arrayIndex">コピーの開始位置となる、<paramref name="array" /> の 0 から始まるインデックス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> が多次元です。または<paramref name="arrayIndex" /> が <paramref name="array" /> の長さ以上です。またはソース コレクションに含まれる要素数が、<paramref name="arrayIndex" /> からコピー先の <paramref name="array" /> の末尾までに格納できる数を超えています。または<paramref name="T" /> 型が、コピー先の配列の型に自動的にキャストできません。</exception>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderDictionary.Count">
      <summary>コレクション内の要素の数を取得します。</summary>
      <returns>コレクション内の要素の数。</returns>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.GetEnumerator">
      <summary>コレクションを反復処理するために使用できる列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderDictionary.IsReadOnly">
      <summary>コレクションが読み取り専用かどうかを示す値を取得します。</summary>
      <returns>コレクションが読み取り専用である場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderDictionary.Item(System.String)">
      <summary>指定されたキーを持つ <see cref="T:System.Web.Mvc.ValueProviderResult" /> オブジェクトを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Web.Mvc.ValueProviderResult" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderDictionary.Keys">
      <summary>
        <see cref="T:System.Collections.Generic.IDictionary`2" /> インスタンスのキーが格納されているコレクションを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IDictionary`2" /> インターフェイスを実装するオブジェクトのキーが格納されているコレクション。</returns>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Web.Mvc.ValueProviderResult})">
      <summary>値プロバイダーのコレクションから、最初に出現する指定の項目を削除します。</summary>
      <returns>
        <paramref name="item" /> がコレクションから正常に削除された場合は true。それ以外の場合は false。このメソッドは、<paramref name="item" /> がコレクション内に見つからなかった場合にも、false を返します。</returns>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" /> インスタンスから削除するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> オブジェクトが読み取り専用です。</exception>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.Remove(System.String)">
      <summary>値プロバイダーのコレクションから、指定されたキーを持つ要素を削除します。</summary>
      <returns>要素が正常に削除された場合は true。それ以外の場合は false。このメソッドは、<paramref name="key" /> がコレクションで見つからなかった場合にも false を返します。</returns>
      <param name="key">削除する要素のキー。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> オブジェクトが読み取り専用です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションの反復処理に使用できる列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.System#Web#Mvc#IValueProvider#ContainsPrefix(System.String)">
      <summary>指定したプレフィックスがコレクションに含まれているかどうかを判断します。</summary>
      <returns>指定したプレフィックスがコレクションに含まれている場合は true。それ以外の場合は false。</returns>
      <param name="prefix">検索対象のプレフィックス。</param>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.System#Web#Mvc#IValueProvider#GetValue(System.String)">
      <summary>指定したキーを使用して値オブジェクトを返します。</summary>
      <returns>指定したキーの値オブジェクト。</returns>
      <param name="key">返される値オブジェクトのキー。</param>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.TryGetValue(System.String,System.Web.Mvc.ValueProviderResult@)">
      <summary>指定されたキーを持つ要素の値を取得します。</summary>
      <returns>指定されたキーを持つ要素が <see cref="T:System.Collections.Generic.IDictionary`2" /> を実装するオブジェクトに格納されている場合は true。それ以外の場合は false。</returns>
      <param name="key">取得する要素のキー。</param>
      <param name="value">このメソッドが返されるときに、指定したキーが見つかった場合は、そのキーに関連付けられている値。それ以外の場合は <paramref name="value" /> パラメーターの型に対する既定値。このパラメーターは初期化せずに渡されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が null です。</exception>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderDictionary.Values">
      <summary>
        <see cref="T:System.Collections.Generic.IDictionary`2" /> オブジェクト内の値が格納されているコレクションを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IDictionary`2" /> インターフェイスを実装するオブジェクト内の値のコレクション。</returns>
    </member>
    <member name="T:System.Web.Mvc.ValueProviderFactories">
      <summary>値プロバイダー ファクトリ オブジェクトを作成するためのコンテナーを表します。</summary>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderFactories.Factories">
      <summary>アプリケーションの値プロバイダー ファクトリのコレクションを取得します。</summary>
      <returns>値プロバイダー ファクトリ オブジェクトのコレクション。</returns>
    </member>
    <member name="T:System.Web.Mvc.ValueProviderFactory">
      <summary>値プロバイダー オブジェクトを作成するためのファクトリを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderFactory.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ValueProviderFactory" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderFactory.GetValueProvider(System.Web.Mvc.ControllerContext)">
      <summary>指定されたコントローラー コンテキストの値プロバイダー オブジェクトを返します。</summary>
      <returns>値プロバイダー オブジェクト。</returns>
      <param name="controllerContext">現在の HTTP 要求に関する情報をカプセル化するオブジェクト。</param>
    </member>
    <member name="T:System.Web.Mvc.ValueProviderFactoryCollection">
      <summary>アプリケーションの値プロバイダー ファクトリのコレクションを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderFactoryCollection.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ValueProviderFactoryCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderFactoryCollection.#ctor(System.Collections.Generic.IList{System.Web.Mvc.ValueProviderFactory})">
      <summary>指定された値プロバイダー ファクトリのリストを使用して、<see cref="T:System.Web.Mvc.ValueProviderFactoryCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="list">コレクションの初期化に使用する値プロバイダー ファクトリのリスト。</param>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderFactoryCollection.ClearItems">
      <summary>コレクションからすべての要素を削除します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderFactoryCollection.GetValueProvider(System.Web.Mvc.ControllerContext)">
      <summary>指定されたコントローラー コンテキストの値プロバイダー ファクトリを返します。</summary>
      <returns>指定されたコントローラー コンテキストの値プロバイダー ファクトリ オブジェクト。</returns>
      <param name="controllerContext">現在の HTTP 要求に関する情報をカプセル化するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderFactoryCollection.InsertItem(System.Int32,System.Web.Mvc.ValueProviderFactory)">
      <summary>指定したインデックス位置に、指定された値プロバイダー ファクトリ オブジェクトを挿入します。</summary>
      <param name="index">値プロバイダーを挿入するコレクション内の 0 から始まるインデックス位置。</param>
      <param name="item">挿入する値プロバイダー ファクトリ オブジェクト。</param>
      <exception cref="[ArgumentNullException]">
        <paramref name="item" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderFactoryCollection.RemoveItem(System.Int32)">
      <summary>
        <see cref="T:System.Collections.ObjectModel.Collection`1" /> の指定されたインデックス位置にある要素を削除します。</summary>
      <param name="index">削除する要素の 0 から始まるインデックス。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="Index" /> が 0 未満です。または<paramref name="Index" /> それ以上<see cref="T:System.Collections.ObjectModel.Collection`1.Count" /></exception>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderFactoryCollection.SetItem(System.Int32,System.Web.Mvc.ValueProviderFactory)">
      <summary>指定したインデックス位置に、指定された値プロバイダー ファクトリ オブジェクトを設定します。</summary>
      <param name="index">値プロバイダーを挿入するコレクション内の 0 から始まるインデックス位置。</param>
      <param name="item">設定する値プロバイダー ファクトリ オブジェクト。</param>
      <exception cref="[ArgumentNullException]">
        <paramref name="item" /> パラメーターが null です。</exception>
    </member>
    <member name="T:System.Web.Mvc.ValueProviderResult">
      <summary>(フォーム ポストやクエリ文字列などからの) 値をアクション メソッド引数プロパティまたはアクション メソッド引数自体にバインドした結果を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderResult.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ValueProviderResult" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderResult.#ctor(System.Object,System.String,System.Globalization.CultureInfo)">
      <summary>指定された生の値、試行された値、およびカルチャ情報を使用して、<see cref="T:System.Web.Mvc.ValueProviderResult" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="rawValue">生の値。</param>
      <param name="attemptedValue">試行された値。</param>
      <param name="culture">カルチャ。</param>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderResult.AttemptedValue">
      <summary>表示用の文字列に変換される生の値を取得または設定します。</summary>
      <returns>生の値。</returns>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderResult.ConvertTo(System.Type)">
      <summary>この結果でカプセル化された値を、指定された型に変換します。</summary>
      <returns>変換された値。</returns>
      <param name="type">対象の型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderResult.ConvertTo(System.Type,System.Globalization.CultureInfo)">
      <summary>指定されたカルチャ情報を使用して、この結果でカプセル化された値を、指定された型に変換します。</summary>
      <returns>変換された値。</returns>
      <param name="type">対象の型。</param>
      <param name="culture">変換で使用するカルチャ。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> パラメーターが null です。</exception>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderResult.Culture">
      <summary>カルチャを取得または設定します。</summary>
      <returns>カルチャ。</returns>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderResult.RawValue">
      <summary>値プロバイダーから提供された生の値を取得または設定します。</summary>
      <returns>生の値。</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewContext">
      <summary>ビューの表示に関連する情報をカプセル化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewContext.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ViewContext" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewContext.#ctor(System.Web.Mvc.ControllerContext,System.Web.Mvc.IView,System.Web.Mvc.ViewDataDictionary,System.Web.Mvc.TempDataDictionary,System.IO.TextWriter)">
      <summary>指定されたコントローラー コンテキスト、ビュー、ビュー データ ディクショナリ、一時データ ディクショナリ、およびテキスト ライターを使用して、<see cref="T:System.Web.Mvc.ViewContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="controllerContext">HTTP 要求に関する情報をカプセル化します。</param>
      <param name="view">表示の対象となるビュー。</param>
      <param name="viewData">ビューを表示するために必要なデータが格納されているディクショナリ。</param>
      <param name="tempData">ビューの一時データが格納されているディクショナリ。</param>
      <param name="writer">HTML 出力を書き込むために使用するテキスト ライター オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">パラメーターの 1 つが null です。</exception>
    </member>
    <member name="P:System.Web.Mvc.ViewContext.ClientValidationEnabled">
      <summary>クライアント側の検証が有効であるかどうかを示す値を取得または設定します。</summary>
      <returns>クライアント側の検証が有効である場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewContext.FormContext">
      <summary>HTML フォームからの入力データを検証および処理するために必要な情報をカプセル化するオブジェクトを取得または設定します。</summary>
      <returns>HTML フォームからの入力データを検証および処理するために必要な情報をカプセル化するオブジェクト。</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewContext.OutputClientValidation">
      <summary>クライアント検証情報を HTTP 応答に書き込みます。</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewContext.TempData">
      <summary>この要求に関連付けられ、1 つの要求だけで使用できるデータを取得します。</summary>
      <returns>一時データ。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewContext.UnobtrusiveJavaScriptEnabled">
      <summary>控えめな JavaScript が有効であるかどうかを示す値を取得または設定します。</summary>
      <returns>控えめな JavaScript が有効である場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewContext.ValidationMessageElement">
      <summary>
        <see cref="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessage(System.Web.Mvc.HtmlHelper,System.String)" /> および他のオーバーロードによって生成されるトップレベルのメッセージをラップするために使用される要素名。</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewContext.ValidationSummaryMessageElement">
      <summary>
        <see cref="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper)" /> および他のオーバーロードによって生成されるトップレベルのメッセージをラップするために使用される要素名。</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewContext.View">
      <summary>ブラウザーに表示する <see cref="T:System.Web.Mvc.IView" /> インターフェイスを実装するオブジェクトを取得します。</summary>
      <returns>ビュー。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewContext.ViewBag">
      <summary>動的なビュー データ ディクショナリを取得します。</summary>
      <returns>動的なビュー データのディクショナリ。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewContext.ViewData">
      <summary>ビューに渡されるビュー データを取得します。</summary>
      <returns>ビュー データ。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewContext.Writer">
      <summary>HTML 出力を書き込むために使用するテキスト ライター オブジェクトを取得または設定します。</summary>
      <returns>HTML 出力の書き込みに使用するオブジェクト。</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewDataDictionary">
      <summary>データをコントローラーとビューの間で受け渡すために使用されるコンテナーを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ViewDataDictionary" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.#ctor(System.Object)">
      <summary>指定されたモデルを使用して、<see cref="T:System.Web.Mvc.ViewDataDictionary" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="model">モデル。</param>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.#ctor(System.Web.Mvc.ViewDataDictionary)">
      <summary>指定されたディクショナリを使用して、<see cref="T:System.Web.Mvc.ViewDataDictionary" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dictionary">ディクショナリ。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>指定された項目をコレクションに追加します。</summary>
      <param name="item">コレクションに追加するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">コレクションが読み取り専用です。</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.Add(System.String,System.Object)">
      <summary>指定されたキーおよび値を使用して、要素をコレクションに追加します。</summary>
      <param name="key">追加する要素のキー。</param>
      <param name="value">追加する要素の値。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> オブジェクトが読み取り専用です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">同じキーを持つ要素が、<see cref="T:System.Collections.Generic.IDictionary`2" /> オブジェクトに既に存在します。</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.Clear">
      <summary>コレクションからすべての項目を削除します。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> オブジェクトが読み取り専用です。</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>指定した項目がコレクションに格納されているかどうかを確認します。</summary>
      <returns>
        <paramref name="item" /> がコレクション内で見つかった場合は true。それ以外の場合は false。</returns>
      <param name="item">コレクション内で検索するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.ContainsKey(System.String)">
      <summary>指定されたキーを持つ要素がコレクションに格納されているかどうかを確認します。</summary>
      <returns>指定されたキーを持つ要素がコレクションに格納されている場合は true。それ以外の場合は false。</returns>
      <param name="key">コレクション内で検索する要素のキー。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>特定のインデックスを開始位置として、配列にコレクションの要素をコピーします。</summary>
      <param name="array">コレクション要素のコピー先となる 1 次元配列。この配列には、0 から始まるインデックスを使用する必要があります。</param>
      <param name="arrayIndex">コピーの開始位置となる、<paramref name="array" /> 内の 0 から始まるインデックス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> が多次元です。または<paramref name="arrayIndex" /> が <paramref name="array" /> の長さ以上です。またはソース コレクションに含まれる要素数が、<paramref name="arrayIndex" /> からコピー先の <paramref name="array" /> の末尾までに格納できる数を超えています。または<paramref name="T" /> 型が、コピー先の <paramref name="array" /> の型に自動的にキャストできません。</exception>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary.Count">
      <summary>コレクション内の要素の数を取得します。</summary>
      <returns>コレクション内の要素の数。</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.Eval(System.String)">
      <summary>指定された式を評価します。</summary>
      <returns>評価の結果。</returns>
      <param name="expression">式。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.Eval(System.String,System.String)">
      <summary>指定された書式を使用して、指定された式を評価します。</summary>
      <returns>評価の結果。</returns>
      <param name="expression">式。</param>
      <param name="format">書式を指定します。</param>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.GetEnumerator">
      <summary>コレクションを反復処理するために使用できる列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.GetViewDataInfo(System.String)">
      <summary>
        <paramref name="expression" /> パラメーターの定義に従って、ビュー データに関する情報を返します。</summary>
      <returns>
        <paramref name="expression" /> パラメーターで定義されているビュー データ情報を格納するオブジェクト。</returns>
      <param name="expression">返すビュー データ情報を定義したキーと値のペアのセット。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" /> パラメーターが null または空です。</exception>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary.IsReadOnly">
      <summary>コレクションが読み取り専用かどうかを示す値を取得します。</summary>
      <returns>コレクションが読み取り専用である場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary.Item(System.String)">
      <summary>指定されたキーに関連付けられている項目を取得または設定します。</summary>
      <returns>選択された項目の値。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary.Keys">
      <summary>このディクショナリのキーが格納されているコレクションを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IDictionary`2" /> を実装するオブジェクトのキーが格納されているコレクション。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary.Model">
      <summary>ビュー データに関連付けられているモデルを取得または設定します。</summary>
      <returns>ビュー データに関連付けられているモデル。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary.ModelMetadata">
      <summary>モデルに関する情報を取得または設定します。</summary>
      <returns>モデルに関する情報。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary.ModelState">
      <summary>モデルの状態を取得します。</summary>
      <returns>モデルの状態。</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>コレクションで最初に出現した、指定されたオブジェクトを削除します。</summary>
      <returns>
        <paramref name="item" /> がコレクションから正常に削除された場合は true。それ以外の場合は false。このメソッドは、<paramref name="item" /> がコレクション内に見つからなかった場合にも、false を返します。</returns>
      <param name="item">コレクションから削除するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">コレクションが読み取り専用です。</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.Remove(System.String)">
      <summary>指定されたキーを使用して、要素をコレクションから削除します。</summary>
      <returns>要素が正常に削除された場合は true。それ以外の場合は false。このメソッドは、<paramref name="key" /> が元のコレクションで見つからなかった場合にも、false を返します。</returns>
      <param name="key">削除する要素のキー。</param>
      <exception cref="T:System.NotSupportedException">コレクションが読み取り専用です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.SetModel(System.Object)">
      <summary>ビューに使用するデータ モデルを設定します。</summary>
      <param name="value">ビューに使用するデータ モデル。</param>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理するために使用できる列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary.TemplateInfo">
      <summary>現在のテンプレート コンテキストに関する情報がカプセル化されたオブジェクトを取得または設定します。</summary>
      <returns>現在のテンプレートに関する情報を格納するオブジェクト。</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.TryGetValue(System.String,System.Object@)">
      <summary>指定されたキーに関連付けられている値の取得を試みます。</summary>
      <returns>指定されたキーを持つ要素がコレクションに格納されている場合は true。それ以外の場合は false。</returns>
      <param name="key">取得する値のキー。</param>
      <param name="value">このメソッドが返されるときに、指定したキーが見つかった場合は、そのキーに関連付けられている値。それ以外の場合は <paramref name="value" /> パラメーターの型に対する既定値。このパラメーターは初期化せずに渡されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が null です。</exception>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary.Values">
      <summary>このディクショナリ内の値が格納されているコレクションを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IDictionary`2" /> を実装するオブジェクトの値が格納されているコレクション。</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewDataDictionary`1">
      <summary>厳密に型指定されたデータをコントローラーとビューの間で受け渡すために使用されるコンテナーを表します。</summary>
      <typeparam name="TModel">モデルの型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary`1.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary`1.#ctor(System.Web.Mvc.ViewDataDictionary)">
      <summary>指定したビュー データ ディクショナリを使用して、<see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="viewDataDictionary">このインスタンスにコピーする既存のビュー データ ディクショナリ。</param>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary`1.#ctor(`0)">
      <summary>指定されたモデルを使用して、<see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="model">ビューに使用するデータ モデル。</param>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary`1.Model">
      <summary>モデルを取得または設定します。</summary>
      <returns>データ モデルへの参照。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary`1.ModelMetadata">
      <summary>モデルに関する情報を取得または設定します。</summary>
      <returns>モデルに関する情報。</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary`1.SetModel(System.Object)">
      <summary>ビューに使用するデータ モデルを設定します。</summary>
      <param name="value">ビューに使用するデータ モデル。</param>
      <exception cref="T:System.InvalidOperationException">モデルの設定中にエラーが発生しました。</exception>
    </member>
    <member name="T:System.Web.Mvc.ViewDataInfo">
      <summary>テンプレートの開発に使用する現在のテンプレート コンテンツに関する情報、およびテンプレートとやり取りする HTML ヘルパーに関する情報をカプセル化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewDataInfo.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ViewDataInfo" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewDataInfo.#ctor(System.Func{System.Object})">
      <summary>T:System.Web.Mvc.ViewDataInfo クラスの新しいインスタンスを初期化し、ビュー データ情報にアクセスするためのデリゲートを関連付けます。</summary>
      <param name="valueAccessor">ビュー データ情報へのアクセス方法を定義するデリゲート。</param>
    </member>
    <member name="P:System.Web.Mvc.ViewDataInfo.Container">
      <summary>テンプレートに表示する値を格納するオブジェクトを取得または設定します。</summary>
      <returns>テンプレートに表示する値を格納するオブジェクト。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewDataInfo.PropertyDescriptor">
      <summary>テンプレートに表示するプロパティの説明を取得または設定します。</summary>
      <returns>テンプレートに表示するプロパティの説明。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewDataInfo.Value">
      <summary>テンプレートに表示する現在の値を取得または設定します。</summary>
      <returns>テンプレートに表示する現在の値。</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewEngineCollection">
      <summary>アプリケーションで使用できるビュー エンジンのコレクションを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewEngineCollection.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ViewEngineCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewEngineCollection.#ctor(System.Collections.Generic.IList{System.Web.Mvc.IViewEngine})">
      <summary>ビュー エンジンの指定されたリストを使用して、<see cref="T:System.Web.Mvc.ViewEngineCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="list">新しいコレクションによってラップされているリスト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> が null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewEngineCollection.ClearItems">
      <summary>
        <see cref="T:System.Collections.ObjectModel.Collection`1" /> からすべての要素を削除します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewEngineCollection.FindPartialView(System.Web.Mvc.ControllerContext,System.String)">
      <summary>指定されたコントローラー コンテキストを使用して指定された部分ビューを検索します。</summary>
      <returns>部分ビュー。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="partialViewName">部分ビューの名前。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controllerContext" /> パラメーターが null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partialViewName" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewEngineCollection.FindView(System.Web.Mvc.ControllerContext,System.String,System.String)">
      <summary>指定されたコントローラー コンテキストとマスター ビューを使用して、指定されたビューを検索します。</summary>
      <returns>ビュー。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="viewName">ビューの名前。</param>
      <param name="masterName">マスター ビューの名前。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controllerContext" /> パラメーターが null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partialViewName" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewEngineCollection.InsertItem(System.Int32,System.Web.Mvc.IViewEngine)">
      <summary>コレクション内の指定したインデックスの位置に要素を挿入します。</summary>
      <param name="index">項目を挿入する位置の 0 から始まるインデックス。</param>
      <param name="item">挿入するオブジェクト。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。または<paramref name="index" /> が、コレクション内の項目数を超えています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewEngineCollection.RemoveItem(System.Int32)">
      <summary>
        <see cref="T:System.Collections.ObjectModel.Collection`1" /> の指定されたインデックス位置にある要素を削除します。</summary>
      <param name="index">削除する要素の 0 から始まるインデックス。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。または<paramref name="index" /> それ以上<see cref="T:System.Collections.ObjectModel.Collection`1.Count" /></exception>
    </member>
    <member name="M:System.Web.Mvc.ViewEngineCollection.SetItem(System.Int32,System.Web.Mvc.IViewEngine)">
      <summary>指定したインデックス位置にある要素を置き換えます。</summary>
      <param name="index">置き換える要素の 0 から始まるインデックス番号。</param>
      <param name="item">指定したインデックス位置に存在する要素の新しい値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。または<paramref name="index" /> が、コレクション内の項目数を超えています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> パラメーターが null です。</exception>
    </member>
    <member name="T:System.Web.Mvc.ViewEngineResult">
      <summary>ビュー エンジンの検索結果を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewEngineResult.#ctor(System.Collections.Generic.IEnumerable{System.String})">
      <summary>指定された検索対象の場所を使用して、<see cref="T:System.Web.Mvc.ViewEngineResult" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="searchedLocations">検索された場所。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchedLocations" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewEngineResult.#ctor(System.Web.Mvc.IView,System.Web.Mvc.IViewEngine)">
      <summary>指定されたビューおよびビュー エンジンを使用して、<see cref="T:System.Web.Mvc.ViewEngineResult" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="view">ビュー。</param>
      <param name="viewEngine">ビュー エンジン。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="view " /> パラメーターまたは <paramref name="viewEngine" /> パラメーターが null です。</exception>
    </member>
    <member name="P:System.Web.Mvc.ViewEngineResult.SearchedLocations">
      <summary>検索された場所を取得または設定します。</summary>
      <returns>検索された場所。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewEngineResult.View">
      <summary>ビューを取得または設定します。</summary>
      <returns>ビュー。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewEngineResult.ViewEngine">
      <summary>ビュー エンジンを取得または設定します。</summary>
      <returns>ビュー エンジン。</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewEngines">
      <summary>アプリケーションで使用できるビュー エンジンのコレクションを表します。</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewEngines.Engines">
      <summary>ビュー エンジンを取得します。</summary>
      <returns>ビュー エンジン。</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewMasterPage">
      <summary>マスター ビュー ページを構築するために必要な情報を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewMasterPage.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ViewMasterPage" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage.Ajax">
      <summary>マスター ページの AJAX スクリプトを取得します。</summary>
      <returns>マスター ページの AJAX スクリプト。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage.Html">
      <summary>マスター ページの HTML を取得します。</summary>
      <returns>マスター ページの HTML。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage.Model">
      <summary>モデルを取得します。</summary>
      <returns>モデル。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage.TempData">
      <summary>一時データを取得します。</summary>
      <returns>一時データ。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage.Url">
      <summary>URL を取得します。</summary>
      <returns>URL。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage.ViewBag">
      <summary>動的なビュー バッグ ディクショナリを取得します。</summary>
      <returns>動的なビュー バッグ ディクショナリ。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage.ViewContext">
      <summary>ビュー コンテキストを取得します。</summary>
      <returns>ビュー コンテキスト。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage.ViewData">
      <summary>ビュー データを取得します。</summary>
      <returns>ビュー データ。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage.Writer">
      <summary>マスター ページを表示するために使用されるライターを取得します。</summary>
      <returns>マスター ページを表示するために使用されるライター。</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewMasterPage`1">
      <summary>厳密に型指定されたマスター ビュー ページを構築するために必要な情報を表します。</summary>
      <typeparam name="TModel">モデルの型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.ViewMasterPage`1.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ViewMasterPage`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage`1.Ajax">
      <summary>マスター ページの AJAX スクリプトを取得します。</summary>
      <returns>マスター ページの AJAX スクリプト。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage`1.Html">
      <summary>マスター ページの HTML を取得します。</summary>
      <returns>マスター ページの HTML。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage`1.Model">
      <summary>モデルを取得します。</summary>
      <returns>データ モデルへの参照。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage`1.ViewData">
      <summary>ビュー データを取得します。</summary>
      <returns>ビュー データ。</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewPage">
      <summary>ビューを Web フォーム ページとして表示するために必要なプロパティおよびメソッドを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewPage.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ViewPage" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.Ajax">
      <summary>AJAX シナリオで HTML を表示するために使用する <see cref="T:System.Web.Mvc.AjaxHelper" /> オブジェクトを取得または設定します。</summary>
      <returns>ビューに関連付けられている AJAX ヘルパー オブジェクト。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.Html">
      <summary>HTML 要素を表示するために使用する <see cref="T:System.Web.Mvc.HtmlHelper" /> オブジェクトを取得または設定します。</summary>
      <returns>ビューに関連付けられている HTML ヘルパー オブジェクト。</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewPage.InitHelpers">
      <summary>
        <see cref="P:System.Web.Mvc.ViewPage.Ajax" />、<see cref="P:System.Web.Mvc.ViewPage.Html" />、および <see cref="P:System.Web.Mvc.ViewPage.Url" /> の各プロパティを初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.MasterLocation">
      <summary>マスター ビューのパスを取得または設定します。</summary>
      <returns>マスター ビューのパス。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.Model">
      <summary>関連付けられた <see cref="T:System.Web.Mvc.ViewDataDictionary" /> オブジェクトの Model プロパティを取得します。</summary>
      <returns>関連付けられた <see cref="T:System.Web.Mvc.ViewDataDictionary" /> オブジェクトの Model プロパティ。</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewPage.OnPreInit(System.EventArgs)">
      <summary>ページの初期化の開始時に <see cref="E:System.Web.UI.Page.PreInit" /> イベントを発生させます。</summary>
      <param name="e">イベントのデータ。</param>
    </member>
    <member name="M:System.Web.Mvc.ViewPage.ProcessRequest(System.Web.HttpContext)">
      <summary>ASP.NET MVC フレームワークによって、指定された HTTP 要求の処理を有効にします。</summary>
      <param name="context">現在の HTTP 要求に関する HTTP 固有の情報をカプセル化するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.ViewPage.Render(System.Web.UI.HtmlTextWriter)">
      <summary>表示するページの内容を受け取る <see cref="T:System.Web.UI.HtmlTextWriter" /> オブジェクトを初期化します。</summary>
      <param name="writer">ページの内容を受け取るオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.ViewPage.RenderView(System.Web.Mvc.ViewContext)">
      <summary>指定されたビュー コンテキストを使用して、ビュー ページを応答に表示します。</summary>
      <param name="viewContext">ビューを表示するために必要な情報 (コントローラー コンテキスト、フォーム コンテキスト、一時データ、関連するビューのビュー データなど) をカプセル化するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.ViewPage.SetTextWriter(System.IO.TextWriter)">
      <summary>注意: この API は、互換性のために残されています。ビューを応答に表示するために使用するテキスト ライターを設定します。</summary>
      <param name="textWriter">ビューを応答に表示するために使用されるライター。</param>
    </member>
    <member name="M:System.Web.Mvc.ViewPage.SetViewData(System.Web.Mvc.ViewDataDictionary)">
      <summary>関連するビューのビュー データ ディクショナリを設定します。</summary>
      <param name="viewData">ビューに渡すデータのディクショナリ。</param>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.TempData">
      <summary>ビューに渡す一時データを取得します。</summary>
      <returns>ビューに渡す一時データ。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.Url">
      <summary>表示するページの URL を取得または設定します。</summary>
      <returns>表示するページの URL。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.ViewBag">
      <summary>ビュー バッグを取得します。</summary>
      <returns>ビュー バッグ。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.ViewContext">
      <summary>ビューを表示するために使用する情報を取得または設定します。</summary>
      <returns>ビューを表示するために使用する情報 (フォーム コンテキスト、一時データ、関連するビューのビュー データなど)。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.ViewData">
      <summary>コントローラーとビューの間で受け渡すデータを格納するディクショナリを取得または設定します。</summary>
      <returns>コントローラーとビューの間で受け渡しするデータを格納するディクショナリ。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.Writer">
      <summary>ビューを応答に表示するために使用するテキスト ライターを取得します。</summary>
      <returns>ビューを応答に表示するために使用するテキスト ライター。</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewPage`1">
      <summary>厳密に型指定されたマスター ビューを Web フォーム ページとして表示するために必要な情報を表します。</summary>
      <typeparam name="TModel">モデルの型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.ViewPage`1.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ViewPage`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewPage`1.Ajax">
      <summary>AJAX シナリオでの HTML の表示をサポートする <see cref="T:System.Web.Mvc.AjaxHelper`1" /> オブジェクトを取得または設定します。</summary>
      <returns>ビューに関連付けられている AJAX ヘルパー オブジェクト。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewPage`1.Html">
      <summary>レンダリング要素をサポートする <see cref="T:System.Web.Mvc.HtmlHelper" /> オブジェクトを取得または設定します。</summary>
      <returns>ビューに関連付けられている HTML ヘルパー オブジェクト。</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewPage`1.InitHelpers">
      <summary>
        <see cref="P:System.Web.Mvc.ViewPage`1.Ajax" /> プロパティおよび <see cref="P:System.Web.Mvc.ViewPage`1.Html" /> プロパティをインスタンス化および初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewPage`1.Model">
      <summary>関連付けられた <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> オブジェクトの <see cref="P:System.Web.Mvc.ViewDataDictionary`1.Model" /> プロパティを取得します。</summary>
      <returns>データ モデルへの参照。</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewPage`1.SetViewData(System.Web.Mvc.ViewDataDictionary)">
      <summary>関連するビューのビュー データ ディクショナリを設定します。</summary>
      <param name="viewData">ビューに渡すデータのディクショナリ。</param>
    </member>
    <member name="P:System.Web.Mvc.ViewPage`1.ViewData">
      <summary>コントローラーとビューの間で受け渡すデータを格納するディクショナリを取得または設定します。</summary>
      <returns>コントローラーとビューの間で受け渡しするデータを格納するディクショナリ。</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewResult">
      <summary>
        <see cref="T:System.Web.Mvc.IViewEngine" /> オブジェクトから返された <see cref="T:System.Web.Mvc.IView" /> インスタンスを使用してビューを表示するために使用されるクラスを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewResult.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ViewResult" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewResult.FindView(System.Web.Mvc.ControllerContext)">
      <summary>登録されているビュー エンジンを検索し、ビューを表示するために使用されるオブジェクトを返します。</summary>
      <returns>ビューを表示するために使用されるオブジェクト。</returns>
      <param name="context">コントローラー コンテキスト。</param>
      <exception cref="T:System.InvalidOperationException">メソッドによるビューの検索中にエラーが発生しました。</exception>
    </member>
    <member name="P:System.Web.Mvc.ViewResult.MasterName">
      <summary>ビューを表示するときに使用されるマスター ビュー (マスター ページやテンプレートなど) の名前を取得します。</summary>
      <returns>マスター ビューの名前。</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewResultBase">
      <summary>モデルをビューに提供し、ビューを応答に表示するために使用される基本クラスを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewResultBase.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ViewResultBase" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewResultBase.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>アクション呼び出し元によって呼び出されると、ビューを応答に表示します。</summary>
      <param name="context">結果が実行されるコンテキスト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewResultBase.FindView(System.Web.Mvc.ControllerContext)">
      <summary>ビューを表示するために使用される <see cref="T:System.Web.Mvc.ViewEngineResult" /> オブジェクトを返します。</summary>
      <returns>ビュー エンジン。</returns>
      <param name="context">コンテキスト。</param>
    </member>
    <member name="P:System.Web.Mvc.ViewResultBase.Model">
      <summary>ビュー データ モデルを取得します。</summary>
      <returns>ビュー データ モデル。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewResultBase.TempData">
      <summary>この結果の <see cref="T:System.Web.Mvc.TempDataDictionary" /> オブジェクトを取得または設定します。</summary>
      <returns>一時データ。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewResultBase.View">
      <summary>応答に表示される <see cref="T:System.Web.Mvc.IView" /> オブジェクトを取得または設定します。</summary>
      <returns>ビュー。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewResultBase.ViewBag">
      <summary>ビュー バッグを取得します。</summary>
      <returns>ビュー バッグ。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewResultBase.ViewData">
      <summary>この結果のビュー データ <see cref="T:System.Web.Mvc.ViewDataDictionary" /> オブジェクトを取得または設定します。</summary>
      <returns>ビュー データ。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewResultBase.ViewEngineCollection">
      <summary>この結果に関連付けられているビュー エンジンのコレクションを取得または設定します。</summary>
      <returns>ビュー エンジンのコレクション。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewResultBase.ViewName">
      <summary>表示するビューの名前を取得または設定します。</summary>
      <returns>ビューの名前。</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewStartPage">
      <summary>ビューのスタート (マスター) ページを実装するために使用できる抽象クラスを提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewStartPage.#ctor">
      <summary>派生クラスで実装された場合、<see cref="T:System.Web.Mvc.ViewStartPage" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewStartPage.Html">
      <summary>派生クラスで実装された場合、ビューのスタート ページの HTML マークアップを取得します。</summary>
      <returns>ビューのスタート ページの HTML マークアップ。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewStartPage.Url">
      <summary>派生クラスで実装された場合、ビューのスタート ページの URL を取得します。</summary>
      <returns>ビューのスタート ページの URL。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewStartPage.ViewContext">
      <summary>派生クラスで実装された場合に、ビューのスタート ページのビュー コンテキストを取得します。</summary>
      <returns>ビューのスタート ページのビュー コンテキスト。</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewTemplateUserControl">
      <summary>
        <see cref="T:System.Web.Mvc.TemplateInfo" /> オブジェクトのコンテナーを提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewTemplateUserControl.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ViewTemplateUserControl" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Web.Mvc.ViewTemplateUserControl`1">
      <summary>
        <see cref="T:System.Web.Mvc.TemplateInfo" /> オブジェクトのコンテナーを提供します。</summary>
      <typeparam name="TModel">モデルの型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.ViewTemplateUserControl`1.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ViewTemplateUserControl`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewTemplateUserControl`1.FormattedModelValue">
      <summary>書式適用済みの値を取得します。</summary>
      <returns>書式適用済みの値。</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewType">
      <summary>ビューの種類を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewType.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ViewType" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewType.TypeName">
      <summary>型の名前を取得または設定します。</summary>
      <returns>型の名前。</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewUserControl">
      <summary>ユーザー コントロールを構築するために必要な情報を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewUserControl.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ViewUserControl" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.Ajax">
      <summary>ビューの AJAX スクリプトを取得します。</summary>
      <returns>ビューの AJAX スクリプト。</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewUserControl.EnsureViewData">
      <summary>ビュー データが存在する場合に、そのビュー データがユーザー コントロールの <see cref="T:System.Web.Mvc.ViewDataDictionary" /> オブジェクトに確実に追加されるようにします。</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.Html">
      <summary>ビューの HTML を取得します。</summary>
      <returns>ビューの HTML。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.Model">
      <summary>モデルを取得します。</summary>
      <returns>モデル。</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewUserControl.RenderView(System.Web.Mvc.ViewContext)">
      <summary>指定されたビュー コンテキストを使用してビューを表示します。</summary>
      <param name="viewContext">ビュー コンテキスト。</param>
    </member>
    <member name="M:System.Web.Mvc.ViewUserControl.SetTextWriter(System.IO.TextWriter)">
      <summary>ビューを応答に表示するために使用するテキスト ライターを設定します。</summary>
      <param name="textWriter">ビューを応答に表示するために使用されるライター。</param>
    </member>
    <member name="M:System.Web.Mvc.ViewUserControl.SetViewData(System.Web.Mvc.ViewDataDictionary)">
      <summary>指定されたビュー データを使用してビュー データ ディクショナリを設定します。</summary>
      <param name="viewData">ビュー データ。</param>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.TempData">
      <summary>一時データ ディクショナリを取得します。</summary>
      <returns>一時データ ディクショナリ。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.Url">
      <summary>ビューの URL を取得します。</summary>
      <returns>ビューの URL。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.ViewBag">
      <summary>ビュー バッグを取得します。</summary>
      <returns>ビュー バッグ。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.ViewContext">
      <summary>ビュー コンテキストを取得または設定します。</summary>
      <returns>ビュー コンテキスト。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.ViewData">
      <summary>ビュー データ ディクショナリを取得または設定します。</summary>
      <returns>ビュー データ ディクショナリ。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.ViewDataKey">
      <summary>ビュー データ キーを取得または設定します。</summary>
      <returns>ビュー データ キー。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.Writer">
      <summary>ビューを応答に表示するために使用されるライターを取得します。</summary>
      <returns>ビューを応答に表示するために使用されるライター。</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewUserControl`1">
      <summary>厳密に型指定されたユーザー コントロールを構築するために必要な情報を表します。</summary>
      <typeparam name="TModel">モデルの型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.ViewUserControl`1.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.ViewUserControl`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl`1.Ajax">
      <summary>ビューの AJAX スクリプトを取得します。</summary>
      <returns>ビューの AJAX スクリプト。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl`1.Html">
      <summary>ビューの HTML を取得します。</summary>
      <returns>ビューの HTML。</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl`1.Model">
      <summary>モデルを取得します。</summary>
      <returns>データ モデルへの参照。</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewUserControl`1.SetViewData(System.Web.Mvc.ViewDataDictionary)">
      <summary>ビューのビュー データを設定します。</summary>
      <param name="viewData">ビュー データ。</param>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl`1.ViewData">
      <summary>ビュー データを取得または設定します。</summary>
      <returns>ビュー データ。</returns>
    </member>
    <member name="T:System.Web.Mvc.VirtualPathProviderViewEngine">
      <summary>
        <see cref="T:System.Web.Mvc.IViewEngine" /> インターフェイスの抽象基本クラス実装を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.VirtualPathProviderViewEngine.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.VirtualPathProviderViewEngine" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.VirtualPathProviderViewEngine.AreaMasterLocationFormats">
      <summary>領域が有効なマスターの場所の形式を取得または設定します。</summary>
      <returns>領域が有効なマスターの場所の形式。</returns>
    </member>
    <member name="P:System.Web.Mvc.VirtualPathProviderViewEngine.AreaPartialViewLocationFormats">
      <summary>領域が有効な部分ビューの場所の形式を取得または設定します。</summary>
      <returns>領域が有効な部分ビューの場所の形式。</returns>
    </member>
    <member name="P:System.Web.Mvc.VirtualPathProviderViewEngine.AreaViewLocationFormats">
      <summary>領域が有効なビューの場所の形式を取得または設定します。</summary>
      <returns>領域が有効なビューの場所の形式。</returns>
    </member>
    <member name="M:System.Web.Mvc.VirtualPathProviderViewEngine.CreatePartialView(System.Web.Mvc.ControllerContext,System.String)">
      <summary>指定されたコントローラー コンテキストを使用して、指定された部分ビューを作成します。</summary>
      <returns>部分ビューへの参照。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="partialPath">新しい部分ビューの部分パス。</param>
    </member>
    <member name="M:System.Web.Mvc.VirtualPathProviderViewEngine.CreateView(System.Web.Mvc.ControllerContext,System.String,System.String)">
      <summary>コントローラー コンテキスト、ビューのパス、およびマスター ビューのパスを使用して、指定されたビューを作成します。</summary>
      <returns>ビューへの参照。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="viewPath">ビューのパス。</param>
      <param name="masterPath">マスター ビューのパス。</param>
    </member>
    <member name="P:System.Web.Mvc.VirtualPathProviderViewEngine.DisplayModeProvider">
      <summary>表示モード プロバイダーを取得または設定します。</summary>
      <returns>表示モード プロバイダー。</returns>
    </member>
    <member name="M:System.Web.Mvc.VirtualPathProviderViewEngine.FileExists(System.Web.Mvc.ControllerContext,System.String)">
      <summary>指定されたコントローラー コンテキストを使用して、指定されたパスにファイルがあるかどうかを示す値を返します。</summary>
      <returns>ファイルが指定したパスにある場合は true。それ以外の場合は false。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="virtualPath">仮想パス。</param>
    </member>
    <member name="P:System.Web.Mvc.VirtualPathProviderViewEngine.FileExtensions">
      <summary>ビューを見つけるために使用するファイル名拡張子を取得または設定します。</summary>
      <returns>ビューを見つけるために使用されるファイル名拡張子。</returns>
    </member>
    <member name="M:System.Web.Mvc.VirtualPathProviderViewEngine.FindPartialView(System.Web.Mvc.ControllerContext,System.String,System.Boolean)">
      <summary>指定されたコントローラー コンテキストを使用して指定された部分ビューを検索します。</summary>
      <returns>部分ビュー。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="partialViewName">部分ビューの名前。</param>
      <param name="useCache">キャッシュされた部分ビューを使用する場合は true。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controllerContext" /> パラメーターは null (Visual Basic では Nothing) です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partialViewName" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.VirtualPathProviderViewEngine.FindView(System.Web.Mvc.ControllerContext,System.String,System.String,System.Boolean)">
      <summary>指定されたコントローラー コンテキストおよびマスター ビュー名を使用して、指定されたビューを検索します。</summary>
      <returns>ページ ビュー。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="viewName">ビューの名前。</param>
      <param name="masterName">マスター ビューの名前。</param>
      <param name="useCache">キャッシュされたビューを使用する場合は true。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controllerContext" /> パラメーターは null (Visual Basic では Nothing) です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="viewName" /> パラメーターが null または空です。</exception>
    </member>
    <member name="P:System.Web.Mvc.VirtualPathProviderViewEngine.MasterLocationFormats">
      <summary>マスターの場所の形式を取得または設定します。</summary>
      <returns>マスターの場所の形式。</returns>
    </member>
    <member name="P:System.Web.Mvc.VirtualPathProviderViewEngine.PartialViewLocationFormats">
      <summary>部分ビューの場所の形式を取得または設定します。</summary>
      <returns>部分ビューの場所の形式。</returns>
    </member>
    <member name="M:System.Web.Mvc.VirtualPathProviderViewEngine.ReleaseView(System.Web.Mvc.ControllerContext,System.Web.Mvc.IView)">
      <summary>指定されたコントローラー コンテキストを使用して、指定されたビューを解放します。</summary>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="view">解放の対象となるビュー。</param>
    </member>
    <member name="P:System.Web.Mvc.VirtualPathProviderViewEngine.ViewLocationCache">
      <summary>ビューの場所のキャッシュを取得または設定します。</summary>
      <returns>ビューの場所のキャッシュ。</returns>
    </member>
    <member name="P:System.Web.Mvc.VirtualPathProviderViewEngine.ViewLocationFormats">
      <summary>ビューの場所の形式を取得または設定します。</summary>
      <returns>ビューの場所の形式。</returns>
    </member>
    <member name="P:System.Web.Mvc.VirtualPathProviderViewEngine.VirtualPathProvider">
      <summary>仮想パス プロバイダーを取得または設定します。</summary>
      <returns>仮想パス プロバイダー。</returns>
    </member>
    <member name="T:System.Web.Mvc.WebFormView">
      <summary>ASP.NET MVC で Web フォーム ページを構築するために必要な情報を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.WebFormView.#ctor(System.Web.Mvc.ControllerContext,System.String)">
      <summary>コントローラー コンテキストとビューのパスを使用して、<see cref="T:System.Web.Mvc.WebFormView" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="viewPath">ビューのパス。</param>
    </member>
    <member name="M:System.Web.Mvc.WebFormView.#ctor(System.Web.Mvc.ControllerContext,System.String,System.String)">
      <summary>コントローラー コンテキスト、ビューのパス、およびマスター ページへのパスを使用して、<see cref="T:System.Web.Mvc.WebFormView" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="viewPath">ビューのパス。</param>
      <param name="masterPath">マスター ページのパス。</param>
    </member>
    <member name="M:System.Web.Mvc.WebFormView.#ctor(System.Web.Mvc.ControllerContext,System.String,System.String,System.Web.Mvc.IViewPageActivator)">
      <summary>コントローラー コンテキスト、ビューのパス、マスター ページへのパス、および <see cref="T:System.Web.Mvc.IViewPageActivator" /> インスタンスを使用して、<see cref="T:System.Web.Mvc.WebFormView" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="viewPath">ビューのパス。</param>
      <param name="masterPath">マスター ページのパス。</param>
      <param name="viewPageActivator">ビュー ページ アクティベーター インターフェイスのインスタンス。</param>
    </member>
    <member name="P:System.Web.Mvc.WebFormView.MasterPath">
      <summary>マスター パスを取得または設定します。</summary>
      <returns>マスター パス。</returns>
    </member>
    <member name="M:System.Web.Mvc.WebFormView.RenderView(System.Web.Mvc.ViewContext,System.IO.TextWriter,System.Object)">
      <summary>ビューを応答に表示します。</summary>
      <param name="viewContext">ビューを表示するために必要な情報 (コントローラー コンテキスト、フォーム コンテキスト、一時データ、関連するビューのビュー データなど) をカプセル化するオブジェクト。</param>
      <param name="writer">HTML 出力を書き込むために使用するテキスト ライター オブジェクト。</param>
      <param name="instance">ビュー ページ インスタンス。</param>
    </member>
    <member name="T:System.Web.Mvc.WebFormViewEngine">
      <summary>Web フォーム ページを応答に表示するために使用されるビュー エンジンを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.WebFormViewEngine.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.WebFormViewEngine" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.WebFormViewEngine.#ctor(System.Web.Mvc.IViewPageActivator)">
      <summary>指定したビュー ページ アクティベーターを使用して、<see cref="T:System.Web.Mvc.WebFormViewEngine" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="viewPageActivator">
        <see cref="T:System.Web.Mvc.IViewPageActivator" /> インターフェイスを実装するクラスのインスタンス。</param>
    </member>
    <member name="M:System.Web.Mvc.WebFormViewEngine.CreatePartialView(System.Web.Mvc.ControllerContext,System.String)">
      <summary>指定されたコントローラー コンテキストを使用して、指定された部分ビューを作成します。</summary>
      <returns>部分ビュー。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="partialPath">部分パス。</param>
    </member>
    <member name="M:System.Web.Mvc.WebFormViewEngine.CreateView(System.Web.Mvc.ControllerContext,System.String,System.String)">
      <summary>指定されたコントローラー コンテキストとビューおよびマスター ビューのパスを使用して、指定されたビューを作成します。</summary>
      <returns>ビュー。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="viewPath">ビューのパス。</param>
      <param name="masterPath">マスター ビューのパス。</param>
    </member>
    <member name="T:System.Web.Mvc.WebViewPage">
      <summary>ASP.NET Razor 構文を使用するビューを表示するために必要なプロパティおよびメソッドを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.WebViewPage.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.WebViewPage" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.WebViewPage.Ajax">
      <summary>AJAX を使用した HTML の表示に使用される <see cref="T:System.Web.Mvc.AjaxHelper" /> オブジェクトを取得または設定します。</summary>
      <returns>AJAX を使用した HTML の表示に使用される <see cref="T:System.Web.Mvc.AjaxHelper" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Web.Mvc.WebViewPage.ConfigurePage(System.Web.WebPages.WebPageBase)">
      <summary>ページのビュー コンテキストおよびビュー データを設定します。</summary>
      <param name="parentPage">親ページ。</param>
    </member>
    <member name="P:System.Web.Mvc.WebViewPage.Context">
      <summary>ページに関連付けられている <see cref="T:System.Web.HttpContext" /> オブジェクトを取得します。</summary>
      <returns>ページに関連付けられた <see cref="T:System.Web.HttpContext" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Web.Mvc.WebViewPage.ExecutePageHierarchy">
      <summary>ASP.NET Razor 実行パイプラインのページ階層を実行します。</summary>
    </member>
    <member name="P:System.Web.Mvc.WebViewPage.Html">
      <summary>HTML 要素を表示するために使用する <see cref="T:System.Web.Mvc.HtmlHelper" /> オブジェクトを取得または設定します。</summary>
      <returns>HTML 要素の表示に使用される <see cref="T:System.Web.Mvc.HtmlHelper" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Web.Mvc.WebViewPage.InitHelpers">
      <summary>
        <see cref="T:System.Web.Mvc.AjaxHelper" />、<see cref="T:System.Web.Mvc.HtmlHelper" />、および <see cref="T:System.Web.Mvc.UrlHelper" /> の各クラスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.WebViewPage.Model">
      <summary>関連付けられた <see cref="T:System.Web.Mvc.ViewDataDictionary" /> オブジェクトの Model プロパティを取得します。</summary>
      <returns>関連付けられた <see cref="T:System.Web.Mvc.ViewDataDictionary" /> オブジェクトの Model プロパティ。</returns>
    </member>
    <member name="M:System.Web.Mvc.WebViewPage.SetViewData(System.Web.Mvc.ViewDataDictionary)">
      <summary>ビュー データを設定します。</summary>
      <param name="viewData">ビュー データ。</param>
    </member>
    <member name="P:System.Web.Mvc.WebViewPage.TempData">
      <summary>ビューに渡す一時データを取得します。</summary>
      <returns>ビューに渡す一時データ。</returns>
    </member>
    <member name="P:System.Web.Mvc.WebViewPage.Url">
      <summary>表示するページの URL を取得または設定します。</summary>
      <returns>表示するページの URL。</returns>
    </member>
    <member name="P:System.Web.Mvc.WebViewPage.ViewBag">
      <summary>ビュー バッグを取得します。</summary>
      <returns>ビュー バッグ。</returns>
    </member>
    <member name="P:System.Web.Mvc.WebViewPage.ViewContext">
      <summary>ビューを表示するために使用する情報を取得または設定します。</summary>
      <returns>ビューを表示するために使用する情報 (フォーム コンテキスト、一時データ、関連するビューのビュー データなど)。</returns>
    </member>
    <member name="P:System.Web.Mvc.WebViewPage.ViewData">
      <summary>コントローラーとビューの間で受け渡すデータを格納するディクショナリを取得または設定します。</summary>
      <returns>コントローラーとビューの間で受け渡しするデータを格納するディクショナリ。</returns>
    </member>
    <member name="T:System.Web.Mvc.WebViewPage`1">
      <summary>ASP.NET Razor 構文を使用するビューを表示するために必要なプロパティおよびメソッドを表します。</summary>
      <typeparam name="TModel">ビュー データ モデルの型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.WebViewPage`1.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.WebViewPage`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.WebViewPage`1.Ajax">
      <summary>AJAX を使用した HTML マークアップの表示に使用される <see cref="T:System.Web.Mvc.AjaxHelper" /> オブジェクトを取得または設定します。</summary>
      <returns>AJAX を使用した HTML マークアップの表示に使用される <see cref="T:System.Web.Mvc.AjaxHelper" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Web.Mvc.WebViewPage`1.Html">
      <summary>HTML 要素を表示するために使用する <see cref="T:System.Web.Mvc.HtmlHelper" /> オブジェクトを取得または設定します。</summary>
      <returns>HTML 要素の表示に使用される <see cref="T:System.Web.Mvc.HtmlHelper" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Web.Mvc.WebViewPage`1.InitHelpers">
      <summary>
        <see cref="T:System.Web.Mvc.AjaxHelper" />、<see cref="T:System.Web.Mvc.HtmlHelper" />、および <see cref="T:System.Web.Mvc.UrlHelper" /> の各クラスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.WebViewPage`1.Model">
      <summary>関連付けられた <see cref="T:System.Web.Mvc.ViewDataDictionary" /> オブジェクトの Model プロパティを取得します。</summary>
      <returns>関連付けられた <see cref="T:System.Web.Mvc.ViewDataDictionary" /> オブジェクトの Model プロパティ。</returns>
    </member>
    <member name="M:System.Web.Mvc.WebViewPage`1.SetViewData(System.Web.Mvc.ViewDataDictionary)">
      <summary>ビュー データを設定します。</summary>
      <param name="viewData">ビュー データ。</param>
    </member>
    <member name="P:System.Web.Mvc.WebViewPage`1.ViewData">
      <summary>コントローラーとビューの間で受け渡すデータを格納するディクショナリを取得または設定します。</summary>
      <returns>コントローラーとビューの間で受け渡しするデータを格納するディクショナリ。</returns>
    </member>
    <member name="T:System.Web.Mvc.Ajax.AjaxExtensions">
      <summary>ASP.NET MVC アプリケーション内の ASP.NET AJAX のサポートを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>指定されたアクション メソッドへの URL が含まれているアンカー要素を返します。アクション リンクがクリックされると、JavaScript を使用してアクション メソッドが非同期に呼び出されます。</summary>
      <returns>アンカー要素。</returns>
      <param name="ajaxHelper">AJAX ヘルパー。</param>
      <param name="linkText">アンカー要素の内部テキスト。</param>
      <param name="actionName">アクション メソッドの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。オブジェクトのプロパティを調べることで、リフレクションを介してパラメーターが取得されます。通常、このオブジェクトは、オブジェクト初期化子構文を使用して作成されます。</param>
      <param name="ajaxOptions">非同期要求のオプションを提供するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
      <summary>指定されたアクション メソッドへの URL が含まれているアンカー要素を返します。アクション リンクがクリックされると、JavaScript を使用してアクション メソッドが非同期に呼び出されます。</summary>
      <returns>アンカー要素。</returns>
      <param name="ajaxHelper">AJAX ヘルパー。</param>
      <param name="linkText">アンカー要素の内部テキスト。</param>
      <param name="actionName">アクション メソッドの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。オブジェクトのプロパティを調べることで、リフレクションを介してパラメーターが取得されます。通常、このオブジェクトは、オブジェクト初期化子構文を使用して作成されます。</param>
      <param name="ajaxOptions">非同期要求のオプションを提供するオブジェクト。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>指定されたアクション メソッドへの URL が含まれているアンカー要素を返します。アクション リンクがクリックされると、JavaScript を使用してアクション メソッドが非同期に呼び出されます。</summary>
      <returns>アンカー要素。</returns>
      <param name="ajaxHelper">AJAX ヘルパー。</param>
      <param name="linkText">アンカー要素の内部テキスト。</param>
      <param name="actionName">アクション メソッドの名前。</param>
      <param name="controllerName">コントローラーの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。オブジェクトのプロパティを調べることで、リフレクションを介してパラメーターが取得されます。通常、このオブジェクトは、オブジェクト初期化子構文を使用して作成されます。</param>
      <param name="ajaxOptions">非同期要求のオプションを提供するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
      <summary>指定されたアクション メソッドへの URL が含まれているアンカー要素を返します。アクション リンクがクリックされると、JavaScript を使用してアクション メソッドが非同期に呼び出されます。</summary>
      <returns>アンカー要素。</returns>
      <param name="ajaxHelper">AJAX ヘルパー。</param>
      <param name="linkText">アンカー要素の内部テキスト。</param>
      <param name="actionName">アクション メソッドの名前。</param>
      <param name="controllerName">コントローラーの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。オブジェクトのプロパティを調べることで、リフレクションを介してパラメーターが取得されます。通常、このオブジェクトは、オブジェクト初期化子構文を使用して作成されます。</param>
      <param name="ajaxOptions">非同期要求のオプションを提供するオブジェクト。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.String,System.String,System.String,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
      <summary>指定されたアクション メソッドへの URL が含まれているアンカー要素を返します。アクション リンクがクリックされると、JavaScript を使用してアクション メソッドが非同期に呼び出されます。</summary>
      <returns>アンカー要素。</returns>
      <param name="ajaxHelper">AJAX ヘルパー。</param>
      <param name="linkText">アンカー要素の内部テキスト。</param>
      <param name="actionName">アクション メソッドの名前。</param>
      <param name="controllerName">コントローラーの名前。</param>
      <param name="protocol">URL のプロトコル (たとえば、"http"、"https")。</param>
      <param name="hostName">URL のホスト名。</param>
      <param name="fragment">URL フラグメント名 (アンカー名)。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。オブジェクトのプロパティを調べることで、リフレクションを介してパラメーターが取得されます。通常、このオブジェクトは、オブジェクト初期化子構文を使用して作成されます。</param>
      <param name="ajaxOptions">非同期要求のオプションを提供するオブジェクト。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.String,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定されたアクション メソッドへの URL が含まれているアンカー要素を返します。アクション リンクがクリックされると、JavaScript を使用してアクション メソッドが非同期に呼び出されます。</summary>
      <returns>アンカー要素。</returns>
      <param name="ajaxHelper">AJAX ヘルパー。</param>
      <param name="linkText">アンカー要素の内部テキスト。</param>
      <param name="actionName">アクション メソッドの名前。</param>
      <param name="controllerName">コントローラーの名前。</param>
      <param name="protocol">URL のプロトコル (たとえば、"http"、"https")。</param>
      <param name="hostName">URL のホスト名。</param>
      <param name="fragment">URL フラグメント名 (アンカー名)。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。</param>
      <param name="ajaxOptions">非同期要求のオプションを提供するオブジェクト。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.String,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>指定されたアクション メソッドへの URL が含まれているアンカー要素を返します。アクション リンクがクリックされると、JavaScript を使用してアクション メソッドが非同期に呼び出されます。</summary>
      <returns>アンカー要素。</returns>
      <param name="ajaxHelper">AJAX ヘルパー。</param>
      <param name="linkText">アンカー要素の内部テキスト。</param>
      <param name="actionName">アクション メソッドの名前。</param>
      <param name="controllerName">コントローラーの名前。</param>
      <param name="ajaxOptions">非同期要求のオプションを提供するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>指定されたアクション メソッドへの URL が含まれているアンカー要素を返します。アクション リンクがクリックされると、JavaScript を使用してアクション メソッドが非同期に呼び出されます。</summary>
      <returns>アンカー要素。</returns>
      <param name="ajaxHelper">AJAX ヘルパー。</param>
      <param name="linkText">アンカー要素の内部テキスト。</param>
      <param name="actionName">アクション メソッドの名前。</param>
      <param name="controllerName">コントローラーの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。</param>
      <param name="ajaxOptions">非同期要求のオプションを提供するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定されたアクション メソッドへの URL が含まれているアンカー要素を返します。アクション リンクがクリックされると、JavaScript を使用してアクション メソッドが非同期に呼び出されます。</summary>
      <returns>アンカー要素。</returns>
      <param name="ajaxHelper">AJAX ヘルパー。</param>
      <param name="linkText">アンカー要素の内部テキスト。</param>
      <param name="actionName">アクション メソッドの名前。</param>
      <param name="controllerName">コントローラーの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。</param>
      <param name="ajaxOptions">非同期要求のオプションを提供するオブジェクト。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>指定されたアクション メソッドへの URL が含まれているアンカー要素を返します。アクション リンクがクリックされると、JavaScript を使用してアクション メソッドが非同期に呼び出されます。</summary>
      <returns>アンカー要素。</returns>
      <param name="ajaxHelper">AJAX ヘルパー。</param>
      <param name="linkText">アンカー要素の内部テキスト。</param>
      <param name="actionName">アクション メソッドの名前。</param>
      <param name="ajaxOptions">非同期要求のオプションを提供するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>指定されたアクション メソッドへの URL が含まれているアンカー要素を返します。アクション リンクがクリックされると、JavaScript を使用してアクション メソッドが非同期に呼び出されます。</summary>
      <returns>アンカー要素。</returns>
      <param name="ajaxHelper">AJAX ヘルパー。</param>
      <param name="linkText">アンカー要素の内部テキスト。</param>
      <param name="actionName">アクション メソッドの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。</param>
      <param name="ajaxOptions">非同期要求のオプションを提供するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定されたアクション メソッドへの URL が含まれているアンカー要素を返します。アクション リンクがクリックされると、JavaScript を使用してアクション メソッドが非同期に呼び出されます。</summary>
      <returns>アンカー要素。</returns>
      <param name="ajaxHelper">AJAX ヘルパー。</param>
      <param name="linkText">アンカー要素の内部テキスト。</param>
      <param name="actionName">アクション メソッドの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。</param>
      <param name="ajaxOptions">非同期要求のオプションを提供するオブジェクト。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>応答に対する開始 &lt;form&gt; タグを書き込みます。</summary>
      <returns>開始 &lt;form&gt; タグ。</returns>
      <param name="ajaxHelper">AJAX ヘルパー。</param>
      <param name="actionName">要求を処理するアクション メソッドの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。オブジェクトのプロパティを調べることで、リフレクションを介してパラメーターが取得されます。通常、このオブジェクトは、オブジェクト初期化子構文を使用して作成されます。</param>
      <param name="ajaxOptions">非同期要求のオプションを提供するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
      <summary>応答に対する開始 &lt;form&gt; タグを書き込みます。</summary>
      <returns>開始 &lt;form&gt; タグ。</returns>
      <param name="ajaxHelper">AJAX ヘルパー。</param>
      <param name="actionName">要求を処理するアクション メソッドの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。オブジェクトのプロパティを調べることで、リフレクションを介してパラメーターが取得されます。通常、このオブジェクトは、オブジェクト初期化子構文を使用して作成されます。</param>
      <param name="ajaxOptions">非同期要求のオプションを提供するオブジェクト。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>応答に対する開始 &lt;form&gt; タグを書き込みます。</summary>
      <returns>開始 &lt;form&gt; タグ。</returns>
      <param name="ajaxHelper">AJAX ヘルパー。</param>
      <param name="actionName">要求を処理するアクション メソッドの名前。</param>
      <param name="controllerName">コントローラーの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。オブジェクトのプロパティを調べることで、リフレクションを介してパラメーターが取得されます。通常、このオブジェクトは、オブジェクト初期化子構文を使用して作成されます。</param>
      <param name="ajaxOptions">非同期要求のオプションを提供するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
      <summary>応答に対する開始 &lt;form&gt; タグを書き込みます。</summary>
      <returns>開始 &lt;form&gt; タグ。</returns>
      <param name="ajaxHelper">AJAX ヘルパー。</param>
      <param name="actionName">要求を処理するアクション メソッドの名前。</param>
      <param name="controllerName">コントローラーの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。オブジェクトのプロパティを調べることで、リフレクションを介してパラメーターが取得されます。通常、このオブジェクトは、オブジェクト初期化子構文を使用して作成されます。</param>
      <param name="ajaxOptions">非同期要求のオプションを提供するオブジェクト。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>応答に対する開始 &lt;form&gt; タグを書き込みます。</summary>
      <returns>開始 &lt;form&gt; タグ。</returns>
      <param name="ajaxHelper">AJAX ヘルパー。</param>
      <param name="actionName">要求を処理するアクション メソッドの名前。</param>
      <param name="controllerName">コントローラーの名前。</param>
      <param name="ajaxOptions">非同期要求のオプションを提供するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>応答に対する開始 &lt;form&gt; タグを書き込みます。</summary>
      <returns>開始 &lt;form&gt; タグ。</returns>
      <param name="ajaxHelper">AJAX ヘルパー。</param>
      <param name="actionName">要求を処理するアクション メソッドの名前。</param>
      <param name="controllerName">コントローラーの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。</param>
      <param name="ajaxOptions">非同期要求のオプションを提供するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>応答に対する開始 &lt;form&gt; タグを書き込みます。</summary>
      <returns>開始 &lt;form&gt; タグ。</returns>
      <param name="ajaxHelper">AJAX ヘルパー。</param>
      <param name="actionName">要求を処理するアクション メソッドの名前。</param>
      <param name="controllerName">コントローラーの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。</param>
      <param name="ajaxOptions">非同期要求のオプションを提供するオブジェクト。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>応答に対する開始 &lt;form&gt; タグを書き込みます。</summary>
      <returns>開始 &lt;form&gt; タグ。</returns>
      <param name="ajaxHelper">AJAX ヘルパー。</param>
      <param name="actionName">要求を処理するアクション メソッドの名前。</param>
      <param name="ajaxOptions">非同期要求のオプションを提供するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>応答に対する開始 &lt;form&gt; タグを書き込みます。</summary>
      <returns>開始 &lt;form&gt; タグ。</returns>
      <param name="ajaxHelper">AJAX ヘルパー。</param>
      <param name="actionName">要求を処理するアクション メソッドの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。</param>
      <param name="ajaxOptions">非同期要求のオプションを提供するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>応答に対する開始 &lt;form&gt; タグを書き込みます。</summary>
      <returns>開始 &lt;form&gt; タグ。</returns>
      <param name="ajaxHelper">AJAX ヘルパー。</param>
      <param name="actionName">要求を処理するアクション メソッドの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。</param>
      <param name="ajaxOptions">非同期要求のオプションを提供するオブジェクト。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>応答に対する開始 &lt;form&gt; タグを書き込みます。</summary>
      <returns>開始 &lt;form&gt; タグ。</returns>
      <param name="ajaxHelper">AJAX ヘルパー。</param>
      <param name="ajaxOptions">非同期要求のオプションを提供するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginRouteForm(System.Web.Mvc.AjaxHelper,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>指定されたルーティング情報を使用して、応答に対する開始 &lt;form&gt; タグを書き込みます。</summary>
      <returns>開始 &lt;form&gt; タグ。</returns>
      <param name="ajaxHelper">AJAX ヘルパー。</param>
      <param name="routeName">フォーム ポスト URL を取得するために使用するルートの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。オブジェクトのプロパティを調べることで、リフレクションを介してパラメーターが取得されます。通常、このオブジェクトは、オブジェクト初期化子構文を使用して作成されます。</param>
      <param name="ajaxOptions">非同期要求のオプションを提供するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginRouteForm(System.Web.Mvc.AjaxHelper,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
      <summary>指定されたルーティング情報を使用して、応答に対する開始 &lt;form&gt; タグを書き込みます。</summary>
      <returns>開始 &lt;form&gt; タグ。</returns>
      <param name="ajaxHelper">AJAX ヘルパー。</param>
      <param name="routeName">フォーム ポスト URL を取得するために使用するルートの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。オブジェクトのプロパティを調べることで、リフレクションを介してパラメーターが取得されます。通常、このオブジェクトは、オブジェクト初期化子構文を使用して作成されます。</param>
      <param name="ajaxOptions">非同期要求のオプションを提供するオブジェクト。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginRouteForm(System.Web.Mvc.AjaxHelper,System.String,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>指定されたルーティング情報を使用して、応答に対する開始 &lt;form&gt; タグを書き込みます。</summary>
      <returns>開始 &lt;form&gt; タグ。</returns>
      <param name="ajaxHelper">AJAX ヘルパー。</param>
      <param name="routeName">フォーム ポスト URL を取得するために使用するルートの名前。</param>
      <param name="ajaxOptions">非同期要求のオプションを提供するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginRouteForm(System.Web.Mvc.AjaxHelper,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>指定されたルーティング情報を使用して、応答に対する開始 &lt;form&gt; タグを書き込みます。</summary>
      <returns>開始 &lt;form&gt; タグ。</returns>
      <param name="ajaxHelper">AJAX ヘルパー。</param>
      <param name="routeName">フォーム ポスト URL を取得するために使用するルートの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。</param>
      <param name="ajaxOptions">非同期要求のオプションを提供するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginRouteForm(System.Web.Mvc.AjaxHelper,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定されたルーティング情報を使用して、応答に対する開始 &lt;form&gt; タグを書き込みます。</summary>
      <returns>開始 &lt;form&gt; タグ。</returns>
      <param name="ajaxHelper">AJAX ヘルパー。</param>
      <param name="routeName">フォーム ポスト URL を取得するために使用するルートの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。</param>
      <param name="ajaxOptions">非同期要求のオプションを提供するオブジェクト。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.GlobalizationScript(System.Web.Mvc.AjaxHelper)">
      <summary>カルチャ情報を定義するグローバリゼーション スクリプトへの参照を格納している HTML script  要素を返します。</summary>
      <returns>次の例のように、src 属性がグローバリゼーション スクリプトに設定されている script 要素。&lt;script type="text/javascript"     src="/MvcApplication1/Scripts/Globalization/en-US.js"&gt;&lt;/script&gt;</returns>
      <param name="ajaxHelper">このメソッドによって拡張される AJAX ヘルパー オブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.GlobalizationScript(System.Web.Mvc.AjaxHelper,System.Globalization.CultureInfo)">
      <summary>指定されたカルチャ情報を定義するグローバリゼーション スクリプトへの参照を格納している HTML script 要素を返します。</summary>
      <returns>次の例のように、src 属性がグローバリゼーション スクリプトに設定されている HTML script 要素。&lt;script type="text/javascript"    src="/MvcApplication1/Scripts/Globalization/en-US.js"&gt;&lt;/script&gt;</returns>
      <param name="ajaxHelper">このメソッドによって拡張される AJAX ヘルパー オブジェクト。</param>
      <param name="cultureInfo">日付形式など、ターゲット カルチャについての情報をカプセル化します。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cultureInfo" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>指定されたルート値の仮想パスが含まれているアンカー要素を返します。リンクがクリックされると、JavaScript を使用して仮想パスに対して要求が非同期に行われます。</summary>
      <returns>アンカー要素。</returns>
      <param name="ajaxHelper">AJAX ヘルパー。</param>
      <param name="linkText">アンカー要素の内部テキスト。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。オブジェクトのプロパティを調べることで、リフレクションを介してパラメーターが取得されます。通常、このオブジェクトは、オブジェクト初期化子構文を使用して作成されます。</param>
      <param name="ajaxOptions">非同期要求のオプションを提供するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
      <summary>指定されたルート値の仮想パスが含まれているアンカー要素を返します。リンクがクリックされると、JavaScript を使用して仮想パスに対して要求が非同期に行われます。</summary>
      <returns>アンカー要素。</returns>
      <param name="ajaxHelper">AJAX ヘルパー。</param>
      <param name="linkText">アンカー要素の内部テキスト。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。オブジェクトのプロパティを調べることで、リフレクションを介してパラメーターが取得されます。通常、このオブジェクトは、オブジェクト初期化子構文を使用して作成されます。</param>
      <param name="ajaxOptions">非同期要求のオプションを提供するオブジェクト。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>指定されたルート値の仮想パスが含まれているアンカー要素を返します。リンクがクリックされると、JavaScript を使用して仮想パスに対して要求が非同期に行われます。</summary>
      <returns>アンカー要素。</returns>
      <param name="ajaxHelper">AJAX ヘルパー。</param>
      <param name="linkText">アンカー要素の内部テキスト。</param>
      <param name="routeName">フォーム ポスト URL を取得するために使用するルートの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。オブジェクトのプロパティを調べることで、リフレクションを介してパラメーターが取得されます。通常、このオブジェクトは、オブジェクト初期化子構文を使用して作成されます。</param>
      <param name="ajaxOptions">非同期要求のオプションを提供するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
      <summary>指定されたルート値の仮想パスが含まれているアンカー要素を返します。リンクがクリックされると、JavaScript を使用して仮想パスに対して要求が非同期に行われます。</summary>
      <returns>アンカー要素。</returns>
      <param name="ajaxHelper">AJAX ヘルパー。</param>
      <param name="linkText">アンカー要素の内部テキスト。</param>
      <param name="routeName">フォーム ポスト URL を取得するために使用するルートの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。オブジェクトのプロパティを調べることで、リフレクションを介してパラメーターが取得されます。通常、このオブジェクトは、オブジェクト初期化子構文を使用して作成されます。</param>
      <param name="ajaxOptions">非同期要求のオプションを提供するオブジェクト。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定されたルート値の仮想パスが含まれているアンカー要素を返します。リンクがクリックされると、JavaScript を使用して仮想パスに対して要求が非同期に行われます。</summary>
      <returns>アンカー要素。</returns>
      <param name="ajaxHelper">AJAX ヘルパー。</param>
      <param name="linkText">アンカー要素の内部テキスト。</param>
      <param name="routeName">フォーム ポスト URL を取得するために使用するルートの名前。</param>
      <param name="protocol">URL のプロトコル (たとえば、"http"、"https")。</param>
      <param name="hostName">URL のホスト名。</param>
      <param name="fragment">URL フラグメント名 (アンカー名)。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。</param>
      <param name="ajaxOptions">非同期要求のオプションを提供するオブジェクト。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>指定されたルート値の仮想パスが含まれているアンカー要素を返します。リンクがクリックされると、JavaScript を使用して仮想パスに対して要求が非同期に行われます。</summary>
      <returns>アンカー要素。</returns>
      <param name="ajaxHelper">AJAX ヘルパー。</param>
      <param name="linkText">アンカー要素の内部テキスト。</param>
      <param name="routeName">フォーム ポスト URL を取得するために使用するルートの名前。</param>
      <param name="ajaxOptions">非同期要求のオプションを提供するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定されたルート値の仮想パスが含まれているアンカー要素を返します。リンクがクリックされると、JavaScript を使用して仮想パスに対して要求が非同期に行われます。</summary>
      <returns>アンカー要素。</returns>
      <param name="ajaxHelper">AJAX ヘルパー。</param>
      <param name="linkText">アンカー要素の内部テキスト。</param>
      <param name="routeName">フォーム ポスト URL を取得するために使用するルートの名前。</param>
      <param name="ajaxOptions">非同期要求のオプションを提供するオブジェクト。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
      <summary>指定されたルート値の仮想パスが含まれているアンカー要素を返します。リンクがクリックされると、JavaScript を使用して仮想パスに対して要求が非同期に行われます。</summary>
      <returns>アンカー要素。</returns>
      <param name="ajaxHelper">AJAX ヘルパー。</param>
      <param name="linkText">アンカー要素の内部テキスト。</param>
      <param name="routeName">フォーム ポスト URL を取得するために使用するルートの名前。</param>
      <param name="ajaxOptions">非同期要求のオプションを提供するオブジェクト。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>指定されたルート値の仮想パスが含まれているアンカー要素を返します。リンクがクリックされると、JavaScript を使用して仮想パスに対して要求が非同期に行われます。</summary>
      <returns>アンカー要素。</returns>
      <param name="ajaxHelper">AJAX ヘルパー。</param>
      <param name="linkText">アンカー要素の内部テキスト。</param>
      <param name="routeName">フォーム ポスト URL を取得するために使用するルートの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。</param>
      <param name="ajaxOptions">非同期要求のオプションを提供するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定されたルート値の仮想パスが含まれているアンカー要素を返します。リンクがクリックされると、JavaScript を使用して仮想パスに対して要求が非同期に行われます。</summary>
      <returns>アンカー要素。</returns>
      <param name="ajaxHelper">AJAX ヘルパー。</param>
      <param name="linkText">アンカー要素の内部テキスト。</param>
      <param name="routeName">フォーム ポスト URL を取得するために使用するルートの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。</param>
      <param name="ajaxOptions">非同期要求のオプションを提供するオブジェクト。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>指定されたルート値の仮想パスが含まれているアンカー要素を返します。リンクがクリックされると、JavaScript を使用して仮想パスに対して要求が非同期に行われます。</summary>
      <returns>アンカー要素。</returns>
      <param name="ajaxHelper">AJAX ヘルパー。</param>
      <param name="linkText">アンカー要素の内部テキスト。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。</param>
      <param name="ajaxOptions">非同期要求のオプションを提供するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定されたルート値の仮想パスが含まれているアンカー要素を返します。リンクがクリックされると、JavaScript を使用して仮想パスに対して要求が非同期に行われます。</summary>
      <returns>アンカー要素。</returns>
      <param name="ajaxHelper">AJAX ヘルパー。</param>
      <param name="linkText">アンカー要素の内部テキスト。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。</param>
      <param name="ajaxOptions">非同期要求のオプションを提供するオブジェクト。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> パラメーターが null または空です。</exception>
    </member>
    <member name="T:System.Web.Mvc.Ajax.AjaxOptions">
      <summary>ASP.NET MVC アプリケーションで AJAX スクリプトを実行するためのオプション設定を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxOptions.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.Ajax.AjaxOptions" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.AllowCache"></member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.Confirm">
      <summary>要求が送信される前に確認ウィンドウに表示するメッセージを取得または設定します。</summary>
      <returns>確認ウィンドウに表示するメッセージ。</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.HttpMethod">
      <summary>HTTP 要求メソッド ("Get" または "Post") を取得または設定します。</summary>
      <returns>HTTP 要求メソッド。既定値は "Post" です。</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.InsertionMode">
      <summary>応答を対象 DOM 要素に挿入する方法を指定するモードを取得または設定します。</summary>
      <returns>挿入モード ("InsertAfter"、"InsertBefore"、または "Replace")。既定値は "Replace" です。</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.LoadingElementDuration">
      <summary>読み込む要素の表示と非表示を切り替えるときに、アニメーションの時間をコントロールするミリ秒単位の値を取得または設定します。</summary>
      <returns>読み込む要素の表示と非表示を切り替えるときに、アニメーションの時間をコントロールするミリ秒単位の値。</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.LoadingElementId">
      <summary>Ajax 関数の読み込み中に表示される HTML 要素の id 属性を取得または設定します。</summary>
      <returns>Ajax 関数の読み込み中に表示される要素の ID。</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.OnBegin">
      <summary>ページが更新される直前に呼び出される JavaScript 関数の名前を取得または設定します。</summary>
      <returns>ページが更新される前に呼び出される JavaScript 関数の名前。</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.OnComplete">
      <summary>応答データがインスタンス化された後、ページが更新される前に呼び出される JavaScript 関数を取得または設定します。</summary>
      <returns>応答データがインスタンス化されたときに呼び出される JavaScript 関数を取得または設定します。</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.OnFailure">
      <summary>ページの更新が失敗した場合に呼び出される JavaScript 関数を取得または設定します。</summary>
      <returns>ページの更新が失敗した場合に呼び出される JavaScript 関数。</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.OnSuccess">
      <summary>ページが正常に更新された後に呼び出される JavaScript 関数を取得または設定します。</summary>
      <returns>ページが正常に更新された後に呼び出される JavaScript 関数。</returns>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxOptions.ToUnobtrusiveHtmlAttributes">
      <summary>AJAX オプションを HTML 属性のコレクションとして返して、控えめな JavaScript をサポートします。</summary>
      <returns>控えめな JavaScript をサポートする、HTML 属性のコレクションとしての AJAX オプション。</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.UpdateTargetId">
      <summary>サーバーからの応答を使用して更新される DOM 要素の ID を取得または設定します。</summary>
      <returns>更新される DOM 要素の ID。</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.Url">
      <summary>要求の対象となる URL を取得または設定します。</summary>
      <returns>要求の対象となる URL。</returns>
    </member>
    <member name="T:System.Web.Mvc.Ajax.InsertionMode">
      <summary>AJAX スクリプト挿入モードを列挙します。</summary>
    </member>
    <member name="F:System.Web.Mvc.Ajax.InsertionMode.InsertAfter">
      <summary>要素の後に挿入します。</summary>
    </member>
    <member name="F:System.Web.Mvc.Ajax.InsertionMode.InsertBefore">
      <summary>要素の前に挿入します。</summary>
    </member>
    <member name="F:System.Web.Mvc.Ajax.InsertionMode.Replace">
      <summary>要素を置き換えます。</summary>
    </member>
    <member name="F:System.Web.Mvc.Ajax.InsertionMode.ReplaceWith">
      <summary>要素全体を置き換えます。</summary>
    </member>
    <member name="T:System.Web.Mvc.Async.AsyncActionDescriptor">
      <summary>名前、コントローラー、パラメーター、属性、フィルターなど、非同期のアクション メソッドに関する情報を提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncActionDescriptor.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.Async.AsyncActionDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncActionDescriptor.BeginExecute(System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
      <summary>指定したパラメーターおよびコントローラー コンテキストを使用して、非同期のアクション メソッドを呼び出します。</summary>
      <returns>非同期呼び出しの結果を格納しているオブジェクト。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="parameters">アクション メソッドのパラメーター。</param>
      <param name="callback">コールバック メソッド。</param>
      <param name="state">コールバック メソッドで使用される情報を格納するオブジェクト。このパラメーターは、null でもかまいません。</param>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncActionDescriptor.EndExecute(System.IAsyncResult)">
      <summary>非同期操作の結果を返します。</summary>
      <returns>非同期操作の結果。</returns>
      <param name="asyncResult">非同期操作の状態を表すオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncActionDescriptor.Execute(System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定したパラメーターおよびコントローラー コンテキストを使用して、非同期のアクション メソッドを実行します。</summary>
      <returns>この非同期アクション メソッドの実行結果。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="parameters">アクション メソッドのパラメーター。</param>
    </member>
    <member name="T:System.Web.Mvc.Async.AsyncControllerActionInvoker">
      <summary>非同期コントローラーのアクション メソッドを呼び出すクラスを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncControllerActionInvoker.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.Async.AsyncControllerActionInvoker" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncControllerActionInvoker.BeginInvokeAction(System.Web.Mvc.ControllerContext,System.String,System.AsyncCallback,System.Object)">
      <summary>指定したコントローラー コンテキスト、アクション名、コールバック メソッド、および状態を使用して、非同期のアクション メソッドを呼び出します。</summary>
      <returns>非同期操作の結果を格納しているオブジェクト。実装<see cref="M:System.Web.Mvc.Async.IAsyncActionInvoker.BeginInvokeAction(System.Web.Mvc.ControllerContext,System.String,System.AsyncCallback,System.Object)" /></returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="actionName">アクションの名前。</param>
      <param name="callback">コールバック メソッド。</param>
      <param name="state">コールバック メソッドで使用される情報を格納するオブジェクト。このパラメーターは、null でもかまいません。</param>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncControllerActionInvoker.BeginInvokeActionMethod(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
      <summary>指定したコントローラー コンテキスト、アクション記述子、パラメーター、コールバック メソッド、および状態を使用して、非同期のアクション メソッドを呼び出します。</summary>
      <returns>非同期操作の結果を格納しているオブジェクト。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="actionDescriptor">アクション記述子。</param>
      <param name="parameters">非同期アクション メソッドのパラメーター。</param>
      <param name="callback">コールバック メソッド。</param>
      <param name="state">コールバック メソッドで使用される情報を格納するオブジェクト。このパラメーターは、null でもかまいません。</param>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncControllerActionInvoker.BeginInvokeActionMethodWithFilters(System.Web.Mvc.ControllerContext,System.Collections.Generic.IList{System.Web.Mvc.IActionFilter},System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
      <summary>指定したコントローラー コンテキスト、フィルター、アクション記述子、パラメーター、コールバック メソッド、および状態を使用して、非同期のアクション メソッドを呼び出します。</summary>
      <returns>非同期操作の結果を格納しているオブジェクト。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="filters">フィルター。</param>
      <param name="actionDescriptor">アクション記述子。</param>
      <param name="parameters">非同期アクション メソッドのパラメーター。</param>
      <param name="callback">コールバック メソッド。</param>
      <param name="state">コールバック メソッドで使用される情報を格納するオブジェクト。このパラメーターは、null でもかまいません。</param>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeAction(System.IAsyncResult)">
      <summary>アクションを取り消します。</summary>
      <returns>アクションが取り消された場合は true。それ以外の場合は false。</returns>
      <param name="asyncResult">非同期操作についての情報を限定または格納するユーザー定義のオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod(System.IAsyncResult)">
      <summary>アクションを取り消します。</summary>
      <returns>アクションが取り消された場合は true。それ以外の場合は false。</returns>
      <param name="asyncResult">非同期操作についての情報を限定または格納するユーザー定義のオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethodWithFilters(System.IAsyncResult)">
      <summary>アクションを取り消します。</summary>
      <returns>アクションが取り消された場合は true。それ以外の場合は false。</returns>
      <param name="asyncResult">非同期操作についての情報を限定または格納するユーザー定義のオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncControllerActionInvoker.GetControllerDescriptor(System.Web.Mvc.ControllerContext)">
      <summary>コントローラー記述子を返します。</summary>
      <returns>コントローラー記述子。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
    </member>
    <member name="T:System.Web.Mvc.Async.AsyncManager">
      <summary>
        <see cref="T:System.Web.Mvc.AsyncController" /> クラスの非同期操作を提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncManager.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.Async.AsyncManager" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncManager.#ctor(System.Threading.SynchronizationContext)">
      <summary>同期コンテキストを使用して、<see cref="T:System.Web.Mvc.Async.AsyncManager" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="syncContext">同期コンテキスト。</param>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncManager.Finish">
      <summary>非同期操作がすべて完了したことを ASP.NET に通知します。</summary>
    </member>
    <member name="E:System.Web.Mvc.Async.AsyncManager.Finished">
      <summary>
        <see cref="M:System.Web.Mvc.Async.AsyncManager.Finish" /> メソッドが呼び出されると発生します。</summary>
    </member>
    <member name="P:System.Web.Mvc.Async.AsyncManager.OutstandingOperations">
      <summary>保留状態にある操作の数を取得します。</summary>
      <returns>保留状態の操作の数。</returns>
    </member>
    <member name="P:System.Web.Mvc.Async.AsyncManager.Parameters">
      <summary>非同期の完了メソッドに渡されたパラメーターを取得します。</summary>
      <returns>非同期の完了メソッドに渡されたパラメーター。</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncManager.Sync(System.Action)">
      <summary>現在の同期コンテキストでコールバックを実行します。</summary>
      <param name="action">非同期アクション。</param>
    </member>
    <member name="P:System.Web.Mvc.Async.AsyncManager.Timeout">
      <summary>非同期のタイムアウト値をミリ秒単位で取得または設定します。</summary>
      <returns>非同期のタイムアウト値 (ミリ秒単位)。</returns>
    </member>
    <member name="T:System.Web.Mvc.Async.IAsyncActionInvoker">
      <summary>アクション呼び出し元のインターフェイスを定義します。このインターフェイスを使用して、HTTP 要求への応答として非同期アクションを呼び出します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.IAsyncActionInvoker.BeginInvokeAction(System.Web.Mvc.ControllerContext,System.String,System.AsyncCallback,System.Object)">
      <summary>指定したアクションを呼び出します。</summary>
      <returns>非同期の結果の状態。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="actionName">非同期アクションの名前。</param>
      <param name="callback">コールバック メソッド。</param>
      <param name="state">状態。</param>
    </member>
    <member name="M:System.Web.Mvc.Async.IAsyncActionInvoker.EndInvokeAction(System.IAsyncResult)">
      <summary>非同期アクションを取り消します。</summary>
      <returns>非同期メソッドを取り消すことができる場合は true。それ以外の場合は false。</returns>
      <param name="asyncResult">非同期の結果。</param>
    </member>
    <member name="T:System.Web.Mvc.Async.IAsyncActionInvokerFactory">
      <summary>現在の要求の <see cref="T:System.Web.Mvc.Async.IAsyncActionInvoker" /> インスタンスを作成するために使用します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.IAsyncActionInvokerFactory.CreateInstance">
      <summary>現在の要求の非同期アクション呼び出し元のインスタンスを作成します。</summary>
      <returns>作成された <see cref="T:System.Web.Mvc.Async.IAsyncActionInvoker" />。</returns>
    </member>
    <member name="T:System.Web.Mvc.Async.IAsyncController">
      <summary>非同期コントローラーに必要なメソッドを定義します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.IAsyncController.BeginExecute(System.Web.Routing.RequestContext,System.AsyncCallback,System.Object)">
      <summary>指定された要求コンテキストを実行します。</summary>
      <returns>非同期操作の状態。</returns>
      <param name="requestContext">要求コンテキスト。</param>
      <param name="callback">非同期コールバック メソッド。</param>
      <param name="state">状態。</param>
    </member>
    <member name="M:System.Web.Mvc.Async.IAsyncController.EndExecute(System.IAsyncResult)">
      <summary>非同期操作を終了します。</summary>
      <param name="asyncResult">非同期の結果。</param>
    </member>
    <member name="T:System.Web.Mvc.Async.IAsyncManagerContainer">
      <summary>非同期マネージャー オブジェクト用のコンテナーです。</summary>
    </member>
    <member name="P:System.Web.Mvc.Async.IAsyncManagerContainer.AsyncManager">
      <summary>非同期マネージャー オブジェクトを取得します。</summary>
      <returns>非同期マネージャー オブジェクト。</returns>
    </member>
    <member name="T:System.Web.Mvc.Async.OperationCounter">
      <summary>保留中の非同期操作の数を保持するコンテナーです。</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.OperationCounter.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.Async.OperationCounter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="E:System.Web.Mvc.Async.OperationCounter.Completed">
      <summary>非同期メソッドの完了時に発生します。</summary>
    </member>
    <member name="P:System.Web.Mvc.Async.OperationCounter.Count">
      <summary>操作数を取得します。</summary>
      <returns>操作数。</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.OperationCounter.Decrement">
      <summary>操作数を 1 つ減らします。</summary>
      <returns>更新された操作数。</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.OperationCounter.Decrement(System.Int32)">
      <summary>操作数を指定した値だけ減らします。</summary>
      <returns>更新された操作数。</returns>
      <param name="value">操作数を減らす数。</param>
    </member>
    <member name="M:System.Web.Mvc.Async.OperationCounter.Increment">
      <summary>操作数を 1 つ増やします。</summary>
      <returns>更新された操作数。</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.OperationCounter.Increment(System.Int32)">
      <summary>操作数を指定した値だけ増やします。</summary>
      <returns>更新された操作数。</returns>
      <param name="value">操作数を増やす数。</param>
    </member>
    <member name="T:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor">
      <summary>名前、コントローラー、パラメーター、属性、フィルターなど、非同期のアクション メソッドに関する情報を提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.#ctor(System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.String,System.Web.Mvc.ControllerDescriptor)">
      <summary>
        <see cref="T:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="asyncMethodInfo">非同期操作を開始するメソッド (名前の末尾に "Asynch" が付いているメソッド) に関する情報を格納しているオブジェクト。</param>
      <param name="completedMethodInfo">完了メソッド (名前の末尾に "Completed" が付いているメソッド) に関する情報を格納しているオブジェクト。</param>
      <param name="actionName">アクションの名前。</param>
      <param name="controllerDescriptor">コントローラー記述子。</param>
    </member>
    <member name="P:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.ActionName">
      <summary>アクション メソッドの名前を取得します。</summary>
      <returns>アクション メソッドの名前。</returns>
    </member>
    <member name="P:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.AsyncMethodInfo">
      <summary>非同期アクション メソッドのメソッド情報を取得します。</summary>
      <returns>非同期アクション メソッドのメソッド情報。</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.BeginExecute(System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
      <summary>指定されたパラメーターおよびコントローラー コンテキストを使用して、非同期アクション メソッドの実行を開始します。</summary>
      <returns>非同期呼び出しの結果を格納しているオブジェクト。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="parameters">アクション メソッドのパラメーター。</param>
      <param name="callback">コールバック メソッド。</param>
      <param name="state">コールバック メソッドで使用される情報を格納するオブジェクト。このパラメーターは、null でもかまいません。</param>
    </member>
    <member name="P:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.CompletedMethodInfo">
      <summary>非同期の完了メソッドのメソッド情報を取得します。</summary>
      <returns>非同期の完了メソッドのメソッド情報。</returns>
    </member>
    <member name="P:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.ControllerDescriptor">
      <summary>非同期のアクション メソッドのコントローラー記述子を取得します。</summary>
      <returns>非同期のアクション メソッドのコントローラー記述子。</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.EndExecute(System.IAsyncResult)">
      <summary>非同期操作の結果を返します。</summary>
      <returns>非同期操作の結果。</returns>
      <param name="asyncResult">非同期操作の状態を表すオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.GetCustomAttributes(System.Boolean)">
      <summary>このメンバーに定義されているカスタム属性の配列を返します (名前付き属性を除く)。</summary>
      <returns>カスタム属性の配列、カスタム属性が存在しない場合は空の配列。</returns>
      <param name="inherit">継承されたカスタム属性の階層チェーンを参照する場合は true。それ以外の場合は false。</param>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>型によって識別される、このメンバーに定義されているカスタム属性の配列を返します。</summary>
      <returns>カスタム属性の配列。指定された型のカスタム属性が存在しない場合は空の配列。</returns>
      <param name="attributeType">取得するカスタム属性の型。</param>
      <param name="inherit">継承されたカスタム属性の階層チェーンを参照する場合は true。それ以外の場合は false。</param>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.GetFilterAttributes(System.Boolean)">
      <summary>フィルター属性を取得します。</summary>
      <returns>フィルター属性。</returns>
      <param name="useCache">キャッシュ フラグを使用します。</param>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.GetParameters">
      <summary>アクション メソッドのパラメーターを返します。</summary>
      <returns>アクション メソッドのパラメーター。</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.GetSelectors">
      <summary>アクション メソッド セレクターを返します。</summary>
      <returns>アクション メソッド セレクター。</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.IsDefined(System.Type,System.Boolean)">
      <summary>指定した属性型のインスタンスが 1 つ以上アクション メンバーに定義されているかどうかを確認します。</summary>
      <returns>このメンバーに対して <paramref name="attributeType" /> で表される型の属性が定義されている場合は true。それ以外の場合は false。</returns>
      <param name="attributeType">カスタム属性の型。</param>
      <param name="inherit">継承されたカスタム属性の階層チェーンを参照する場合は true。それ以外の場合は false。</param>
    </member>
    <member name="P:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.MethodInfo"></member>
    <member name="P:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.UniqueId">
      <summary>このクラスのインスタンスの限定的に初期化された一意の ID を取得します。</summary>
      <returns>このクラスのインスタンスの限定的に初期化された一意の ID。</returns>
    </member>
    <member name="T:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor">
      <summary>名前、種類、アクションなど、非同期コントローラーに関する情報をカプセル化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor.#ctor(System.Type)">
      <summary>
        <see cref="T:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="controllerType">コントローラーの種類。</param>
    </member>
    <member name="P:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor.ControllerType">
      <summary>コントローラーの種類を取得します。</summary>
      <returns>コントローラーの種類。</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor.FindAction(System.Web.Mvc.ControllerContext,System.String)">
      <summary>指定された名前およびコントローラー コンテキストを使用して、アクション メソッドを検索します。</summary>
      <returns>アクション メソッドに関する情報。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="actionName">アクションの名前。</param>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor.GetCanonicalActions">
      <summary>コントローラー内のアクション メソッド記述子のリストを返します。</summary>
      <returns>コントローラー内のアクション メソッド記述子のリスト。</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor.GetCustomAttributes(System.Boolean)">
      <summary>このメンバーに定義されているカスタム属性を返します (名前付き属性を除く)。</summary>
      <returns>カスタム属性の配列、カスタム属性が存在しない場合は空の配列。</returns>
      <param name="inherit">継承されたカスタム属性の階層チェーンを参照する場合は true。それ以外の場合は false。</param>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>このメンバーに定義されている、指定された型のカスタム属性を返します (名前付き属性を除く)。</summary>
      <returns>カスタム属性の配列、カスタム属性が存在しない場合は空の配列。</returns>
      <param name="attributeType">カスタム属性の型。</param>
      <param name="inherit">継承されたカスタム属性の階層チェーンを参照する場合は true。それ以外の場合は false。</param>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor.GetFilterAttributes(System.Boolean)">
      <summary>フィルター属性を取得します。</summary>
      <returns>フィルター属性。</returns>
      <param name="useCache">キャッシュを使用する場合は true。それ以外の場合は false。</param>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor.IsDefined(System.Type,System.Boolean)">
      <summary>指定されたカスタム属性のインスタンスが 1 つ以上このメンバーに定義されているかどうかを示す値を返します。</summary>
      <returns>このメンバーに対して <paramref name="attributeType" /> で表される型の属性が定義されている場合は true。それ以外の場合は false。</returns>
      <param name="attributeType">カスタム属性の型。</param>
      <param name="inherit">継承されたカスタム属性の階層チェーンを参照する場合は true。それ以外の場合は false。</param>
    </member>
    <member name="T:System.Web.Mvc.Async.SynchronousOperationException">
      <summary>ASP.NET MVC アプリケーションで HTTP 要求を同期処理しているときに発生した例外を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.SynchronousOperationException.#ctor">
      <summary>システム提供のメッセージを使用して、<see cref="T:System.Web.Mvc.Async.SynchronousOperationException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.SynchronousOperationException.#ctor(System.String)">
      <summary>指定したメッセージを使用して、<see cref="T:System.Web.Mvc.Async.SynchronousOperationException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外を説明するメッセージ。このコンストラクターの呼び出し元は、この文字列が現在のシステムのカルチャに合わせてローカライズ済みであることを確認しておく必要があります。</param>
    </member>
    <member name="M:System.Web.Mvc.Async.SynchronousOperationException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.Web.Mvc.Async.SynchronousOperationException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外を説明するメッセージ。このコンストラクターの呼び出し元は、この文字列が現在のシステムのカルチャに合わせてローカライズ済みであることを確認しておく必要があります。</param>
      <param name="innerException">現在の例外の原因である例外。<paramref name="innerException" /> パラメーターが null でない場合は、内部例外を処理する catch ブロックで現在の例外が発生します。</param>
    </member>
    <member name="T:System.Web.Mvc.Async.TaskAsyncActionDescriptor">
      <summary>アクション メソッドが Task または Task&lt;T&gt; を返すときに、<see cref="T:System.Web.Mvc.Async.TaskAsyncActionDescriptor" /> はアクションに関する情報を提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.TaskAsyncActionDescriptor.#ctor(System.Reflection.MethodInfo,System.String,System.Web.Mvc.ControllerDescriptor)">
      <summary>
        <see cref="T:System.Web.Mvc.Async.TaskAsyncActionDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="taskMethodInfo">タスク メソッド情報。</param>
      <param name="actionName">アクション名。</param>
      <param name="controllerDescriptor">コントローラー記述子。</param>
    </member>
    <member name="P:System.Web.Mvc.Async.TaskAsyncActionDescriptor.ActionName">
      <summary>アクション メソッドの名前を取得します。</summary>
      <returns>アクション メソッドの名前。</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.TaskAsyncActionDescriptor.BeginExecute(System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
      <summary>指定したパラメーター、コントローラー コンテキスト、コールバック、および状態を使用して、非同期のアクション メソッドを呼び出します。</summary>
      <returns>非同期呼び出しの結果を格納しているオブジェクト。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="parameters">アクション メソッドのパラメーター。</param>
      <param name="callback">省略可能なコールバック メソッド。</param>
      <param name="state">コールバック メソッドで使用される情報を格納するオブジェクト。このパラメーターは、null でもかまいません。</param>
    </member>
    <member name="P:System.Web.Mvc.Async.TaskAsyncActionDescriptor.ControllerDescriptor">
      <summary>コントローラー記述子を取得します。</summary>
      <returns>コントローラー記述子。</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.TaskAsyncActionDescriptor.EndExecute(System.IAsyncResult)">
      <summary>非同期操作を終了します。</summary>
      <returns>非同期操作の結果。</returns>
      <param name="asyncResult">非同期操作の状態を表すオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Async.TaskAsyncActionDescriptor.Execute(System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>非同期アクション メソッドを実行します。</summary>
      <returns>この非同期アクション メソッドの実行結果。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="parameters">アクション メソッドのパラメーター。</param>
    </member>
    <member name="M:System.Web.Mvc.Async.TaskAsyncActionDescriptor.GetCustomAttributes(System.Boolean)">
      <summary>このメンバーに定義されているカスタム属性の配列を返します (名前付き属性を除く)。</summary>
      <returns>カスタム属性の配列、カスタム属性が存在しない場合は空の配列。</returns>
      <param name="inherit">継承されたカスタム属性の階層チェーンを参照する場合は true。それ以外の場合は false。</param>
    </member>
    <member name="M:System.Web.Mvc.Async.TaskAsyncActionDescriptor.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>型によって識別される、このメンバーに定義されているカスタム属性の配列を返します。</summary>
      <returns>カスタム属性の配列、カスタム属性が存在しない場合は空の配列。</returns>
      <param name="attributeType">カスタム属性の型。</param>
      <param name="inherit">継承されたカスタム属性の階層チェーンを参照する場合は true。それ以外の場合は false。</param>
    </member>
    <member name="M:System.Web.Mvc.Async.TaskAsyncActionDescriptor.GetFilterAttributes(System.Boolean)">
      <summary>このメンバーに適用されるすべてのカスタム属性の配列を返します。</summary>
      <returns>このメンバーに適用されるすべてのカスタム属性の配列、または属性が定義されていない場合は要素が 0 個の配列。</returns>
      <param name="useCache">このメンバーの継承チェーンを検索して属性を見つける場合は true、それ以外の場合は false。</param>
    </member>
    <member name="M:System.Web.Mvc.Async.TaskAsyncActionDescriptor.GetParameters">
      <summary>非同期アクション メソッドのパラメーターを返します。</summary>
      <returns>非同期アクション メソッドのパラメーター。</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.TaskAsyncActionDescriptor.GetSelectors">
      <summary>非同期アクション メソッド セレクターを返します。</summary>
      <returns>非同期アクション メソッド セレクター。</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.TaskAsyncActionDescriptor.IsDefined(System.Type,System.Boolean)">
      <summary>指定されたカスタム属性のインスタンスが 1 つ以上このメンバーに定義されているかどうかを示す値を返します。</summary>
      <returns>指定されたカスタム属性のインスタンスが 1 つ以上このメンバーに定義されているかどうかを示す値。</returns>
      <param name="attributeType">カスタム属性の型。</param>
      <param name="inherit">継承されたカスタム属性の階層チェーンを参照する場合は true。それ以外の場合は false。</param>
    </member>
    <member name="P:System.Web.Mvc.Async.TaskAsyncActionDescriptor.MethodInfo"></member>
    <member name="P:System.Web.Mvc.Async.TaskAsyncActionDescriptor.TaskMethodInfo">
      <summary>非同期タスクの情報を取得します。</summary>
      <returns>非同期タスクの情報。</returns>
    </member>
    <member name="P:System.Web.Mvc.Async.TaskAsyncActionDescriptor.UniqueId">
      <summary>このタスクの一意の ID を取得します。</summary>
      <returns>このタスクの一意の ID。</returns>
    </member>
    <member name="T:System.Web.Mvc.Filters.AuthenticationChallengeContext">
      <summary>認証チャレンジを実行するための情報を格納する認証チャレンジ コンテキストを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Filters.AuthenticationChallengeContext.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.Filters.AuthenticationChallengeContext" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Filters.AuthenticationChallengeContext.#ctor(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Web.Mvc.ActionResult)">
      <summary>
        <see cref="T:System.Web.Mvc.Filters.AuthenticationChallengeContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="actionDescriptor">チャレンジに関連付けられたアクション メソッド。</param>
      <param name="result">チャレンジ応答。</param>
    </member>
    <member name="P:System.Web.Mvc.Filters.AuthenticationChallengeContext.ActionDescriptor">
      <summary>アクション記述子を取得または設定します。</summary>
      <returns>チャレンジに関連付けられたアクション記述子。</returns>
    </member>
    <member name="P:System.Web.Mvc.Filters.AuthenticationChallengeContext.Result">
      <summary>実行するアクションの結果を取得または設定します。</summary>
      <returns>チャレンジ応答。</returns>
    </member>
    <member name="T:System.Web.Mvc.Filters.AuthenticationContext">
      <summary>認証を実行するための情報を格納している認証コンテキストを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Filters.AuthenticationContext.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.Filters.AuthenticationContext" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Filters.AuthenticationContext.#ctor(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Security.Principal.IPrincipal)"></member>
    <member name="P:System.Web.Mvc.Filters.AuthenticationContext.ActionDescriptor">
      <summary>アクション記述子を取得または設定します。</summary>
      <returns>認証に関連付けられたアクション メソッド。</returns>
    </member>
    <member name="P:System.Web.Mvc.Filters.AuthenticationContext.Principal">
      <summary>現在認証されているプリンシパルを取得または設定します。</summary>
      <returns>認証のセキュリティ資格情報。</returns>
    </member>
    <member name="P:System.Web.Mvc.Filters.AuthenticationContext.Result">
      <summary>認証が試行されたが失敗したことを示すエラー結果を取得または設定します。</summary>
      <returns>認証の結果。</returns>
    </member>
    <member name="T:System.Web.Mvc.Filters.IAuthenticationFilter">
      <summary>認証を実行するフィルターを定義します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Filters.IAuthenticationFilter.OnAuthentication(System.Web.Mvc.Filters.AuthenticationContext)">
      <summary>要求を認証します。</summary>
      <param name="filterContext">認証に使用するコンテキスト。</param>
    </member>
    <member name="M:System.Web.Mvc.Filters.IAuthenticationFilter.OnAuthenticationChallenge(System.Web.Mvc.Filters.AuthenticationChallengeContext)">
      <summary>認証チャレンジを現在の <see cref="T:System.Web.Mvc.ActionResult" /> に追加します。</summary>
      <param name="filterContext">認証チャレンジに使用するコンテキスト。</param>
    </member>
    <member name="T:System.Web.Mvc.Filters.IOverrideFilter">
      <summary>他のフィルターをオーバーライドするフィルターを定義します。</summary>
    </member>
    <member name="P:System.Web.Mvc.Filters.IOverrideFilter.FiltersToOverride">
      <summary>オーバーライドするフィルターの種類を取得します。</summary>
      <returns>オーバーライドするフィルター。</returns>
    </member>
    <member name="T:System.Web.Mvc.Html.ChildActionExtensions">
      <summary>子アクション メソッドを呼び出し、結果を親ビューにインライン表示するためのサポートを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.Action(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>指定された子アクション メソッドを呼び出し、結果を HTML 文字列として返します。</summary>
      <returns>HTML 文字列としての子アクションの結果。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="actionName">呼び出すアクション メソッドの名前。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="htmlHelper" /> パラメーターが null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="actionName" /> パラメーターが null または空です。</exception>
      <exception cref="T:System.InvalidOperationException">必要な仮想パスのデータが見つかりません。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.Action(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>指定されたパラメーターを使用して、指定された子アクション メソッドを呼び出し、その結果を HTML 文字列として返します。</summary>
      <returns>HTML 文字列としての子アクションの結果。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="actionName">呼び出すアクション メソッドの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。<paramref name="routeValues" /> を使用して、アクション メソッド パラメーターにバインドされるパラメーターを指定できます。<paramref name="routeValues" /> パラメーターは元のルート値とマージされ、その値をオーバーライドします。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="htmlHelper" /> パラメーターが null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="actionName" /> パラメーターが null または空です。</exception>
      <exception cref="T:System.InvalidOperationException">必要な仮想パスのデータが見つかりません。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.Action(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>指定されたコントローラー名を使用して、指定された子アクション メソッドを呼び出し、その結果を HTML 文字列として返します。</summary>
      <returns>HTML 文字列としての子アクションの結果。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="actionName">呼び出すアクション メソッドの名前。</param>
      <param name="controllerName">アクション メソッドが含まれるコントローラーの名前。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="htmlHelper" /> パラメーターが null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="actionName" /> パラメーターが null または空です。</exception>
      <exception cref="T:System.InvalidOperationException">必要な仮想パスのデータが見つかりません。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.Action(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>指定されたパラメーターおよびコントローラー名を使用して、指定された子アクション メソッドを呼び出し、その結果を HTML 文字列として返します。</summary>
      <returns>HTML 文字列としての子アクションの結果。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="actionName">呼び出すアクション メソッドの名前。</param>
      <param name="controllerName">アクション メソッドが含まれるコントローラーの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。<paramref name="routeValues" /> を使用して、アクション メソッド パラメーターにバインドされるパラメーターを指定できます。<paramref name="routeValues" /> パラメーターは元のルート値とマージされ、その値をオーバーライドします。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="htmlHelper" /> パラメーターが null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="actionName" /> パラメーターが null または空です。</exception>
      <exception cref="T:System.InvalidOperationException">必要な仮想パスのデータが見つかりません。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.Action(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>指定されたパラメーターおよびコントローラー名を使用して、指定された子アクション メソッドを呼び出し、その結果を HTML 文字列として返します。</summary>
      <returns>HTML 文字列としての子アクションの結果。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="actionName">呼び出すアクション メソッドの名前。</param>
      <param name="controllerName">アクション メソッドが含まれるコントローラーの名前。</param>
      <param name="routeValues">ルートのパラメーターが格納されたディクショナリ。<paramref name="routeValues" /> を使用して、アクション メソッド パラメーターにバインドされるパラメーターを指定できます。<paramref name="routeValues" /> パラメーターは元のルート値とマージされ、その値をオーバーライドします。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="htmlHelper" /> パラメーターが null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="actionName" /> パラメーターが null または空です。</exception>
      <exception cref="T:System.InvalidOperationException">必要な仮想パスのデータが見つかりません。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.Action(System.Web.Mvc.HtmlHelper,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>指定されたパラメーターを使用して、指定された子アクション メソッドを呼び出し、その結果を HTML 文字列として返します。</summary>
      <returns>HTML 文字列としての子アクションの結果。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="actionName">呼び出すアクション メソッドの名前。</param>
      <param name="routeValues">ルートのパラメーターが格納されたディクショナリ。<paramref name="routeValues" /> を使用して、アクション メソッド パラメーターにバインドされるパラメーターを指定できます。<paramref name="routeValues" /> パラメーターは元のルート値とマージされ、その値をオーバーライドします。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="htmlHelper" /> パラメーターが null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="actionName" /> パラメーターが null または空です。</exception>
      <exception cref="T:System.InvalidOperationException">必要な仮想パスのデータが見つかりません。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.RenderAction(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>指定された子アクション メソッドを呼び出し、その結果を親ビューにインライン表示します。</summary>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="actionName">呼び出す子アクション メソッドの名前。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="htmlHelper" /> パラメーターが null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="actionName" /> パラメーターが null または空です。</exception>
      <exception cref="T:System.InvalidOperationException">必要な仮想パスのデータが見つかりません。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.RenderAction(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>指定されたパラメーターを使用して、指定された子アクション メソッドを呼び出し、その結果を親ビューにインライン表示します。</summary>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="actionName">呼び出す子アクション メソッドの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。<paramref name="routeValues" /> を使用して、アクション メソッド パラメーターにバインドされるパラメーターを指定できます。<paramref name="routeValues" /> パラメーターは元のルート値とマージされ、その値をオーバーライドします。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="htmlHelper" /> パラメーターが null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="actionName" /> パラメーターが null または空です。</exception>
      <exception cref="T:System.InvalidOperationException">必要な仮想パスのデータが見つかりません。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.RenderAction(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>指定されたコントローラー名を使用して、指定された子アクション メソッドを呼び出し、その結果を親ビューにインライン表示します。</summary>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="actionName">呼び出す子アクション メソッドの名前。</param>
      <param name="controllerName">アクション メソッドが含まれるコントローラーの名前。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="htmlHelper" /> パラメーターが null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="actionName" /> パラメーターが null または空です。</exception>
      <exception cref="T:System.InvalidOperationException">必要な仮想パスのデータが見つかりません。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.RenderAction(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>指定されたパラメーターおよびコントローラー名を使用して、指定された子アクション メソッドを呼び出し、その結果を親ビューにインライン表示します。</summary>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="actionName">呼び出す子アクション メソッドの名前。</param>
      <param name="controllerName">アクション メソッドが含まれるコントローラーの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。<paramref name="routeValues" /> を使用して、アクション メソッド パラメーターにバインドされるパラメーターを指定できます。<paramref name="routeValues" /> パラメーターは元のルート値とマージされ、その値をオーバーライドします。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="htmlHelper" /> パラメーターが null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="actionName" /> パラメーターが null または空です。</exception>
      <exception cref="T:System.InvalidOperationException">必要な仮想パスのデータが見つかりません。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.RenderAction(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>指定されたパラメーターおよびコントローラー名を使用して、指定された子アクション メソッドを呼び出し、その結果を親ビューにインライン表示します。</summary>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="actionName">呼び出す子アクション メソッドの名前。</param>
      <param name="controllerName">アクション メソッドが含まれるコントローラーの名前。</param>
      <param name="routeValues">ルートのパラメーターが格納されたディクショナリ。<paramref name="routeValues" /> を使用して、アクション メソッド パラメーターにバインドされるパラメーターを指定できます。<paramref name="routeValues" /> パラメーターは元のルート値とマージされ、その値をオーバーライドします。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="htmlHelper" /> パラメーターが null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="actionName" /> パラメーターが null または空です。</exception>
      <exception cref="T:System.InvalidOperationException">必要な仮想パスのデータが見つかりません。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.RenderAction(System.Web.Mvc.HtmlHelper,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>指定されたパラメーターを使用して、指定された子アクション メソッドを呼び出し、その結果を親ビューにインライン表示します。</summary>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="actionName">呼び出す子アクション メソッドの名前。</param>
      <param name="routeValues">ルートのパラメーターが格納されたディクショナリ。<paramref name="routeValues" /> を使用して、アクション メソッド パラメーターにバインドされるパラメーターを指定できます。<paramref name="routeValues" /> パラメーターは元のルート値とマージされ、その値をオーバーライドします。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="htmlHelper" /> パラメーターが null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="actionName" /> パラメーターが null または空です。</exception>
      <exception cref="T:System.InvalidOperationException">必要な仮想パスのデータが見つかりません。</exception>
    </member>
    <member name="T:System.Web.Mvc.Html.DisplayExtensions">
      <summary>オブジェクト値を HTML として表示するためのサポートを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.Display(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>文字列式で表されるオブジェクトの各プロパティの HTML マークアップを返します。</summary>
      <returns>式で表されるオブジェクト内の各プロパティの HTML マークアップ。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.Display(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>追加のビュー データを使用して、文字列式で表されるオブジェクト内の各プロパティの HTML マークアップを返します。</summary>
      <returns>式で表されるオブジェクト内の各プロパティの HTML マークアップ。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="additionalViewData">テンプレートに対して作成される <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> インスタンスにマージされる追加ビュー データを含めることができる匿名オブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.Display(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>指定されたテンプレートを使用して、式で表されるオブジェクト内の各プロパティの HTML マークアップを返します。</summary>
      <returns>式で表されるオブジェクト内の各プロパティの HTML マークアップ。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="templateName">オブジェクトの表示に使用するテンプレートの名前。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.Display(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>指定されたテンプレートと追加のビュー データを使用して、式で表されるオブジェクト内の各プロパティの HTML マークアップを返します。</summary>
      <returns>式で表されるオブジェクト内の各プロパティの HTML マークアップ。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="templateName">オブジェクトの表示に使用するテンプレートの名前。</param>
      <param name="additionalViewData">テンプレートに対して作成される <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> インスタンスにマージされる追加ビュー データを含めることができる匿名オブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.Display(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String)">
      <summary>指定されたテンプレートおよび HTML フィールド ID を使用して、式で表されるオブジェクト内の各プロパティの HTML マークアップを返します。</summary>
      <returns>式で表されるオブジェクト内の各プロパティの HTML マークアップ。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="templateName">オブジェクトの表示に使用するテンプレートの名前。</param>
      <param name="htmlFieldName">名前が同じプロパティについて表示される HTML input 要素の名前を明確に区別するために使用される文字列。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.Display(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.Object)">
      <summary>指定されたテンプレート、HTML フィールド ID、および追加のビュー データを使用して、式で表されるオブジェクト内の各プロパティの HTML マークアップを返します。</summary>
      <returns>式で表されるオブジェクト内の各プロパティの HTML マークアップ。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="templateName">オブジェクトの表示に使用するテンプレートの名前。</param>
      <param name="htmlFieldName">名前が同じプロパティについて表示される HTML input 要素の名前を明確に区別するために使用される文字列。</param>
      <param name="additionalViewData">テンプレートに対して作成される <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> インスタンスにマージされる追加ビュー データを含めることができる匿名オブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>
        <see cref="T:System.Linq.Expressions.Expression" /> 式で表されるオブジェクト内の各プロパティの HTML マークアップを返します。</summary>
      <returns>式で表されるオブジェクト内の各プロパティの HTML マークアップ。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TValue">値の型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
      <summary>追加のビュー データを使用して、指定された式で表されるオブジェクト内の各プロパティ値が格納された文字列を返します。</summary>
      <returns>式で表されるオブジェクト内の各プロパティの HTML マークアップ。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="additionalViewData">テンプレートに対して作成される <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> インスタンスにマージされる追加ビュー データを含めることができる匿名オブジェクト。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TValue">値の型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
      <summary>指定されたテンプレートを使用して、<see cref="T:System.Linq.Expressions.Expression" /> 式で表されるオブジェクト内の各プロパティ値を格納する文字列を返します。</summary>
      <returns>式で表されるオブジェクト内の各プロパティの HTML マークアップ。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="templateName">オブジェクトの表示に使用するテンプレートの名前。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TValue">値の型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Object)">
      <summary>指定されたテンプレートと追加のビュー データを使用して、指定された式で表されるオブジェクト内の各プロパティ値が格納された文字列を返します。</summary>
      <returns>式で表されるオブジェクト内の各プロパティの HTML マークアップ。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="templateName">オブジェクトの表示に使用するテンプレートの名前。</param>
      <param name="additionalViewData">テンプレートに対して作成される <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> インスタンスにマージされる追加ビュー データを含めることができる匿名オブジェクト。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TValue">値の型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String)">
      <summary>指定されたテンプレートおよび HTML フィールド ID を使用して、<see cref="T:System.Linq.Expressions.Expression" /> 式で表されるオブジェクト内の各プロパティの HTML マークアップを返します。</summary>
      <returns>式で表されるオブジェクト内の各プロパティの HTML マークアップ。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="templateName">オブジェクトの表示に使用するテンプレートの名前。</param>
      <param name="htmlFieldName">名前が同じプロパティについて表示される HTML input 要素の名前を明確に区別するために使用される文字列。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TValue">値の型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String,System.Object)">
      <summary>テンプレート、HTML フィールド ID、および追加のビュー データを使用して、指定された式で表されるオブジェクト内の各プロパティの HTML マークアップを返します。</summary>
      <returns>式で表されるオブジェクト内の各プロパティの HTML マークアップ。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="templateName">オブジェクトの表示に使用するテンプレートの名前。</param>
      <param name="htmlFieldName">名前が同じプロパティについて表示される HTML input 要素の名前を明確に区別するために使用される文字列。</param>
      <param name="additionalViewData">テンプレートに対して作成される <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> インスタンスにマージされる追加ビュー データを含めることができる匿名オブジェクト。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TValue">値の型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(System.Web.Mvc.HtmlHelper)">
      <summary>モデル内の各プロパティの HTML マークアップを返します。</summary>
      <returns>モデル内の各プロパティの HTML マークアップ。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(System.Web.Mvc.HtmlHelper,System.Object)">
      <summary>追加のビュー データを使用して、モデル内の各プロパティの HTML マークアップを返します。</summary>
      <returns>モデル内の各プロパティの HTML マークアップ。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="additionalViewData">テンプレートに対して作成される <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> インスタンスにマージされる追加ビュー データを含めることができる匿名オブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>指定されたテンプレートを使用して、モデル内の各プロパティの HTML マークアップを返します。</summary>
      <returns>モデル内の各プロパティの HTML マークアップ。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="templateName">オブジェクトの表示に使用するテンプレートの名前。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>指定されたテンプレートおよび追加のビュー データを使用して、モデル内の各プロパティの HTML マークアップを返します。</summary>
      <returns>モデル内の各プロパティの HTML マークアップ。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="templateName">オブジェクトの表示に使用するテンプレートの名前。</param>
      <param name="additionalViewData">テンプレートに対して作成される <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> インスタンスにマージされる追加ビュー データを含めることができる匿名オブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>指定されたテンプレートおよび HTML フィールド ID を使用して、モデル内の各プロパティの HTML マークアップを返します。</summary>
      <returns>モデル内の各プロパティの HTML マークアップ。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="templateName">オブジェクトの表示に使用するテンプレートの名前。</param>
      <param name="htmlFieldName">名前が同じプロパティについて表示される HTML input 要素の名前を明確に区別するために使用される文字列。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>指定されたテンプレート、HTML フィールド ID、および追加のビュー データを使用して、モデル内の各プロパティの HTML マークアップを返します。</summary>
      <returns>モデル内の各プロパティの HTML マークアップ。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="templateName">オブジェクトの表示に使用するテンプレートの名前。</param>
      <param name="htmlFieldName">名前が同じプロパティについて表示される HTML input 要素の名前を明確に区別するために使用される文字列。</param>
      <param name="additionalViewData">テンプレートに対して作成される <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> インスタンスにマージされる追加ビュー データを含めることができる匿名オブジェクト。</param>
    </member>
    <member name="T:System.Web.Mvc.Html.DisplayNameExtensions">
      <summary>表示名を取得するメカニズムを提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayNameExtensions.DisplayName(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>表示名を取得します。</summary>
      <returns>表示名。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示名を格納しているオブジェクトを識別する式。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayNameExtensions.DisplayNameFor``2(System.Web.Mvc.HtmlHelper{System.Collections.Generic.IEnumerable{``0}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>モデルの表示名を取得します。</summary>
      <returns>モデルの表示名。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示名を格納しているオブジェクトを識別する式。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TValue">値の型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayNameExtensions.DisplayNameFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>モデルの表示名を取得します。</summary>
      <returns>モデルの表示名。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示名を格納しているオブジェクトを識別する式。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TValue">値の型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayNameExtensions.DisplayNameForModel(System.Web.Mvc.HtmlHelper)">
      <summary>モデルの表示名を取得します。</summary>
      <returns>モデルの表示名。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
    </member>
    <member name="T:System.Web.Mvc.Html.DisplayTextExtensions">
      <summary>オブジェクトの値を HTML として表示する方法を提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayTextExtensions.DisplayText(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>指定された式で表されるオブジェクトの各プロパティについて、HTML マークアップを返します。</summary>
      <returns>式で表されるオブジェクト内の各プロパティの HTML マークアップ。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">表示するプロパティを格納しているオブジェクトを識別する式。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayTextExtensions.DisplayTextFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>指定された式で表されるオブジェクトの各プロパティについて、HTML マークアップを返します。</summary>
      <returns>各プロパティの HTML マークアップ。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TResult">結果の型。</typeparam>
    </member>
    <member name="T:System.Web.Mvc.Html.EditorExtensions">
      <summary>アプリケーション内の HTML input 要素のサポートを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.Editor(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>式で表されるオブジェクト内の各プロパティの HTML input 要素を返します。</summary>
      <returns>式で表されるオブジェクト内の各プロパティの HTML input 要素。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.Editor(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>追加のビュー データを使用して、式で表されるオブジェクト内の各プロパティの HTML input 要素を返します。</summary>
      <returns>式で表されるオブジェクト内の各プロパティの HTML input 要素。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="additionalViewData">テンプレートに対して作成される <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> インスタンスにマージされる追加ビュー データを含めることができる匿名オブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.Editor(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>指定されたテンプレートを使用して、式で表されるオブジェクト内の各プロパティの HTML input 要素を返します。</summary>
      <returns>式で表されるオブジェクト内の各プロパティの HTML input 要素。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="templateName">オブジェクトを表示するために使用されるテンプレートの名前。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.Editor(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>指定されたテンプレートと追加のビュー データを使用して、式で表されるオブジェクト内の各プロパティの HTML input 要素を返します。</summary>
      <returns>式で表されるオブジェクト内の各プロパティの HTML input 要素。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="templateName">オブジェクトを表示するために使用されるテンプレートの名前。</param>
      <param name="additionalViewData">テンプレートに対して作成される <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> インスタンスにマージされる追加ビュー データを含めることができる匿名オブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.Editor(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String)">
      <summary>指定されたテンプレートおよび HTML フィールド名を使用して、式で表されるオブジェクト内の各プロパティの HTML input 要素を返します。</summary>
      <returns>式で表されるオブジェクト内の各プロパティの HTML input 要素。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="templateName">オブジェクトを表示するために使用されるテンプレートの名前。</param>
      <param name="htmlFieldName">名前が同じプロパティについて表示される HTML input 要素の名前を明確に区別するために使用される文字列。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.Editor(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.Object)">
      <summary>指定されたテンプレート、HTML フィールド名、および追加のビュー データを使用して、式で表されるオブジェクト内の各プロパティの HTML input 要素を返します。</summary>
      <returns>式で表されるオブジェクト内の各プロパティの HTML input 要素。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="templateName">オブジェクトを表示するために使用されるテンプレートの名前。</param>
      <param name="htmlFieldName">名前が同じプロパティについて表示される HTML input 要素の名前を明確に区別するために使用される文字列。</param>
      <param name="additionalViewData">テンプレートに対して作成される <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> インスタンスにマージされる追加ビュー データを含めることができる匿名オブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>
        <see cref="T:System.Linq.Expressions.Expression" /> 式で表されるオブジェクト内の各プロパティの HTML input 要素を返します。</summary>
      <returns>式で表されるオブジェクト内の各プロパティの HTML input 要素。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TValue">値の型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
      <summary>追加のビュー データを使用して、式で表されるオブジェクト内の各プロパティの HTML input 要素を返します。</summary>
      <returns>式で表されるオブジェクト内の各プロパティの HTML input 要素。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="additionalViewData">テンプレートに対して作成される <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> インスタンスにマージされる追加ビュー データを含めることができる匿名オブジェクト。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TValue">値の型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
      <summary>指定されたテンプレートを使用して、<see cref="T:System.Linq.Expressions.Expression" /> 式で表されるオブジェクト内の各プロパティの HTML input 要素を返します。</summary>
      <returns>式で表されるオブジェクト内の各プロパティの HTML input 要素。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="templateName">オブジェクトを表示するために使用されるテンプレートの名前。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TValue">値の型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Object)">
      <summary>指定されたテンプレートと追加のビュー データを使用して、式で表されるオブジェクト内の各プロパティの HTML input 要素を返します。</summary>
      <returns>式で表されるオブジェクト内の各プロパティの HTML input 要素。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="templateName">オブジェクトを表示するために使用されるテンプレートの名前。</param>
      <param name="additionalViewData">テンプレートに対して作成される <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> インスタンスにマージされる追加ビュー データを含めることができる匿名オブジェクト。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TValue">値の型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String)">
      <summary>指定されたテンプレートおよび HTML フィールド名を使用して、<see cref="T:System.Linq.Expressions.Expression" /> 式で表されるオブジェクト内の各プロパティの HTML input 要素を返します。</summary>
      <returns>式で表されるオブジェクト内の各プロパティの HTML input 要素。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="templateName">オブジェクトを表示するために使用されるテンプレートの名前。</param>
      <param name="htmlFieldName">名前が同じプロパティについて表示される HTML input 要素の名前を明確に区別するために使用される文字列。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TValue">値の型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String,System.Object)">
      <summary>指定されたテンプレート、HTML フィールド名、および追加のビュー データを使用して、式で表されるオブジェクト内の各プロパティの HTML input 要素を返します。</summary>
      <returns>式で表されるオブジェクト内の各プロパティの HTML input 要素。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="templateName">オブジェクトを表示するために使用されるテンプレートの名前。</param>
      <param name="htmlFieldName">名前が同じプロパティについて表示される HTML input 要素の名前を明確に区別するために使用される文字列。</param>
      <param name="additionalViewData">テンプレートに対して作成される <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> インスタンスにマージされる追加ビュー データを含めることができる匿名オブジェクト。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TValue">値の型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorForModel(System.Web.Mvc.HtmlHelper)">
      <summary>モデル内の各プロパティの HTML input 要素を返します。</summary>
      <returns>モデル内の各プロパティの HTML input 要素。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorForModel(System.Web.Mvc.HtmlHelper,System.Object)">
      <summary>追加のビュー データを使用して、モデル内の各プロパティの HTML input 要素を返します。</summary>
      <returns>モデル内の各プロパティの HTML input 要素。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="additionalViewData">テンプレートに対して作成される <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> インスタンスにマージされる追加ビュー データを含めることができる匿名オブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorForModel(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>指定されたテンプレートを使用して、モデル内の各プロパティの HTML input 要素を返します。</summary>
      <returns>モデルおよび指定されたテンプレート内の各プロパティの HTML input 要素。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="templateName">オブジェクトを表示するために使用されるテンプレートの名前。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorForModel(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>指定されたテンプレートおよび追加のビュー データを使用して、モデル内の各プロパティの HTML input 要素を返します。</summary>
      <returns>モデル内の各プロパティの HTML input 要素。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="templateName">オブジェクトを表示するために使用されるテンプレートの名前。</param>
      <param name="additionalViewData">テンプレートに対して作成される <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> インスタンスにマージされる追加ビュー データを含めることができる匿名オブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorForModel(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>指定されたテンプレート名および HTML フィールド名を使用して、モデル内の各プロパティの HTML input 要素を返します。</summary>
      <returns>モデルおよび名前付きテンプレート内の各プロパティの HTML input 要素。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="templateName">オブジェクトを表示するために使用されるテンプレートの名前。</param>
      <param name="htmlFieldName">名前が同じプロパティについて表示される HTML input 要素の名前を明確に区別するために使用される文字列。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorForModel(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>テンプレート名、HTML フィールド名、および追加のビュー データを使用して、モデル内の各プロパティの HTML input 要素を返します。</summary>
      <returns>モデル内の各プロパティの HTML input 要素。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="templateName">オブジェクトを表示するために使用されるテンプレートの名前。</param>
      <param name="htmlFieldName">名前が同じプロパティについて表示される HTML input 要素の名前を明確に区別するために使用される文字列。</param>
      <param name="additionalViewData">テンプレートに対して作成される <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> インスタンスにマージされる追加ビュー データを含めることができる匿名オブジェクト。</param>
    </member>
    <member name="T:System.Web.Mvc.Html.EnumHelper">
      <summary>列挙の値と Select リストの操作におけるメソッドを提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.EnumHelper.GetSelectList(System.Type)">
      <summary>特定の種類で定義された列挙定数に対応する <see cref="T:System.Web.Mvc.SelectListItem" /> オブジェクトの一覧を取得します。</summary>
      <returns>特定の <paramref name="type" /> の一覧。</returns>
      <param name="type">評価対象の種類。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EnumHelper.GetSelectList(System.Type,System.Enum)">
      <summary>特定の種類で定義された列挙定数に対応する <see cref="T:System.Web.Mvc.SelectListItem" /> オブジェクトの一覧を取得します。定義された定数に一致しない場合も <paramref name="value" /> が必ずラウンドトリップするようにし、返された一覧の 1 つの要素で <paramref name="value" /> に一致する要素の Selected のプロパティを true に設定します。</summary>
      <returns>特定の <paramref name="type" /> の一覧で、認識されていない <paramref name="value" /> を含めるよう拡張されている場合があります。</returns>
      <param name="type">評価対象の種類。</param>
      <param name="value">選択する種類の値。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EnumHelper.GetSelectList(System.Web.Mvc.ModelMetadata)">
      <summary>特定のメタデータで定義された列挙定数に対応する <see cref="T:System.Web.Mvc.SelectListItem" /> オブジェクトの一覧を取得します。</summary>
      <returns>特定のメタデータの一覧。</returns>
      <param name="metadata">評価対象のモデル メタデータ。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EnumHelper.GetSelectList(System.Web.Mvc.ModelMetadata,System.Enum)">
      <summary>特定のメタデータで定義された列挙定数に対応する <see cref="T:System.Web.Mvc.SelectListItem" /> オブジェクトの一覧を取得します。定義された定数に一致しない場合も、値が必ずラウンドトリップするようにし、返された一覧の 1 つの要素で値に一致する要素の Selected のプロパティを true に設定します。</summary>
      <returns>特定の <paramref name="metadata" /> の一覧で、認識されていない <paramref name="value" /> を含めるよう拡張されている場合があります。</returns>
      <param name="metadata">評価対象のメタデータ。</param>
      <param name="value">選択するメタデータ種類の値。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EnumHelper.IsValidForEnumHelper(System.Type)">
      <summary>特定の種類やその種類の式が、<see cref="M:System.Web.Mvc.Html.EnumHelper.GetSelectList(System.Type)" /> および <see cref="M:System.Web.Mvc.Html.SelectExtensions.EnumDropDownListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> の呼び出しでの使用に適しているかを示す値を取得します。</summary>
      <returns>
        <see cref="M:System.Web.Mvc.Html.EnumHelper.GetSelectList(System.Type)" /> が特定の種類をパスした時にスローせず、<see cref="M:System.Web.Mvc.Html.SelectExtensions.EnumDropDownListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> がこの種類の式をパスした時にスローしない場合は true、それ以外の場合は false。</returns>
      <param name="type">確認対象の種類。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EnumHelper.IsValidForEnumHelper(System.Web.Mvc.ModelMetadata)">
      <summary>特定のメタデータや関連付けられた式が、<see cref="M:System.Web.Mvc.Html.EnumHelper.GetSelectList(System.Web.Mvc.ModelMetadata)" /> および <see cref="M:System.Web.Mvc.Html.SelectExtensions.EnumDropDownListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> の呼び出しでの使用に適しているかを示す値を取得します。</summary>
      <returns>
        <see cref="M:System.Web.Mvc.Html.EnumHelper.GetSelectList(System.Web.Mvc.ModelMetadata)" /> が特定の <see cref="T:System.Web.Mvc.ModelMetadata" /> をパスした時にスローせず、<see cref="M:System.Web.Mvc.Html.SelectExtensions.EnumDropDownListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> が関連付けられた式をパスした時にスローしない場合は true、それ以外の場合は false。</returns>
      <param name="metadata">確認対象のメタデータ。</param>
    </member>
    <member name="T:System.Web.Mvc.Html.FormExtensions">
      <summary>アプリケーション内の HTML のサポートを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper)">
      <summary>応答に対する開始 &lt;form&gt; タグを書き込みます。フォームは POST メソッドを使用し、要求はビュー用のアクション メソッドによって処理されます。</summary>
      <returns>開始 &lt;form&gt; タグ。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.Object)">
      <summary>応答に開始 &lt;form&gt; タグを書き込み、ルート値をアクション属性に含めます。フォームは POST メソッドを使用し、要求はビュー用のアクション メソッドによって処理されます。</summary>
      <returns>開始 &lt;form&gt; タグ。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。オブジェクトのプロパティを調べることで、リフレクションを介してパラメーターが取得されます。通常、このオブジェクトは、オブジェクト初期化子構文を使用して作成されます。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>応答に開始 &lt;form&gt; タグを書き込み、アクション タグを指定したコントローラーとアクションに設定します。フォームは POST メソッドを使用します。</summary>
      <returns>開始 &lt;form&gt; タグ。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="actionName">アクション メソッドの名前。</param>
      <param name="controllerName">コントローラーの名前。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>応答に開始 &lt;form&gt; タグを書き込み、アクション タグを指定したコントローラー、アクション、およびルート値に設定します。フォームは POST メソッドを使用します。</summary>
      <returns>開始 &lt;form&gt; タグ。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="actionName">アクション メソッドの名前。</param>
      <param name="controllerName">コントローラーの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。オブジェクトのプロパティを調べることで、リフレクションを介してパラメーターが取得されます。通常、このオブジェクトは、オブジェクト初期化子構文を使用して作成されます。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Web.Mvc.FormMethod)">
      <summary>応答に開始 &lt;form&gt; タグを書き込み、アクション タグを指定したコントローラー、アクション、およびルート値に設定します。フォームは指定された HTTP メソッドを使用します。</summary>
      <returns>開始 &lt;form&gt; タグ。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="actionName">アクション メソッドの名前。</param>
      <param name="controllerName">コントローラーの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。オブジェクトのプロパティを調べることで、リフレクションを介してパラメーターが取得されます。通常、このオブジェクトは、オブジェクト初期化子構文を使用して作成されます。</param>
      <param name="method">フォームを処理するための HTTP メソッド (GET または POST)。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Web.Mvc.FormMethod,System.Object)">
      <summary>応答に開始 &lt;form&gt; タグを書き込み、アクション タグを指定したコントローラー、アクション、およびルート値に設定します。フォームは、指定された HTTP メソッドを使用し、HTML 属性を含めます。</summary>
      <returns>開始 &lt;form&gt; タグ。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="actionName">アクション メソッドの名前。</param>
      <param name="controllerName">コントローラーの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。オブジェクトのプロパティを調べることで、リフレクションを介してパラメーターが取得されます。通常、このオブジェクトは、オブジェクト初期化子構文を使用して作成されます。</param>
      <param name="method">フォームを処理するための HTTP メソッド (GET または POST)。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Mvc.FormMethod)">
      <summary>応答に開始 &lt;form&gt; タグを書き込み、アクション タグを指定したコントローラーとアクションに設定します。フォームは指定された HTTP メソッドを使用します。</summary>
      <returns>開始 &lt;form&gt; タグ。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="actionName">アクション メソッドの名前。</param>
      <param name="controllerName">コントローラーの名前。</param>
      <param name="method">フォームを処理するための HTTP メソッド (GET または POST)。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Mvc.FormMethod,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>応答に開始 &lt;form&gt; タグを書き込み、アクション タグを指定したコントローラーとアクションに設定します。フォームは、指定された HTTP メソッドを使用し、ディクショナリからの HTML 属性を含めます。</summary>
      <returns>開始 &lt;form&gt; タグ。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="actionName">アクション メソッドの名前。</param>
      <param name="controllerName">コントローラーの名前。</param>
      <param name="method">フォームを処理するための HTTP メソッド (GET または POST)。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Mvc.FormMethod,System.Object)">
      <summary>応答に開始 &lt;form&gt; タグを書き込み、アクション タグを指定したコントローラーとアクションに設定します。フォームは、指定された HTTP メソッドを使用し、HTML 属性を含めます。</summary>
      <returns>開始 &lt;form&gt; タグ。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="actionName">アクション メソッドの名前。</param>
      <param name="controllerName">コントローラーの名前。</param>
      <param name="method">フォームを処理するための HTTP メソッド (GET または POST)。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>応答に開始 &lt;form&gt; タグを書き込み、アクション タグを指定したコントローラー、アクション、ルート値ディクショナリからのルート値に設定します。フォームは POST メソッドを使用します。</summary>
      <returns>開始 &lt;form&gt; タグ。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="actionName">アクション メソッドの名前。</param>
      <param name="controllerName">コントローラーの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.FormMethod)">
      <summary>応答に開始 &lt;form&gt; タグを書き込み、アクション タグを指定したコントローラー、アクション、ルート値ディクショナリからのルート値に設定します。フォームは指定された HTTP メソッドを使用します。</summary>
      <returns>開始 &lt;form&gt; タグ。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="actionName">アクション メソッドの名前。</param>
      <param name="controllerName">コントローラーの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。</param>
      <param name="method">フォームを処理するための HTTP メソッド (GET または POST)。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.FormMethod,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>応答に開始 &lt;form&gt; タグを書き込み、アクション タグを指定したコントローラー、アクション、ルート値ディクショナリからのルート値に設定します。フォームは、指定された HTTP メソッドを使用し、ディクショナリからの HTML 属性を含めます。</summary>
      <returns>開始 &lt;form&gt; タグ。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="actionName">アクション メソッドの名前。</param>
      <param name="controllerName">コントローラーの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。</param>
      <param name="method">フォームを処理するための HTTP メソッド (GET または POST)。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.Web.Routing.RouteValueDictionary)">
      <summary>応答に開始 &lt;form&gt; タグを書き込み、ルート値ディクショナリからのルート値をアクション属性に含めます。フォームは POST メソッドを使用し、要求はビュー用のアクション メソッドによって処理されます。</summary>
      <returns>開始 &lt;form&gt; タグ。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.Object)">
      <summary>応答に対する開始 &lt;form&gt; タグを書き込みます。ユーザーがフォームを送信すると、ルート ターゲットによって要求が処理されます。</summary>
      <returns>開始 &lt;form&gt; タグ。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。オブジェクトのプロパティを調べることで、リフレクションを介してパラメーターが取得されます。通常、このオブジェクトは、オブジェクト初期化子構文を使用して作成されます。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>応答に対する開始 &lt;form&gt; タグを書き込みます。ユーザーがフォームを送信すると、ルート ターゲットによって要求が処理されます。</summary>
      <returns>開始 &lt;form&gt; タグ。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="routeName">フォーム ポスト URL を取得するために使用するルートの名前。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>応答に対する開始 &lt;form&gt; タグを書き込みます。ユーザーがフォームを送信すると、ルート ターゲットによって要求が処理されます。</summary>
      <returns>開始 &lt;form&gt; タグ。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="routeName">フォーム ポスト URL を取得するために使用するルートの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。オブジェクトのプロパティを調べることで、リフレクションを介してパラメーターが取得されます。通常、このオブジェクトは、オブジェクト初期化子構文を使用して作成されます。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Web.Mvc.FormMethod)">
      <summary>応答に対する開始 &lt;form&gt; タグを書き込みます。ユーザーがフォームを送信すると、ルート ターゲットによって要求が処理されます。</summary>
      <returns>開始 &lt;form&gt; タグ。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="routeName">フォーム ポスト URL を取得するために使用するルートの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。オブジェクトのプロパティを調べることで、リフレクションを介してパラメーターが取得されます。通常、このオブジェクトは、オブジェクト初期化子構文を使用して作成されます。</param>
      <param name="method">フォームを処理するための HTTP メソッド (GET または POST)。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Web.Mvc.FormMethod,System.Object)">
      <summary>応答に対する開始 &lt;form&gt; タグを書き込みます。ユーザーがフォームを送信すると、ルート ターゲットによって要求が処理されます。</summary>
      <returns>開始 &lt;form&gt; タグ。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="routeName">フォーム ポスト URL を取得するために使用するルートの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。オブジェクトのプロパティを調べることで、リフレクションを介してパラメーターが取得されます。通常、このオブジェクトは、オブジェクト初期化子構文を使用して作成されます。</param>
      <param name="method">フォームを処理するための HTTP メソッド (GET または POST)。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String,System.Web.Mvc.FormMethod)">
      <summary>応答に対する開始 &lt;form&gt; タグを書き込みます。ユーザーがフォームを送信すると、ルート ターゲットによって要求が処理されます。</summary>
      <returns>開始 &lt;form&gt; タグ。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="routeName">フォーム ポスト URL を取得するために使用するルートの名前。</param>
      <param name="method">フォームを処理するための HTTP メソッド (GET または POST)。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String,System.Web.Mvc.FormMethod,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>応答に対する開始 &lt;form&gt; タグを書き込みます。ユーザーがフォームを送信すると、ルート ターゲットによって要求が処理されます。</summary>
      <returns>開始 &lt;form&gt; タグ。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="routeName">フォーム ポスト URL を取得するために使用するルートの名前。</param>
      <param name="method">フォームを処理するための HTTP メソッド (GET または POST)。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String,System.Web.Mvc.FormMethod,System.Object)">
      <summary>応答に対する開始 &lt;form&gt; タグを書き込みます。ユーザーがフォームを送信すると、ルート ターゲットによって要求が処理されます。</summary>
      <returns>開始 &lt;form&gt; タグ。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="routeName">フォーム ポスト URL を取得するために使用するルートの名前。</param>
      <param name="method">フォームを処理するための HTTP メソッド (GET または POST)。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>応答に対する開始 &lt;form&gt; タグを書き込みます。ユーザーがフォームを送信すると、ルート ターゲットによって要求が処理されます。</summary>
      <returns>開始 &lt;form&gt; タグ。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="routeName">フォーム ポスト URL を取得するために使用するルートの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.FormMethod)">
      <summary>応答に対する開始 &lt;form&gt; タグを書き込みます。ユーザーがフォームを送信すると、ルート ターゲットによって要求が処理されます。</summary>
      <returns>開始 &lt;form&gt; タグ。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="routeName">フォーム ポスト URL を取得するために使用するルートの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。</param>
      <param name="method">フォームを処理するための HTTP メソッド (GET または POST)。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.FormMethod,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>応答に対する開始 &lt;form&gt; タグを書き込みます。ユーザーがフォームを送信すると、ルート ターゲットによって要求が処理されます。</summary>
      <returns>開始 &lt;form&gt; タグ。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="routeName">フォーム ポスト URL を取得するために使用するルートの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。</param>
      <param name="method">フォームを処理するための HTTP メソッド (GET または POST)。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.Web.Routing.RouteValueDictionary)">
      <summary>応答に対する開始 &lt;form&gt; タグを書き込みます。ユーザーがフォームを送信すると、ルート ターゲットによって要求が処理されます。</summary>
      <returns>開始 &lt;form&gt; タグ。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.EndForm(System.Web.Mvc.HtmlHelper)">
      <summary>応答に対する終了 &lt;/form&gt; タグを表示します。</summary>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
    </member>
    <member name="T:System.Web.Mvc.Html.InputExtensions">
      <summary>アプリケーション内の HTML 入力コントロールのサポートを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.CheckBox(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>指定された HTML ヘルパーおよびフォーム フィールド名を使用して、チェック ボックスの input 要素を返します。</summary>
      <returns>type 属性が "checkbox" に設定されている input 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">フォーム フィールドの名前。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.CheckBox(System.Web.Mvc.HtmlHelper,System.String,System.Boolean)">
      <summary>指定された HTML ヘルパー、フォーム フィールド名、およびチェック ボックスがオンになっているかどうかを示す値を使用して、チェック ボックスの input 要素を返します。</summary>
      <returns>type 属性が "checkbox" に設定されている input 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">フォーム フィールドの名前。</param>
      <param name="isChecked">チェック ボックスをオンにする場合は true。それ以外の場合は false。チェック ボックスの値は、<see cref="T:System.Web.Mvc.ModelStateDictionary" /> オブジェクト、このパラメーターの値、<see cref="T:System.Web.Mvc.ViewDataDictionary" /> オブジェクト、最後に HTML 属性内の checked 属性の順序で取得されます。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.CheckBox(System.Web.Mvc.HtmlHelper,System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定された HTML ヘルパー、フォーム フィールド名、チェック ボックスがオンになっているかどうかを示す値、および HTML 属性を使用して、チェック ボックスの input 要素を返します。</summary>
      <returns>type 属性が "checkbox" に設定されている input 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">フォーム フィールドの名前。</param>
      <param name="isChecked">チェック ボックスをオンにする場合は true。それ以外の場合は false。チェック ボックスの値は、<see cref="T:System.Web.Mvc.ModelStateDictionary" /> オブジェクト、このパラメーターの値、<see cref="T:System.Web.Mvc.ViewDataDictionary" /> オブジェクト、最後に HTML 属性内の checked 属性の順序で取得されます。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.CheckBox(System.Web.Mvc.HtmlHelper,System.String,System.Boolean,System.Object)">
      <summary>指定された HTML ヘルパー、フォーム フィールド名、チェック ボックスがオンになっているかどうかを示す値、および HTML 属性を使用して、チェック ボックスの input 要素を返します。</summary>
      <returns>type 属性が "checkbox" に設定されている input 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">フォーム フィールドの名前。</param>
      <param name="isChecked">チェック ボックスをオンにする場合は true。それ以外の場合は false。チェック ボックスの値は、<see cref="T:System.Web.Mvc.ModelStateDictionary" /> オブジェクト、このパラメーターの値、<see cref="T:System.Web.Mvc.ViewDataDictionary" /> オブジェクト、最後に HTML 属性内の checked 属性の順序で取得されます。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.CheckBox(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定された HTML ヘルパー、フォーム フィールド名、および HTML 属性を使用してチェック ボックスの input 要素を返します。</summary>
      <returns>type 属性が "checkbox" に設定されている input 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">フォーム フィールドの名前。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.CheckBox(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>指定された HTML ヘルパー、フォーム フィールド名、および HTML 属性を使用してチェック ボックスの input 要素を返します。</summary>
      <returns>type 属性が "checkbox" に設定されている input 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">フォーム フィールドの名前。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.CheckBoxFor``1(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>指定された式で表されるオブジェクトの各プロパティについて、チェック ボックスの input 要素を返します。</summary>
      <returns>指定された式で表されるオブジェクトの各プロパティで、type 属性が "checkbox" に設定されている HTML の input 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.CheckBoxFor``1(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定された式で表されるオブジェクトの各プロパティについて、指定された HTML 属性を使用して、チェック ボックスの input 要素を返します。</summary>
      <returns>指定された式で表されるオブジェクトの各プロパティについて、指定された HTML 属性を使用して、type 属性が "checkbox" に設定されている HTML の input 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納しているディクショナリ。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.CheckBoxFor``1(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object)">
      <summary>指定された式で表されるオブジェクトの各プロパティについて、指定された HTML 属性を使用して、チェック ボックスの input 要素を返します。</summary>
      <returns>指定された式で表されるオブジェクトの各プロパティについて、指定された HTML 属性を使用して、type 属性が "checkbox" に設定されている HTML の input 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.Hidden(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>指定された HTML ヘルパーおよびフォーム フィールド名を使用して、非表示の input 要素を返します。</summary>
      <returns>type 属性が "hidden" に設定されている input 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">フォーム フィールド名、および値を検索するために使用される <see cref="T:System.Web.Mvc.ViewDataDictionary" /> キー。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.Hidden(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>指定された HTML ヘルパー、フォーム フィールド名、および値を使用して、非表示の input 要素を返します。</summary>
      <returns>type 属性が "hidden" に設定されている input 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">フォーム フィールド名、および値を検索するために使用される <see cref="T:System.Web.Mvc.ViewDataDictionary" /> キー。</param>
      <param name="value">非表示の input 要素の値。値は、<see cref="T:System.Web.Mvc.ModelStateDictionary" /> オブジェクト、このパラメーターの値、<see cref="T:System.Web.Mvc.ViewDataDictionary" /> オブジェクト、最後に HTML 属性内の value 属性の順序で取得されます。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.Hidden(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定された HTML ヘルパー、フォーム フィールド名、値、および HTML 属性を使用して、非表示の input 要素を返します。</summary>
      <returns>type 属性が "hidden" に設定されている input 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">フォーム フィールド名、および値を検索するために使用される <see cref="T:System.Web.Mvc.ViewDataDictionary" /> キー。</param>
      <param name="value">非表示の input 要素の値。値は、<see cref="T:System.Web.Mvc.ModelStateDictionary" /> オブジェクト、このパラメーターの値、<see cref="T:System.Web.Mvc.ViewDataDictionary" /> オブジェクト、最後に HTML 属性内の value 属性の順序で取得されます。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.Hidden(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Object)">
      <summary>指定された HTML ヘルパー、フォーム フィールド名、値、および HTML 属性を使用して、非表示の input 要素を返します。</summary>
      <returns>type 属性が "hidden" に設定されている input 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">フォーム フィールド名、および値を検索するために使用される <see cref="T:System.Web.Mvc.ViewDataDictionary" /> キー。</param>
      <param name="value">非表示の input 要素の値。値は、<see cref="T:System.Web.Mvc.ModelStateDictionary" /> オブジェクト、このパラメーターの値、<see cref="T:System.Web.Mvc.ViewDataDictionary" /> オブジェクト、最後に HTML 属性内の value 属性の順序で取得されます。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.HiddenFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>指定された式で表されるオブジェクトの各プロパティについて、非表示の HTML の input 要素を返します。</summary>
      <returns>式で表されるオブジェクトの各プロパティで、type 属性が "hidden" に設定されている input 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TProperty">プロパティの型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.HiddenFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定された式で表されるオブジェクトの各プロパティについて、指定された HTML 属性を使用して、非表示の HTML の input 要素を返します。</summary>
      <returns>式で表されるオブジェクトの各プロパティで、type 属性が "hidden" に設定されている input 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TProperty">プロパティの型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.HiddenFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
      <summary>指定された式で表されるオブジェクトの各プロパティについて、指定された HTML 属性を使用して、非表示の HTML の input 要素を返します。</summary>
      <returns>式で表されるオブジェクトの各プロパティで、type 属性が "hidden" に設定されている input 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TProperty">プロパティの型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.Password(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>指定された HTML ヘルパーおよびフォーム フィールド名を使用して、パスワードの input 要素を返します。</summary>
      <returns>type 属性が "password" に設定されている input 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">フォーム フィールド名、および値を検索するために使用される <see cref="T:System.Web.Mvc.ViewDataDictionary" /> キー。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.Password(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>指定された HTML ヘルパー、フォーム フィールド名、および値を使用して、パスワードの input 要素を返します。</summary>
      <returns>type 属性が "password" に設定されている input 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">フォーム フィールド名、および値を検索するために使用される <see cref="T:System.Web.Mvc.ViewDataDictionary" /> キー。</param>
      <param name="value">パスワードの input 要素の値。このパラメーターの値が指定されていない場合、HTML 属性内の value 属性が、値を取得するために使用されます。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.Password(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定された HTML ヘルパー、フォーム フィールド名、値、および指定された HTML 属性を使用して、パスワードの input 要素を返します。</summary>
      <returns>type 属性が "password" に設定されている input 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">フォーム フィールド名、および値を検索するために使用される <see cref="T:System.Web.Mvc.ViewDataDictionary" /> キー。</param>
      <param name="value">パスワードの input 要素の値。このパラメーターの値が指定されていない場合、HTML 属性内の value 属性が、値を取得するために使用されます。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.Password(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Object)">
      <summary>指定された HTML ヘルパー、フォーム フィールド名、値、および指定された HTML 属性を使用して、パスワードの input 要素を返します。</summary>
      <returns>type 属性が "password" に設定されている input 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">フォーム フィールド名、および値を検索するために使用される <see cref="T:System.Web.Mvc.ViewDataDictionary" /> キー。</param>
      <param name="value">パスワードの input 要素の値。このパラメーターの値が指定されていない場合、HTML 属性内の value 属性が、値を取得するために使用されます。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.PasswordFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>指定された式で表されるオブジェクトの各プロパティについて、パスワードの input 要素を返します。</summary>
      <returns>指定された式で表されるオブジェクトの各プロパティで、type 属性が "password" に設定されている HTML の input 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TProperty">値の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.PasswordFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定された式で表されるオブジェクトの各プロパティについて、指定された HTML 属性を使用して、パスワードの input 要素を返します。</summary>
      <returns>指定された式で表されるオブジェクトの各プロパティについて、指定された HTML 属性を使用して、type 属性が "password" に設定されている HTML の input 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納しているディクショナリ。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TProperty">値の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.PasswordFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
      <summary>指定された式で表されるオブジェクトの各プロパティについて、指定された HTML 属性を使用して、パスワードの input 要素を返します。</summary>
      <returns>指定された式で表されるオブジェクトの各プロパティについて、指定された HTML 属性を使用して、type 属性が "password" に設定されている HTML の input 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TProperty">値の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.RadioButton(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>同時に指定できないオプションを示すために使用される、オプション ボタンの input 要素を返します。</summary>
      <returns>type 属性が "radio" に設定されている input 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">フォーム フィールド名、および値を検索するために使用される <see cref="T:System.Web.Mvc.ViewDataDictionary" /> キー。</param>
      <param name="value">選択されたラジオ ボタンの値。値は、<see cref="T:System.Web.Mvc.ModelStateDictionary" /> オブジェクト、このパラメーターの値、<see cref="T:System.Web.Mvc.ViewDataDictionary" /> オブジェクト、最後に HTML 属性内の value 属性の順序で取得されます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> パラメーターが null または空です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.RadioButton(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Boolean)">
      <summary>同時に指定できないオプションを示すために使用される、オプション ボタンの input 要素を返します。</summary>
      <returns>type 属性が "radio" に設定されている input 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">フォーム フィールド名、および値を検索するために使用される <see cref="T:System.Web.Mvc.ViewDataDictionary" /> キー。</param>
      <param name="value">選択されたラジオ ボタンの値。値は、<see cref="T:System.Web.Mvc.ModelStateDictionary" /> オブジェクト、このパラメーターの値、<see cref="T:System.Web.Mvc.ViewDataDictionary" /> オブジェクト、最後に HTML 属性内の value 属性の順序で取得されます。</param>
      <param name="isChecked">オプション ボタンを選択する場合は true。それ以外の場合は false。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> パラメーターが null または空です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.RadioButton(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>同時に指定できないオプションを示すために使用される、オプション ボタンの input 要素を返します。</summary>
      <returns>type 属性が "radio" に設定されている input 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">フォーム フィールド名、および値を検索するために使用される <see cref="T:System.Web.Mvc.ViewDataDictionary" /> キー。</param>
      <param name="value">選択されたラジオ ボタンの値。値は、<see cref="T:System.Web.Mvc.ModelStateDictionary" /> オブジェクト、このパラメーターの値、<see cref="T:System.Web.Mvc.ViewDataDictionary" /> オブジェクト、最後に HTML 属性内の value 属性の順序で取得されます。</param>
      <param name="isChecked">オプション ボタンを選択する場合は true。それ以外の場合は false。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> パラメーターが null または空です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.RadioButton(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Boolean,System.Object)">
      <summary>同時に指定できないオプションを示すために使用される、オプション ボタンの input 要素を返します。</summary>
      <returns>type 属性が "radio" に設定されている input 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">フォーム フィールド名、および値を検索するために使用される <see cref="T:System.Web.Mvc.ViewDataDictionary" /> キー。</param>
      <param name="value">選択されたラジオ ボタンの値。値は、<see cref="T:System.Web.Mvc.ModelStateDictionary" /> オブジェクト、このパラメーターの値、<see cref="T:System.Web.Mvc.ViewDataDictionary" /> オブジェクト、最後に HTML 属性内の value 属性の順序で取得されます。</param>
      <param name="isChecked">オプション ボタンを選択する場合は true。それ以外の場合は false。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> パラメーターが null または空です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.RadioButton(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>同時に指定できないオプションを示すために使用される、オプション ボタンの input 要素を返します。</summary>
      <returns>type 属性が "radio" に設定されている input 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">フォーム フィールド名、および値を検索するために使用される <see cref="T:System.Web.Mvc.ViewDataDictionary" /> キー。</param>
      <param name="value">選択されたラジオ ボタンの値。値は、<see cref="T:System.Web.Mvc.ModelStateDictionary" /> オブジェクト、このパラメーターの値、<see cref="T:System.Web.Mvc.ViewDataDictionary" /> オブジェクト、最後に HTML 属性内の value 属性の順序で取得されます。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> パラメーターが null または空です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.RadioButton(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Object)">
      <summary>同時に指定できないオプションを示すために使用される、オプション ボタンの input 要素を返します。</summary>
      <returns>type 属性が "radio" に設定されている input 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">フォーム フィールド名、および値を検索するために使用される <see cref="T:System.Web.Mvc.ViewDataDictionary" /> キー。</param>
      <param name="value">選択されたラジオ ボタンの値。値は、<see cref="T:System.Web.Mvc.ModelStateDictionary" /> オブジェクト、このパラメーターの値、<see cref="T:System.Web.Mvc.ViewDataDictionary" /> オブジェクト、最後に HTML 属性内の value 属性の順序で取得されます。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> パラメーターが null または空です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.RadioButtonFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
      <summary>指定された式で表されるオブジェクトの各プロパティについて、ラジオ ボタンの input 要素を返します。</summary>
      <returns>指定された式で表されるオブジェクトの各プロパティで、type 属性が "radio" に設定されている HTML の input 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="value">選択されたラジオ ボタンの値。値は、<see cref="T:System.Web.Mvc.ModelStateDictionary" /> オブジェクト、このパラメーターの値、<see cref="T:System.Web.Mvc.ViewDataDictionary" /> オブジェクト、最後に HTML 属性内の value 属性の順序で取得されます。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TProperty">値の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.RadioButtonFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定された式で表されるオブジェクトの各プロパティについて、指定された HTML 属性を使用して、オプション ボタンの input 要素を返します。</summary>
      <returns>指定された式で表されるオブジェクトの各プロパティについて、指定された HTML 属性を使用して、type 属性が "radio" に設定されている HTML の input 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="value">選択されたラジオ ボタンの値。値は、<see cref="T:System.Web.Mvc.ModelStateDictionary" /> オブジェクト、このパラメーターの値、<see cref="T:System.Web.Mvc.ViewDataDictionary" /> オブジェクト、最後に HTML 属性内の value 属性の順序で取得されます。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納しているディクショナリ。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TProperty">値の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.RadioButtonFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object,System.Object)">
      <summary>指定された式で表されるオブジェクトの各プロパティについて、指定された HTML 属性を使用して、オプション ボタンの input 要素を返します。</summary>
      <returns>指定された式で表されるオブジェクトの各プロパティについて、指定された HTML 属性を使用して、type 属性が "radio" に設定されている HTML の input 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="value">選択されたラジオ ボタンの値。値は、<see cref="T:System.Web.Mvc.ModelStateDictionary" /> オブジェクト、このパラメーターの値、<see cref="T:System.Web.Mvc.ViewDataDictionary" /> オブジェクト、最後に HTML 属性内の value 属性の順序で取得されます。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TProperty">値の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.TextBox(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>指定された HTML ヘルパーおよびフォーム フィールド名を使用して、テキストの input 要素を返します。</summary>
      <returns>type 属性が "text" に設定されている input 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">フォーム フィールド名、および値を検索するために使用される <see cref="T:System.Web.Mvc.ViewDataDictionary" /> キー。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.TextBox(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>指定された HTML ヘルパー、フォーム フィールド名、および値を使用して、テキストの input 要素を返します。</summary>
      <returns>type 属性が "text" に設定されている input 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">フォーム フィールド名、および値を検索するために使用される <see cref="T:System.Web.Mvc.ViewDataDictionary" /> キー。</param>
      <param name="value">テキストの input 要素の値。値は、<see cref="T:System.Web.Mvc.ModelStateDictionary" /> オブジェクト、このパラメーターの値、<see cref="T:System.Web.Mvc.ViewDataDictionary" /> オブジェクト、最後に HTML 属性内の value 属性の順序で取得されます。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.TextBox(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定された HTML ヘルパー、フォーム フィールド名、値、および HTML 属性を使用して、テキストの input 要素を返します。</summary>
      <returns>type 属性が "text" に設定されている input 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">フォーム フィールド名、および値を検索するために使用される <see cref="T:System.Web.Mvc.ViewDataDictionary" /> キー。</param>
      <param name="value">テキストの input 要素の値。値は、<see cref="T:System.Web.Mvc.ModelStateDictionary" /> オブジェクト、このパラメーターの値、<see cref="T:System.Web.Mvc.ViewDataDictionary" /> オブジェクト、最後に HTML 属性内の value 属性の順序で取得されます。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.TextBox(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Object)">
      <summary>指定された HTML ヘルパー、フォーム フィールド名、値、および HTML 属性を使用して、テキストの input 要素を返します。</summary>
      <returns>type 属性が "text" に設定されている input 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">フォーム フィールド名、および値を検索するために使用される <see cref="T:System.Web.Mvc.ViewDataDictionary" /> キー。</param>
      <param name="value">テキストの input 要素の値。値は、<see cref="T:System.Web.Mvc.ModelStateDictionary" /> オブジェクト、このパラメーターの値、<see cref="T:System.Web.Mvc.ViewDataDictionary" /> オブジェクト、最後に HTML 属性内の value 属性の順序で取得されます。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.TextBox(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.String)">
      <summary>テキストの input 要素を返します。</summary>
      <returns>type 属性が "text" に設定されている input 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">フォーム フィールドの名前。</param>
      <param name="value">テキストの input 要素の値。値は、<see cref="T:System.Web.Mvc.ModelStateDictionary" /> オブジェクト、このパラメーターの値、<see cref="T:System.Web.Mvc.ViewDataDictionary" /> オブジェクト、最後に HTML 属性内の value 属性の順序で取得されます。</param>
      <param name="format">入力の書式設定に使用される文字列。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.TextBox(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>テキストの input 要素を返します。</summary>
      <returns>type 属性が "text" に設定されている input 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">フォーム フィールド名、および値を検索するために使用される <see cref="T:System.Web.Mvc.ViewDataDictionary" /> キー。</param>
      <param name="value">テキストの input 要素の値。値は、<see cref="T:System.Web.Mvc.ModelStateDictionary" /> オブジェクト、このパラメーターの値、<see cref="T:System.Web.Mvc.ViewDataDictionary" /> オブジェクト、最後に HTML 属性内の value 属性の順序で取得されます。</param>
      <param name="format">入力の書式設定に使用される文字列。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.TextBox(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.String,System.Object)">
      <summary>テキストの input 要素を返します。</summary>
      <returns>type 属性が "text" に設定されている input 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">フォーム フィールド名、および値を検索するために使用される <see cref="T:System.Web.Mvc.ViewDataDictionary" /> キー。</param>
      <param name="value">テキストの input 要素の値。値は、<see cref="T:System.Web.Mvc.ModelStateDictionary" /> オブジェクト、このパラメーターの値、<see cref="T:System.Web.Mvc.ViewDataDictionary" /> オブジェクト、最後に HTML 属性内の value 属性の順序で取得されます。</param>
      <param name="format">入力の書式設定に使用される文字列。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.TextBoxFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>指定された式で表されるオブジェクトの各プロパティについて、テキストの input 要素を返します。</summary>
      <returns>式で表されるオブジェクトの各プロパティで、type 属性が "text" に設定されている HTML の input 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TProperty">値の型。</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.TextBoxFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定された式で表されるオブジェクトの各プロパティについて、指定された HTML 属性を使用して、テキストの input 要素を返します。</summary>
      <returns>式で表されるオブジェクトの各プロパティで、type 属性が "text" に設定されている HTML の input 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納しているディクショナリ。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TProperty">値の型。</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.TextBoxFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
      <summary>指定された式で表されるオブジェクトの各プロパティについて、指定された HTML 属性を使用して、テキストの input 要素を返します。</summary>
      <returns>式で表されるオブジェクトの各プロパティで、type 属性が "text" に設定されている HTML の input 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TProperty">値の型。</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.TextBoxFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
      <summary>テキストの input 要素を返します。</summary>
      <returns>type 属性が "text" に設定されている input 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="format">入力の書式設定に使用される文字列。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TProperty">値の型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.TextBoxFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>テキストの input 要素を返します。</summary>
      <returns>type 属性が "text" に設定されている input 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="format">入力の書式設定に使用される文字列。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TProperty">値の型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.TextBoxFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Object)">
      <summary>テキストの input 要素を返します。</summary>
      <returns>type 属性が "text" に設定されている input 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="format">入力の書式設定に使用される文字列。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TProperty">値の型。</typeparam>
    </member>
    <member name="T:System.Web.Mvc.Html.LabelExtensions">
      <summary>ASP.NET MVC ビュー内の HTML label 要素のサポートを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.Label(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>指定された式で表されるプロパティの HTML label 要素およびプロパティ名を返します。</summary>
      <returns>式で表されるプロパティの HTML label 要素およびプロパティ名。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを識別する式。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.Label(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定された式で表されるプロパティの HTML label 要素およびプロパティ名を返します。</summary>
      <returns>式で表されるプロパティの HTML label 要素およびプロパティ名。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを識別する式。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.Label(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>指定された式で表されるプロパティの HTML label 要素およびプロパティ名を返します。</summary>
      <returns>式で表されるプロパティの HTML label 要素およびプロパティ名。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを識別する式。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.Label(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>ラベル テキストを使用して、指定された式で表されるプロパティの HTML label 要素およびプロパティ名を返します。</summary>
      <returns>式で表されるプロパティの HTML label 要素およびプロパティ名。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを識別する式。</param>
      <param name="labelText">表示するラベル テキスト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.Label(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定された式で表されるプロパティの HTML label 要素およびプロパティ名を返します。</summary>
      <returns>式で表されるプロパティの HTML label 要素およびプロパティ名。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを識別する式。</param>
      <param name="labelText">ラベルのテキスト。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.Label(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>指定された式で表されるプロパティの HTML label 要素およびプロパティ名を返します。</summary>
      <returns>式で表されるプロパティの HTML label 要素およびプロパティ名。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを識別する式。</param>
      <param name="labelText">ラベルのテキスト。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.LabelFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>指定された式で表されるプロパティの HTML label 要素およびプロパティ名を返します。</summary>
      <returns>式で表されるプロパティの HTML label 要素およびプロパティ名。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを識別する式。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TValue">値の型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.LabelFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定された式で表されるプロパティの HTML label 要素およびプロパティ名を返します。</summary>
      <returns>式で表されるプロパティの HTML label 要素およびプロパティ名。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを識別する式。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TValue">値の型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.LabelFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
      <summary>指定された式で表されるプロパティの HTML label 要素およびプロパティ名を返します。</summary>
      <returns>式で表されるプロパティの HTML label 要素およびプロパティ名。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを識別する式。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TValue">値。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.LabelFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
      <summary>ラベル テキストを使用して、指定された式で表されるプロパティの HTML label 要素およびプロパティ名を返します。</summary>
      <returns>式で表されるプロパティの HTML label 要素およびプロパティ名。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを識別する式。</param>
      <param name="labelText">表示するラベル テキスト。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TValue">値の型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.LabelFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定された式で表されるプロパティの HTML label 要素およびプロパティ名を返します。</summary>
      <returns>式で表されるプロパティの HTML label 要素およびプロパティ名。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを識別する式。</param>
      <param name="labelText">表示するラベル テキスト。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TValue">値の型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.LabelFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Object)">
      <summary>指定された式で表されるプロパティの HTML label 要素およびプロパティ名を返します。</summary>
      <returns>式で表されるプロパティの HTML label 要素およびプロパティ名。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを識別する式。</param>
      <param name="labelText">ラベルのテキスト。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TValue">値。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.LabelForModel(System.Web.Mvc.HtmlHelper)">
      <summary>モデルで表されるプロパティの HTML label 要素およびプロパティ名を返します。</summary>
      <returns>モデルで表されるプロパティの HTML label 要素およびプロパティ名。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.LabelForModel(System.Web.Mvc.HtmlHelper,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定された式で表されるプロパティの HTML label 要素およびプロパティ名を返します。</summary>
      <returns>式で表されるプロパティの HTML label 要素およびプロパティ名。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.LabelForModel(System.Web.Mvc.HtmlHelper,System.Object)">
      <summary>指定された式で表されるプロパティの HTML label 要素およびプロパティ名を返します。</summary>
      <returns>式で表されるプロパティの HTML label 要素およびプロパティ名。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.LabelForModel(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>ラベル テキストを使用して、指定された式で表されるプロパティの HTML label 要素およびプロパティ名を返します。</summary>
      <returns>式で表されるプロパティの HTML label 要素およびプロパティ名。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="labelText">表示するラベル テキスト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.LabelForModel(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定された式で表されるプロパティの HTML label 要素およびプロパティ名を返します。</summary>
      <returns>式で表されるプロパティの HTML label 要素およびプロパティ名。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="labelText">ラベルのテキスト。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.LabelForModel(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>指定された式で表されるプロパティの HTML label 要素およびプロパティ名を返します。</summary>
      <returns>式で表されるプロパティの HTML label 要素およびプロパティ名。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="labelText">ラベルのテキスト。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="T:System.Web.Mvc.Html.LinkExtensions">
      <summary>アプリケーション内の HTML リンクのサポートを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>指定されたリンク テキストおよびアクションのアンカー要素 (a 要素) を返します。</summary>
      <returns>アンカー要素 (a 要素)。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="linkText">アンカー要素の内部テキスト。</param>
      <param name="actionName">アクションの名前。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>指定されたリンク テキスト、アクション、およびルート値のアンカー要素 (a 要素) を返します。</summary>
      <returns>アンカー要素 (a 要素)。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="linkText">アンカー要素の内部テキスト。</param>
      <param name="actionName">アクションの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。オブジェクトのプロパティを調べることで、リフレクションを介してパラメーターが取得されます。通常、このオブジェクトは、オブジェクト初期化子構文を使用して作成されます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Object)">
      <summary>指定されたリンク テキスト、アクション、ルート値、および HTML 属性のアンカー要素 (a 要素) を返します。</summary>
      <returns>アンカー要素 (a 要素)。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="linkText">アンカー要素の内部テキスト。</param>
      <param name="actionName">アクションの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。オブジェクトのプロパティを調べることで、リフレクションを介してパラメーターが取得されます。通常、このオブジェクトは、オブジェクト初期化子構文を使用して作成されます。</param>
      <param name="htmlAttributes">この要素の HTML 属性を格納するオブジェクト。オブジェクトのプロパティを調べることで、リフレクションを介して属性が取得されます。通常、このオブジェクトは、オブジェクト初期化子構文を使用して作成されます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String)">
      <summary>指定されたリンク テキスト、アクション、およびコントローラーのアンカー要素 (a 要素) を返します。</summary>
      <returns>アンカー要素 (a 要素)。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="linkText">アンカー要素の内部テキスト。</param>
      <param name="actionName">アクションの名前。</param>
      <param name="controllerName">コントローラーの名前。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.Object,System.Object)">
      <summary>指定されたリンク テキスト、アクション、コントローラー、ルート値、および HTML 属性のアンカー要素 (a 要素) を返します。</summary>
      <returns>アンカー要素 (a 要素)。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="linkText">アンカー要素の内部テキスト。</param>
      <param name="actionName">アクションの名前。</param>
      <param name="controllerName">コントローラーの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。オブジェクトのプロパティを調べることで、リフレクションを介してパラメーターが取得されます。通常、このオブジェクトは、オブジェクト初期化子構文を使用して作成されます。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.String,System.String,System.String,System.Object,System.Object)">
      <summary>指定されたリンク テキスト、アクション、コントローラー、プロトコル、ホスト名、URL フラグメント、ルート値、および HTML 属性のアンカー要素 (a 要素) を返します。</summary>
      <returns>アンカー要素 (a 要素)。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="linkText">アンカー要素の内部テキスト。</param>
      <param name="actionName">アクションの名前。</param>
      <param name="controllerName">コントローラーの名前。</param>
      <param name="protocol">URL のプロトコル (たとえば、"http"、"https")。</param>
      <param name="hostName">URL のホスト名。</param>
      <param name="fragment">URL フラグメント名 (アンカー名)。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。オブジェクトのプロパティを調べることで、リフレクションを介してパラメーターが取得されます。通常、このオブジェクトは、オブジェクト初期化子構文を使用して作成されます。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定されたリンク テキスト、アクション、コントローラー、プロトコル、ホスト名、URL フラグメント、ルート値ディクショナリとしてのルート値、およびディクショナリとしての HTML 属性のアンカー要素 (a 要素) を返します。</summary>
      <returns>アンカー要素 (a 要素)。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="linkText">アンカー要素の内部テキスト。</param>
      <param name="actionName">アクションの名前。</param>
      <param name="controllerName">コントローラーの名前。</param>
      <param name="protocol">URL のプロトコル (たとえば、"http"、"https")。</param>
      <param name="hostName">URL のホスト名。</param>
      <param name="fragment">URL フラグメント名 (アンカー名)。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定されたリンク テキスト、アクション、コントローラー、ルート値ディクショナリとしてのルート値、およびディクショナリとしての HTML 属性のアンカー要素 (a 要素) を返します。</summary>
      <returns>アンカー要素 (a 要素)。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="linkText">アンカー要素の内部テキスト。</param>
      <param name="actionName">アクションの名前。</param>
      <param name="controllerName">コントローラーの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>指定されたリンク テキスト、アクション、およびルート値ディクショナリとしてのルート値のアンカー要素 (a 要素) を返します。</summary>
      <returns>アンカー要素 (a 要素)。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="linkText">アンカー要素の内部テキスト。</param>
      <param name="actionName">アクションの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定されたリンク テキスト、アクション、ルート値ディクショナリとしてのルート値、およびディクショナリとしての HTML 属性のアンカー要素 (a 要素) を返します。</summary>
      <returns>アンカー要素 (a 要素)。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="linkText">アンカー要素の内部テキスト。</param>
      <param name="actionName">アクションの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>指定されたアクションの仮想パスを格納しているアンカー要素 (a 要素) を返します。</summary>
      <returns>アンカー要素 (a 要素)。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="linkText">アンカー要素の内部テキスト。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。オブジェクトのプロパティを調べることで、リフレクションを介してパラメーターが取得されます。通常、このオブジェクトは、オブジェクト初期化子構文を使用して作成されます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Object)">
      <summary>指定されたアクションの仮想パスを格納しているアンカー要素 (a 要素) を返します。</summary>
      <returns>アンカー要素 (a 要素)。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="linkText">アンカー要素の内部テキスト。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。オブジェクトのプロパティを調べることで、リフレクションを介してパラメーターが取得されます。通常、このオブジェクトは、オブジェクト初期化子構文を使用して作成されます。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>指定されたアクションの仮想パスを格納しているアンカー要素 (a 要素) を返します。</summary>
      <returns>アンカー要素 (a 要素)。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="linkText">アンカー要素の内部テキスト。</param>
      <param name="routeName">仮想パスを返すために使用されるルートの名前。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>指定されたアクションの仮想パスを格納しているアンカー要素 (a 要素) を返します。</summary>
      <returns>アンカー要素 (a 要素)。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="linkText">アンカー要素の内部テキスト。</param>
      <param name="routeName">仮想パスを返すために使用されるルートの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。オブジェクトのプロパティを調べることで、リフレクションを介してパラメーターが取得されます。通常、このオブジェクトは、オブジェクト初期化子構文を使用して作成されます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Object)">
      <summary>指定されたアクションの仮想パスを格納しているアンカー要素 (a 要素) を返します。</summary>
      <returns>アンカー要素 (a 要素)。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="linkText">アンカー要素の内部テキスト。</param>
      <param name="routeName">仮想パスを返すために使用されるルートの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。オブジェクトのプロパティを調べることで、リフレクションを介してパラメーターが取得されます。通常、このオブジェクトは、オブジェクト初期化子構文を使用して作成されます。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.String,System.String,System.Object,System.Object)">
      <summary>指定されたアクションの仮想パスを格納しているアンカー要素 (a 要素) を返します。</summary>
      <returns>アンカー要素 (a 要素)。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="linkText">アンカー要素の内部テキスト。</param>
      <param name="routeName">仮想パスを返すために使用されるルートの名前。</param>
      <param name="protocol">URL のプロトコル (たとえば、"http"、"https")。</param>
      <param name="hostName">URL のホスト名。</param>
      <param name="fragment">URL フラグメント名 (アンカー名)。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。オブジェクトのプロパティを調べることで、リフレクションを介してパラメーターが取得されます。通常、このオブジェクトは、オブジェクト初期化子構文を使用して作成されます。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定されたアクションの仮想パスを格納しているアンカー要素 (a 要素) を返します。</summary>
      <returns>アンカー要素 (a 要素)。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="linkText">アンカー要素の内部テキスト。</param>
      <param name="routeName">仮想パスを返すために使用されるルートの名前。</param>
      <param name="protocol">URL のプロトコル (たとえば、"http"、"https")。</param>
      <param name="hostName">URL のホスト名。</param>
      <param name="fragment">URL フラグメント名 (アンカー名)。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>指定されたアクションの仮想パスを格納しているアンカー要素 (a 要素) を返します。</summary>
      <returns>アンカー要素 (a 要素)。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="linkText">アンカー要素の内部テキスト。</param>
      <param name="routeName">仮想パスを返すために使用されるルートの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定されたアクションの仮想パスを格納しているアンカー要素 (a 要素) を返します。</summary>
      <returns>アンカー要素 (a 要素)。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="linkText">アンカー要素の内部テキスト。</param>
      <param name="routeName">仮想パスを返すために使用されるルートの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>指定されたアクションの仮想パスを格納しているアンカー要素 (a 要素) を返します。</summary>
      <returns>アンカー要素 (a 要素)。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="linkText">アンカー要素の内部テキスト。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定されたアクションの仮想パスを格納しているアンカー要素 (a 要素) を返します。</summary>
      <returns>アンカー要素 (a 要素)。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="linkText">アンカー要素の内部テキスト。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="linkText" /> パラメーターが null または空です。</exception>
    </member>
    <member name="T:System.Web.Mvc.Html.MvcForm">
      <summary>MVC ビュー内の HTML の form 要素を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.MvcForm.#ctor(System.Web.HttpResponseBase)">
      <summary>指定された HTTP 応答オブジェクトを使用して、<see cref="T:System.Web.Mvc.Html.MvcForm" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="httpResponse">HTTP 応答オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="httpResponse " /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.MvcForm.#ctor(System.Web.Mvc.ViewContext)">
      <summary>指定されたビュー コンテキストを使用して、<see cref="T:System.Web.Mvc.Html.MvcForm" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="viewContext">ビューを表示するために必要な情報をカプセル化するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="viewContext" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.MvcForm.Dispose">
      <summary>
        <see cref="T:System.Web.Mvc.Html.MvcForm" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.MvcForm.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Web.Mvc.Html.MvcForm" /> クラスの現在のインスタンスによって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</summary>
      <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は true。アンマネージ リソースだけを解放する場合は false。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.MvcForm.EndForm">
      <summary>フォームを終了し、すべてのフォーム リソースを破棄します。</summary>
    </member>
    <member name="T:System.Web.Mvc.Html.NameExtensions">
      <summary>
        <see cref="T:System.Web.Mvc.HtmlHelper" /> 文字列の HTML ID および名前属性を取得します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.NameExtensions.Id(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>
        <see cref="T:System.Web.Mvc.HtmlHelper" /> 文字列の ID を取得します。</summary>
      <returns>式で表されるオブジェクトの HTML ID 属性値。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">ID を格納しているオブジェクトを識別する式。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.NameExtensions.IdFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>
        <see cref="T:System.Web.Mvc.HtmlHelper`1" /> 文字列の ID を取得します。</summary>
      <returns>式で表されるオブジェクトの HTML ID 属性値。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">ID を格納しているオブジェクトを識別する式。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TProperty">プロパティの型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.NameExtensions.IdForModel(System.Web.Mvc.HtmlHelper)">
      <summary>
        <see cref="T:System.Web.Mvc.HtmlHelper" /> 文字列の ID を取得します。</summary>
      <returns>式で表されるオブジェクトの HTML ID 属性値。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.NameExtensions.Name(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>式で表されるオブジェクトの完全な HTML フィールド名を取得します。</summary>
      <returns>式で表されるオブジェクトの完全な HTML フィールド名。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">名前を格納しているオブジェクトを識別する式。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.NameExtensions.NameFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>式で表されるオブジェクトの完全な HTML フィールド名を取得します。</summary>
      <returns>式で表されるオブジェクトの完全な HTML フィールド名。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">名前を格納しているオブジェクトを識別する式。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TProperty">プロパティの型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.NameExtensions.NameForModel(System.Web.Mvc.HtmlHelper)">
      <summary>式で表されるオブジェクトの完全な HTML フィールド名を取得します。</summary>
      <returns>式で表されるオブジェクトの完全な HTML フィールド名。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
    </member>
    <member name="T:System.Web.Mvc.Html.PartialExtensions">
      <summary>部分ビューを HTML エンコードされた文字列として表示する機能を表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.PartialExtensions.Partial(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>指定された部分ビューを HTML エンコードされた文字列として表示します。</summary>
      <returns>HTML エンコードされた文字列として表示された部分ビュー。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="partialViewName">表示する部分ビューの名前。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.PartialExtensions.Partial(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>指定された部分ビューを HTML エンコードされた文字列として表示します。</summary>
      <returns>HTML エンコードされた文字列として表示された部分ビュー。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="partialViewName">表示する部分ビューの名前。</param>
      <param name="model">部分ビューのモデル。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.PartialExtensions.Partial(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Web.Mvc.ViewDataDictionary)">
      <summary>指定された部分ビューを HTML エンコードされた文字列として表示します。</summary>
      <returns>HTML エンコードされた文字列として表示された部分ビュー。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="partialViewName">部分ビューの名前。</param>
      <param name="model">部分ビューのモデル。</param>
      <param name="viewData">部分ビューのビュー データ ディクショナリ。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.PartialExtensions.Partial(System.Web.Mvc.HtmlHelper,System.String,System.Web.Mvc.ViewDataDictionary)">
      <summary>指定された部分ビューを HTML エンコードされた文字列として表示します。</summary>
      <returns>HTML エンコードされた文字列として表示された部分ビュー。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="partialViewName">表示する部分ビューの名前。</param>
      <param name="viewData">部分ビューのビュー データ ディクショナリ。</param>
    </member>
    <member name="T:System.Web.Mvc.Html.RenderPartialExtensions">
      <summary>部分ビューの表示をサポートします。</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>指定された HTML ヘルパーを使用して、指定された部分ビューを表示します。</summary>
      <param name="htmlHelper">HTML ヘルパー。</param>
      <param name="partialViewName">部分ビューの名前。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>指定された部分ビューを表示し、現在の <see cref="T:System.Web.Mvc.ViewDataDictionary" /> オブジェクトのコピーを渡しますが、Model プロパティを指定されたモデルに設定します。</summary>
      <param name="htmlHelper">HTML ヘルパー。</param>
      <param name="partialViewName">部分ビューの名前。</param>
      <param name="model">モデル。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Web.Mvc.ViewDataDictionary)">
      <summary>指定された部分ビューを表示し、部分ビューの ViewData プロパティを指定された <see cref="T:System.Web.Mvc.ViewDataDictionary" /> オブジェクトに置き換え、ビュー データの Model プロパティを指定されたモデルに設定します。</summary>
      <param name="htmlHelper">HTML ヘルパー。</param>
      <param name="partialViewName">部分ビューの名前。</param>
      <param name="model">部分ビューのモデル。</param>
      <param name="viewData">部分ビューのビュー データ。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(System.Web.Mvc.HtmlHelper,System.String,System.Web.Mvc.ViewDataDictionary)">
      <summary>指定された部分ビューを表示し、ViewData プロパティを指定された <see cref="T:System.Web.Mvc.ViewDataDictionary" /> オブジェクトに置き換えます。</summary>
      <param name="htmlHelper">HTML ヘルパー。</param>
      <param name="partialViewName">部分ビューの名前。</param>
      <param name="viewData">ビュー データ。</param>
    </member>
    <member name="T:System.Web.Mvc.Html.SelectExtensions">
      <summary>リストで選択するためのサポートを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownList(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>指定された HTML ヘルパーおよびフォーム フィールド名を使用して、単一選択の select 要素を返します。</summary>
      <returns>HTML select 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">返すフォーム フィールドの名前。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownList(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem})">
      <summary>指定された HTML ヘルパー、フォーム フィールド名、および指定されたリスト項目を使用して、単一選択の select 要素を返します。</summary>
      <returns>リスト内の各項目に対して option サブ要素が設定されている HTML select 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">返すフォーム フィールドの名前。</param>
      <param name="selectList">ドロップダウン リストに値を設定するために使用する <see cref="T:System.Web.Mvc.SelectListItem" /> オブジェクトのコレクション。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownList(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定された HTML ヘルパー、フォーム フィールド名、指定されたリスト項目、および指定された HTML 属性を使用して、単一選択の select 要素を返します。</summary>
      <returns>リスト内の各項目に対して option サブ要素が設定されている HTML select 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">返すフォーム フィールドの名前。</param>
      <param name="selectList">ドロップダウン リストに値を設定するために使用する <see cref="T:System.Web.Mvc.SelectListItem" /> オブジェクトのコレクション。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownList(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Object)">
      <summary>指定された HTML ヘルパー、フォーム フィールド名、指定されたリスト項目、および指定された HTML 属性を使用して、単一選択の select 要素を返します。</summary>
      <returns>リスト内の各項目に対して option サブ要素が設定されている HTML select 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">返すフォーム フィールドの名前。</param>
      <param name="selectList">ドロップダウン リストに値を設定するために使用する <see cref="T:System.Web.Mvc.SelectListItem" /> オブジェクトのコレクション。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownList(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.String)">
      <summary>指定された HTML ヘルパー、フォーム フィールド名、指定されたリスト項目、およびオプション ラベルを使用して、単一選択の select 要素を返します。</summary>
      <returns>リスト内の各項目に対して option サブ要素が設定されている HTML select 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">返すフォーム フィールドの名前。</param>
      <param name="selectList">ドロップダウン リストに値を設定するために使用する <see cref="T:System.Web.Mvc.SelectListItem" /> オブジェクトのコレクション。</param>
      <param name="optionLabel">既定の空の項目のテキスト。このパラメーターは、null でもかまいません。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownList(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定された HTML ヘルパー、フォーム フィールド名、指定されたリスト項目、オプション ラベル、および指定された HTML 属性を使用して、単一選択の select 要素を返します。</summary>
      <returns>リスト内の各項目に対して option サブ要素が設定されている HTML select 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">返すフォーム フィールドの名前。</param>
      <param name="selectList">ドロップダウン リストに値を設定するために使用する <see cref="T:System.Web.Mvc.SelectListItem" /> オブジェクトのコレクション。</param>
      <param name="optionLabel">既定の空の項目のテキスト。このパラメーターは、null でもかまいません。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownList(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.String,System.Object)">
      <summary>指定された HTML ヘルパー、フォーム フィールド名、指定されたリスト項目、オプション ラベル、および指定された HTML 属性を使用して、単一選択の select 要素を返します。</summary>
      <returns>リスト内の各項目に対して option サブ要素が設定されている HTML select 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">返すフォーム フィールドの名前。</param>
      <param name="selectList">ドロップダウン リストに値を設定するために使用する <see cref="T:System.Web.Mvc.SelectListItem" /> オブジェクトのコレクション。</param>
      <param name="optionLabel">既定の空の項目のテキスト。このパラメーターは、null でもかまいません。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownList(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>指定された HTML ヘルパー、フォーム フィールド名、およびオプション ラベルを使用して、単一選択の select 要素を返します。</summary>
      <returns>リスト内の各項目に対して option サブ要素が設定されている HTML select 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">返すフォーム フィールドの名前。</param>
      <param name="optionLabel">既定の空の項目のテキスト。このパラメーターは、null でもかまいません。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem})">
      <summary>指定された式で表されるオブジェクトの各プロパティについて、指定されたリスト項目を使用して HTML の select 要素を返します。</summary>
      <returns>式で表されるオブジェクト内の各プロパティの HTML select 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="selectList">ドロップダウン リストに値を設定するために使用する <see cref="T:System.Web.Mvc.SelectListItem" /> オブジェクトのコレクション。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TProperty">値の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定された式で表されるオブジェクトの各プロパティについて、指定されたリスト項目および HTML 属性を使用して HTML select 要素を返します。</summary>
      <returns>式で表されるオブジェクト内の各プロパティの HTML select 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="selectList">ドロップダウン リストに値を設定するために使用する <see cref="T:System.Web.Mvc.SelectListItem" /> オブジェクトのコレクション。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TProperty">値の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Object)">
      <summary>指定された式で表されるオブジェクトの各プロパティについて、指定されたリスト項目および HTML 属性を使用して HTML select 要素を返します。</summary>
      <returns>式で表されるオブジェクト内の各プロパティの HTML select 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="selectList">ドロップダウン リストに値を設定するために使用する <see cref="T:System.Web.Mvc.SelectListItem" /> オブジェクトのコレクション。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TProperty">値の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.String)">
      <summary>指定された式で表されるオブジェクトの各プロパティについて、指定されたリスト項目およびオプション ラベルを使用して HTML の select 要素を返します。</summary>
      <returns>式で表されるオブジェクト内の各プロパティの HTML select 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="selectList">ドロップダウン リストに値を設定するために使用する <see cref="T:System.Web.Mvc.SelectListItem" /> オブジェクトのコレクション。</param>
      <param name="optionLabel">既定の空の項目のテキスト。このパラメーターは、null でもかまいません。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TProperty">値の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定された式で表されるオブジェクトの各プロパティについて、指定されたリスト項目、オプション ラベル、および HTML 属性を使用して HTML select 要素を返します。</summary>
      <returns>式で表されるオブジェクト内の各プロパティの HTML select 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="selectList">ドロップダウン リストに値を設定するために使用する <see cref="T:System.Web.Mvc.SelectListItem" /> オブジェクトのコレクション。</param>
      <param name="optionLabel">既定の空の項目のテキスト。このパラメーターは、null でもかまいません。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TProperty">値の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.String,System.Object)">
      <summary>指定された式で表されるオブジェクトの各プロパティについて、指定されたリスト項目、オプション ラベル、および HTML 属性を使用して HTML select 要素を返します。</summary>
      <returns>式で表されるオブジェクト内の各プロパティの HTML select 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="selectList">ドロップダウン リストに値を設定するために使用する <see cref="T:System.Web.Mvc.SelectListItem" /> オブジェクトのコレクション。</param>
      <param name="optionLabel">既定の空の項目のテキスト。このパラメーターは、null でもかまいません。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TProperty">値の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.EnumDropDownListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>指定された式で表される列挙のそれぞれの値の HTML select 要素を返します。</summary>
      <returns>式で表される列挙のそれぞれの値の HTML select 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示する値を含むオブジェクトを特定する式。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TEnum">値の型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.EnumDropDownListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定された式で表される列挙のそれぞれの値の HTML select 要素を返します。</summary>
      <returns>式で表される列挙のそれぞれの値の HTML select 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示する値を含むオブジェクトを特定する式。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TEnum">値の型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.EnumDropDownListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
      <summary>指定された式で表される列挙のそれぞれの値の HTML select 要素を返します。</summary>
      <returns>式で表される列挙のそれぞれの値の HTML select 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示する値を含むオブジェクトを特定する式。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TEnum">値の型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.EnumDropDownListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
      <summary>指定された式で表される列挙のそれぞれの値の HTML select 要素を返します。</summary>
      <returns>式で表される列挙のそれぞれの値の HTML select 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示する値を含むオブジェクトを特定する式。</param>
      <param name="optionLabel">既定の空の項目のテキスト。このパラメーターは、null でもかまいません。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TEnum">値の型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.EnumDropDownListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定された式で表される列挙のそれぞれの値の HTML select 要素を返します。</summary>
      <returns>式で表される列挙のそれぞれの値の HTML select 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示する値を含むオブジェクトを特定する式。</param>
      <param name="optionLabel">既定の空の項目のテキスト。このパラメーターは、null でもかまいません。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TEnum">値の型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.EnumDropDownListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Object)">
      <summary>指定された式で表される列挙のそれぞれの値の HTML select 要素を返します。</summary>
      <returns>式で表される列挙のそれぞれの値の HTML select 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示する値を含むオブジェクトを特定する式。</param>
      <param name="optionLabel">既定の空の項目のテキスト。このパラメーターは、null でもかまいません。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TEnum">値の型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.ListBox(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>指定された HTML ヘルパーおよびフォーム フィールド名を使用して、複数選択の select 要素を返します。</summary>
      <returns>HTML select 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">返すフォーム フィールドの名前。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.ListBox(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem})">
      <summary>指定された HTML ヘルパー、フォーム フィールド名、および指定されたリスト項目を使用して、複数選択の select 要素を返します。</summary>
      <returns>リスト内の各項目に対して option サブ要素が設定されている HTML select 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">返すフォーム フィールドの名前。</param>
      <param name="selectList">ドロップダウン リストに値を設定するために使用する <see cref="T:System.Web.Mvc.SelectListItem" /> オブジェクトのコレクション。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.ListBox(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定された HTML ヘルパー、フォーム フィールド名、指定されたリスト項目、および指定された HTML 属性を使用して、複数選択の select 要素を返します。</summary>
      <returns>リスト内の各項目に対して option サブ要素が設定されている HTML の select 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">返すフォーム フィールドの名前。</param>
      <param name="selectList">ドロップダウン リストに値を設定するために使用する <see cref="T:System.Web.Mvc.SelectListItem" /> オブジェクトのコレクション。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.ListBox(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Object)">
      <summary>指定された HTML ヘルパー、フォーム フィールド名、および指定されたリスト項目を使用して、複数選択の select 要素を返します。</summary>
      <returns>リスト内の各項目に対して option サブ要素が設定されている HTML の select 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">返すフォーム フィールドの名前。</param>
      <param name="selectList">ドロップダウン リストに値を設定するために使用する <see cref="T:System.Web.Mvc.SelectListItem" /> オブジェクトのコレクション。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> パラメーターが null または空です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.ListBoxFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem})">
      <summary>指定された式で表されるオブジェクトの各プロパティについて、指定されたリスト項目を使用して HTML の select 要素を返します。</summary>
      <returns>式で表されるオブジェクト内の各プロパティの HTML select 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="selectList">ドロップダウン リストに値を設定するために使用する <see cref="T:System.Web.Mvc.SelectListItem" /> オブジェクトのコレクション。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TProperty">プロパティの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.ListBoxFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定された式で表されるオブジェクトの各プロパティについて、指定されたリスト項目および HTML 属性を使用して HTML select 要素を返します。</summary>
      <returns>式で表されるオブジェクト内の各プロパティの HTML select 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="selectList">ドロップダウン リストに値を設定するために使用する <see cref="T:System.Web.Mvc.SelectListItem" /> オブジェクトのコレクション。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TProperty">プロパティの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.ListBoxFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Object)">
      <summary>指定された式で表されるオブジェクトの各プロパティについて、指定されたリスト項目および HTML 属性を使用して HTML select 要素を返します。</summary>
      <returns>式で表されるオブジェクト内の各プロパティの HTML select 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="selectList">ドロップダウン リストに値を設定するために使用する <see cref="T:System.Web.Mvc.SelectListItem" /> オブジェクトのコレクション。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TProperty">プロパティの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> パラメーターが null です。</exception>
    </member>
    <member name="T:System.Web.Mvc.Html.TextAreaExtensions">
      <summary>HTML textarea コントロールのサポートを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextArea(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>指定された HTML ヘルパーおよびフォーム フィールド名を使用して、指定された textarea 要素を返します。</summary>
      <returns>textarea 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">返すフォーム フィールドの名前。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextArea(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定された HTML ヘルパー、フォーム フィールド名、および指定された HTML 属性を使用して、指定された textarea 要素を返します。</summary>
      <returns>textarea 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">返すフォーム フィールドの名前。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextArea(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>指定された HTML ヘルパーおよび HTML 属性を使用して、指定された textarea 要素を返します。</summary>
      <returns>textarea 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">返すフォーム フィールドの名前。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextArea(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>指定された HTML ヘルパー、フォーム フィールド名、およびテキスト コンテンツを使用して、指定された textarea 要素を返します。</summary>
      <returns>textarea 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">返すフォーム フィールドの名前。</param>
      <param name="value">テキスト コンテンツ。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextArea(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定された HTML ヘルパー、フォーム フィールド名、テキスト コンテンツ、および指定された HTML 属性を使用して、指定された textarea 要素を返します。</summary>
      <returns>textarea 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">返すフォーム フィールドの名前。</param>
      <param name="value">テキスト コンテンツ。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextArea(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定された HTML ヘルパー、フォーム フィールド名、テキスト コンテンツ、行および列の数、および指定された HTML 属性を使用して、指定された textarea 要素を返します。</summary>
      <returns>textarea 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">返すフォーム フィールドの名前。</param>
      <param name="value">テキスト コンテンツ。</param>
      <param name="rows">行の番号。</param>
      <param name="columns">列の番号。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextArea(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Int32,System.Int32,System.Object)">
      <summary>指定された HTML ヘルパー、フォーム フィールド名、テキスト コンテンツ、行および列の数、および指定された HTML 属性を使用して、指定された textarea 要素を返します。</summary>
      <returns>textarea 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">返すフォーム フィールドの名前。</param>
      <param name="value">テキスト コンテンツ。</param>
      <param name="rows">行の番号。</param>
      <param name="columns">列の番号。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextArea(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>指定された HTML ヘルパー、フォーム フィールド名、テキスト コンテンツ、および指定された HTML 属性を使用して、指定された textarea 要素を返します。</summary>
      <returns>textarea 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">返すフォーム フィールドの名前。</param>
      <param name="value">テキスト コンテンツ。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextAreaFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>指定された式で表されるオブジェクトの各プロパティの HTML textarea 要素を返します。</summary>
      <returns>式で表されるオブジェクト内の各プロパティの HTML textarea 要素を返します。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TProperty">プロパティの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextAreaFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定された式で表されるオブジェクトの各プロパティについて、指定された HTML 属性を使用して HTML textarea 要素を返します。</summary>
      <returns>式で表されるオブジェクト内の各プロパティの HTML textarea 要素を返します。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納しているディクショナリ。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TProperty">プロパティの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextAreaFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定された式で表されるオブジェクトの各プロパティについて、指定された HTML 属性および行数と列数を使用して HTML textarea 要素を返します。</summary>
      <returns>式で表されるオブジェクト内の各プロパティの HTML textarea 要素を返します。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="rows">行の番号。</param>
      <param name="columns">列の番号。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納しているディクショナリ。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TProperty">プロパティの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextAreaFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Int32,System.Int32,System.Object)">
      <summary>指定された式で表されるオブジェクトの各プロパティについて、指定された HTML 属性および行数と列数を使用して HTML textarea 要素を返します。</summary>
      <returns>式で表されるオブジェクト内の各プロパティの HTML textarea 要素を返します。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="rows">行の番号。</param>
      <param name="columns">列の番号。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納しているディクショナリ。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TProperty">プロパティの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextAreaFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
      <summary>指定された式で表されるオブジェクトの各プロパティについて、指定された HTML 属性を使用して HTML textarea 要素を返します。</summary>
      <returns>式で表されるオブジェクト内の各プロパティの HTML textarea 要素を返します。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="htmlAttributes">この要素に設定する HTML 属性を格納しているディクショナリ。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TProperty">プロパティの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> パラメーターが null です。</exception>
    </member>
    <member name="T:System.Web.Mvc.Html.ValidationExtensions">
      <summary>HTML フォームからの入力の検証をサポートします。</summary>
    </member>
    <member name="P:System.Web.Mvc.Html.ValidationExtensions.ResourceClassKey">
      <summary>ローカライズ済みの文字列値が含まれるリソース ファイル (クラス キー) の名前を取得または設定します。</summary>
      <returns>リソース ファイル (クラス キー) の名前。</returns>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.Validate(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>指定されたモデルの検証メタデータを取得し、各規則をデータ フィールドに適用します。</summary>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="modelName">検証するプロパティまたはモデル オブジェクトの名前。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="modelName" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidateFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>指定されたモデルの検証メタデータを取得し、各規則をデータ フィールドに適用します。</summary>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TProperty">プロパティの型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessage(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>
        <see cref="T:System.Web.Mvc.ModelStateDictionary" /> オブジェクト内の指定されたフィールドにエラーが存在する場合、検証メッセージを表示します。</summary>
      <returns>プロパティまたはオブジェクトが有効な場合は、空の文字列。それ以外の場合は、エラー メッセージを含む span 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="modelName">検証するプロパティまたはモデル オブジェクトの名前。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessage(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
        <see cref="T:System.Web.Mvc.ModelStateDictionary" /> オブジェクト内の指定されたフィールドにエラーが存在する場合、検証メッセージを表示します。</summary>
      <returns>プロパティまたはオブジェクトが有効な場合は、空の文字列。それ以外の場合は、エラー メッセージを含む span 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="modelName">検証するプロパティまたはモデル オブジェクトの名前。</param>
      <param name="htmlAttributes">この要素の HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessage(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
      <summary>
        <see cref="T:System.Web.Mvc.ModelStateDictionary" /> オブジェクト内の指定されたエントリにエラーが存在する場合、検証メッセージを表示します。</summary>
      <returns>エントリが有効でクライアント側の検証が無効な場合は null。それ以外の場合は、エラー メッセージが含まれる <paramref name="tag" /> 要素。</returns>
      <param name="htmlHelper">このメソッドによって操作される HTML ヘルパー インスタンス。</param>
      <param name="modelName">検証されるエントリの名前。</param>
      <param name="htmlAttributes">この要素の HTML 属性を格納する <see cref="T:System.Collections.Generic.IDictionary`2" />。</param>
      <param name="tag">検証メッセージの HTML 要素のラッピングのために設定するタグ。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessage(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>
        <see cref="T:System.Web.Mvc.ModelStateDictionary" /> オブジェクト内の指定されたフィールドにエラーが存在する場合、検証メッセージを表示します。</summary>
      <returns>プロパティまたはオブジェクトが有効な場合は、空の文字列。それ以外の場合は、エラー メッセージを含む span 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="modelName">検証するプロパティまたはモデル オブジェクトの名前。</param>
      <param name="htmlAttributes">この要素の HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessage(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.String)">
      <summary>
        <see cref="T:System.Web.Mvc.ModelStateDictionary" /> オブジェクト内の指定されたエントリにエラーが存在する場合、検証メッセージを表示します。</summary>
      <returns>エントリが有効でクライアント側の検証が無効な場合は null。それ以外の場合は、エラー メッセージが含まれる <paramref name="tag" /> 要素。</returns>
      <param name="htmlHelper">このメソッドによって操作される HTML ヘルパー インスタンス。</param>
      <param name="modelName">検証されるエントリの名前。</param>
      <param name="htmlAttributes">この要素の HTML 属性を格納するオブジェクト。</param>
      <param name="tag">検証メッセージの HTML 要素のラッピングのために設定するタグ。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessage(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>
        <see cref="T:System.Web.Mvc.ModelStateDictionary" /> オブジェクト内の指定されたフィールドにエラーが存在する場合、検証メッセージを表示します。</summary>
      <returns>プロパティまたはオブジェクトが有効な場合は、空の文字列。それ以外の場合は、エラー メッセージを含む span 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="modelName">検証するプロパティまたはモデル オブジェクトの名前。</param>
      <param name="validationMessage">指定したフィールドにエラーがある場合に表示するメッセージ。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessage(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
        <see cref="T:System.Web.Mvc.ModelStateDictionary" /> オブジェクト内の指定されたフィールドにエラーが存在する場合、検証メッセージを表示します。</summary>
      <returns>プロパティまたはオブジェクトが有効な場合は、空の文字列。それ以外の場合は、エラー メッセージを含む span 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="modelName">検証するプロパティまたはモデル オブジェクトの名前。</param>
      <param name="validationMessage">指定したフィールドにエラーがある場合に表示するメッセージ。</param>
      <param name="htmlAttributes">この要素の HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessage(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
      <summary>
        <see cref="T:System.Web.Mvc.ModelStateDictionary" /> オブジェクト内の指定されたエントリにエラーが存在する場合、検証メッセージを表示します。</summary>
      <returns>モデル オブジェクトが有効でクライアント側の検証が無効な場合は null。それ以外の場合は、エラー メッセージが含まれる <paramref name="tag" /> 要素。</returns>
      <param name="htmlHelper">このメソッドによって操作される HTML ヘルパー インスタンス。</param>
      <param name="modelName">検証されるモデル オブジェクトの名前。</param>
      <param name="validationMessage">指定したエントリにエラーがある場合に表示するメッセージ。</param>
      <param name="htmlAttributes">この要素の HTML 属性を格納する <see cref="T:System.Collections.Generic.IDictionary`2" />。</param>
      <param name="tag">検証メッセージの HTML 要素のラッピングのために設定するタグ。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessage(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>
        <see cref="T:System.Web.Mvc.ModelStateDictionary" /> オブジェクト内の指定されたフィールドにエラーが存在する場合、検証メッセージを表示します。</summary>
      <returns>プロパティまたはオブジェクトが有効な場合は、空の文字列。それ以外の場合は、エラー メッセージを含む span 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="modelName">検証するプロパティまたはモデル オブジェクトの名前。</param>
      <param name="validationMessage">指定したフィールドにエラーがある場合に表示するメッセージ。</param>
      <param name="htmlAttributes">この要素の HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessage(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.String)">
      <summary>
        <see cref="T:System.Web.Mvc.ModelStateDictionary" /> オブジェクト内の指定されたエントリにエラーが存在する場合、検証メッセージを表示します。</summary>
      <returns>エントリが有効でクライアント側の検証が無効な場合は null。それ以外の場合は、エラー メッセージが含まれる <paramref name="tag" /> 要素。</returns>
      <param name="htmlHelper">このメソッドによって操作される HTML ヘルパー インスタンス。</param>
      <param name="modelName">検証されるエントリの名前。</param>
      <param name="validationMessage">指定したエントリにエラーがある場合に表示するメッセージ。</param>
      <param name="htmlAttributes">この要素の HTML 属性を格納するオブジェクト。</param>
      <param name="tag">検証メッセージの HTML 要素のラッピングのために設定するタグ。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessage(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String)">
      <summary>
        <see cref="T:System.Web.Mvc.ModelStateDictionary" /> オブジェクト内の指定されたエントリにエラーが存在する場合、検証メッセージを表示します。</summary>
      <returns>エントリが有効でクライアント側の検証が無効な場合は null。それ以外の場合は、エラー メッセージが含まれる <paramref name="tag" /> 要素。</returns>
      <param name="htmlHelper">このメソッドによって操作される HTML ヘルパー インスタンス。</param>
      <param name="modelName">検証されるエントリの名前。</param>
      <param name="validationMessage">指定したエントリにエラーがある場合に表示するメッセージ。</param>
      <param name="tag">検証メッセージの HTML 要素のラッピングのために設定するタグ。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessageFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>指定された式で表される各データ フィールドについて、検証エラー メッセージの HTML マークアップを返します。</summary>
      <returns>プロパティまたはオブジェクトが有効な場合は、空の文字列。それ以外の場合は、エラー メッセージを含む span 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TProperty">プロパティの型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessageFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
      <summary>指定された式で表される各データ フィールドについて、指定されたメッセージを使用して、検証エラー メッセージの HTML マークアップを返します。</summary>
      <returns>プロパティまたはオブジェクトが有効な場合は、空の文字列。それ以外の場合は、エラー メッセージを含む span 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="validationMessage">指定したフィールドにエラーがある場合に表示するメッセージ。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TProperty">プロパティの型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessageFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定された式で表される各データ フィールドについて、指定されたメッセージおよび HTML 属性を使用して、検証エラー メッセージの HTML マークアップを返します。</summary>
      <returns>プロパティまたはオブジェクトが有効な場合は、空の文字列。それ以外の場合は、エラー メッセージを含む span 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="validationMessage">指定したフィールドにエラーがある場合に表示するメッセージ。</param>
      <param name="htmlAttributes">この要素の HTML 属性を格納するオブジェクト。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TProperty">プロパティの型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessageFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
      <summary>指定された式の検証エラー メッセージの HTML マークアップを返します。</summary>
      <returns>モデル オブジェクトが有効でクライアント側の検証が無効な場合は null。それ以外の場合は、エラー メッセージが含まれる <paramref name="tag" /> 要素。</returns>
      <param name="htmlHelper">このメソッドによって操作される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="validationMessage">検証エラーが発生した場合に表示するメッセージ。</param>
      <param name="htmlAttributes">この要素の HTML 属性を格納する <see cref="T:System.Collections.Generic.IDictionary`2" />。</param>
      <param name="tag">検証メッセージの HTML 要素のラッピングのために設定するタグ。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TProperty">プロパティの型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessageFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Object)">
      <summary>指定された式で表される各データ フィールドについて、指定されたメッセージおよび HTML 属性を使用して、検証エラー メッセージの HTML マークアップを返します。</summary>
      <returns>プロパティまたはオブジェクトが有効な場合は、空の文字列。それ以外の場合は、エラー メッセージを含む span 要素。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="validationMessage">指定したフィールドにエラーがある場合に表示するメッセージ。</param>
      <param name="htmlAttributes">この要素の HTML 属性を格納するオブジェクト。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TProperty">プロパティの型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessageFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Object,System.String)">
      <summary>指定された式の検証エラー メッセージの HTML マークアップを返します。</summary>
      <returns>モデル オブジェクトが有効でクライアント側の検証が無効な場合は null。それ以外の場合は、エラー メッセージが含まれる <paramref name="tag" /> 要素。</returns>
      <param name="htmlHelper">このメソッドによって操作される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="validationMessage">検証エラーが発生した場合に表示するメッセージ。</param>
      <param name="htmlAttributes">この要素の HTML 属性を格納するオブジェクト。</param>
      <param name="tag">検証メッセージの HTML 要素のラッピングのために設定するタグ。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TProperty">プロパティの型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessageFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String)">
      <summary>指定された式の検証エラー メッセージの HTML マークアップを返します。</summary>
      <returns>モデル オブジェクトが有効でクライアント側の検証が無効な場合は null。それ以外の場合は、エラー メッセージが含まれる <paramref name="tag" /> 要素。</returns>
      <param name="htmlHelper">このメソッドによって操作される HTML ヘルパー インスタンス。</param>
      <param name="expression">表示するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="validationMessage">検証エラーが発生した場合に表示するメッセージ。</param>
      <param name="tag">検証メッセージの HTML 要素のラッピングのために設定するタグ。</param>
      <typeparam name="TModel">モデルの型。</typeparam>
      <typeparam name="TProperty">プロパティの型。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper)">
      <summary>
        <see cref="T:System.Web.Mvc.ModelStateDictionary" /> オブジェクト内に存在する検証メッセージの順序なしのリスト (ul 要素) を返します。</summary>
      <returns>検証メッセージの順序なしのリスト (ul 要素) を格納している文字列。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper,System.Boolean)">
      <summary>
        <see cref="T:System.Web.Mvc.ModelStateDictionary" /> オブジェクト内に存在する検証メッセージの順序なしのリスト (ul 要素) を返し、必要に応じてモデル レベルのエラーのみを表示します。</summary>
      <returns>検証メッセージの順序なしのリスト (ul 要素) を格納している文字列。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="excludePropertyErrors">モデル レベルのエラーのみの概要表示を返す場合は true。すべてのエラーの概要表示を返す場合は false。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper,System.Boolean,System.String)">
      <summary>
        <see cref="T:System.Web.Mvc.ModelStateDictionary" /> オブジェクト内に存在する検証メッセージの順序なしのリスト (ul 要素) を返し、必要に応じてモデル レベルのエラーのみを表示します。</summary>
      <returns>検証メッセージの順序なしのリスト (ul 要素) を格納している文字列。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="excludePropertyErrors">モデル レベルのエラーのみの概要表示を返す場合は true。すべてのエラーの概要表示を返す場合は false。</param>
      <param name="message">検証の概要で表示されるメッセージ。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper,System.Boolean,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
        <see cref="T:System.Web.Mvc.ModelStateDictionary" /> オブジェクト内に存在する検証メッセージの順序なしのリスト (ul 要素) を返し、必要に応じてモデル レベルのエラーのみを表示します。</summary>
      <returns>検証メッセージの順序なしのリスト (ul 要素) を格納している文字列。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="excludePropertyErrors">モデル レベルのエラーのみの概要表示を返す場合は true。すべてのエラーの概要表示を返す場合は false。</param>
      <param name="message">検証の概要で表示されるメッセージ。</param>
      <param name="htmlAttributes">この要素の HTML 属性を格納するディクショナリ。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper,System.Boolean,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.String)"></member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper,System.Boolean,System.String,System.Object)">
      <summary>
        <see cref="T:System.Web.Mvc.ModelStateDictionary" /> オブジェクト内に存在する検証メッセージの順序なしのリスト (ul 要素) を返し、必要に応じてモデル レベルのエラーのみを表示します。</summary>
      <returns>検証メッセージの順序なしのリスト (ul 要素) を格納している文字列。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="excludePropertyErrors">モデル レベルのエラーのみの概要表示を返す場合は true。すべてのエラーの概要表示を返す場合は false。</param>
      <param name="message">検証の概要で表示されるメッセージ。</param>
      <param name="htmlAttributes">この要素の HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper,System.Boolean,System.String,System.Object,System.String)"></member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper,System.Boolean,System.String,System.String)"></member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>
        <see cref="T:System.Web.Mvc.ModelStateDictionary" /> オブジェクト内に存在する検証メッセージの順序なしのリスト (ul 要素) を返します。</summary>
      <returns>検証メッセージの順序なしのリスト (ul 要素) を格納している文字列。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HMTL ヘルパー インスタンス。</param>
      <param name="message">指定したフィールドにエラーがある場合に表示するメッセージ。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
        <see cref="T:System.Web.Mvc.ModelStateDictionary" /> オブジェクト内に存在する検証メッセージの順序なしのリスト (ul 要素) を返します。</summary>
      <returns>検証メッセージの順序なしのリスト (ul 要素) を格納している文字列。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="message">指定したフィールドにエラーがある場合に表示するメッセージ。</param>
      <param name="htmlAttributes">この要素の HTML 属性を格納するディクショナリ。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.String)"></member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>
        <see cref="T:System.Web.Mvc.ModelStateDictionary" /> オブジェクト内に存在する検証メッセージの順序なしのリスト (ul 要素) を返します。</summary>
      <returns>検証メッセージの順序なしのリスト (ul 要素) を格納している文字列。</returns>
      <param name="htmlHelper">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="message">指定したフィールドにエラーがある場合に表示するメッセージ。</param>
      <param name="htmlAttributes">この要素の HTML 属性を格納するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.String)"></member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper,System.String,System.String)"></member>
    <member name="T:System.Web.Mvc.Html.ValueExtensions">
      <summary>ASP.NET MVC モデル バインダーおよびテンプレートと互換性のあるカスタム HTML マークアップを作成するメカニズムを提供します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.ValueExtensions.Value(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>ASP.NET MVC モデル バインダーおよびテンプレートと互換性のあるカスタム HTML マークアップを作成するメカニズムを提供します。</summary>
      <returns>値の HTML マークアップ。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">モデルの名前。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValueExtensions.Value(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>ASP.NET MVC モデル バインダーおよびテンプレートと互換性のあるカスタム HTML マークアップを作成するメカニズムを提供します。</summary>
      <returns>値の HTML マークアップ。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="name">モデルの名前。</param>
      <param name="format">形式文字列。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValueExtensions.ValueFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>ASP.NET MVC モデル バインダーおよびテンプレートと互換性のあるカスタム HTML マークアップを作成するメカニズムを提供します。</summary>
      <returns>値の HTML マークアップ。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">公開するプロパティを格納しているオブジェクトを識別する式。</param>
      <typeparam name="TModel">モデル。</typeparam>
      <typeparam name="TProperty">プロパティ。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.ValueExtensions.ValueFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
      <summary>ASP.NET MVC モデル バインダーおよびテンプレートと互換性のあるカスタム HTML マークアップを作成するメカニズムを提供します。</summary>
      <returns>値の HTML マークアップ。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="expression">公開するプロパティを格納しているオブジェクトを識別する式。</param>
      <param name="format">形式文字列。</param>
      <typeparam name="TModel">モデル。</typeparam>
      <typeparam name="TProperty">プロパティ。</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.ValueExtensions.ValueForModel(System.Web.Mvc.HtmlHelper)">
      <summary>ASP.NET MVC モデル バインダーおよびテンプレートと互換性のあるカスタム HTML マークアップを作成するメカニズムを提供します。</summary>
      <returns>値の HTML マークアップ。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValueExtensions.ValueForModel(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>ASP.NET MVC モデル バインダーおよびテンプレートと互換性のあるカスタム HTML マークアップを作成するメカニズムを提供します。</summary>
      <returns>値の HTML マークアップ。</returns>
      <param name="html">このメソッドによって拡張される HTML ヘルパー インスタンス。</param>
      <param name="format">形式文字列。</param>
    </member>
    <member name="T:System.Web.Mvc.Razor.MvcCSharpRazorCodeParser">
      <summary>ASP.NET Razor ビューをクラスにコンパイルします。</summary>
    </member>
    <member name="M:System.Web.Mvc.Razor.MvcCSharpRazorCodeParser.#ctor">
      <summary>
        <see cref="M:System.Web.Mvc.Razor.MvcCSharpRazorCodeParser.#ctor" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Razor.MvcCSharpRazorCodeParser.InheritsDirective">
      <summary>継承ディレクティブ。</summary>
    </member>
    <member name="M:System.Web.Mvc.Razor.MvcCSharpRazorCodeParser.ModelDirective">
      <summary>型ディレクティブ。</summary>
    </member>
    <member name="T:System.Web.Mvc.Razor.MvcVBRazorCodeParser">
      <summary>@model キーワードをサポートすることによって、VBCodeParser クラスを拡張します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Razor.MvcVBRazorCodeParser.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.Razor.MvcVBRazorCodeParser" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Razor.MvcVBRazorCodeParser.InheritsStatement">
      <summary>現在のコード ブロックおよびモデルが継承される必要があるかどうかを示す値を設定します。</summary>
      <returns>コード ブロックおよびモデルが継承される場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Web.Mvc.Razor.MvcVBRazorCodeParser.ModelTypeDirective">
      <summary>モデルの型のディレクティブ。</summary>
      <returns>void を返します。</returns>
    </member>
    <member name="T:System.Web.Mvc.Razor.MvcWebPageRazorHost">
      <summary>指定したファイルの ASP.NET Razor パーサーおよびコード ジェネレーターを構成します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Razor.MvcWebPageRazorHost.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.Web.Mvc.Razor.MvcWebPageRazorHost" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="virtualPath">ASP.NET Razor ファイルの仮想パス。</param>
      <param name="physicalPath">ASP.NET Razor ファイルの物理パス。</param>
    </member>
    <member name="M:System.Web.Mvc.Razor.MvcWebPageRazorHost.DecorateCodeGenerator(System.Web.Razor.Generator.RazorCodeGenerator)">
      <summary>ASP.NET MVC 言語固有の Razor コード ジェネレーターを返します。</summary>
      <returns>ASP.NET MVC 言語固有の Razor コード ジェネレーター。</returns>
      <param name="incomingCodeGenerator">C# または Visual Basic のコード ジェネレーター。</param>
    </member>
    <member name="M:System.Web.Mvc.Razor.MvcWebPageRazorHost.DecorateCodeParser(System.Web.Razor.Parser.ParserBase)">
      <summary>指定された言語パーサーを使用して、ASP.NET MVC 言語固有の Razor コード パーサーを返します。</summary>
      <returns>ASP.NET MVC 言語固有の Razor コード パーサー。</returns>
      <param name="incomingCodeParser">C# または Visual Basic のコード パーサー。</param>
    </member>
    <member name="T:System.Web.Mvc.Routing.DefaultDirectRouteProvider"></member>
    <member name="M:System.Web.Mvc.Routing.DefaultDirectRouteProvider.#ctor"></member>
    <member name="M:System.Web.Mvc.Routing.DefaultDirectRouteProvider.GetActionDirectRoutes(System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IReadOnlyList{System.Web.Mvc.Routing.IDirectRouteFactory},System.Web.Mvc.Routing.IInlineConstraintResolver)">
      <summary>提供されたファクトリとアクションを基にして <see cref="T:System.Web.Mvc.Routing.RouteEntry" /> インスタンスを作成します。ルート エントリは、提供されたアクションへの直接ルーティングを提供します。</summary>
      <returns>ルート エントリのセット。</returns>
      <param name="actionDescriptor">アクション記述子。</param>
      <param name="factories">ダイレクト ルートのファクトリ。</param>
      <param name="constraintResolver">制約リゾルバー。</param>
    </member>
    <member name="M:System.Web.Mvc.Routing.DefaultDirectRouteProvider.GetActionRouteFactories(System.Web.Mvc.ActionDescriptor)">
      <summary>指定のアクション記述子のルート ファクトリのセットを取得します。</summary>
      <returns>ルート ファクトリのセット。</returns>
      <param name="actionDescriptor">アクション記述子。</param>
    </member>
    <member name="M:System.Web.Mvc.Routing.DefaultDirectRouteProvider.GetAreaPrefix(System.Web.Mvc.ControllerDescriptor)">
      <summary>提供されたコントローラーから領域プレフィックスを取得します。</summary>
      <returns>領域プレフィックスまたは null。</returns>
      <param name="controllerDescriptor">コントローラー記述子。</param>
    </member>
    <member name="M:System.Web.Mvc.Routing.DefaultDirectRouteProvider.GetControllerDirectRoutes(System.Web.Mvc.ControllerDescriptor,System.Collections.Generic.IReadOnlyList{System.Web.Mvc.ActionDescriptor},System.Collections.Generic.IReadOnlyList{System.Web.Mvc.Routing.IDirectRouteFactory},System.Web.Mvc.Routing.IInlineConstraintResolver)">
      <summary>提供されたファクトリ、コントローラー、およびアクションを基にして <see cref="T:System.Web.Mvc.Routing.RouteEntry" /> インスタンスを作成します。ルート エントリは、指定されているコントローラーへの直接ルーティングを提供したため、指定されているアクションのセットに到達できます。</summary>
      <returns>ルート エントリのセット。</returns>
      <param name="controllerDescriptor">コントローラー記述子。</param>
      <param name="actionDescriptors">アクション記述子。</param>
      <param name="factories">ダイレクト ルートのファクトリ。</param>
      <param name="constraintResolver">制約リゾルバー。</param>
    </member>
    <member name="M:System.Web.Mvc.Routing.DefaultDirectRouteProvider.GetControllerRouteFactories(System.Web.Mvc.ControllerDescriptor)">
      <summary>指定のコントローラー記述子のルート ファクトリを取得します。</summary>
      <returns>ルート ファクトリのセット。</returns>
      <param name="controllerDescriptor">コントローラー記述子。</param>
    </member>
    <member name="M:System.Web.Mvc.Routing.DefaultDirectRouteProvider.GetDirectRoutes(System.Web.Mvc.ControllerDescriptor,System.Collections.Generic.IReadOnlyList{System.Web.Mvc.ActionDescriptor},System.Web.Mvc.Routing.IInlineConstraintResolver)">
      <summary>
        <see cref="T:System.Web.Mvc.Routing.IDirectRouteFactory" /> 属性を基にして、指定されたコントローラー記述子およびアクション記述子のダイレクト ルートを取得します。</summary>
      <returns>ルート エントリのセット。</returns>
      <param name="controllerDescriptor">コントローラー記述子。</param>
      <param name="actionDescriptors">すべてのアクションのアクション記述子。</param>
      <param name="constraintResolver">制約リゾルバー。</param>
    </member>
    <member name="M:System.Web.Mvc.Routing.DefaultDirectRouteProvider.GetRoutePrefix(System.Web.Mvc.ControllerDescriptor)">
      <summary>指定されたコントローラーからルート プレフィックスを取得します。</summary>
      <returns>ルート プレフィックスまたは null。</returns>
      <param name="controllerDescriptor">コントローラー記述子。</param>
    </member>
    <member name="T:System.Web.Mvc.Routing.DefaultInlineConstraintResolver">
      <summary>
        <see cref="T:System.Web.Mvc.Routing.IInlineConstraintResolver" /> の既定の実装。制約キーと制約引数を解析し、マップを使用して制約の種類を解決し、制約の種類に適切なコンストラクターを呼び出して、制約を解決します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Routing.DefaultInlineConstraintResolver.#ctor"></member>
    <member name="P:System.Web.Mvc.Routing.DefaultInlineConstraintResolver.ConstraintMap">
      <summary>制約キーを特定の制約の種類にマップする変更可能な辞書を取得します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Routing.DefaultInlineConstraintResolver.ResolveConstraint(System.String)"></member>
    <member name="T:System.Web.Mvc.Routing.DirectRouteFactoryContext">
      <summary>ダイレクト ルートの作成をサポートするコンテキストを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Routing.DirectRouteFactoryContext.#ctor(System.String,System.String,System.Collections.Generic.IReadOnlyCollection{System.Web.Mvc.ActionDescriptor},System.Web.Mvc.Routing.IInlineConstraintResolver,System.Boolean)">
      <summary>
        <see cref="T:System.Web.Mvc.Routing.DirectRouteFactoryContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="areaPrefix">エリアで定義されたルート プレフィックスがある場合は、そのルート プレフィックス。</param>
      <param name="controllerPrefix">コントローラーで定義されたルート プレフィックスがある場合は、そのルート プレフィックス。</param>
      <param name="actions">ルートの作成先であるアクションの説明。</param>
      <param name="inlineConstraintResolver">インライン制約のリゾルバー。</param>
      <param name="targetIsAction">ルートがアクション レベルまたはコントローラー レベルのどちらで設定されているかを示す値。</param>
    </member>
    <member name="P:System.Web.Mvc.Routing.DirectRouteFactoryContext.Actions">
      <summary>ルートの作成先であるアクションの説明を取得します。</summary>
      <returns>ルートの作成先であるアクションの説明。</returns>
    </member>
    <member name="P:System.Web.Mvc.Routing.DirectRouteFactoryContext.AreaPrefix">
      <summary>エリアで定義されたルート プレフィックスがある場合は、そのルート プレフィックスを取得します。</summary>
      <returns>エリアで定義されたルート プレフィックスがある場合は、そのルート プレフィックス。</returns>
    </member>
    <member name="P:System.Web.Mvc.Routing.DirectRouteFactoryContext.ControllerPrefix">
      <summary>コントローラーで定義されたルート プレフィックスがある場合は、そのルート プレフィックスを取得します。</summary>
      <returns>コントローラーで定義されたルート プレフィックスがある場合は、そのルート プレフィックス。</returns>
    </member>
    <member name="M:System.Web.Mvc.Routing.DirectRouteFactoryContext.CreateBuilder(System.String)">
      <summary>このコンテキストと一致するルートをビルドできるルート ビルダーを作成します。</summary>
      <returns>このコンテキストと一致するルートをビルドできるルート ビルダー。</returns>
      <param name="template">ルート テンプレート。</param>
    </member>
    <member name="M:System.Web.Mvc.Routing.DirectRouteFactoryContext.CreateBuilder(System.String,System.Web.Mvc.Routing.IInlineConstraintResolver)">
      <summary>このコンテキストと一致するルートをビルドできるルート ビルダーを作成します。</summary>
      <returns>このコンテキストと一致するルートをビルドできるルート ビルダー。</returns>
      <param name="template">ルート テンプレート。</param>
      <param name="constraintResolver">該当する場合は、使用するインライン制約リゾルバー、それ以外の場合は null。</param>
    </member>
    <member name="P:System.Web.Mvc.Routing.DirectRouteFactoryContext.InlineConstraintResolver">
      <summary>インライン制約のリゾルバーを取得します。</summary>
      <returns>インライン制約のリゾルバー。</returns>
    </member>
    <member name="P:System.Web.Mvc.Routing.DirectRouteFactoryContext.TargetIsAction">
      <summary>ルートがアクション レベルまたはコントローラー レベルのどちらで設定されているかを示す値を取得します。</summary>
      <returns>ルートがアクション レベルで設定されている場合は true、ルートがコントローラー レベルを設定されている場合は false。</returns>
    </member>
    <member name="T:System.Web.Mvc.Routing.IDirectRouteBuilder">
      <summary>アクションへのダイレクト ルートを作成するビルダーを定義します (属性ルート)。</summary>
    </member>
    <member name="P:System.Web.Mvc.Routing.IDirectRouteBuilder.Actions">
      <summary>ルートの作成先であるアクションの説明を取得します。</summary>
      <returns>ルートの作成先であるアクションの説明。</returns>
    </member>
    <member name="M:System.Web.Mvc.Routing.IDirectRouteBuilder.Build">
      <summary>現在のプロパティ値に基づいてルート エントリを作成します。</summary>
      <returns>作成されたルート エントリ。</returns>
    </member>
    <member name="P:System.Web.Mvc.Routing.IDirectRouteBuilder.Constraints">
      <summary>ルート制約を取得または設定します。</summary>
      <returns>ルート制約。</returns>
    </member>
    <member name="P:System.Web.Mvc.Routing.IDirectRouteBuilder.DataTokens">
      <summary>ルート データ トークンを取得または設定します。</summary>
      <returns>ルート データ トークン。</returns>
    </member>
    <member name="P:System.Web.Mvc.Routing.IDirectRouteBuilder.Defaults">
      <summary>ルートの既定を取得または設定します。</summary>
      <returns>ルートの既定値。</returns>
    </member>
    <member name="P:System.Web.Mvc.Routing.IDirectRouteBuilder.Name">
      <summary>ルート名を取得または設定します。</summary>
      <returns>ルート名、またはルート名がない場合は null。</returns>
    </member>
    <member name="P:System.Web.Mvc.Routing.IDirectRouteBuilder.Order">
      <summary>ルートの順序を取得または設定します。</summary>
      <returns>ルートの順序。</returns>
    </member>
    <member name="P:System.Web.Mvc.Routing.IDirectRouteBuilder.Precedence">
      <summary>ルートの優先順位を取得または設定します。</summary>
      <returns>ルートの優先順位。</returns>
    </member>
    <member name="P:System.Web.Mvc.Routing.IDirectRouteBuilder.TargetIsAction">
      <summary>ルートがアクション レベルまたはコントローラー レベルのどちらで設定されているかを示す値を取得します。</summary>
      <returns>ルートがアクション レベルで設定されている場合は true、ルートがコントローラー レベルを設定されている場合は false。</returns>
    </member>
    <member name="P:System.Web.Mvc.Routing.IDirectRouteBuilder.Template">
      <summary>ルートのテンプレートを取得または設定します。</summary>
      <returns>ルート テンプレート。</returns>
    </member>
    <member name="T:System.Web.Mvc.Routing.IDirectRouteFactory">
      <summary>ルートを一連のアクションの説明に直接作成するファクトリを定義します (属性ルート)。</summary>
    </member>
    <member name="M:System.Web.Mvc.Routing.IDirectRouteFactory.CreateRoute(System.Web.Mvc.Routing.DirectRouteFactoryContext)">
      <summary>ダイレクト ルートのエントリを作成します。</summary>
      <returns>ダイレクト ルートのエントリ。</returns>
      <param name="context">ルートの作成に使用するコンテキスト。</param>
    </member>
    <member name="T:System.Web.Mvc.Routing.IDirectRouteProvider">
      <summary>アクション記述子 (属性ルート) を直接ターゲットとするルートのプロバイダーを定義します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Routing.IDirectRouteProvider.GetDirectRoutes(System.Web.Mvc.ControllerDescriptor,System.Collections.Generic.IReadOnlyList{System.Web.Mvc.ActionDescriptor},System.Web.Mvc.Routing.IInlineConstraintResolver)">
      <summary>コントローラーのダイレクト ルートを取得します。</summary>
      <returns>コントローラーのルート エントリのセット。</returns>
      <param name="controllerDescriptor">コントローラー記述子。</param>
      <param name="actionDescriptors">アクション記述子。</param>
      <param name="constraintResolver">インライン制約のリゾルバー。</param>
    </member>
    <member name="T:System.Web.Mvc.Routing.IInlineConstraintResolver">
      <summary>
        <see cref="T:System.Web.Routing.IRouteConstraint" /> のインスタンスとしてインライン制約を解決するための抽象型を定義します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Routing.IInlineConstraintResolver.ResolveConstraint(System.String)">
      <summary>インライン制約を解決します。</summary>
      <returns>インライン制約が解決された <see cref="T:System.Web.Routing.IRouteConstraint" />。</returns>
      <param name="inlineConstraint">解決するインライン制約。</param>
    </member>
    <member name="T:System.Web.Mvc.Routing.IRouteInfoProvider">
      <summary>System.Web.Routing.Route を作成するための情報を提供します。</summary>
    </member>
    <member name="P:System.Web.Mvc.Routing.IRouteInfoProvider.Name">
      <summary>照合の対象となる URI パターンを記述するルート テンプレートを取得します。</summary>
      <returns>照合の対象となる URI パターンを記述するルート テンプレート。</returns>
    </member>
    <member name="P:System.Web.Mvc.Routing.IRouteInfoProvider.Template">
      <summary>生成するルートの名前を取得します。</summary>
      <returns>生成するルートの名前。</returns>
    </member>
    <member name="T:System.Web.Mvc.Routing.IRoutePrefix">
      <summary>ルート プレフィックスを定義します。</summary>
    </member>
    <member name="P:System.Web.Mvc.Routing.IRoutePrefix.Prefix">
      <summary>ルート プレフィックスを取得します。</summary>
      <returns>ルートのプレフィックス。</returns>
    </member>
    <member name="T:System.Web.Mvc.Routing.RouteBuilder">
      <summary>ルート情報に基づいて <see cref="T:System.Web.Routing.Route" /> インスタンスを作成します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Routing.RouteBuilder.#ctor">
      <summary>既定のインライン制約競合回避モジュールを使用して、<see cref="T:System.Web.Mvc.Routing.RouteBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Routing.RouteBuilder.#ctor(System.Web.Mvc.Routing.IInlineConstraintResolver)">
      <summary>
        <see cref="T:System.Web.Mvc.Routing.RouteBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="constraintResolver">インライン制約の解決に使用する <see cref="T:System.Web.Mvc.Routing.IInlineConstraintResolver" />。</param>
    </member>
    <member name="M:System.Web.Mvc.Routing.RouteBuilder.BuildDirectRoute(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Reflection.MethodInfo,System.String)">
      <summary>特定のアクション用の <see cref="T:System.Web.Routing.Route" /> を作成します。</summary>
      <returns>生成された <see cref="T:System.Web.Routing.Route" />。</returns>
      <param name="routeTemplate">ルートのトークン化が解除されたルート テンプレート。</param>
      <param name="allowedMethods">ルートでサポートされている HTTP メソッド。使用できるメソッドがすべてサポートされていることを指定する null 値。</param>
      <param name="controllerName">関連付けられたコントローラーの名前。</param>
      <param name="actionName">関連付けられたアクションの名前。</param>
      <param name="targetMethod">ルート属性が適用されたメソッド。</param>
    </member>
    <member name="M:System.Web.Mvc.Routing.RouteBuilder.BuildDirectRoute(System.String,System.Web.Mvc.ControllerDescriptor)">
      <summary>特定のアクション用の <see cref="T:System.Web.Routing.Route" /> を作成します。</summary>
      <returns>生成されたルート。</returns>
      <param name="routeTemplate">ルートのトークン化が解除されたルート テンプレート。</param>
      <param name="controllerDescriptor">ルート属性が適用されたコントローラー。</param>
    </member>
    <member name="M:System.Web.Mvc.Routing.RouteBuilder.BuildDirectRoute(System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteValueDictionary,System.String,System.Reflection.MethodInfo)">
      <summary>
        <see cref="T:System.Web.Routing.Route" /> を作成します。</summary>
      <returns>生成された <see cref="T:System.Web.Routing.Route" />。</returns>
      <param name="defaults">ルートの既定値。</param>
      <param name="constraints">ルート制約。</param>
      <param name="routeTemplate">トークン化が解除されたルート テンプレート。</param>
      <param name="targetMethod">ルート属性が適用されたメソッド。</param>
    </member>
    <member name="P:System.Web.Mvc.Routing.RouteBuilder.ConstraintResolver">
      <summary>インライン制約を解決するためのリゾルバーを取得します。</summary>
      <returns>インライン制約を解決するためのリゾルバー。</returns>
    </member>
    <member name="T:System.Web.Mvc.Routing.RouteEntry">
      <summary>名前付きルートを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Routing.RouteEntry.#ctor(System.String,System.Web.Routing.Route)">
      <summary>
        <see cref="T:System.Web.Mvc.Routing.RouteEntry" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">ルート名。</param>
      <param name="route">ルート。</param>
    </member>
    <member name="P:System.Web.Mvc.Routing.RouteEntry.Name">
      <summary>ルート名を取得します。</summary>
      <returns>ルート名がある場合はルート名、それ以外の場合は null。</returns>
    </member>
    <member name="P:System.Web.Mvc.Routing.RouteEntry.Route">
      <summary>ルートを取得します。</summary>
      <returns>ルート。</returns>
    </member>
    <member name="T:System.Web.Mvc.Routing.RouteFactoryAttribute">
      <summary>カスタム制約を含む可能性のある属性ルートを表します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Routing.RouteFactoryAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Web.Mvc.Routing.RouteFactoryAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="template">ルート テンプレート。</param>
    </member>
    <member name="P:System.Web.Mvc.Routing.RouteFactoryAttribute.Constraints">
      <summary>ルート制約を取得します。</summary>
      <returns>ルート制約がある場合はルート制約、それ以外の場合は null。</returns>
    </member>
    <member name="M:System.Web.Mvc.Routing.RouteFactoryAttribute.CreateRoute(System.Web.Mvc.Routing.DirectRouteFactoryContext)">
      <summary>ダイレクト ルートのエントリを作成します。</summary>
      <returns>ダイレクト ルートのエントリ。</returns>
      <param name="context">ルートの作成に使用するコンテキスト。</param>
    </member>
    <member name="P:System.Web.Mvc.Routing.RouteFactoryAttribute.DataTokens">
      <summary>ルート データ トークンを取得します。</summary>
      <returns>ルート データ トークンがある場合はルート データ トークン、それ以外の場合は null。</returns>
    </member>
    <member name="P:System.Web.Mvc.Routing.RouteFactoryAttribute.Defaults">
      <summary>ルートの既定を取得します。</summary>
      <returns>ルートの既定がある場合はルートの既定、それ以外の場合は null。</returns>
    </member>
    <member name="P:System.Web.Mvc.Routing.RouteFactoryAttribute.Name">
      <summary>ルート名を取得または設定します。</summary>
      <returns>ルート名がある場合はルート名、それ以外の場合は null。</returns>
    </member>
    <member name="P:System.Web.Mvc.Routing.RouteFactoryAttribute.Order">
      <summary>ルートの順序を取得または設定します。</summary>
      <returns>ルートの順序。</returns>
    </member>
    <member name="P:System.Web.Mvc.Routing.RouteFactoryAttribute.Template">
      <summary>ルート テンプレートを取得します。</summary>
      <returns>ルート テンプレート。</returns>
    </member>
    <member name="T:System.Web.Mvc.Routing.Constraints.AlphaRouteConstraint">
      <summary>英語のアルファベットの大文字または小文字の A から Z のみを含むようにルート パラメーターを制約します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Routing.Constraints.AlphaRouteConstraint.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.Routing.Constraints.AlphaRouteConstraint" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Web.Mvc.Routing.Constraints.BoolRouteConstraint">
      <summary>ルート パラメーターをブール値のみで表すように制約します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Routing.Constraints.BoolRouteConstraint.#ctor"></member>
    <member name="M:System.Web.Mvc.Routing.Constraints.BoolRouteConstraint.Match(System.Web.HttpContextBase,System.Web.Routing.Route,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteDirection)"></member>
    <member name="T:System.Web.Mvc.Routing.Constraints.CompoundRouteConstraint">
      <summary>複数の子制約によってルートを制約します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Routing.Constraints.CompoundRouteConstraint.#ctor(System.Collections.Generic.IList{System.Web.Routing.IRouteConstraint})">
      <summary>
        <see cref="T:System.Web.Mvc.Routing.Constraints.CompoundRouteConstraint" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="constraints">この制約が一致するために、一致する必要がある子制約。</param>
    </member>
    <member name="P:System.Web.Mvc.Routing.Constraints.CompoundRouteConstraint.Constraints">
      <summary>この制約が一致するために、一致する必要がある子制約を取得します。</summary>
      <returns>この制約が一致するために、一致する必要がある子制約。</returns>
    </member>
    <member name="M:System.Web.Mvc.Routing.Constraints.CompoundRouteConstraint.Match(System.Web.HttpContextBase,System.Web.Routing.Route,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteDirection)">
      <summary>このインスタンスが指定したルートと同じかどうかを判断します。</summary>
      <returns>このインスタンスが、指定されたルートと等しい場合は true。それ以外の場合は false。</returns>
      <param name="httpContext">HTTP コンテキスト。</param>
      <param name="route">比較するルート。</param>
      <param name="parameterName">パラメーターの名前。</param>
      <param name="values">パラメーター値の一覧。</param>
      <param name="routeDirection">ルート方向。</param>
    </member>
    <member name="T:System.Web.Mvc.Routing.Constraints.DateTimeRouteConstraint">
      <summary>ルート パラメーターを <see cref="T:System.DateTime" /> 値のみで表すように制約します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Routing.Constraints.DateTimeRouteConstraint.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.Routing.Constraints.DateTimeRouteConstraint" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Routing.Constraints.DateTimeRouteConstraint.Match(System.Web.HttpContextBase,System.Web.Routing.Route,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteDirection)">
      <summary>このインスタンスが指定したルートと同じかどうかを判断します。</summary>
      <returns>このインスタンスが、指定されたルートと等しい場合は true。それ以外の場合は false。</returns>
      <param name="httpContext">HTTP コンテキスト。</param>
      <param name="route">比較するルート。</param>
      <param name="parameterName">パラメーターの名前。</param>
      <param name="values">パラメーター値の一覧。</param>
      <param name="routeDirection">ルート方向。</param>
    </member>
    <member name="T:System.Web.Mvc.Routing.Constraints.DecimalRouteConstraint">
      <summary>ルート パラメーターを 10 進値のみで表すように制約します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Routing.Constraints.DecimalRouteConstraint.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.Routing.Constraints.DecimalRouteConstraint" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Routing.Constraints.DecimalRouteConstraint.Match(System.Web.HttpContextBase,System.Web.Routing.Route,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteDirection)">
      <summary>このインスタンスが指定したルートと同じかどうかを判断します。</summary>
      <returns>このインスタンスが、指定されたルートと等しい場合は true。それ以外の場合は false。</returns>
      <param name="httpContext">HTTP コンテキスト。</param>
      <param name="route">比較するルート。</param>
      <param name="parameterName">パラメーターの名前。</param>
      <param name="values">パラメーター値の一覧。</param>
      <param name="routeDirection">ルート方向。</param>
    </member>
    <member name="T:System.Web.Mvc.Routing.Constraints.DoubleRouteConstraint">
      <summary>ルート パラメーターを 64 ビット浮動小数点値のみで表すように制約します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Routing.Constraints.DoubleRouteConstraint.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.Routing.Constraints.DoubleRouteConstraint" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Routing.Constraints.DoubleRouteConstraint.Match(System.Web.HttpContextBase,System.Web.Routing.Route,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteDirection)">
      <summary>このインスタンスが指定したルートと同じかどうかを判断します。</summary>
      <returns>このインスタンスが、指定されたルートと等しい場合は true。それ以外の場合は false。</returns>
      <param name="httpContext">HTTP コンテキスト。</param>
      <param name="route">比較するルート。</param>
      <param name="parameterName">パラメーターの名前。</param>
      <param name="values">パラメーター値の一覧。</param>
      <param name="routeDirection">ルート方向。</param>
    </member>
    <member name="T:System.Web.Mvc.Routing.Constraints.FloatRouteConstraint">
      <summary>ルート パラメーターを 32 ビット浮動小数点値のみで表すように制約します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Routing.Constraints.FloatRouteConstraint.#ctor"></member>
    <member name="M:System.Web.Mvc.Routing.Constraints.FloatRouteConstraint.Match(System.Web.HttpContextBase,System.Web.Routing.Route,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteDirection)"></member>
    <member name="T:System.Web.Mvc.Routing.Constraints.GuidRouteConstraint">
      <summary>ルート パラメーターを <see cref="T:System.Guid" /> 値のみで表すように制約します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Routing.Constraints.GuidRouteConstraint.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.Routing.Constraints.GuidRouteConstraint" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Routing.Constraints.GuidRouteConstraint.Match(System.Web.HttpContextBase,System.Web.Routing.Route,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteDirection)">
      <summary>このインスタンスが指定したルートと同じかどうかを判断します。</summary>
      <returns>このインスタンスが、指定されたルートと等しい場合は true。それ以外の場合は false。</returns>
      <param name="httpContext">HTTP コンテキスト。</param>
      <param name="route">比較するルート。</param>
      <param name="parameterName">パラメーターの名前。</param>
      <param name="values">パラメーター値の一覧。</param>
      <param name="routeDirection">ルート方向。</param>
    </member>
    <member name="T:System.Web.Mvc.Routing.Constraints.IntRouteConstraint">
      <summary>ルート パラメーターを 32 ビット整数値のみで表すように制約します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Routing.Constraints.IntRouteConstraint.#ctor"></member>
    <member name="M:System.Web.Mvc.Routing.Constraints.IntRouteConstraint.Match(System.Web.HttpContextBase,System.Web.Routing.Route,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteDirection)"></member>
    <member name="T:System.Web.Mvc.Routing.Constraints.LengthRouteConstraint">
      <summary>ルート パラメーターを、指定された長さまたは指定された長さの範囲内の文字列になるように制約します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Routing.Constraints.LengthRouteConstraint.#ctor(System.Int32)"></member>
    <member name="M:System.Web.Mvc.Routing.Constraints.LengthRouteConstraint.#ctor(System.Int32,System.Int32)">
      <summary>指定した長さの文字列になるようにルート パラメーターを制約する <see cref="T:System.Web.Mvc.Routing.Constraints.LengthRouteConstraint" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="minLength">ルート パラメーターの最小長。</param>
      <param name="maxLength">ルート パラメーターの最大長。</param>
    </member>
    <member name="P:System.Web.Mvc.Routing.Constraints.LengthRouteConstraint.Length">
      <summary>ルート パラメーターの長さが設定されている場合、それを取得します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Routing.Constraints.LengthRouteConstraint.Match(System.Web.HttpContextBase,System.Web.Routing.Route,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteDirection)"></member>
    <member name="P:System.Web.Mvc.Routing.Constraints.LengthRouteConstraint.MaxLength">
      <summary>ルート パラメーターの最大長が設定されている場合、それを取得します。</summary>
    </member>
    <member name="P:System.Web.Mvc.Routing.Constraints.LengthRouteConstraint.MinLength">
      <summary>ルート パラメーターの最小長が設定されている場合、それを取得します。</summary>
    </member>
    <member name="T:System.Web.Mvc.Routing.Constraints.LongRouteConstraint">
      <summary>ルート パラメーターを 64 ビット整数値のみで表すように制約します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Routing.Constraints.LongRouteConstraint.#ctor">
      <summary>
        <see cref="T:System.Web.Mvc.Routing.Constraints.LongRouteConstraint" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Routing.Constraints.LongRouteConstraint.Match(System.Web.HttpContextBase,System.Web.Routing.Route,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteDirection)">
      <summary>このインスタンスが指定したルートと同じかどうかを判断します。</summary>
      <returns>このインスタンスが、指定されたルートと等しい場合は true。それ以外の場合は false。</returns>
      <param name="httpContext">HTTP コンテキスト。</param>
      <param name="route">比較するルート。</param>
      <param name="parameterName">パラメーターの名前。</param>
      <param name="values">パラメーター値の一覧。</param>
      <param name="routeDirection">ルート方向。</param>
    </member>
    <member name="T:System.Web.Mvc.Routing.Constraints.MaxLengthRouteConstraint">
      <summary>ルート パラメーターを最大長の文字列になるように制約します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Routing.Constraints.MaxLengthRouteConstraint.#ctor(System.Int32)"></member>
    <member name="M:System.Web.Mvc.Routing.Constraints.MaxLengthRouteConstraint.Match(System.Web.HttpContextBase,System.Web.Routing.Route,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteDirection)"></member>
    <member name="P:System.Web.Mvc.Routing.Constraints.MaxLengthRouteConstraint.MaxLength">
      <summary>ルート パラメーターの最大長を取得します。</summary>
    </member>
    <member name="T:System.Web.Mvc.Routing.Constraints.MaxRouteConstraint">
      <summary>ルート パラメーターを最大値の整数になるように制約します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Routing.Constraints.MaxRouteConstraint.#ctor(System.Int64)">
      <summary>
        <see cref="T:System.Web.Mvc.Routing.Constraints.MaxRouteConstraint" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="max">最大値。</param>
    </member>
    <member name="M:System.Web.Mvc.Routing.Constraints.MaxRouteConstraint.Match(System.Web.HttpContextBase,System.Web.Routing.Route,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteDirection)">
      <summary>このインスタンスが指定したルートと同じかどうかを判断します。</summary>
      <returns>このインスタンスが、指定されたルートと等しい場合は true。それ以外の場合は false。</returns>
      <param name="httpContext">HTTP コンテキスト。</param>
      <param name="route">比較するルート。</param>
      <param name="parameterName">パラメーターの名前。</param>
      <param name="values">パラメーター値の一覧。</param>
      <param name="routeDirection">ルート方向。</param>
    </member>
    <member name="P:System.Web.Mvc.Routing.Constraints.MaxRouteConstraint.Max">
      <summary>ルート パラメーターの最大値を取得します。</summary>
      <returns>ルート パラメーターの最大値。</returns>
    </member>
    <member name="T:System.Web.Mvc.Routing.Constraints.MinLengthRouteConstraint">
      <summary>ルート パラメーターを最大長の文字列になるように制約します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Routing.Constraints.MinLengthRouteConstraint.#ctor(System.Int32)">
      <summary>
        <see cref="T:System.Web.Mvc.Routing.Constraints.MinLengthRouteConstraint" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="minLength">最小長。</param>
    </member>
    <member name="M:System.Web.Mvc.Routing.Constraints.MinLengthRouteConstraint.Match(System.Web.HttpContextBase,System.Web.Routing.Route,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteDirection)">
      <summary>このインスタンスが指定したルートと同じかどうかを判断します。</summary>
      <returns>このインスタンスが、指定されたルートと等しい場合は true。それ以外の場合は false。</returns>
      <param name="httpContext">HTTP コンテキスト。</param>
      <param name="route">比較するルート。</param>
      <param name="parameterName">比較の名前。</param>
      <param name="values">パラメーター値の一覧。</param>
      <param name="routeDirection">ルート方向。</param>
    </member>
    <member name="P:System.Web.Mvc.Routing.Constraints.MinLengthRouteConstraint.MinLength">
      <summary>ルート パラメーターの最小長を取得します。</summary>
      <returns>ルート パラメーターの最小長。</returns>
    </member>
    <member name="T:System.Web.Mvc.Routing.Constraints.MinRouteConstraint">
      <summary>ルート パラメーターを最小値の長さになるように制約します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Routing.Constraints.MinRouteConstraint.#ctor(System.Int64)">
      <summary>
        <see cref="T:System.Web.Mvc.Routing.Constraints.MinRouteConstraint" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="min">最小値。</param>
    </member>
    <member name="M:System.Web.Mvc.Routing.Constraints.MinRouteConstraint.Match(System.Web.HttpContextBase,System.Web.Routing.Route,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteDirection)">
      <summary>このインスタンスが指定したルートと同じかどうかを判断します。</summary>
      <returns>このインスタンスが、指定されたルートと等しい場合は true。それ以外の場合は false。</returns>
      <param name="httpContext">HTTP コンテキスト。</param>
      <param name="route">比較するルート。</param>
      <param name="parameterName">パラメーターの名前。</param>
      <param name="values">パラメーター値の一覧。</param>
      <param name="routeDirection">ルート方向。</param>
    </member>
    <member name="P:System.Web.Mvc.Routing.Constraints.MinRouteConstraint.Min">
      <summary>ルート パラメーターの最小値を取得します。</summary>
      <returns>ルート パラメーターの最小値。</returns>
    </member>
    <member name="T:System.Web.Mvc.Routing.Constraints.OptionalRouteConstraint">
      <summary>オプションのパラメーターがその既定値に設定されている場合に失敗することがない内部制約によって、ルートを制約します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Routing.Constraints.OptionalRouteConstraint.#ctor(System.Web.Routing.IRouteConstraint)">
      <summary>
        <see cref="T:System.Web.Mvc.Routing.Constraints.OptionalRouteConstraint" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="innerConstraint">パラメーターが値のないオプションのパラメーターでない場合に、一致する内部制約</param>
    </member>
    <member name="P:System.Web.Mvc.Routing.Constraints.OptionalRouteConstraint.InnerConstraint">
      <summary>パラメーターが値のないオプションのパラメーターでない場合に、一致する内部制約を取得します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Routing.Constraints.OptionalRouteConstraint.Match(System.Web.HttpContextBase,System.Web.Routing.Route,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteDirection)"></member>
    <member name="T:System.Web.Mvc.Routing.Constraints.RangeRouteConstraint">
      <summary>ルート パラメーターを指定された値の範囲内の整数になるように制約します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Routing.Constraints.RangeRouteConstraint.#ctor(System.Int64,System.Int64)">
      <summary>
        <see cref="T:System.Web.Mvc.Routing.Constraints.RangeRouteConstraint" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="min">最小値。</param>
      <param name="max">最大値。</param>
    </member>
    <member name="M:System.Web.Mvc.Routing.Constraints.RangeRouteConstraint.Match(System.Web.HttpContextBase,System.Web.Routing.Route,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteDirection)">
      <summary>このインスタンスが指定したルートと同じかどうかを判断します。</summary>
      <returns>このインスタンスが、指定されたルートと等しい場合は true。それ以外の場合は false。</returns>
      <param name="httpContext">HTTP コンテキスト。</param>
      <param name="route">比較するルート。</param>
      <param name="parameterName">パラメーターの名前。</param>
      <param name="values">パラメーター値の一覧。</param>
      <param name="routeDirection">ルート方向。</param>
    </member>
    <member name="P:System.Web.Mvc.Routing.Constraints.RangeRouteConstraint.Max">
      <summary>ルート パラメーターの最大値を取得します。</summary>
      <returns>ルート パラメーターの最大値。</returns>
    </member>
    <member name="P:System.Web.Mvc.Routing.Constraints.RangeRouteConstraint.Min">
      <summary>ルート パラメーターの最小値を取得します。</summary>
      <returns>ルート パラメーターの最小値。</returns>
    </member>
    <member name="T:System.Web.Mvc.Routing.Constraints.RegexRouteConstraint">
      <summary>ルート パラメーターを正規表現に一致するように制約します。</summary>
    </member>
    <member name="M:System.Web.Mvc.Routing.Constraints.RegexRouteConstraint.#ctor(System.String)">
      <summary>指定されたパターンを使用して <see cref="T:System.Web.Mvc.Routing.Constraints.RegexRouteConstraint" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="pattern">照合するパターン。</param>
    </member>
    <member name="M:System.Web.Mvc.Routing.Constraints.RegexRouteConstraint.Match(System.Web.HttpContextBase,System.Web.Routing.Route,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteDirection)">
      <summary>このインスタンスが指定したルートと同じかどうかを判断します。</summary>
      <returns>このインスタンスが、指定されたルートと等しい場合は true。それ以外の場合は false。</returns>
      <param name="httpContext">HTTP コンテキスト。</param>
      <param name="route">比較するルート。</param>
      <param name="parameterName">パラメーターの名前。</param>
      <param name="values">パラメーター値の一覧。</param>
      <param name="routeDirection">ルート方向。</param>
    </member>
    <member name="P:System.Web.Mvc.Routing.Constraints.RegexRouteConstraint.Pattern">
      <summary>照合する正規表現パターンを取得します。</summary>
      <returns>照合する正規表現パターン。</returns>
    </member>
  </members>
</doc>