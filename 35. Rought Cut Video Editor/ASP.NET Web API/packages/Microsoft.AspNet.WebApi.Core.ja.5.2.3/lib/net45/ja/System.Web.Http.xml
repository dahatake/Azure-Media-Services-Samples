<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Web.Http</name>
  </assembly>
  <members>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.Http.InvalidByteRangeException)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.Exception)">
      <summary>例外を表す <see cref="T:System.Net.Http.HttpResponseMessage" /> を作成します。</summary>
      <returns>要求は <see cref="T:System.Web.Http.HttpConfiguration" /> インスタンスと関連付ける必要があります。コンテンツが <see cref="T:System.Web.Http.HttpError" /> インスタンスのシリアル化された表現である <see cref="T:System.Net.Http.HttpResponseMessage" />。</returns>
      <param name="request">HTTP 要求。</param>
      <param name="statusCode">応答の状態コード。</param>
      <param name="exception">例外。</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.String)">
      <summary>エラー メッセージを表す <see cref="T:System.Net.Http.HttpResponseMessage" /> を作成します。</summary>
      <returns>要求は <see cref="T:System.Web.Http.HttpConfiguration" /> インスタンスと関連付ける必要があります。コンテンツが <see cref="T:System.Web.Http.HttpError" /> インスタンスのシリアル化された表現である <see cref="T:System.Net.Http.HttpResponseMessage" />。</returns>
      <param name="request">HTTP 要求。</param>
      <param name="statusCode">応答の状態コード。</param>
      <param name="message">エラー メッセージ。</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.String,System.Exception)">
      <summary>エラー メッセージを含む例外を表す <see cref="T:System.Net.Http.HttpResponseMessage" /> を作成します。</summary>
      <returns>要求は <see cref="T:System.Web.Http.HttpConfiguration" /> インスタンスと関連付ける必要があります。コンテンツが <see cref="T:System.Web.Http.HttpError" /> インスタンスのシリアル化された表現である <see cref="T:System.Net.Http.HttpResponseMessage" />。</returns>
      <param name="request">HTTP 要求。</param>
      <param name="statusCode">応答の状態コード。</param>
      <param name="message">エラー メッセージ。</param>
      <param name="exception">例外。</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.Web.Http.HttpError)">
      <summary>エラーを表す <see cref="T:System.Net.Http.HttpResponseMessage" /> を作成します。</summary>
      <returns>要求は <see cref="T:System.Web.Http.HttpConfiguration" /> インスタンスと関連付ける必要があります。コンテンツが <see cref="T:System.Web.Http.HttpError" /> インスタンスのシリアル化された表現である <see cref="T:System.Net.Http.HttpResponseMessage" />。</returns>
      <param name="request">HTTP 要求。</param>
      <param name="statusCode">応答の状態コード。</param>
      <param name="error">HTTP エラー。</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.Web.Http.ModelBinding.ModelStateDictionary)">
      <summary>モデル状態のエラーを表す <see cref="T:System.Net.Http.HttpResponseMessage" /> を作成します。</summary>
      <returns>要求は <see cref="T:System.Web.Http.HttpConfiguration" /> インスタンスと関連付ける必要があります。コンテンツが <see cref="T:System.Web.Http.HttpError" /> インスタンスのシリアル化された表現である <see cref="T:System.Net.Http.HttpResponseMessage" />。</returns>
      <param name="request">HTTP 要求。</param>
      <param name="statusCode">応答の状態コード。</param>
      <param name="modelState">モデルの状態。</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0)">
      <summary>関連付けのある <see cref="T:System.Net.Http.HttpRequestMessage" /> に接続する <see cref="T:System.Net.Http.HttpResponseMessage" /> を作成します。</summary>
      <returns>関連付けのある <see cref="T:System.Net.Http.HttpRequestMessage" /> に接続する初期化済みの <see cref="T:System.Net.Http.HttpResponseMessage" />。</returns>
      <param name="request">この応答メッセージに至った HTTP 要求メッセージ。</param>
      <param name="statusCode">HTTP 応答状態コード。</param>
      <param name="value">HTTP 応答メッセージのコンテンツ。</param>
      <typeparam name="T">HTTP 応答メッセージの型。</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>関連付けのある <see cref="T:System.Net.Http.HttpRequestMessage" /> に接続する <see cref="T:System.Net.Http.HttpResponseMessage" /> を作成します。</summary>
      <returns>関連付けのある <see cref="T:System.Net.Http.HttpRequestMessage" /> に接続する初期化済みの <see cref="T:System.Net.Http.HttpResponseMessage" />。</returns>
      <param name="request">この応答メッセージに至った HTTP 要求メッセージ。</param>
      <param name="statusCode">HTTP 応答状態コード。</param>
      <param name="value">HTTP 応答メッセージのコンテンツ。</param>
      <param name="formatter">メディア タイプ フォーマッタ。</param>
      <typeparam name="T">HTTP 応答メッセージの型。</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary>関連付けのある <see cref="T:System.Net.Http.HttpRequestMessage" /> に接続する <see cref="T:System.Net.Http.HttpResponseMessage" /> を作成します。</summary>
      <returns>関連付けのある <see cref="T:System.Net.Http.HttpRequestMessage" /> に接続する初期化済みの <see cref="T:System.Net.Http.HttpResponseMessage" />。</returns>
      <param name="request">この応答メッセージに至った HTTP 要求メッセージ。</param>
      <param name="statusCode">HTTP 応答状態コード。</param>
      <param name="value">HTTP 応答メッセージのコンテンツ。</param>
      <param name="formatter">メディア タイプ フォーマッタ。</param>
      <param name="mediaType">メディア タイプのヘッダー値。</param>
      <typeparam name="T">HTTP 応答メッセージの型。</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
      <summary>関連付けのある <see cref="T:System.Net.Http.HttpRequestMessage" /> に接続する <see cref="T:System.Net.Http.HttpResponseMessage" /> を作成します。</summary>
      <returns>関連付けのある <see cref="T:System.Net.Http.HttpRequestMessage" /> に接続する初期化済みの <see cref="T:System.Net.Http.HttpResponseMessage" />。</returns>
      <param name="request">この応答メッセージに至った HTTP 要求メッセージ。</param>
      <param name="statusCode">HTTP 応答状態コード。</param>
      <param name="value">HTTP 応答メッセージのコンテンツ。</param>
      <param name="formatter">メディア タイプ フォーマッタ。</param>
      <param name="mediaType">メディアの種類。</param>
      <typeparam name="T">HTTP 応答メッセージの型。</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary>関連付けのある <see cref="T:System.Net.Http.HttpRequestMessage" /> に接続する <see cref="T:System.Net.Http.HttpResponseMessage" /> を作成します。</summary>
      <returns>関連付けのある <see cref="T:System.Net.Http.HttpRequestMessage" /> に接続する初期化済みの <see cref="T:System.Net.Http.HttpResponseMessage" />。</returns>
      <param name="request">この応答メッセージに至った HTTP 要求メッセージ。</param>
      <param name="statusCode">HTTP 応答状態コード。</param>
      <param name="value">HTTP 応答メッセージのコンテンツ。</param>
      <param name="mediaType">メディア タイプのヘッダー値。</param>
      <typeparam name="T">HTTP 応答メッセージの型。</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.String)">
      <summary>関連付けのある <see cref="T:System.Net.Http.HttpRequestMessage" /> に接続する <see cref="T:System.Net.Http.HttpResponseMessage" /> を作成します。</summary>
      <returns>関連付けのある <see cref="T:System.Net.Http.HttpRequestMessage" /> に接続する初期化済みの <see cref="T:System.Net.Http.HttpResponseMessage" />。</returns>
      <param name="request">この応答メッセージに至った HTTP 要求メッセージ。</param>
      <param name="statusCode">HTTP 応答状態コード。</param>
      <param name="value">HTTP 応答メッセージのコンテンツ。</param>
      <param name="mediaType">メディアの種類。</param>
      <typeparam name="T">HTTP 応答メッセージの型。</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Web.Http.HttpConfiguration)">
      <summary>関連付けのある <see cref="T:System.Net.Http.HttpRequestMessage" /> に接続する <see cref="T:System.Net.Http.HttpResponseMessage" /> を作成します。</summary>
      <returns>関連付けのある <see cref="T:System.Net.Http.HttpRequestMessage" /> に接続する初期化済みの <see cref="T:System.Net.Http.HttpResponseMessage" />。</returns>
      <param name="request">この応答メッセージに至った HTTP 要求メッセージ。</param>
      <param name="statusCode">HTTP 応答状態コード。</param>
      <param name="value">HTTP 応答メッセージのコンテンツ。</param>
      <param name="configuration">サービスを解決するために使用される依存関係競合回避モジュールが含まれる HTTP 構成。</param>
      <typeparam name="T">HTTP 応答メッセージの型。</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,``0)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.DisposeRequestResources(System.Net.Http.HttpRequestMessage)">
      <summary>
        <paramref name="request" /> に関連付けられ、<see cref="M:System.Net.Http.HttpRequestMessageExtensions.RegisterForDispose(System.Net.Http.HttpRequestMessage,System.IDisposable)" /> メソッドによって追加された、すべての追跡対象リソースを破棄します。</summary>
      <param name="request">HTTP 要求。</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetActionDescriptor(System.Net.Http.HttpRequestMessage)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetClientCertificate(System.Net.Http.HttpRequestMessage)">
      <summary>指定された HTTP 要求から現在の X.509 証明書を取得します。</summary>
      <returns>現在の <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />。証明書が使用できない場合は null。</returns>
      <param name="request">HTTP 要求。</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetConfiguration(System.Net.Http.HttpRequestMessage)">
      <summary>指定された要求の <see cref="T:System.Web.Http.HttpConfiguration" /> を取得します。</summary>
      <returns>指定された要求の <see cref="T:System.Web.Http.HttpConfiguration" />。</returns>
      <param name="request">HTTP 要求。</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetCorrelationId(System.Net.Http.HttpRequestMessage)">
      <summary>指定された <paramref name="request" /> に関連付けられる相関 ID として割り当てられた <see cref="T:System.Guid" /> を取得します。値は、このメソッドが最初に呼び出されたときに作成および設定されます。</summary>
      <returns>要求に関連付けられた相関 ID を表す <see cref="T:System.Guid" /> オブジェクト。</returns>
      <param name="request">HTTP 要求。</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetDependencyScope(System.Net.Http.HttpRequestMessage)">
      <summary>指定された要求の <see cref="T:System.Web.Http.Dependencies.IDependencyScope" /> を取得します。使用できない場合は null。</summary>
      <returns>指定された要求の <see cref="T:System.Web.Http.Dependencies.IDependencyScope" />。使用できない場合は null。</returns>
      <param name="request">HTTP 要求。</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetQueryNameValuePairs(System.Net.Http.HttpRequestMessage)">
      <summary>キーと値のペアのコレクションとして解析されたクエリ文字列を取得します。</summary>
      <returns>キーと値のペアのコレクションとしてのクエリ文字列。</returns>
      <param name="request">HTTP 要求。</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetRequestContext(System.Net.Http.HttpRequestMessage)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetResourcesForDisposal(System.Net.Http.HttpRequestMessage)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetRouteData(System.Net.Http.HttpRequestMessage)">
      <summary>指定された要求の <see cref="T:System.Web.Http.Routing.IHttpRouteData" /> を取得します。使用できない場合は null。</summary>
      <returns>指定された要求の <see cref="T:System.Web.Http.Routing.IHttpRouteData" />。使用できない場合は null。</returns>
      <param name="request">HTTP 要求。</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetSynchronizationContext(System.Net.Http.HttpRequestMessage)">
      <summary>指定された要求の <see cref="T:System.Threading.SynchronizationContext" /> を取得します。使用できない場合は null。</summary>
      <returns>指定された要求の <see cref="T:System.Threading.SynchronizationContext" />。使用できない場合は null。</returns>
      <param name="request">HTTP 要求。</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetUrlHelper(System.Net.Http.HttpRequestMessage)">
      <summary>HTTP 要求に対する <see cref="T:System.Web.Http.Routing.UrlHelper" /> インスタンスを取得します。</summary>
      <returns>指定された HTTP 要求に対して初期化された <see cref="T:System.Web.Http.Routing.UrlHelper" /> インスタンス。</returns>
      <param name="request">HTTP 要求。</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.IsBatchRequest(System.Net.Http.HttpRequestMessage)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.IsLocal(System.Net.Http.HttpRequestMessage)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.RegisterForDispose(System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.IDisposable})"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.RegisterForDispose(System.Net.Http.HttpRequestMessage,System.IDisposable)">
      <summary>
        <paramref name="resource" /> が破棄されたときに、指定された <paramref name="resource" /> を、ホストによって破棄されるリソースのリストに追加します。</summary>
      <param name="request">
        <paramref name="resource" /> のライフサイクルを制御する HTTP 要求。</param>
      <param name="resource">
        <paramref name="request" /> が破棄されるときに、破棄するリソース。</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.SetConfiguration(System.Net.Http.HttpRequestMessage,System.Web.Http.HttpConfiguration)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.SetRequestContext(System.Net.Http.HttpRequestMessage,System.Web.Http.Controllers.HttpRequestContext)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.SetRouteData(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRouteData)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.ShouldIncludeErrorDetail(System.Net.Http.HttpRequestMessage)"></member>
    <member name="T:System.Net.Http.HttpResponseMessageExtensions">
      <summary>ASP.NET 操作からの HTTP 応答のメッセージ拡張機能を表します。</summary>
    </member>
    <member name="M:System.Net.Http.HttpResponseMessageExtensions.TryGetContentValue``1(System.Net.Http.HttpResponseMessage,``0@)">
      <summary>
        <see cref="T:System.Net.Http.HttpResponseMessageExtensions" /> のコンテンツの値の取得を試みます。</summary>
      <returns>コンテンツの値の取得の結果。</returns>
      <param name="response">操作の応答。</param>
      <param name="value">コンテンツの値。</param>
      <typeparam name="T">取得する値の型。</typeparam>
    </member>
    <member name="T:System.Net.Http.Formatting.MediaTypeFormatterExtensions">
      <summary>
        <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> 項目を <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> に追加する拡張を表します。</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddUriPathExtensionMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.Net.Http.Headers.MediaTypeHeaderValue)"></member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddUriPathExtensionMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.String)"></member>
    <member name="T:System.Net.Http.Formatting.UriPathExtensionMapping">
      <summary>
        <see cref="T:System.Uri" /> に表示されるパス拡張子から <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> を提供します。</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.UriPathExtensionMapping.#ctor(System.String,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary>
        <see cref="T:System.Net.Http.Formatting.UriPathExtensionMapping" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="uriPathExtension">mediaType に対応する拡張子。この値には、ピリオドやワイルドカード文字を含めないでください。</param>
      <param name="mediaType">uriPathExtension が一致する場合に返される <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" />。</param>
    </member>
    <member name="M:System.Net.Http.Formatting.UriPathExtensionMapping.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.Net.Http.Formatting.UriPathExtensionMapping" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="uriPathExtension">mediaType に対応する拡張子。この値には、ピリオドやワイルドカード文字を含めないでください。</param>
      <param name="mediaType">uriPathExtension が一致する場合に返されるメディアの種類。</param>
    </member>
    <member name="M:System.Net.Http.Formatting.UriPathExtensionMapping.TryMatchMediaType(System.Net.Http.HttpRequestMessage)">
      <summary> この <see cref="T:System.Net.Http.Formatting.UriPathExtensionMapping" /> インスタンスが、request の <see cref="T:System.Uri" /> に対して <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> を提供できるかどうかを示す値を返します。</summary>
      <returns>このインスタンスが request のファイル拡張子に一致する場合は 1.0 を、それ以外の場合は 0.0 を返します。</returns>
      <param name="request">確認する <see cref="T:System.Net.Http.HttpRequestMessage" />。</param>
    </member>
    <member name="P:System.Net.Http.Formatting.UriPathExtensionMapping.UriPathExtension">
      <summary>
        <see cref="T:System.Uri" /> パス拡張子を取得します。</summary>
      <returns>
        <see cref="T:System.Uri" /> パス拡張子。</returns>
    </member>
    <member name="F:System.Net.Http.Formatting.UriPathExtensionMapping.UriPathExtensionKey">
      <summary>
        <see cref="T:System.Uri" /> パス拡張子のキー。</summary>
    </member>
    <member name="T:System.Web.Http.AcceptVerbsAttribute">
      <summary>どの HTTP メソッドにアクション メソッドが応答するかを指定する属性を表します。</summary>
    </member>
    <member name="M:System.Web.Http.AcceptVerbsAttribute.#ctor(System.String)">
      <summary>応答先のアクション メソッドを使用して <see cref="T:System.Web.Http.AcceptVerbsAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="method">アクション メソッドの応答先の HTTP メソッド。</param>
    </member>
    <member name="M:System.Web.Http.AcceptVerbsAttribute.#ctor(System.String[])">
      <summary>アクション メソッドが応答する対象の HTTP メソッドのリストを使用して、<see cref="T:System.Web.Http.AcceptVerbsAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="methods">アクション メソッドが応答する対象の HTTP メソッド。</param>
    </member>
    <member name="P:System.Web.Http.AcceptVerbsAttribute.HttpMethods">
      <summary>アクション メソッドが応答する対象の HTTP メソッドのリストを取得または設定します。</summary>
      <returns>アクション メソッドが応答する対象の HTTP メソッドのリストを取得または設定します。</returns>
    </member>
    <member name="T:System.Web.Http.ActionNameAttribute">
      <summary>アクションの名前に使用される属性を表します。</summary>
    </member>
    <member name="M:System.Web.Http.ActionNameAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Web.Http.ActionNameAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">アクションの名前。</param>
    </member>
    <member name="P:System.Web.Http.ActionNameAttribute.Name">
      <summary>アクションの名前を取得または設定します。</summary>
      <returns>アクションの名前。</returns>
    </member>
    <member name="T:System.Web.Http.AllowAnonymousAttribute">
      <summary>承認時にアクションとコントローラーが <see cref="T:System.Web.Http.AuthorizeAttribute" /> によってスキップされることを指定します。</summary>
    </member>
    <member name="M:System.Web.Http.AllowAnonymousAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.AllowAnonymousAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Web.Http.ApiController">
      <summary>API コントローラーのプロパティとメソッドを定義します。</summary>
    </member>
    <member name="M:System.Web.Http.ApiController.#ctor"></member>
    <member name="P:System.Web.Http.ApiController.ActionContext">
      <summary>アクション コンテキストを取得します。</summary>
      <returns>アクション コンテキスト。</returns>
    </member>
    <member name="M:System.Web.Http.ApiController.BadRequest">
      <summary>
        <see cref="T:System.Web.Http.Results.BadRequestResult" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Web.Http.Results.BadRequestResult" />。</returns>
    </member>
    <member name="M:System.Web.Http.ApiController.BadRequest(System.String)">
      <summary>指定されたエラー メッセージを使用して、<see cref="T:System.Web.Http.Results.ErrorMessageResult" /> (400 Bad Request) を作成します。</summary>
      <returns>指定されたモデルの状態で <see cref="T:System.Web.Http.Results.InvalidModelStateResult" />。</returns>
      <param name="message">ユーザーに表示するエラー メッセージ。</param>
    </member>
    <member name="M:System.Web.Http.ApiController.BadRequest(System.Web.Http.ModelBinding.ModelStateDictionary)">
      <summary>指定されたモデルの状態で <see cref="T:System.Web.Http.Results.InvalidModelStateResult" /> を作成します。</summary>
      <returns>指定されたモデルの状態で <see cref="T:System.Web.Http.Results.InvalidModelStateResult" />。</returns>
      <param name="modelState">エラーに含めるモデルの状態。</param>
    </member>
    <member name="P:System.Web.Http.ApiController.Configuration">
      <summary>現在の <see cref="T:System.Web.Http.ApiController" /> の <see cref="T:System.Web.Http.HttpConfiguration" /> を取得します。</summary>
      <returns>現在の <see cref="T:System.Web.Http.ApiController" /> の <see cref="T:System.Web.Http.HttpConfiguration" />。</returns>
    </member>
    <member name="M:System.Web.Http.ApiController.Conflict">
      <summary>
        <see cref="T:System.Web.Http.Results.ConflictResult" /> (409 Conflict) を作成します。</summary>
      <returns>
        <see cref="T:System.Web.Http.Results.ConflictResult" />。</returns>
    </member>
    <member name="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0)">
      <summary>指定された値で &lt;see cref="T:System.Web.Http.NegotiatedContentResult`1" /&gt; を作成します。</summary>
      <returns>指定された値を使用する &lt;see cref="T:System.Web.Http.NegotiatedContentResult`1" /&gt;。</returns>
      <param name="statusCode">応答メッセージの HTTP ステータス コード。</param>
      <param name="value">エンティティ ボディでネゴシエートおよび書式設定するコンテンツ値。</param>
      <typeparam name="T">エンティティ ボディ内のコンテンツの型。</typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>指定された値を持つ &lt;see cref="T:System.Web.Http.FormattedContentResult`1" /&gt; を作成します。</summary>
      <returns>指定された値を持つ &lt;see cref="T:System.Web.Http.FormattedContentResult`1" /&gt;。</returns>
      <param name="statusCode">応答メッセージの HTTP ステータス コード。</param>
      <param name="value">エンティティ ボディ内で書式設定するコンテンツ値。</param>
      <param name="formatter">コンテンツを書式設定するために使用するフォーマッタ。</param>
      <typeparam name="T">エンティティ ボディ内のコンテンツの型。</typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary>指定された値を持つ &lt;see cref="T:System.Web.Http.FormattedContentResult`1" /&gt; を作成します。</summary>
      <returns>指定された値を持つ &lt;see cref="T:System.Web.Http.FormattedContentResult`1" /&gt;。</returns>
      <param name="statusCode">応答メッセージの HTTP ステータス コード。</param>
      <param name="value">エンティティ ボディ内で書式設定するコンテンツ値。</param>
      <param name="formatter">コンテンツを書式設定するために使用するフォーマッタ。</param>
      <param name="mediaType"> Content-Type ヘッダーの値。または、フォーマッタで既定値を取得する場合は &lt;see langword="null" /&gt;。</param>
      <typeparam name="T">エンティティ ボディ内のコンテンツの型。</typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
      <summary>指定された値を持つ &lt;see cref="T:System.Web.Http.FormattedContentResult`1" /&gt; を作成します。</summary>
      <returns>指定された値を持つ &lt;see cref="T:System.Web.Http.FormattedContentResult`1" /&gt;。</returns>
      <param name="statusCode">応答メッセージの HTTP ステータス コード。</param>
      <param name="value">エンティティ ボディ内で書式設定するコンテンツ値。</param>
      <param name="formatter">コンテンツを書式設定するために使用するフォーマッタ。</param>
      <param name="mediaType">Content-Type ヘッダーの値。</param>
      <typeparam name="T">エンティティ ボディ内のコンテンツの型。</typeparam>
    </member>
    <member name="P:System.Web.Http.ApiController.ControllerContext">
      <summary>現在の <see cref="T:System.Web.Http.ApiController" /> の <see cref="T:System.Web.Http.HttpConfiguration" /> を取得します。</summary>
      <returns>現在の <see cref="T:System.Web.Http.ApiController" /> の <see cref="T:System.Web.Http.HttpConfiguration" />。</returns>
    </member>
    <member name="M:System.Web.Http.ApiController.Created``1(System.String,``0)">
      <summary>
        <see cref="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1" /> (201 Created) を指定された値で作成します。</summary>
      <returns>指定された値での <see cref="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1" />。</returns>
      <param name="location">コンテンツが作成された場所。</param>
      <param name="content">エンティティ ボディでネゴシエートおよび書式設定するコンテンツ値。</param>
      <typeparam name="T">エンティティ ボディ内のコンテンツの型。</typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.Created``1(System.Uri,``0)">
      <summary>
        <see cref="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1" /> (201 Created) を指定された値で作成します。</summary>
      <returns>指定された値での <see cref="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1" />。</returns>
      <param name="location">コンテンツが作成された場所。</param>
      <param name="content">エンティティ ボディでネゴシエートおよび書式設定するコンテンツ値。</param>
      <typeparam name="T">エンティティ ボディ内のコンテンツの型。</typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},``0)">
      <summary>
        <see cref="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" /> (201 Created) を指定された値で作成します。</summary>
      <returns>指定された値での <see cref="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" />。</returns>
      <param name="routeName">URL を生成するために使用するルートの名前。</param>
      <param name="routeValues">URL の生成に使用するルート データ。</param>
      <param name="content">エンティティ ボディでネゴシエートおよび書式設定するコンテンツ値。</param>
      <typeparam name="T">エンティティ ボディ内のコンテンツの型。</typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Object,``0)">
      <summary>
        <see cref="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" /> (201 Created) を指定された値で作成します。</summary>
      <returns>指定された値での <see cref="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" />。</returns>
      <param name="routeName">URL を生成するために使用するルートの名前。</param>
      <param name="routeValues">URL の生成に使用するルート データ。</param>
      <param name="content">エンティティ ボディでネゴシエートおよび書式設定するコンテンツ値。</param>
      <typeparam name="T">エンティティ ボディ内のコンテンツの型。</typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.Dispose">
      <summary>アンマネージ リソースの解放およびリセットに関連付けられているアプリケーション定義のタスクを実行します。</summary>
    </member>
    <member name="M:System.Web.Http.ApiController.Dispose(System.Boolean)">
      <summary>オブジェクトによって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</summary>
      <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は true。アンマネージ リソースだけを解放する場合は false。</param>
    </member>
    <member name="M:System.Web.Http.ApiController.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Threading.CancellationToken)">
      <summary>1 つの HTTP 操作を非同期に実行します。</summary>
      <returns>新しく開始されたタスク。</returns>
      <param name="controllerContext">1 つの HTTP 操作のコントローラー コンテキスト。</param>
      <param name="cancellationToken">HTTP 操作に割り当てられたキャンセル トークン。</param>
    </member>
    <member name="M:System.Web.Http.ApiController.Initialize(System.Web.Http.Controllers.HttpControllerContext)">
      <summary>指定された controllerContext を使用して、<see cref="T:System.Web.Http.ApiController" /> インスタンスを初期化します。</summary>
      <param name="controllerContext">初期化に使用される <see cref="T:System.Web.Http.Controllers.HttpControllerContext" /> オブジェクト。</param>
    </member>
    <member name="M:System.Web.Http.ApiController.InternalServerError">
      <summary>
        <see cref="T:System.Web.Http.Results.InternalServerErrorResult" /> (500 Internal Server Error) を作成します。</summary>
      <returns>
        <see cref="T:System.Web.Http.Results.InternalServerErrorResult" />。</returns>
    </member>
    <member name="M:System.Web.Http.ApiController.InternalServerError(System.Exception)">
      <summary>指定された例外を使用して、<see cref="T:System.Web.Http.Results.ExceptionResult" /> (500 Internal Server Error) を作成します。</summary>
      <returns>指定された例外を使用した <see cref="T:System.Web.Http.Results.ExceptionResult" />。</returns>
      <param name="exception">エラーに含める例外。</param>
    </member>
    <member name="M:System.Web.Http.ApiController.Json``1(``0)">
      <summary>指定された値を使用して、<see cref="T:System.Web.Http.Results.JsonResult`1" /> (200 OK) を作成します。</summary>
      <returns>指定された値を使用した <see cref="T:System.Web.Http.Results.JsonResult`1" />。</returns>
      <param name="content">エンティティ ボディ内でシリアル化するコンテンツ値。</param>
      <typeparam name="T">エンティティ ボディ内のコンテンツの型。</typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
        <see cref="T:System.Web.Http.Results.JsonResult`1" /> (200 OK) を指定された値で作成します。</summary>
      <returns>指定された値での <see cref="T:System.Web.Http.Results.JsonResult`1" />。</returns>
      <param name="content">エンティティ ボディ内でシリアル化するコンテンツ値。</param>
      <param name="serializerSettings">シリアライザー設定。</param>
      <typeparam name="T">エンティティ ボディ内のコンテンツの型。</typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding)">
      <summary>
        <see cref="T:System.Web.Http.Results.JsonResult`1" /> (200 OK) を指定された値で作成します。</summary>
      <returns>指定された値での <see cref="T:System.Web.Http.Results.JsonResult`1" />。</returns>
      <param name="content">エンティティ ボディ内でシリアル化するコンテンツ値。</param>
      <param name="serializerSettings">シリアライザー設定。</param>
      <param name="encoding">コンテンツ エンコーディング。</param>
      <typeparam name="T">エンティティ ボディ内のコンテンツの型。</typeparam>
    </member>
    <member name="P:System.Web.Http.ApiController.ModelState">
      <summary>モデル バインディング プロセスの後のモデルの状態を取得します。</summary>
      <returns>モデル バインディング プロセスの後のモデルの状態。</returns>
    </member>
    <member name="M:System.Web.Http.ApiController.NotFound">
      <summary>
        <see cref="T:System.Web.Http.Results.NotFoundResult" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Web.Http.Results.NotFoundResult" />。</returns>
    </member>
    <member name="M:System.Web.Http.ApiController.Ok">
      <summary>
        <see cref="T:System.Web.Http.Results.OkResult" /> (200 OK) を作成します。</summary>
      <returns>
        <see cref="T:System.Web.Http.Results.OkResult" />。</returns>
    </member>
    <member name="M:System.Web.Http.ApiController.Ok``1(``0)">
      <summary>指定された値で <see cref="T:System.Web.Http.Results.OkNegotiatedContentResult`1" /> を作成します。</summary>
      <returns>指定された値での <see cref="T:System.Web.Http.Results.OkNegotiatedContentResult`1" />。</returns>
      <param name="content">エンティティ ボディでネゴシエートおよび書式設定するコンテンツ値。</param>
      <typeparam name="T">エンティティ ボディ内のコンテンツの型。</typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.Redirect(System.String)">
      <summary>指定された値を使用して、リダイレクトの結果を作成します (302 検出)。</summary>
      <returns>指定された値のリダイレクトの結果 (302 検出)。</returns>
      <param name="location">リダイレクト先の場所。</param>
    </member>
    <member name="M:System.Web.Http.ApiController.Redirect(System.Uri)">
      <summary>指定された値を使用して、リダイレクトの結果を作成します (302 検出)。</summary>
      <returns>指定された値のリダイレクトの結果 (302 検出)。</returns>
      <param name="location">リダイレクト先の場所。</param>
    </member>
    <member name="M:System.Web.Http.ApiController.RedirectToRoute(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定された値を使用して、ルートへのリダイレクト結果を作成します (302 検出)。</summary>
      <returns>指定された値のルートへのリダイレクト結果 (302 検出)。</returns>
      <param name="routeName">URL を生成するために使用するルートの名前。</param>
      <param name="routeValues">URL の生成に使用するルート データ。</param>
    </member>
    <member name="M:System.Web.Http.ApiController.RedirectToRoute(System.String,System.Object)">
      <summary>指定された値を使用して、ルートへのリダイレクト結果を作成します (302 検出)。</summary>
      <returns>指定された値のルートへのリダイレクト結果 (302 検出)。</returns>
      <param name="routeName">URL を生成するために使用するルートの名前。</param>
      <param name="routeValues">URL の生成に使用するルート データ。</param>
    </member>
    <member name="P:System.Web.Http.ApiController.Request">
      <summary>現在の <see cref="T:System.Web.Http.ApiController" /> の HttpRequestMessage を取得または設定します。</summary>
      <returns>現在の <see cref="T:System.Web.Http.ApiController" /> の HttpRequestMessage。</returns>
    </member>
    <member name="P:System.Web.Http.ApiController.RequestContext">
      <summary>要求コンテキストを取得します。</summary>
      <returns>要求コンテキスト。</returns>
    </member>
    <member name="M:System.Web.Http.ApiController.ResponseMessage(System.Net.Http.HttpResponseMessage)">
      <summary>指定された応答で <see cref="T:System.Web.Http.Results.ResponseMessageResult" /> を作成します。</summary>
      <returns>指定された応答の <see cref="T:System.Web.Http.Results.ResponseMessageResult" />。</returns>
      <param name="response">HTTP 応答メッセージ。</param>
    </member>
    <member name="M:System.Web.Http.ApiController.StatusCode(System.Net.HttpStatusCode)">
      <summary>指定されたステータス コードで <see cref="T:System.Web.Http.StatusCodeResult" /> を作成します。</summary>
      <returns>指定されたステータス コードを使用する <see cref="T:System.Web.Http.StatusCodeResult" />。</returns>
      <param name="status">応答メッセージの HTTP ステータス コード</param>
    </member>
    <member name="M:System.Web.Http.ApiController.Unauthorized(System.Collections.Generic.IEnumerable{System.Net.Http.Headers.AuthenticationHeaderValue})">
      <summary>
        <see cref="T:System.Web.Http.Results.UnauthorizedResult" /> (401 Unauthorized) を指定された値で作成します。</summary>
      <returns>指定された値での <see cref="T:System.Web.Http.Results.UnauthorizedResult" />。</returns>
      <param name="challenges">WWW-Authenticate チャレンジ。</param>
    </member>
    <member name="M:System.Web.Http.ApiController.Unauthorized(System.Net.Http.Headers.AuthenticationHeaderValue[])">
      <summary>
        <see cref="T:System.Web.Http.Results.UnauthorizedResult" /> (401 Unauthorized) を指定された値で作成します。</summary>
      <returns>指定された値での <see cref="T:System.Web.Http.Results.UnauthorizedResult" />。</returns>
      <param name="challenges">WWW-Authenticate チャレンジ。</param>
    </member>
    <member name="P:System.Web.Http.ApiController.Url">
      <summary>他の API に対して URL を生成するために使用される <see cref="T:System.Web.Http.Routing.UrlHelper" /> のインスタンスを取得します。</summary>
      <returns>他の API に対して URL を生成するために使用される <see cref="T:System.Web.Http.Routing.UrlHelper" />。</returns>
    </member>
    <member name="P:System.Web.Http.ApiController.User">
      <summary>この要求に関連付けられた現在のプリンシパルを返します。</summary>
      <returns>この要求に関連付けられた現在のプリンシパル。</returns>
    </member>
    <member name="M:System.Web.Http.ApiController.Validate``1(``0)">
      <summary>特定のエンティティを検証し、該当する場合はモデルのステータスの空白のプレフィックスに検証エラーを追加します。</summary>
      <param name="entity">検証されるエンティティ。</param>
      <typeparam name="TEntity">検証するエンティティの種類。</typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.Validate``1(``0,System.String)">
      <summary>特定のエンティティを検証し、該当する場合はモデルのステータスに検証エラーを追加します。</summary>
      <param name="entity">検証されるエンティティ。</param>
      <param name="keyPrefix">モデル ステータスのエラーがモデル ステータスに追加されるキー プレフィックス。</param>
      <typeparam name="TEntity">検証するエンティティの種類。</typeparam>
    </member>
    <member name="T:System.Web.Http.AuthorizeAttribute">
      <summary>要求の <see cref="T:System.Security.Principal.IPrincipal" /> を検証する承認フィルターを指定します。</summary>
    </member>
    <member name="M:System.Web.Http.AuthorizeAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.AuthorizeAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.AuthorizeAttribute.HandleUnauthorizedRequest(System.Web.Http.Controllers.HttpActionContext)">
      <summary>承認されなかった要求を処理します。</summary>
      <param name="actionContext">コンテキスト。</param>
    </member>
    <member name="M:System.Web.Http.AuthorizeAttribute.IsAuthorized(System.Web.Http.Controllers.HttpActionContext)">
      <summary>指定されたコントロールが承認されているかどうかを示します。</summary>
      <returns>コントロールが承認された場合は true。それ以外の場合は false。</returns>
      <param name="actionContext">コンテキスト。</param>
    </member>
    <member name="M:System.Web.Http.AuthorizeAttribute.OnAuthorization(System.Web.Http.Controllers.HttpActionContext)">
      <summary>アクションの承認中に呼び出します。</summary>
      <param name="actionContext">コンテキスト。</param>
      <exception cref="T:System.ArgumentNullException">コンテキスト パラメーターが null です。</exception>
    </member>
    <member name="P:System.Web.Http.AuthorizeAttribute.Roles">
      <summary>承認されたロールを取得または設定します。</summary>
      <returns>ロール文字列。</returns>
    </member>
    <member name="P:System.Web.Http.AuthorizeAttribute.TypeId">
      <summary>この属性の一意の識別子を取得します。</summary>
      <returns>この属性の一意の識別子。</returns>
    </member>
    <member name="P:System.Web.Http.AuthorizeAttribute.Users">
      <summary>承認されたユーザーを取得または設定します。</summary>
      <returns>ユーザー文字列。</returns>
    </member>
    <member name="T:System.Web.Http.FromBodyAttribute">
      <summary> 受信した <see cref="T:System.Net.Http.HttpRequestMessage" /> のエンティティ ボディからのみアクション パラメーターを取得することを指定する属性。</summary>
    </member>
    <member name="M:System.Web.Http.FromBodyAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.FromBodyAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.FromBodyAttribute.GetBinding(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>パラメーター バインディングを取得します。</summary>
      <returns>パラメーター バインディング。</returns>
      <param name="parameter">パラメーターの説明。</param>
    </member>
    <member name="T:System.Web.Http.FromUriAttribute">
      <summary>受信した <see cref="T:System.Net.Http.HttpRequestMessage" /> の URI からアクション パラメーターを取得することを指定する属性。</summary>
    </member>
    <member name="M:System.Web.Http.FromUriAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.FromUriAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.FromUriAttribute.GetValueProviderFactories(System.Web.Http.HttpConfiguration)">
      <summary>モデル バインダーの値プロバイダー ファクトリを取得します。</summary>
      <returns>
        <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" /> オブジェクトのコレクション。</returns>
      <param name="configuration">構成。</param>
    </member>
    <member name="T:System.Web.Http.HttpBindNeverAttribute">
      <summary>HTTP バインドがプロパティを除外することを指定する属性を表します。</summary>
    </member>
    <member name="M:System.Web.Http.HttpBindNeverAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.HttpBindNeverAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Web.Http.HttpBindRequiredAttribute">
      <summary>HTTP バインディングの必須属性を表します。</summary>
    </member>
    <member name="M:System.Web.Http.HttpBindRequiredAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.HttpBindRequiredAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Web.Http.HttpConfiguration">
      <summary>
        <see cref="T:System.Web.Http.HttpServer" /> インスタンスの構成を表します。</summary>
    </member>
    <member name="M:System.Web.Http.HttpConfiguration.#ctor">
      <summary>
        <see cref="T:System.Web.Http.HttpConfiguration" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.HttpConfiguration.#ctor(System.Web.Http.HttpRouteCollection)">
      <summary>
        <see cref="T:System.Web.Http.HttpConfiguration" /> クラスの新しいインスタンスを HTTP ルート コレクションで初期化します。</summary>
      <param name="routes">このインスタンスと関連付ける HTTP ルート コレクションです。</param>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.DependencyResolver">
      <summary>このインスタンスに関連付けられている依存関係リゾルバーを取得または設定します。</summary>
      <returns>依存関係リゾルバーです。</returns>
    </member>
    <member name="M:System.Web.Http.HttpConfiguration.Dispose">
      <summary>アンマネージ リソースの解放またはリセットに関連付けられているアプリケーション定義タスクを実行します。</summary>
    </member>
    <member name="M:System.Web.Http.HttpConfiguration.Dispose(System.Boolean)">
      <summary>オブジェクトで使用されるアンマネージ リソースを解放し、必要に応じてマネージ リソースを解放します。</summary>
      <param name="disposing">true に設定すると、マネージ リソースとアンマネージ リソースの両方を解放します。false に設定すると、アンマネージ リソースのみを解放します。</param>
    </member>
    <member name="M:System.Web.Http.HttpConfiguration.EnsureInitialized">
      <summary>初期化子フックを呼び出します。これ以降は変更不可能と見なされます。これを複数回呼び出しても問題ありません。</summary>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.Filters">
      <summary>この <see cref="T:System.Web.Http.HttpConfiguration" /> インスタンスを使用して処理された、すべての要求に対応するフィルターの一覧を取得します。</summary>
      <returns>フィルターの一覧です。</returns>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.Formatters">
      <summary>このインスタンスのメディアの種類のフォーマッタを取得します。</summary>
      <returns>
        <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> オブジェクトのコレクションです。</returns>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.IncludeErrorDetailPolicy">
      <summary>エラーの詳細をエラー メッセージに含めるかどうかを示す値を取得または設定します。</summary>
      <returns>エラーの詳細ポリシーを示す <see cref="T:System.Web.Http.IncludeErrorDetailPolicy" /> 値です。</returns>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.Initializer">
      <summary> 要求の処理で使用される前に、<see cref="T:System.Web.Http.HttpConfiguration" /> インスタンスの最終初期化を実行するアクションを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Web.Http.HttpConfiguration" /> インスタンスの最終初期化を実行するアクションです。</returns>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.MessageHandlers">
      <summary>
        <see cref="T:System.Net.Http.HttpRequestMessage" /> がスタックを上に移動し、<see cref="T:System.Net.Http.HttpResponseMessage" /> がスタックを下に移動すると呼び出される、<see cref="T:System.Net.Http.DelegatingHandler" /> インスタンスの順序指定された一覧を取得します。</summary>
      <returns>メッセージ ハンドラー コレクションです。</returns>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.ParameterBindingRules">
      <summary>パラメーターをバインドする方法のルールのコレクションを取得します。</summary>
      <returns>特定のパラメーターをバインドするパラメーターを生成できる関数のコレクションです。</returns>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.Properties">
      <summary>このインスタンスに関連付けられているプロパティを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> はこのプロパティを含みます。</returns>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.Routes">
      <summary>この <see cref="T:System.Web.Http.HttpConfiguration" /> インスタンスに関連付けられている <see cref="T:System.Web.Http.HttpRouteCollection" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Web.Http.HttpRouteCollection" />。</returns>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.Services">
      <summary>このインスタンスに関連付けられている既定のサービスのコンテナーを取得します。</summary>
      <returns>
        <see cref="T:System.Web.Http.Controllers.ServicesContainer" /> はこのインスタンスの既定のサービスを含みます。</returns>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.VirtualPathRoot">
      <summary>ルート仮想パスを取得します。</summary>
      <returns>ルート仮想パスです。</returns>
    </member>
    <member name="T:System.Web.Http.HttpConfigurationExtensions">
      <summary>
        <see cref="T:System.Web.Http.HttpConfiguration" /> クラスの拡張メソッドを格納します。</summary>
    </member>
    <member name="M:System.Web.Http.HttpConfigurationExtensions.BindParameter(System.Web.Http.HttpConfiguration,System.Type,System.Web.Http.ModelBinding.IModelBinder)"></member>
    <member name="M:System.Web.Http.HttpConfigurationExtensions.MapHttpAttributeRoutes(System.Web.Http.HttpConfiguration)"></member>
    <member name="M:System.Web.Http.HttpConfigurationExtensions.MapHttpAttributeRoutes(System.Web.Http.HttpConfiguration,System.Web.Http.Routing.IDirectRouteProvider)">
      <summary>属性が定義されたアプリケーションのルートをマップします。</summary>
      <param name="configuration">サーバー構成。</param>
      <param name="directRouteProvider">ルートの検出と構築に使用する <see cref="T:System.Web.Http.Routing.IDirectRouteProvider" />。</param>
    </member>
    <member name="M:System.Web.Http.HttpConfigurationExtensions.MapHttpAttributeRoutes(System.Web.Http.HttpConfiguration,System.Web.Http.Routing.IInlineConstraintResolver)">
      <summary>属性が定義されたアプリケーションのルートをマップします。</summary>
      <param name="configuration">サーバー構成。</param>
      <param name="constraintResolver">制約リゾルバー。</param>
    </member>
    <member name="M:System.Web.Http.HttpConfigurationExtensions.MapHttpAttributeRoutes(System.Web.Http.HttpConfiguration,System.Web.Http.Routing.IInlineConstraintResolver,System.Web.Http.Routing.IDirectRouteProvider)">
      <summary>属性が定義されたアプリケーションのルートをマップします。</summary>
      <param name="configuration">サーバー構成。</param>
      <param name="constraintResolver">インライン制約の解決に使用する <see cref="T:System.Web.Http.Routing.IInlineConstraintResolver" />。</param>
      <param name="directRouteProvider">ルートの検出と構築に使用する <see cref="T:System.Web.Http.Routing.IDirectRouteProvider" />。</param>
    </member>
    <member name="M:System.Web.Http.HttpConfigurationExtensions.SuppressHostPrincipal(System.Web.Http.HttpConfiguration)"></member>
    <member name="T:System.Web.Http.HttpDeleteAttribute">
      <summary>アクションが DELETE HTTP メソッドをサポートすることを指定します。</summary>
    </member>
    <member name="M:System.Web.Http.HttpDeleteAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.HttpDeleteAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Http.HttpDeleteAttribute.HttpMethods">
      <summary>この属性に対応する HTTP メソッドを取得します。</summary>
      <returns>この属性に対応する HTTP メソッド。</returns>
    </member>
    <member name="T:System.Web.Http.HttpError">
      <summary>エラー情報を格納するためのシリアル化可能なコンテナーを定義します。この情報は、キー/値ペアとして格納されます。標準エラー情報を探すためのディクショナリ キーは、<see cref="T:System.Web.Http.HttpErrorKeys" /> 型で使用できます。</summary>
    </member>
    <member name="M:System.Web.Http.HttpError.#ctor">
      <summary>
        <see cref="T:System.Web.Http.HttpError" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.HttpError.#ctor(System.Exception,System.Boolean)">
      <summary>
        <paramref name="exception" /> の <see cref="T:System.Web.Http.HttpError" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="exception">エラー情報に使用する例外。</param>
      <param name="includeErrorDetail">例外情報をエラーに含める場合は true。それ以外の場合は false。</param>
    </member>
    <member name="M:System.Web.Http.HttpError.#ctor(System.String)">
      <summary>エラー メッセージ <paramref name="message" /> を含む <see cref="T:System.Web.Http.HttpError" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">このインスタンスに関連付けるエラー メッセージ。</param>
    </member>
    <member name="M:System.Web.Http.HttpError.#ctor(System.Web.Http.ModelBinding.ModelStateDictionary,System.Boolean)">
      <summary>
        <paramref name="modelState" /> の <see cref="T:System.Web.Http.HttpError" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="modelState">エラー情報に使用する無効なモデル状態。</param>
      <param name="includeErrorDetail">例外メッセージをエラーに含める場合は true。それ以外の場合は false。</param>
    </member>
    <member name="P:System.Web.Http.HttpError.ExceptionMessage">
      <summary>使用可能な場合は、<see cref="T:System.Exception" /> のメッセージを取得または設定します。</summary>
      <returns>使用可能な場合は <see cref="T:System.Exception" /> のメッセージ。</returns>
    </member>
    <member name="P:System.Web.Http.HttpError.ExceptionType">
      <summary>使用可能な場合は、<see cref="T:System.Exception" /> の型を取得または設定します。</summary>
      <returns>使用可能な場合は <see cref="T:System.Exception" /> の型。</returns>
    </member>
    <member name="M:System.Web.Http.HttpError.GetPropertyValue``1(System.String)">
      <summary>このエラー インスタンスから特定のプロパティ値を取得します。</summary>
      <returns>このエラー インスタンスからの特定のプロパティ値。</returns>
      <param name="key">エラー プロパティの名前。</param>
      <typeparam name="TValue">プロパティの型。</typeparam>
    </member>
    <member name="P:System.Web.Http.HttpError.InnerException">
      <summary>使用可能な場合は、このインスタンスに関連付けられた内部 <see cref="T:System.Exception" /> を取得します。</summary>
      <returns>使用可能な場合はこのインスタンスに関連付けられた内部 <see cref="T:System.Exception" />。</returns>
    </member>
    <member name="P:System.Web.Http.HttpError.Message">
      <summary>エラーの原因を説明する基本的な、ユーザーに表示されるメッセージを取得または設定します。このフィールドで伝達される情報は、<see cref="T:System.Web.Http.IncludeErrorDetailPolicy" /> に関係なく、伝送されるためパブリックであると見なされる必要があります。したがって、サーバーまたはアプリケーションに関する機密情報が公開されないように注意する必要があります。</summary>
      <returns>エラーの原因を説明する基本的な、ユーザーに表示されるメッセージ。このフィールドで伝達される情報は、<see cref="T:System.Web.Http.IncludeErrorDetailPolicy" /> に関係なく、伝送されるためパブリックであると見なされる必要があります。したがって、サーバーまたはアプリケーションに関する機密情報が公開されないように注意する必要があります。</returns>
    </member>
    <member name="P:System.Web.Http.HttpError.MessageDetail">
      <summary>開発者がエラーの内容を正確に理解できるようにするためのエラーの詳細な説明を取得または設定します。</summary>
      <returns>開発者がエラーの内容を正確に理解できるようにするためのエラーの詳細な説明。</returns>
    </member>
    <member name="P:System.Web.Http.HttpError.ModelState">
      <summary>モデル バインド中に発生したエラーに関する情報を含む <see cref="P:System.Web.Http.HttpError.ModelState" /> を取得します。</summary>
      <returns>モデル バインド中に発生したエラーに関する情報を含む <see cref="P:System.Web.Http.HttpError.ModelState" />。</returns>
    </member>
    <member name="P:System.Web.Http.HttpError.StackTrace">
      <summary>使用可能な場合はこのインスタンスに関連付けられたスタック トレース情報を取得または設定します。</summary>
      <returns>使用可能な場合はこのインスタンスに関連付けられたスタック トレース情報。</returns>
    </member>
    <member name="M:System.Web.Http.HttpError.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>このメソッドは予約済みであり、使用しないでください。</summary>
      <returns>常に null を返します。</returns>
    </member>
    <member name="M:System.Web.Http.HttpError.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>XML 表現から <see cref="T:System.Web.Http.HttpError" /> インスタンスを生成します。</summary>
      <param name="reader">オブジェクトが逆シリアル化される元の XmlReader ストリーム。</param>
    </member>
    <member name="M:System.Web.Http.HttpError.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>
        <see cref="T:System.Web.Http.HttpError" /> インスタンスを XML 表現に変換します。</summary>
      <param name="writer">オブジェクトがシリアル化される先の XmlWriter ストリーム。</param>
    </member>
    <member name="T:System.Web.Http.HttpErrorKeys">
      <summary>
        <see cref="T:System.Web.Http.HttpError" /> ディクショナリに格納されているエラー情報を検索するためのキーを提供します。</summary>
    </member>
    <member name="F:System.Web.Http.HttpErrorKeys.ErrorCodeKey">
      <summary> ErrorCode のキーを提供します。</summary>
    </member>
    <member name="F:System.Web.Http.HttpErrorKeys.ExceptionMessageKey">
      <summary> ExceptionMessage のキーを提供します。</summary>
    </member>
    <member name="F:System.Web.Http.HttpErrorKeys.ExceptionTypeKey">
      <summary> ExceptionType のキーを提供します。</summary>
    </member>
    <member name="F:System.Web.Http.HttpErrorKeys.InnerExceptionKey">
      <summary> InnerException のキーを提供します。</summary>
    </member>
    <member name="F:System.Web.Http.HttpErrorKeys.MessageDetailKey">
      <summary> MessageDetail のキーを提供します。</summary>
    </member>
    <member name="F:System.Web.Http.HttpErrorKeys.MessageKey">
      <summary> Message のキーを提供します。</summary>
    </member>
    <member name="F:System.Web.Http.HttpErrorKeys.MessageLanguageKey">
      <summary> MessageLanguage のキーを提供します。</summary>
    </member>
    <member name="F:System.Web.Http.HttpErrorKeys.ModelStateKey">
      <summary> ModelState のキーを提供します。</summary>
    </member>
    <member name="F:System.Web.Http.HttpErrorKeys.StackTraceKey">
      <summary> StackTrace のキーを提供します。 </summary>
    </member>
    <member name="T:System.Web.Http.HttpGetAttribute">
      <summary>アクションが GET HTTP メソッドをサポートすることを指定します。</summary>
    </member>
    <member name="M:System.Web.Http.HttpGetAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.HttpGetAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Http.HttpGetAttribute.HttpMethods">
      <summary>この属性に対応する HTTP メソッドを取得します。</summary>
      <returns>この属性に対応する HTTP メソッド。</returns>
    </member>
    <member name="T:System.Web.Http.HttpHeadAttribute">
      <summary> アクションが HEAD HTTP メソッドをサポートすることを指定します。</summary>
    </member>
    <member name="M:System.Web.Http.HttpHeadAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.HttpHeadAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Http.HttpHeadAttribute.HttpMethods">
      <summary>この属性に対応する HTTP メソッドを取得します。</summary>
      <returns>この属性に対応する HTTP メソッド。</returns>
    </member>
    <member name="T:System.Web.Http.HttpOptionsAttribute">
      <summary>HTTP メソッドが HTTP OPTIONS 要求だけを処理するように制限するために使用する属性を表します。</summary>
    </member>
    <member name="M:System.Web.Http.HttpOptionsAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.HttpOptionsAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Http.HttpOptionsAttribute.HttpMethods">
      <summary>この属性に対応する HTTP メソッドを取得します。</summary>
      <returns>この属性に対応する HTTP メソッド。</returns>
    </member>
    <member name="T:System.Web.Http.HttpPatchAttribute">
      <summary> アクションが PATCH HTTP メソッドをサポートすることを指定します。</summary>
    </member>
    <member name="M:System.Web.Http.HttpPatchAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.HttpPatchAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Http.HttpPatchAttribute.HttpMethods">
      <summary>この属性に対応する HTTP メソッドを取得します。</summary>
      <returns>この属性に対応する HTTP メソッド。</returns>
    </member>
    <member name="T:System.Web.Http.HttpPostAttribute">
      <summary>アクションが POST HTTP メソッドをサポートすることを指定します。</summary>
    </member>
    <member name="M:System.Web.Http.HttpPostAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.HttpPostAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Http.HttpPostAttribute.HttpMethods">
      <summary>この属性に対応する HTTP メソッドを取得します。</summary>
      <returns>この属性に対応する HTTP メソッド。</returns>
    </member>
    <member name="T:System.Web.Http.HttpPutAttribute">
      <summary>HTTP メソッドが HTTP PUT 要求だけを処理するよう制限するために使用する属性を表します。</summary>
    </member>
    <member name="M:System.Web.Http.HttpPutAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.HttpPutAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Http.HttpPutAttribute.HttpMethods">
      <summary>この属性に対応する HTTP メソッドを取得します。</summary>
      <returns>この属性に対応する HTTP メソッド。</returns>
    </member>
    <member name="T:System.Web.Http.HttpResponseException">
      <summary> 指定された <see cref="T:System.Net.Http.HttpResponseMessage" /> がクライアントに返されることを許可する例外。</summary>
    </member>
    <member name="M:System.Web.Http.HttpResponseException.#ctor(System.Net.Http.HttpResponseMessage)">
      <summary>
        <see cref="T:System.Web.Http.HttpResponseException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="response">クライアントに返す HTTP 応答。</param>
    </member>
    <member name="M:System.Web.Http.HttpResponseException.#ctor(System.Net.HttpStatusCode)">
      <summary>
        <see cref="T:System.Web.Http.HttpResponseException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="statusCode">応答の状態コード。</param>
    </member>
    <member name="P:System.Web.Http.HttpResponseException.Response">
      <summary>クライアントに返す HTTP 応答を取得します。</summary>
      <returns>HTTP 応答を表す <see cref="T:System.Net.Http.HttpResponseMessage" />。</returns>
    </member>
    <member name="T:System.Web.Http.HttpRouteCollection">
      <summary>
        <see cref="T:System.Web.Http.Routing.IHttpRoute" /> のインスタンスのコレクション。</summary>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.#ctor">
      <summary>
        <see cref="T:System.Web.Http.HttpRouteCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.#ctor(System.String)">
      <summary>
        <see cref="T:System.Web.Http.HttpRouteCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="virtualPathRoot">仮想パスのルート。</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.Add(System.String,System.Web.Http.Routing.IHttpRoute)">
      <summary>
        <see cref="T:System.Web.Http.Routing.IHttpRoute" /> インスタンスをコレクションに追加します。</summary>
      <param name="name">ルートの名前。</param>
      <param name="route">コレクションに追加する <see cref="T:System.Web.Http.Routing.IHttpRoute" /> インスタンス。</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.Clear">
      <summary>コレクションからすべての項目を削除します。</summary>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.Contains(System.Web.Http.Routing.IHttpRoute)">
      <summary>特定の <see cref="T:System.Web.Http.Routing.IHttpRoute" /> がコレクションに含まれているかどうかを確認します。</summary>
      <returns>
        <see cref="T:System.Web.Http.Routing.IHttpRoute" /> がコレクション内で見つかった場合は true。それ以外の場合は false。</returns>
      <param name="item">コレクション内で検索するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.ContainsKey(System.String)">
      <summary>指定されたキーを持つ要素がコレクションに格納されているかどうかを確認します。</summary>
      <returns>キーを持つ要素がコレクションに格納されている場合は true。それ以外の場合は false。</returns>
      <param name="name">コレクション内で検索するキー。</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Web.Http.Routing.IHttpRoute}[],System.Int32)">
      <summary>特定の配列インデックスを開始位置として、配列にコレクションの <see cref="T:System.Web.Http.Routing.IHttpRoute" /> インスタンスをコピーします。</summary>
      <param name="array">コレクション要素のコピー先となる配列。</param>
      <param name="arrayIndex">コピーの開始位置となる、<paramref name="array" /> 内の 0 から始まるインデックス。</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.CopyTo(System.Web.Http.Routing.IHttpRoute[],System.Int32)">
      <summary>特定の配列インデックスを開始位置として、配列にコレクションのルート名と <see cref="T:System.Web.Http.Routing.IHttpRoute" /> インスタンスをコピーします。</summary>
      <param name="array">コレクション要素のコピー先となる配列。</param>
      <param name="arrayIndex">コピーの開始位置となる、<paramref name="array" /> 内の 0 から始まるインデックス。</param>
    </member>
    <member name="P:System.Web.Http.HttpRouteCollection.Count">
      <summary>コレクション内の項目の数を取得します。</summary>
      <returns>コレクション内の項目の数。</returns>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.CreateRoute(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
        <see cref="T:System.Web.Http.Routing.IHttpRoute" /> インスタンスを作成します。</summary>
      <returns>新しい <see cref="T:System.Web.Http.Routing.IHttpRoute" /> インスタンス。</returns>
      <param name="routeTemplate">ルート テンプレート。</param>
      <param name="defaults">既定のルート パラメーターを格納しているオブジェクト。</param>
      <param name="constraints">ルートの制約を格納しているオブジェクト。</param>
      <param name="dataTokens">ルート データ トークン。</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.CreateRoute(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object},System.Net.Http.HttpMessageHandler)">
      <summary>
        <see cref="T:System.Web.Http.Routing.IHttpRoute" /> インスタンスを作成します。</summary>
      <returns>新しい <see cref="T:System.Web.Http.Routing.IHttpRoute" /> インスタンス。</returns>
      <param name="routeTemplate">ルート テンプレート。</param>
      <param name="defaults">既定のルート パラメーターを格納しているオブジェクト。</param>
      <param name="constraints">ルートの制約を格納しているオブジェクト。</param>
      <param name="dataTokens">ルート データ トークン。</param>
      <param name="handler">ルートのメッセージ ハンドラー。</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.CreateRoute(System.String,System.Object,System.Object)">
      <summary>
        <see cref="T:System.Web.Http.Routing.IHttpRoute" /> インスタンスを作成します。</summary>
      <returns>新しい <see cref="T:System.Web.Http.Routing.IHttpRoute" /> インスタンス。</returns>
      <param name="routeTemplate">ルート テンプレート。</param>
      <param name="defaults">既定のルート パラメーターを格納しているオブジェクト。</param>
      <param name="constraints">ルートの制約を格納しているオブジェクト。</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.Dispose">
      <summary>アンマネージ リソースの解放およびリセットに関連付けられているアプリケーション定義のタスクを実行します。</summary>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.Dispose(System.Boolean)">
      <summary>オブジェクトによって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</summary>
      <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は true。アンマネージ リソースだけを解放する場合は false。</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.GetRouteData(System.Net.Http.HttpRequestMessage)">
      <summary>指定された HTTP 要求のルート データを取得します。</summary>
      <returns>ルート データを表す <see cref="T:System.Web.Http.Routing.IHttpRouteData" /> インスタンス。</returns>
      <param name="request">HTTP 要求。</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.GetVirtualPath(System.Net.Http.HttpRequestMessage,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>仮想パスを取得します。</summary>
      <returns>仮想パスを表す <see cref="T:System.Web.Http.Routing.IHttpVirtualPathData" /> インスタンス。</returns>
      <param name="request">HTTP 要求。</param>
      <param name="name">ルート名。</param>
      <param name="values">ルート値。</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.Insert(System.Int32,System.String,System.Web.Http.Routing.IHttpRoute)">
      <summary>
        <see cref="T:System.Web.Http.Routing.IHttpRoute" /> インスタンスをコレクションに挿入します。</summary>
      <param name="index">
        <paramref name="value" /> を挿入する位置の 0 から始まるインデックス。</param>
      <param name="name">ルート名。</param>
      <param name="value">挿入する <see cref="T:System.Web.Http.Routing.IHttpRoute" />。値を null にすることはできません。</param>
    </member>
    <member name="P:System.Web.Http.HttpRouteCollection.IsReadOnly">
      <summary>コレクションが読み取り専用であるかどうかを示す値を取得します。</summary>
      <returns>コレクションが読み取り専用である場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Web.Http.HttpRouteCollection.Item(System.Int32)">
      <summary>指定したインデックス位置にある要素を取得または設定します。</summary>
      <returns>指定されたインデックスの <see cref="T:System.Web.Http.Routing.IHttpRoute" />。</returns>
      <param name="index">インデックス。</param>
    </member>
    <member name="P:System.Web.Http.HttpRouteCollection.Item(System.String)">
      <summary>指定されたルート名を持つ要素を取得または設定します。</summary>
      <returns>指定されたインデックスの <see cref="T:System.Web.Http.Routing.IHttpRoute" />。</returns>
      <param name="name">ルート名。</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.OnGetEnumerator">
      <summary>コレクションの列挙子を取得するために内部で呼び出されます。</summary>
      <returns>コレクションの反復処理に使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.Remove(System.String)">
      <summary>コレクションから <see cref="T:System.Web.Http.Routing.IHttpRoute" /> インスタンスを削除します。</summary>
      <returns>要素が正常に削除された場合は true。それ以外の場合は false。このメソッドは、<paramref name="name" /> がコレクションで見つからなかった場合にも false を返します。</returns>
      <param name="name">削除するルートの名前。</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.System#Collections#Generic#ICollection{T}#Add(System.Web.Http.Routing.IHttpRoute)">
      <summary>項目をコレクションに追加します。</summary>
      <param name="route">コレクションに追加するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.System#Collections#Generic#ICollection{T}#Remove(System.Web.Http.Routing.IHttpRoute)">
      <summary>コレクションから、最初に出現した特定のオブジェクトを削除します。</summary>
      <returns>
        <paramref name="route" /> がコレクションから正常に削除された場合は true。それ以外の場合は false。このメソッドは、<paramref name="route" /> が元のコレクション内に見つからなかった場合にも、false を返します。</returns>
      <param name="route">コレクションから削除するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.TryGetValue(System.String,System.Web.Http.Routing.IHttpRoute@)">
      <summary>指定されたルート名を持つ <see cref="T:System.Web.Http.Routing.IHttpRoute" /> を取得します。</summary>
      <returns>指定された名前を持つ要素がコレクションに格納されている場合は true。それ以外の場合は false。</returns>
      <param name="name">ルート名。</param>
      <param name="route">このメソッドで戻り値の処理が行われた場合、ルート名が見つかれば <see cref="T:System.Web.Http.Routing.IHttpRoute" /> インスタンスが格納されています。それ以外の場合は null です。このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.ValidateConstraint(System.String,System.String,System.Object)">
      <summary>
        <see cref="M:System.Web.Http.HttpRouteCollection.CreateRoute(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object},System.Net.Http.HttpMessageHandler)" /> メソッドの呼び出しで作成された <see cref="T:System.Web.Http.Routing.IHttpRoute" /> で制約が有効であることを検証します。</summary>
      <param name="routeTemplate">ルート テンプレート。</param>
      <param name="name">制約名。</param>
      <param name="constraint">制約オブジェクト。</param>
    </member>
    <member name="P:System.Web.Http.HttpRouteCollection.VirtualPathRoot">
      <summary>仮想パスのルートを取得します。</summary>
      <returns>仮想パスのルート。</returns>
    </member>
    <member name="T:System.Web.Http.HttpRouteCollectionExtensions">
      <summary>
        <see cref="T:System.Web.Http.HttpRouteCollection" /> の拡張メソッド。</summary>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollectionExtensions.IgnoreRoute(System.Web.Http.HttpRouteCollection,System.String,System.String)">
      <summary>指定されたルートを無視します。</summary>
      <returns>
        <see cref="T:System.Web.Http.Routing.IHttpRoute" /> を返します。</returns>
      <param name="routes">アプリケーションのルートのコレクション。</param>
      <param name="routeName">無視するルートの名前。</param>
      <param name="routeTemplate">ルートのルート テンプレート。</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollectionExtensions.IgnoreRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,System.Object)">
      <summary>指定されたルートを無視します。</summary>
      <returns>
        <see cref="T:System.Web.Http.Routing.IHttpRoute" /> を返します。</returns>
      <param name="routes">アプリケーションのルートのコレクション。</param>
      <param name="routeName">無視するルートの名前。</param>
      <param name="routeTemplate">ルートのルート テンプレート。</param>
      <param name="constraints">ルート テンプレートの値を指定する式のセット。</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollectionExtensions.MapHttpBatchRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,System.Web.Http.Batch.HttpBatchHandler)">
      <summary> HTTP バッチ要求を処理するために指定されたルートをマップします。</summary>
      <param name="routes">アプリケーションのルートのコレクション。</param>
      <param name="routeName">マップするルートの名前。</param>
      <param name="routeTemplate">ルートのルート テンプレート。</param>
      <param name="batchHandler">バッチ要求を処理するための <see cref="T:System.Web.Http.Batch.HttpBatchHandler" />。</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollectionExtensions.MapHttpRoute(System.Web.Http.HttpRouteCollection,System.String,System.String)">
      <summary>指定されたルート テンプレートをマップします。</summary>
      <returns>マップされたルートへの参照。</returns>
      <param name="routes">アプリケーションのルートのコレクション。</param>
      <param name="name">マップするルートの名前。</param>
      <param name="routeTemplate">ルートのルート テンプレート。</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollectionExtensions.MapHttpRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,System.Object)">
      <summary>指定されたルート テンプレートをマップし、既定のルートの値を設定します。</summary>
      <returns>マップされたルートへの参照。</returns>
      <param name="routes">アプリケーションのルートのコレクション。</param>
      <param name="name">マップするルートの名前。</param>
      <param name="routeTemplate">ルートのルート テンプレート。</param>
      <param name="defaults">既定のルートの値を格納しているオブジェクト。</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollectionExtensions.MapHttpRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,System.Object,System.Object)">
      <summary>指定されたルート テンプレートをマップし、既定のルートの値および制約を設定します。</summary>
      <returns>マップされたルートへの参照。</returns>
      <param name="routes">アプリケーションのルートのコレクション。</param>
      <param name="name">マップするルートの名前。</param>
      <param name="routeTemplate">ルートのルート テンプレート。</param>
      <param name="defaults">既定のルートの値を格納しているオブジェクト。</param>
      <param name="constraints">
        <paramref name="routeTemplate" /> の値を指定する式のセット。</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollectionExtensions.MapHttpRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,System.Object,System.Object,System.Net.Http.HttpMessageHandler)">
      <summary>指定されたルート テンプレートをマップし、既定のルートの値、制約、およびエンドポイント メッセージ ハンドラーを設定します。</summary>
      <returns>マップされたルートへの参照。</returns>
      <param name="routes">アプリケーションのルートのコレクション。</param>
      <param name="name">マップするルートの名前。</param>
      <param name="routeTemplate">ルートのルート テンプレート。</param>
      <param name="defaults">既定のルートの値を格納しているオブジェクト。</param>
      <param name="constraints">
        <paramref name="routeTemplate" /> の値を指定する式のセット。</param>
      <param name="handler">要求のディスパッチ先ハンドラー。</param>
    </member>
    <member name="T:System.Web.Http.HttpServer">
      <summary> 受け取った <see cref="T:System.Net.Http.HttpRequestMessage" /> をディスパッチし、結果として <see cref="T:System.Net.Http.HttpResponseMessage" /> を作成する、<see cref="T:System.Net.Http.HttpMessageHandler" /> の実装を定義します。</summary>
    </member>
    <member name="M:System.Web.Http.HttpServer.#ctor">
      <summary>既定の構成とディスパッチャーを使用して <see cref="T:System.Web.Http.HttpServer" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.HttpServer.#ctor(System.Net.Http.HttpMessageHandler)">
      <summary> 指定されたディスパッチャーを使用して <see cref="T:System.Web.Http.HttpServer" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dispatcher">受信した要求を処理する HTTP ディスパッチャー。</param>
    </member>
    <member name="M:System.Web.Http.HttpServer.#ctor(System.Web.Http.HttpConfiguration)">
      <summary>指定された構成を使用して <see cref="T:System.Web.Http.HttpServer" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="configuration">このインスタンスの構成に使用する <see cref="T:System.Web.Http.HttpConfiguration" />。</param>
    </member>
    <member name="M:System.Web.Http.HttpServer.#ctor(System.Web.Http.HttpConfiguration,System.Net.Http.HttpMessageHandler)">
      <summary>指定された構成とディスパッチャーを使用して <see cref="T:System.Web.Http.HttpServer" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="configuration">このインスタンスの構成に使用する <see cref="T:System.Web.Http.HttpConfiguration" />。</param>
      <param name="dispatcher">受信した要求を処理する HTTP ディスパッチャー。</param>
    </member>
    <member name="P:System.Web.Http.HttpServer.Configuration">
      <summary>このインスタンスの構成に使用する <see cref="T:System.Web.Http.HttpConfiguration" /> を取得します。</summary>
      <returns>このインスタンスの構成に使用する <see cref="T:System.Web.Http.HttpConfiguration" />。</returns>
    </member>
    <member name="P:System.Web.Http.HttpServer.Dispatcher">
      <summary>受信した要求を処理する HTTP ディスパッチャーを取得します。</summary>
      <returns>受信した要求を処理する HTTP ディスパッチャー。</returns>
    </member>
    <member name="M:System.Web.Http.HttpServer.Dispose(System.Boolean)">
      <summary>オブジェクトによって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</summary>
      <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は true。アンマネージ リソースだけを解放する場合は false。</param>
    </member>
    <member name="M:System.Web.Http.HttpServer.Initialize">
      <summary>サーバーの操作の準備をします。</summary>
    </member>
    <member name="M:System.Web.Http.HttpServer.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>受け取った <see cref="T:System.Net.Http.HttpRequestMessage" /> をディスパッチします。</summary>
      <returns> 非同期操作を表すタスク。</returns>
      <param name="request">ディスパッチする要求。</param>
      <param name="cancellationToken">キャンセル要求を監視するトークン。</param>
    </member>
    <member name="T:System.Web.Http.IHttpActionResult">
      <summary>
        <see cref="T:System.Net.Http.HttpResponseMessage" /> を非同期に作成するコマンドを定義します。</summary>
    </member>
    <member name="M:System.Web.Http.IHttpActionResult.ExecuteAsync(System.Threading.CancellationToken)">
      <summary>
        <see cref="T:System.Net.Http.HttpResponseMessage" /> を非同期に作成します。</summary>
      <returns>完了した時点で <see cref="T:System.Net.Http.HttpResponseMessage" /> が格納されているタスク。</returns>
      <param name="cancellationToken">キャンセル要求を監視するトークン。</param>
    </member>
    <member name="T:System.Web.Http.IncludeErrorDetailPolicy">
      <summary>例外メッセージやスタック トレースなど、エラーの詳細をエラー メッセージの中に含める必要があるかどうかを指定します。</summary>
    </member>
    <member name="F:System.Web.Http.IncludeErrorDetailPolicy.Always">
      <summary>常にエラーの詳細を含めます。</summary>
    </member>
    <member name="F:System.Web.Http.IncludeErrorDetailPolicy.Default">
      <summary>ホスト環境の既定の動作を使用します。ASP.NET ホストでは、Web.config ファイルの customErrors 要素からの値を使用します。自己ホストでは、値 <see cref="F:System.Web.Http.IncludeErrorDetailPolicy.LocalOnly" /> を使用します。</summary>
    </member>
    <member name="F:System.Web.Http.IncludeErrorDetailPolicy.LocalOnly">
      <summary>ローカル要求に応答するときだけエラーの詳細を含めます。</summary>
    </member>
    <member name="F:System.Web.Http.IncludeErrorDetailPolicy.Never">
      <summary>エラーの詳細を含めません。 </summary>
    </member>
    <member name="T:System.Web.Http.NonActionAttribute">
      <summary>コントローラー メソッドがアクション メソッドではないことを示すための属性を表します。</summary>
    </member>
    <member name="M:System.Web.Http.NonActionAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.NonActionAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Web.Http.OverrideActionFiltersAttribute">
      <summary>より高いレベルで定義されているアクション フィルターをオーバーライドするフィルター属性を表します。</summary>
    </member>
    <member name="M:System.Web.Http.OverrideActionFiltersAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.OverrideActionFiltersAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Http.OverrideActionFiltersAttribute.AllowMultiple">
      <summary>アクション フィルターが複数の属性を許可するかどうかを示す値を取得します。</summary>
      <returns>アクション フィルターが複数の属性を許可する場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Web.Http.OverrideActionFiltersAttribute.FiltersToOverride">
      <summary>オーバーライドするフィルターの種類を取得します。</summary>
      <returns>オーバーライドするフィルターの型。</returns>
    </member>
    <member name="T:System.Web.Http.OverrideAuthenticationAttribute">
      <summary>より高いレベルで定義されている認証フィルターをオーバーライドするフィルター属性を表します。</summary>
    </member>
    <member name="M:System.Web.Http.OverrideAuthenticationAttribute.#ctor"></member>
    <member name="P:System.Web.Http.OverrideAuthenticationAttribute.AllowMultiple"></member>
    <member name="P:System.Web.Http.OverrideAuthenticationAttribute.FiltersToOverride"></member>
    <member name="T:System.Web.Http.OverrideAuthorizationAttribute">
      <summary>より高いレベルで定義されている承認フィルターをオーバーライドするフィルター属性を表します。</summary>
    </member>
    <member name="M:System.Web.Http.OverrideAuthorizationAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.OverrideAuthorizationAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Http.OverrideAuthorizationAttribute.AllowMultiple">
      <summary>示された属性の複数のインスタンスを 1 つのプログラム要素に対して指定できるかどうかを示すブール値を取得または設定します。</summary>
      <returns>複数のインスタンスを指定できる場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Web.Http.OverrideAuthorizationAttribute.FiltersToOverride">
      <summary>フィルター オーバーライド属性の型を取得します。</summary>
      <returns>フィルター オーバーライド属性の型。</returns>
    </member>
    <member name="T:System.Web.Http.OverrideExceptionFiltersAttribute">
      <summary>より高いレベルで定義されている例外フィルターをオーバーライドするフィルター属性を表します。</summary>
    </member>
    <member name="M:System.Web.Http.OverrideExceptionFiltersAttribute.#ctor"></member>
    <member name="P:System.Web.Http.OverrideExceptionFiltersAttribute.AllowMultiple"></member>
    <member name="P:System.Web.Http.OverrideExceptionFiltersAttribute.FiltersToOverride"></member>
    <member name="T:System.Web.Http.ParameterBindingAttribute">
      <summary>
        <see cref="T:System.Web.Http.Controllers.HttpParameterBinding" /> を作成するパラメーターまたは種類上の属性。属性が type-declaration 上にある場合は、その種類のすべてのアクション パラメーター上に属性があるかのようになります。</summary>
    </member>
    <member name="M:System.Web.Http.ParameterBindingAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ParameterBindingAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.ParameterBindingAttribute.GetBinding(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>パラメーター バインディングを取得します。</summary>
      <returns>パラメーター バインディング。</returns>
      <param name="parameter">パラメーターの説明。</param>
    </member>
    <member name="T:System.Web.Http.RouteAttribute">
      <summary>ルートを介してアクションを直接公開するためのアクション上の場所。</summary>
    </member>
    <member name="M:System.Web.Http.RouteAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.RouteAttribute" /> クラスの新しいインスタンスを初期化します。 </summary>
    </member>
    <member name="M:System.Web.Http.RouteAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Web.Http.RouteAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="template">照合の対象となる URI パターンを記述するルート テンプレート。</param>
    </member>
    <member name="P:System.Web.Http.RouteAttribute.Name">
      <returns>
        <see cref="T:System.String" /> を返します。</returns>
    </member>
    <member name="P:System.Web.Http.RouteAttribute.Order">
      <returns>
        <see cref="T:System.Int32" /> を返します。</returns>
    </member>
    <member name="M:System.Web.Http.RouteAttribute.System#Web#Http#Routing#IDirectRouteFactory#CreateRoute(System.Web.Http.Routing.DirectRouteFactoryContext)"></member>
    <member name="P:System.Web.Http.RouteAttribute.Template">
      <returns>
        <see cref="T:System.String" /> を返します。</returns>
    </member>
    <member name="T:System.Web.Http.RouteParameter">
      <summary>
        <see cref="T:System.Web.Http.RouteParameter" /> クラスを使用すると、ルート パラメーターに関するプロパティを指定できます (<see cref="M:IHttpRoute.RouteTemplate" /> のセグメント内に配置されるリテラルとプレースホルダー)。たとえば、ルート パラメーターが省略可能であることを指定するために使用できます。</summary>
    </member>
    <member name="F:System.Web.Http.RouteParameter.Optional">
      <summary>省略可能なパラメーター。</summary>
    </member>
    <member name="M:System.Web.Http.RouteParameter.ToString">
      <summary>このインスタンスを表す <see cref="T:System.String" /> を返します。</summary>
      <returns>このインスタンスを表す <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Web.Http.RoutePrefixAttribute">
      <summary> コントローラーに、コントローラー内のすべてのアクションに適用されるルート プレフィックスで注釈を付けます。</summary>
    </member>
    <member name="M:System.Web.Http.RoutePrefixAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.RoutePrefixAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.RoutePrefixAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Web.Http.RoutePrefixAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="prefix">コントローラーのルート プレフィックス。</param>
    </member>
    <member name="P:System.Web.Http.RoutePrefixAttribute.Prefix">
      <summary> ルート プレフィックスを取得します。</summary>
    </member>
    <member name="T:System.Web.Http.ServicesExtensions">
      <summary>
        <see cref="T:System.Web.Http.Controllers.ServicesContainer" /> オブジェクトから取得されたサービスのタイプ セーフなアクセサーを提供します。</summary>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetActionInvoker(System.Web.Http.Controllers.ServicesContainer)">
      <summary>
        <see cref="T:System.Web.Http.Controllers.IHttpActionInvoker" /> サービスを取得します。</summary>
      <returns>
        <see cref="T:System.Web.Http.Controllers.IHttpActionInvoker" /> インスタンスを返します。</returns>
      <param name="services">サービス コンテナー。</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetActionSelector(System.Web.Http.Controllers.ServicesContainer)">
      <summary>
        <see cref="T:System.Web.Http.Controllers.IHttpActionSelector" /> サービスを取得します。</summary>
      <returns>
        <see cref="T:System.Web.Http.Controllers.IHttpActionSelector" /> インスタンスを返します。</returns>
      <param name="services">サービス コンテナー。</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetActionValueBinder(System.Web.Http.Controllers.ServicesContainer)">
      <summary>
        <see cref="T:System.Web.Http.Controllers.IActionValueBinder" /> サービスを取得します。</summary>
      <returns>
        <see cref="T:System.Web.Http.Controllers.IActionValueBinder" /> インスタンスを返します。</returns>
      <param name="services">サービス コンテナー。</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetApiExplorer(System.Web.Http.Controllers.ServicesContainer)">
      <summary>
        <see cref="T:System.Web.Http.Description.IApiExplorer" /> サービスを取得します。</summary>
      <returns>
        <see cref="T:System.Web.Http.Description.IApiExplorer" /> インスタンスを返します。</returns>
      <param name="services">サービス コンテナー。</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetAssembliesResolver(System.Web.Http.Controllers.ServicesContainer)">
      <summary>
        <see cref="T:System.Web.Http.Dispatcher.IAssembliesResolver" /> サービスを取得します。</summary>
      <returns>
        <see cref="T:System.Web.Http.Dispatcher.IAssembliesResolver" /> インスタンスを返します。</returns>
      <param name="services">サービス コンテナー。</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetBodyModelValidator(System.Web.Http.Controllers.ServicesContainer)">
      <summary>
        <see cref="T:System.Web.Http.Validation.IBodyModelValidator" /> サービスを取得します。</summary>
      <returns>
        <see cref="T:System.Web.Http.Validation.IBodyModelValidator" /> インスタンスを返します。</returns>
      <param name="services">サービス コンテナー。</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetContentNegotiator(System.Web.Http.Controllers.ServicesContainer)">
      <summary>
        <see cref="T:System.Net.Http.Formatting.IContentNegotiator" /> サービスを取得します。</summary>
      <returns>
        <see cref="T:System.Net.Http.Formatting.IContentNegotiator" /> インスタンスを返します。</returns>
      <param name="services">サービス コンテナー。</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetDocumentationProvider(System.Web.Http.Controllers.ServicesContainer)">
      <summary>
        <see cref="T:System.Web.Http.Description.IDocumentationProvider" /> サービスを取得します。</summary>
      <returns>
        <see cref="T:System.Web.Http.Description.IDocumentationProvider" /> インスタンスを返します。</returns>
      <param name="services">サービス コンテナー。</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetExceptionHandler(System.Web.Http.Controllers.ServicesContainer)">
      <summary>該当する場合、登録された未処理の例外ハンドラーを返します。</summary>
      <returns>存在する場合は登録された未処理の例外ハンドラー、それ以外の場合は null。</returns>
      <param name="services">サービス コンテナー。</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetExceptionLoggers(System.Web.Http.Controllers.ServicesContainer)">
      <summary>登録された未処理の例外ロガーのコレクションを返します。</summary>
      <returns>登録された未処理の例外ロガーのコレクション。</returns>
      <param name="services">サービス コンテナー。</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetFilterProviders(System.Web.Http.Controllers.ServicesContainer)">
      <summary>
        <see cref="T:System.Web.Http.Filters.IFilterProvider" /> コレクションを取得します。</summary>
      <returns>
        <see cref="T:System.Web.Http.Filters.IFilterProvider" /> オブジェクトのコレクションを返します。</returns>
      <param name="services">サービス コンテナー。</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetHostBufferPolicySelector(System.Web.Http.Controllers.ServicesContainer)">
      <summary>
        <see cref="T:System.Web.Http.Hosting.IHostBufferPolicySelector" /> サービスを取得します。</summary>
      <returns>
        <see cref="T:System.Web.Http.Hosting.IHostBufferPolicySelector" /> インスタンスを返します。</returns>
      <param name="services">サービス コンテナー。</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetHttpControllerActivator(System.Web.Http.Controllers.ServicesContainer)">
      <summary>
        <see cref="T:System.Web.Http.Dispatcher.IHttpControllerActivator" /> サービスを取得します。</summary>
      <returns>
        <see cref="T:System.Web.Http.Dispatcher.IHttpControllerActivator" /> のインスタンスを返します。インスタンスが登録されていない場合は null を返します。</returns>
      <param name="services">サービス コンテナー。</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetHttpControllerSelector(System.Web.Http.Controllers.ServicesContainer)">
      <summary>
        <see cref="T:System.Web.Http.Dispatcher.IHttpControllerSelector" /> サービスを取得します。</summary>
      <returns>
        <see cref="T:System.Web.Http.Dispatcher.IHttpControllerSelector" /> インスタンスを返します。</returns>
      <param name="services">サービス コンテナー。</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetHttpControllerTypeResolver(System.Web.Http.Controllers.ServicesContainer)">
      <summary>
        <see cref="T:System.Web.Http.Dispatcher.IHttpControllerTypeResolver" /> サービスを取得します。</summary>
      <returns>
        <see cref="T:System.Web.Http.Dispatcher.IHttpControllerTypeResolver" /> インスタンスを返します。</returns>
      <param name="services">サービス コンテナー。</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetModelBinderProviders(System.Web.Http.Controllers.ServicesContainer)">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.ModelBinderProvider" /> コレクションを取得します。</summary>
      <returns>
        <see cref="T:System.Web.Http.ModelBinding.ModelBinderProvider" /> オブジェクトのコレクションを返します。</returns>
      <param name="services">サービス コンテナー。</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetModelMetadataProvider(System.Web.Http.Controllers.ServicesContainer)">
      <summary>
        <see cref="T:System.Web.Http.Metadata.ModelMetadataProvider" /> サービスを取得します。</summary>
      <returns>
        <see cref="T:System.Web.Http.Metadata.ModelMetadataProvider" /> インスタンスを返します。</returns>
      <param name="services">サービス コンテナー。</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetModelValidatorProviders(System.Web.Http.Controllers.ServicesContainer)">
      <summary>
        <see cref="T:System.Web.Http.Validation.ModelValidatorProvider" /> コレクションを取得します。</summary>
      <returns>
        <see cref="T:System.Web.Http.Validation.ModelValidatorProvider" /> オブジェクトのコレクションを返します。</returns>
      <param name="services">サービス コンテナー。</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetTraceManager(System.Web.Http.Controllers.ServicesContainer)">
      <summary>
        <see cref="T:System.Web.Http.Tracing.ITraceManager" /> サービスを取得します。</summary>
      <returns>
        <see cref="T:System.Web.Http.Tracing.ITraceManager" /> インスタンスを返します。</returns>
      <param name="services">サービス コンテナー。</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetTraceWriter(System.Web.Http.Controllers.ServicesContainer)">
      <summary>
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" /> サービスを取得します。</summary>
      <returns>
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" /> インスタンスを返します。</returns>
      <param name="services">サービス コンテナー。</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetValueProviderFactories(System.Web.Http.Controllers.ServicesContainer)">
      <summary>
        <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" /> コレクションを取得します。</summary>
      <returns>
        <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" /> オブジェクトのコレクションを返します。</returns>
      <param name="services">サービス コンテナー。</param>
    </member>
    <member name="T:System.Web.Http.SingleResult">
      <summary>0 または 1 つのエンティティを含む <see cref="T:System.Linq.IQueryable" /> を表します。System.Web.Http.OData または System.Web.OData 名前空間の [EnableQuery] と共に使用します。</summary>
    </member>
    <member name="M:System.Web.Http.SingleResult.#ctor(System.Linq.IQueryable)">
      <summary>
        <see cref="T:System.Web.Http.SingleResult" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="queryable">0 または 1 つのエンティティを含む <see cref="T:System.Linq.IQueryable" />。</param>
    </member>
    <member name="M:System.Web.Http.SingleResult.Create``1(System.Linq.IQueryable{``0})">
      <summary>
        <see cref="T:System.Linq.IQueryable`1" /> から <see cref="T:System.Web.Http.SingleResult`1" /> を作成します。<see cref="T:System.Web.Http.SingleResult`1" /> オブジェクトをインスタンス化するためのヘルパー メソッド。型 <paramref name="T" /> を明示的に指定する必要はありません。</summary>
      <returns>作成された <see cref="T:System.Web.Http.SingleResult`1" />。</returns>
      <param name="queryable">0 または 1 つのエンティティを含む <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="T">データ ソース内のデータの種類。</typeparam>
    </member>
    <member name="P:System.Web.Http.SingleResult.Queryable">
      <summary>0 または 1 つのエンティティを含む <see cref="T:System.Linq.IQueryable" />。</summary>
    </member>
    <member name="T:System.Web.Http.SingleResult`1">
      <summary>0 または 1 つのエンティティを含む <see cref="T:System.Linq.IQueryable`1" /> を表します。System.Web.Http.OData または System.Web.OData 名前空間の [EnableQuery] と共に使用します。</summary>
      <typeparam name="T">データ ソース内のデータの種類。</typeparam>
    </member>
    <member name="M:System.Web.Http.SingleResult`1.#ctor(System.Linq.IQueryable{`0})">
      <summary>
        <see cref="T:System.Web.Http.SingleResult`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="queryable">0 または 1 つのエンティティを含む <see cref="T:System.Linq.IQueryable`1" />。</param>
    </member>
    <member name="P:System.Web.Http.SingleResult`1.Queryable">
      <summary>0 または 1 つのエンティティを含む <see cref="T:System.Linq.IQueryable`1" />。</summary>
    </member>
    <member name="T:System.Web.Http.Batch.BatchExecutionOrder">
      <summary> バッチ要求の実行順序を定義します。</summary>
    </member>
    <member name="F:System.Web.Http.Batch.BatchExecutionOrder.NonSequential">
      <summary> バッチ要求を非連続的に実行します。 </summary>
    </member>
    <member name="F:System.Web.Http.Batch.BatchExecutionOrder.Sequential">
      <summary> バッチ要求を連続して実行します。</summary>
    </member>
    <member name="T:System.Web.Http.Batch.BatchHttpRequestMessageExtensions">
      <summary>
        <see cref="T:System.Net.Http.HttpRequestMessage" /> クラスの拡張メソッドを提供します。</summary>
    </member>
    <member name="M:System.Web.Http.Batch.BatchHttpRequestMessageExtensions.CopyBatchRequestProperties(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpRequestMessage)">
      <summary> 別の <see cref="T:System.Net.Http.HttpRequestMessage" /> からプロパティをコピーします。</summary>
      <param name="subRequest">サブ要求。</param>
      <param name="batchRequest">コピーするプロパティを含むバッチ要求。</param>
    </member>
    <member name="T:System.Web.Http.Batch.DefaultHttpBatchHandler">
      <summary>HTTP 要求/応答メッセージを MIME マルチパートとしてエンコードする <see cref="T:System.Web.Http.Batch.HttpBatchHandler" /> の既定の実装を表します。</summary>
    </member>
    <member name="M:System.Web.Http.Batch.DefaultHttpBatchHandler.#ctor(System.Web.Http.HttpServer)">
      <summary>
        <see cref="T:System.Web.Http.Batch.DefaultHttpBatchHandler" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="httpServer">個別のバッチ要求を処理するための <see cref="T:System.Web.Http.HttpServer" />。</param>
    </member>
    <member name="M:System.Web.Http.Batch.DefaultHttpBatchHandler.CreateResponseMessageAsync(System.Collections.Generic.IList{System.Net.Http.HttpResponseMessage},System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>バッチ応答メッセージを作成します。</summary>
      <returns>バッチ応答メッセージ。</returns>
      <param name="responses">バッチ要求の応答。</param>
      <param name="request">すべてのバッチ要求を含む元の要求。</param>
      <param name="cancellationToken">キャンセル トークン。</param>
    </member>
    <member name="M:System.Web.Http.Batch.DefaultHttpBatchHandler.ExecuteRequestMessagesAsync(System.Collections.Generic.IEnumerable{System.Net.Http.HttpRequestMessage},System.Threading.CancellationToken)">
      <summary>バッチ要求メッセージを実行します。</summary>
      <returns>バッチ要求の <see cref="T:System.Net.Http.HttpResponseMessage" /> のコレクション。</returns>
      <param name="requests">バッチ要求メッセージのコレクション。</param>
      <param name="cancellationToken">キャンセル トークン。</param>
    </member>
    <member name="P:System.Web.Http.Batch.DefaultHttpBatchHandler.ExecutionOrder">
      <summary>バッチ要求の実行順序を取得または設定します。既定の実行順序は順次です。</summary>
      <returns>バッチ要求の実行順序。既定の実行順序は順次です。</returns>
    </member>
    <member name="M:System.Web.Http.Batch.DefaultHttpBatchHandler.ParseBatchRequestsAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>受け取ったバッチ要求を、要求メッセージのコレクションに変換します。</summary>
      <returns>
        <see cref="T:System.Net.Http.HttpRequestMessage" /> のコレクション。</returns>
      <param name="request">バッチ要求メッセージを含む要求。</param>
      <param name="cancellationToken">キャンセル トークン。</param>
    </member>
    <member name="M:System.Web.Http.Batch.DefaultHttpBatchHandler.ProcessBatchAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>バッチ要求を処理します。</summary>
      <returns>操作の結果。</returns>
      <param name="request">バッチ要求。</param>
      <param name="cancellationToken">キャンセル トークン。</param>
    </member>
    <member name="P:System.Web.Http.Batch.DefaultHttpBatchHandler.SupportedContentTypes">
      <summary>バッチ要求でサポートされるコンテンツの種類を取得します。</summary>
      <returns>バッチ要求でサポートされるコンテンツの種類。</returns>
    </member>
    <member name="M:System.Web.Http.Batch.DefaultHttpBatchHandler.ValidateRequest(System.Net.Http.HttpRequestMessage)">
      <summary>バッチ要求メッセージを含む受信要求を検証します。</summary>
      <param name="request">バッチ要求メッセージを含む要求。</param>
    </member>
    <member name="T:System.Web.Http.Batch.HttpBatchHandler">
      <summary>HTTP バッチ要求を処理するための抽象型を定義します。</summary>
    </member>
    <member name="M:System.Web.Http.Batch.HttpBatchHandler.#ctor(System.Web.Http.HttpServer)">
      <summary>
        <see cref="T:System.Web.Http.Batch.HttpBatchHandler" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="httpServer">個別のバッチ要求を処理するための <see cref="T:System.Web.Http.HttpServer" />。</param>
    </member>
    <member name="P:System.Web.Http.Batch.HttpBatchHandler.Invoker">
      <summary>
        <see cref="T:System.Web.Http.HttpServer" /> にバッチ要求を送信する呼び出し元を取得します。</summary>
      <returns>
        <see cref="T:System.Web.Http.HttpServer" /> にバッチ要求を送信する呼び出し元。</returns>
    </member>
    <member name="M:System.Web.Http.Batch.HttpBatchHandler.ProcessBatchAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>受け取ったバッチ要求を単一の <see cref="T:System.Net.Http.HttpRequestMessage" /> として処理します。</summary>
      <returns>バッチ応答。</returns>
      <param name="request">バッチ要求。</param>
      <param name="cancellationToken">キャンセル トークン。</param>
    </member>
    <member name="M:System.Web.Http.Batch.HttpBatchHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>バッチ ハンドラーを非同期に送信します。</summary>
      <returns>操作の結果。</returns>
      <param name="request">送信要求。</param>
      <param name="cancellationToken">キャンセル トークン。</param>
    </member>
    <member name="T:System.Web.Http.Controllers.ApiControllerActionInvoker">
      <summary>コントローラーのアクション メソッドを呼び出します。</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ApiControllerActionInvoker.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Controllers.ApiControllerActionInvoker" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ApiControllerActionInvoker.InvokeActionAsync(System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
      <summary>指定されたコントローラー コンテキストを使用して、指定されたアクションを非同期に呼び出します。</summary>
      <returns>呼び出されたアクション。</returns>
      <param name="actionContext">コントローラー コンテキスト。</param>
      <param name="cancellationToken">キャンセル トークン。</param>
    </member>
    <member name="T:System.Web.Http.Controllers.ApiControllerActionSelector">
      <summary>リフレクション ベースのアクション セレクターを表します。</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ApiControllerActionSelector.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Controllers.ApiControllerActionSelector" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ApiControllerActionSelector.GetActionMapping(System.Web.Http.Controllers.HttpControllerDescriptor)">
      <summary>
        <see cref="T:System.Web.Http.Controllers.ApiControllerActionSelector" /> のアクション マッピングを取得します。</summary>
      <returns>アクション マッピング。</returns>
      <param name="controllerDescriptor">コントローラーを説明する情報。</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ApiControllerActionSelector.SelectAction(System.Web.Http.Controllers.HttpControllerContext)">
      <summary>
        <see cref="T:System.Web.Http.Controllers.ApiControllerActionSelector" /> のアクションを選択します。</summary>
      <returns>選択されたアクション。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
    </member>
    <member name="T:System.Web.Http.Controllers.ControllerServices">
      <summary> コントローラーに固有となることができるサービスのコンテナーを表します。このコンテナーは、親 <see cref="T:System.Web.Http.Controllers.ServicesContainer" /> からのサービスを追跡します。コントローラーはここにサービスを設定するか、よりグローバルなサービスのセットを対象にできます。</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ControllerServices.#ctor(System.Web.Http.Controllers.ServicesContainer)">
      <summary>
        <see cref="T:System.Web.Http.Controllers.ControllerServices" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="parent">親サービス コンテナー。</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ControllerServices.ClearSingle(System.Type)">
      <summary>既定のサービスから単一インスタンスのサービスを削除します。</summary>
      <param name="serviceType">サービスの種類。</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ControllerServices.GetService(System.Type)">
      <summary>指定された種類のサービスを取得します。</summary>
      <returns>サービスの最初のインスタンス。サービスが見つからない場合は null。</returns>
      <param name="serviceType">サービスの種類。</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ControllerServices.GetServiceInstances(System.Type)">
      <summary>指定されたサービスの種類のサービス オブジェクトの一覧を取得し、そのサービスの種類を検証します。</summary>
      <returns>指定された種類のサービス オブジェクトの一覧。</returns>
      <param name="serviceType">サービスの種類。</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ControllerServices.GetServices(System.Type)">
      <summary>指定されたサービスの種類のサービス オブジェクトの一覧を取得します。</summary>
      <returns>指定された種類のサービス オブジェクトの一覧。サービスが見つからない場合は空の一覧。</returns>
      <param name="serviceType">サービスの種類。</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ControllerServices.IsSingleService(System.Type)">
      <summary>サービスの種類が単一インスタンスかどうかを問い合わせます。</summary>
      <returns>サービスの種類のインスタンス数が最大で 1 の場合は true。サービスの種類が複数のインスタンスをサポートしている場合は false。</returns>
      <param name="serviceType">サービスの種類。</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ControllerServices.ReplaceSingle(System.Type,System.Object)">
      <summary>単一インスタンスのサービス オブジェクトを置き換えます。</summary>
      <param name="serviceType">サービスの種類。</param>
      <param name="service">前のインスタンスを置き換えるサービス オブジェクト。</param>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpActionBinding">
      <summary>バイディングがどのように発生するかを説明し、実際にはバインドしません。</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionBinding.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Controllers.HttpActionBinding" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionBinding.#ctor(System.Web.Http.Controllers.HttpActionDescriptor,System.Web.Http.Controllers.HttpParameterBinding[])">
      <summary>
        <see cref="T:System.Web.Http.Controllers.HttpActionBinding" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="actionDescriptor">このバインディングの対象となるアクションへの戻りポインター。</param>
      <param name="bindings">各パラメーターの同期バインディング。</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionBinding.ActionDescriptor">
      <summary>このバインディングの対象となるアクションへの戻りポインターを取得または設定します。</summary>
      <returns>このバインディングの対象となるアクションへの戻りポインター。</returns>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionBinding.ExecuteBindingAsync(System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
      <summary>指定された要求コンテキストのバインディングを非同期に実行します。</summary>
      <returns>バインディングが完了したときに通知されるタスク。</returns>
      <param name="actionContext">バインディングのアクション コンテキスト。これには、設定されるパラメーター ディクショナリが含まれます。</param>
      <param name="cancellationToken">バインディング操作を取り消すための取り消しトークン。または、バインダーがこのトークンにパラメーターをバインドできます。</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionBinding.ParameterBindings">
      <summary>各パラメーターの同期バインディングを取得または設定します。</summary>
      <returns>各パラメーターの同期バインディング。</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpActionContext">
      <summary>実行するアクションに関する情報を格納します。</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionContext.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Controllers.HttpActionContext" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionContext.#ctor(System.Web.Http.Controllers.HttpControllerContext,System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary>
        <see cref="T:System.Web.Http.Controllers.HttpActionContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="actionDescriptor">アクション記述子。</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionContext.ActionArguments">
      <summary>アクション引数の一覧を取得します。</summary>
      <returns>アクション引数の一覧。</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionContext.ActionDescriptor">
      <summary>アクションのコンテキストのアクション記述子を取得または設定します。</summary>
      <returns>アクション記述子。</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionContext.ControllerContext">
      <summary>コントローラー コンテキストを取得または設定します。</summary>
      <returns>コントローラー コンテキスト。</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionContext.ModelState">
      <summary>コンテキストのモデル状態ディクショナリを取得します。</summary>
      <returns>モデル状態ディクショナリ。</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionContext.Request">
      <summary>アクション コンテキストの要求メッセージを取得します。</summary>
      <returns>アクション コンテキストの要求メッセージ。</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionContext.RequestContext">
      <summary>現在の要求コンテキストを取得します。</summary>
      <returns>現在の要求コンテキスト。</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionContext.Response">
      <summary>アクション コンテキストの応答メッセージを取得または設定します。</summary>
      <returns>アクション コンテキストの応答メッセージ。</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpActionContextExtensions">
      <summary>
        <see cref="T:System.Web.Http.Controllers.HttpActionContext" /> の拡張メソッドを格納します。</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionContextExtensions.Bind(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)"></member>
    <member name="M:System.Web.Http.Controllers.HttpActionContextExtensions.Bind(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext,System.Collections.Generic.IEnumerable{System.Web.Http.ModelBinding.IModelBinder})"></member>
    <member name="M:System.Web.Http.Controllers.HttpActionContextExtensions.GetMetadataProvider(System.Web.Http.Controllers.HttpActionContext)"></member>
    <member name="M:System.Web.Http.Controllers.HttpActionContextExtensions.GetValidatorProviders(System.Web.Http.Controllers.HttpActionContext)"></member>
    <member name="M:System.Web.Http.Controllers.HttpActionContextExtensions.GetValidators(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.Metadata.ModelMetadata)"></member>
    <member name="M:System.Web.Http.Controllers.HttpActionContextExtensions.TryBindStrongModel``1(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext,System.String,System.Web.Http.Metadata.ModelMetadataProvider,``0@)">
      <typeparam name="TModel"></typeparam>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpActionDescriptor">
      <summary>アクション メソッドに関する情報を提供します。</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionDescriptor.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionDescriptor.#ctor(System.Web.Http.Controllers.HttpControllerDescriptor)">
      <summary>アクションのコントローラーを説明する指定された情報を使用して <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="controllerDescriptor">アクションのコントローラーを説明する情報。</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionDescriptor.ActionBinding">
      <summary>アクションを説明するバインディングを取得または設定します。</summary>
      <returns>アクションを説明するバインディング。</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionDescriptor.ActionName">
      <summary>アクションの名前を取得します。</summary>
      <returns>アクションの名前。</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionDescriptor.Configuration">
      <summary>アクション構成を取得または設定します。</summary>
      <returns>アクション構成。</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionDescriptor.ControllerDescriptor">
      <summary>アクションのコントローラーを説明する情報を取得します。</summary>
      <returns>アクションのコントローラーを説明する情報。</returns>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionDescriptor.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
      <summary>記述されたアクションを実行し、完了後にアクションの戻り値を格納する <see cref="T:System.Threading.Tasks.Task`1" /> を返します。</summary>
      <returns>完了後にアクションの戻り値を格納する <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="arguments">引数の一覧。</param>
      <param name="cancellationToken">キャンセル トークン。</param>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionDescriptor.GetCustomAttributes``1">
      <summary>アクション記述子に関連付けられたカスタム属性を返します。</summary>
      <returns>アクション識別子に関連付けられたカスタム属性。</returns>
      <typeparam name="T">アクション記述子。</typeparam>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionDescriptor.GetCustomAttributes``1(System.Boolean)">
      <summary>アクションのカスタム属性を取得します。</summary>
      <returns>このアクションに適用されるカスタム属性のコレクション。</returns>
      <param name="inherit">このアクションの継承チェーンを検索して属性を見つける場合は true、それ以外の場合は false。</param>
      <typeparam name="T">検索する属性の型。</typeparam>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionDescriptor.GetFilterPipeline">
      <summary>指定された構成とアクションのフィルターを取得します。</summary>
      <returns>指定された構成とアクションのフィルター。</returns>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionDescriptor.GetFilters">
      <summary>アクション記述子のフィルターを取得します。</summary>
      <returns>アクション記述子のフィルター。</returns>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionDescriptor.GetParameters">
      <summary>アクション記述子のパラメーターを取得します。</summary>
      <returns>アクション記述子のパラメーター。</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionDescriptor.Properties">
      <summary>このインスタンスに関連付けられたプロパティを取得します。</summary>
      <returns>このインスタンスに関連付けられたプロパティ。</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionDescriptor.ResultConverter">
      <summary>ExecuteAsync(HttpControllerContext, IDictionaryString, Object) を呼び出した結果を <see cref="T:System.Net.Http.HttpResponseMessage" /> のインスタンスに正しく変換するためのコンバーターを取得します。</summary>
      <returns>アクション結果のコンバーター。</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionDescriptor.ReturnType">
      <summary>記述子の戻り型を取得します。</summary>
      <returns>記述子の戻り型。</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionDescriptor.SupportedHttpMethods">
      <summary>記述子でサポートされる HTTP メソッドのコレクションを取得します。</summary>
      <returns>記述子でサポートされる HTTP メソッドのコレクション。</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpControllerContext">
      <summary>1 つの HTTP 操作の情報を格納します。</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpControllerContext.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Controllers.HttpControllerContext" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpControllerContext.#ctor(System.Web.Http.Controllers.HttpRequestContext,System.Net.Http.HttpRequestMessage,System.Web.Http.Controllers.HttpControllerDescriptor,System.Web.Http.Controllers.IHttpController)">
      <summary>
        <see cref="T:System.Web.Http.Controllers.HttpControllerContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="requestContext">要求コンテキスト。</param>
      <param name="request">HTTP 要求。</param>
      <param name="controllerDescriptor">コントローラー記述子。</param>
      <param name="controller">コントローラー。</param>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpControllerContext.#ctor(System.Web.Http.HttpConfiguration,System.Web.Http.Routing.IHttpRouteData,System.Net.Http.HttpRequestMessage)">
      <summary>
        <see cref="T:System.Web.Http.Controllers.HttpControllerContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="configuration">構成。</param>
      <param name="routeData">ルート データ。</param>
      <param name="request">要求。</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerContext.Configuration">
      <summary>構成を取得または設定します。</summary>
      <returns>構成。</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerContext.Controller">
      <summary>HTTP コントローラーを取得または設定します。</summary>
      <returns>HTTP コントローラー。</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerContext.ControllerDescriptor">
      <summary>コントローラー記述子を取得または設定します。</summary>
      <returns>コントローラー記述子。</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerContext.Request">
      <summary>要求を取得または設定します。</summary>
      <returns>要求。</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerContext.RequestContext">
      <summary>要求コンテキストを取得または設定します。</summary>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerContext.RouteData">
      <summary>ルート データを取得または設定します。</summary>
      <returns>ルート データ。</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpControllerDescriptor">
      <summary>HTTP コントローラーを説明する情報を表します。</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpControllerDescriptor.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpControllerDescriptor.#ctor(System.Web.Http.HttpConfiguration,System.String,System.Type)">
      <summary>
        <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="configuration">構成。</param>
      <param name="controllerName">コントローラー名。</param>
      <param name="controllerType">コントローラーの種類。</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerDescriptor.Configuration">
      <summary>コントローラーに関連付けられた構成を取得または設定します。</summary>
      <returns>コントローラーに関連付けられた構成。</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerDescriptor.ControllerName">
      <summary>コントローラーの名前を取得または設定します。</summary>
      <returns>コントローラーの名前。</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerDescriptor.ControllerType">
      <summary>コントローラーの型を取得または設定します。</summary>
      <returns>コントローラーの種類。</returns>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpControllerDescriptor.CreateController(System.Net.Http.HttpRequestMessage)">
      <summary>指定された <see cref="T:System.Net.Http.HttpRequestMessage" /> のコントローラー インスタンスを作成します。</summary>
      <returns>作成されたコントローラー インスタンス。</returns>
      <param name="request">要求メッセージ。</param>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpControllerDescriptor.GetCustomAttributes``1">
      <summary>コントローラーのカスタム属性のコレクションを取得します。</summary>
      <returns>カスタム属性のコレクション。</returns>
      <typeparam name="T">オブジェクトの型。</typeparam>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpControllerDescriptor.GetCustomAttributes``1(System.Boolean)">
      <summary> この記述子のコントローラーの &lt;typeparamref name="T" /&gt; に割り当てることができる属性のコレクションを返します。</summary>
      <returns>このコントローラーに関連付けられた属性のコレクション。</returns>
      <param name="inherit">このコントローラーの継承チェーンを検索して属性を見つける場合は true、それ以外の場合は false。</param>
      <typeparam name="T">属性のコレクションをフィルターするために使用されます。すべての属性を取得するには値 <see cref="T:System.Object" /> を使用します。</typeparam>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpControllerDescriptor.GetFilters">
      <summary>コントローラーに関連付けられたフィルターのコレクションを返します。</summary>
      <returns>コントローラーに関連付けられたフィルターのコレクション。</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerDescriptor.Properties">
      <summary>このインスタンスに関連付けられたプロパティを取得します。</summary>
      <returns>このインスタンスに関連付けられたプロパティ。</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpControllerSettings">
      <summary>HTTP コントローラーの設定が含まれます。</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpControllerSettings.#ctor(System.Web.Http.HttpConfiguration)">
      <summary>
        <see cref="T:System.Web.Http.Controllers.HttpControllerSettings" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="configuration">インスタンスを初期化するために使用される構成オブジェクト。</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerSettings.Formatters">
      <summary>コントローラーの <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> インスタンスのコレクションを取得します。</summary>
      <returns>
        <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> インスタンスのコレクション。</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerSettings.ParameterBindingRules">
      <summary>コントローラーのパラメーター バインディング関数のコレクションを取得します。</summary>
      <returns>パラメーター バインディング関数のコレクション。</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerSettings.Services">
      <summary>コントローラーのサービス インスタンスのコレクションを取得します。</summary>
      <returns>サービス インスタンスのコレクション。</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpParameterBinding">
      <summary> パラメーターをバインドする方法を説明します。バインディングは (記述子に基づいて) 静的である必要があり、複数の要求間で共有できます。</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpParameterBinding.#ctor(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>
        <see cref="T:System.Web.Http.Controllers.HttpParameterBinding" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="descriptor">パラメーターを説明する <see cref="T:System.Web.Http.Controllers.HttpParameterDescriptor" />。</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterBinding.Descriptor">
      <summary>このインスタンスを初期化するために使用された <see cref="T:System.Web.Http.Controllers.HttpParameterDescriptor" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Web.Http.Controllers.HttpParameterDescriptor" /> インスタンス。</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterBinding.ErrorMessage">
      <summary>バインディングが無効の場合は、バインディング エラーを説明するエラー メッセージを取得します。</summary>
      <returns>エラー メッセージ。バインディングに成功した場合、値は null です。</returns>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpParameterBinding.ExecuteBindingAsync(System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
      <summary>指定された要求のバインディングを非同期に実行します。</summary>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
      <param name="metadataProvider">検証に使用するメタデータ プロバイダー。</param>
      <param name="actionContext">バインディングのアクション コンテキスト。アクション コンテキストには、パラメーターが設定されるパラメーター ディクショナリが含まれます。</param>
      <param name="cancellationToken">バインディング操作を取り消すための取り消しトークン。</param>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpParameterBinding.GetValue(System.Web.Http.Controllers.HttpActionContext)">
      <summary> アクション コンテキストの引数ディクショナリからパラメーター値を取得します。</summary>
      <returns>指定されたアクション コンテキストでのこのパラメーターの値。パラメーターが設定されていない場合は null。</returns>
      <param name="actionContext">アクション コンテキスト。</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterBinding.IsValid">
      <summary>バインディングが成功したかどうかを示す値を取得します。</summary>
      <returns>バインディングが成功した場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpParameterBinding.SetValue(System.Web.Http.Controllers.HttpActionContext,System.Object)">
      <summary>アクション コンテキストの引数ディクショナリで、このパラメーター バインディングの結果を設定します。</summary>
      <param name="actionContext">アクション コンテキスト。</param>
      <param name="value">パラメーター値。</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterBinding.WillReadBody">
      <summary>この <see cref="T:System.Web.Http.Controllers.HttpParameterBinding" /> インスタンスが HTTP メッセージのエンティティ ボディを読み取るかどうかを示す値を返します。</summary>
      <returns>この <see cref="T:System.Web.Http.Controllers.HttpParameterBinding" /> がエンティティ ボディを読み取る場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpParameterDescriptor">
      <summary>HTTP パラメーター記述子を表します。</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpParameterDescriptor.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Controllers.HttpParameterDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpParameterDescriptor.#ctor(System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary>
        <see cref="T:System.Web.Http.Controllers.HttpParameterDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="actionDescriptor">アクション記述子。</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.ActionDescriptor">
      <summary>アクション記述子を取得または設定します。</summary>
      <returns>アクション記述子。</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.Configuration">
      <summary>
        <see cref="T:System.Web.Http.Controllers.HttpParameterDescriptor" /> の <see cref="T:System.Web.Http.HttpConfiguration" /> を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Web.Http.Controllers.HttpParameterDescriptor" /> の <see cref="T:System.Web.Http.HttpConfiguration" />。</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.DefaultValue">
      <summary>パラメーターの既定値を取得します。</summary>
      <returns>パラメーターの既定値。</returns>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpParameterDescriptor.GetCustomAttributes``1">
      <summary>パラメーターからカスタム属性のコレクションを取得します。</summary>
      <returns>パラメーターからのカスタム属性のコレクション。</returns>
      <typeparam name="T">カスタム属性の型。</typeparam>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.IsOptional">
      <summary>パラメーターがオプションかどうかを示す値を取得します。</summary>
      <returns>パラメーターがオプションである場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.ParameterBinderAttribute">
      <summary>パラメーター バインディング属性を取得または設定します。</summary>
      <returns>パラメーター バインディング属性。</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.ParameterName">
      <summary>パラメーターの名前を取得します。</summary>
      <returns>パラメーターの名前。</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.ParameterType">
      <summary>パラメーターの型を取得します。</summary>
      <returns>パラメーターの型。</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.Prefix">
      <summary>このパラメーターのプレフィックスを取得します。</summary>
      <returns>このパラメーターのプレフィックス。</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.Properties">
      <summary>このパラメーターのプロパティを取得します。</summary>
      <returns>このパラメーターのプロパティ。</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpRequestContext">
      <summary>要求に関連付けられたコンテキストを表します。</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpRequestContext.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Controllers.HttpRequestContext" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpRequestContext.ClientCertificate">
      <summary>クライアント証明書を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> を返します。</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpRequestContext.Configuration">
      <summary>構成を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Web.Http.HttpConfiguration" /> を返します。</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpRequestContext.IncludeErrorDetail">
      <summary>例外メッセージやスタック トレースなどのエラー詳細を、この要求の応答に含めるかどうかを示す値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Boolean" /> を返します。</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpRequestContext.IsLocal">
      <summary>要求元がローカル アドレスであるかどうかを示す値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Boolean" /> を返します。</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpRequestContext.Principal">
      <summary>プリンシパルを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Security.Principal.IPrincipal" /> を返します。</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpRequestContext.RouteData">
      <summary>ルート データを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Web.Http.Routing.IHttpRouteData" /> を返します。</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpRequestContext.Url">
      <summary>他の API に対して URL を生成するために使用されるファクトリを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Web.Http.Routing.UrlHelper" /> を返します。</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpRequestContext.VirtualPathRoot">
      <summary>仮想パス ルートを取得または設定します。</summary>
      <returns>
        <see cref="T:System.String" /> を返します。</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.IActionHttpMethodProvider"></member>
    <member name="P:System.Web.Http.Controllers.IActionHttpMethodProvider.HttpMethods"></member>
    <member name="T:System.Web.Http.Controllers.IActionResultConverter">
      <summary> &lt;see cref="M:System.Web.Http.Controllers.HttpActionDescriptor.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object})" /&gt; から返されたアクションの結果を受け取り、<see cref="T:System.Net.Http.HttpResponseMessage" /> のインスタンスに変換する変換ルーチン用のコントラクト。</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.IActionResultConverter.Convert(System.Web.Http.Controllers.HttpControllerContext,System.Object)">
      <summary>指定された <see cref="T:System.Web.Http.Controllers.IActionResultConverter" /> オブジェクトを別のオブジェクトに変換します。</summary>
      <returns>変換されたオブジェクト。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="actionResult">アクションの結果。</param>
    </member>
    <member name="T:System.Web.Http.Controllers.IActionValueBinder">
      <summary>パラメーター値に関連付けられたアクション バインディングの取得メソッドを定義します。</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.IActionValueBinder.GetBinding(System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary>
        <see cref="T:System.Web.Http.Controllers.HttpActionBinding" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Web.Http.Controllers.HttpActionBinding" /> オブジェクト。</returns>
      <param name="actionDescriptor">アクション記述子。</param>
    </member>
    <member name="T:System.Web.Http.Controllers.IControllerConfiguration">
      <summary> コントローラーがこのインターフェイスと属性で装飾されている場合は、コントローラー設定を初期化するために呼び出されます。</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.IControllerConfiguration.Initialize(System.Web.Http.Controllers.HttpControllerSettings,System.Web.Http.Controllers.HttpControllerDescriptor)">
      <summary> このコントローラー記述子のコントローラーごとのオーバーライドを設定するために呼び出されるコールバック。</summary>
      <param name="controllerSettings">初期化するコントローラー設定。</param>
      <param name="controllerDescriptor">コントローラー記述子。<see cref="T:System.Web.Http.Controllers.IControllerConfiguration" /> が継承されている場合は、<see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> を、派生したコントローラーの種類に関連付けることができます。</param>
    </member>
    <member name="T:System.Web.Http.Controllers.IHttpActionInvoker">
      <summary>HTTP 操作を呼び出すために使用されるメソッドを含みます。</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.IHttpActionInvoker.InvokeActionAsync(System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
      <summary>HTTP 操作を非同期に実行します。</summary>
      <returns>新しく開始されたタスク。</returns>
      <param name="actionContext">実行コンテキスト。</param>
      <param name="cancellationToken">HTTP 操作に割り当てられたキャンセル トークン。</param>
    </member>
    <member name="T:System.Web.Http.Controllers.IHttpActionSelector">
      <summary>アクション メソッドを選択するロジックが含まれます。</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.IHttpActionSelector.GetActionMapping(System.Web.Http.Controllers.HttpControllerDescriptor)">
      <summary>セレクターが選択できるすべての <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor" /> の、アクション文字列によってキーが入力されたマップを返します。これは、コントローラーで使用できるすべてのアクションを検出するために、主に <see cref="T:System.Web.Http.Description.IApiExplorer" /> によって呼び出されます。</summary>
      <returns>セレクターが選択できる <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor" /> のマップ。正しく定義された <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor" /> のマッピングがセレクターにない場合は null。</returns>
      <param name="controllerDescriptor">コントローラー記述子。</param>
    </member>
    <member name="M:System.Web.Http.Controllers.IHttpActionSelector.SelectAction(System.Web.Http.Controllers.HttpControllerContext)">
      <summary>コントローラーのアクションを選択します。</summary>
      <returns>コントローラーのアクション。</returns>
      <param name="controllerContext">コントローラーのコンテキスト。</param>
    </member>
    <member name="T:System.Web.Http.Controllers.IHttpController">
      <summary>HTTP コントローラーを表します。</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.IHttpController.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Threading.CancellationToken)">
      <summary>同期のコントローラーを実行します。</summary>
      <returns>コントローラー。</returns>
      <param name="controllerContext">テスト コントローラーの現在のコンテキスト。</param>
      <param name="cancellationToken">操作を取り消す通知。</param>
    </member>
    <member name="T:System.Web.Http.Controllers.ParameterBindingExtensions">
      <summary>
        <see cref="T:System.Web.Http.Controllers.HttpParameterBinding" /> の拡張メソッドを定義します。</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindAsError(System.Web.Http.Controllers.HttpParameterDescriptor,System.String)">
      <summary>エラーとなるパラメーターをバインドします。</summary>
      <returns>HTTP パラメーター バインディング オブジェクト。</returns>
      <param name="parameter">バインドするパラメーターを説明するパラメーター記述子。</param>
      <param name="message">バインドの失敗理由を説明するエラー メッセージ。</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithAttribute(System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.ParameterBindingAttribute)">
      <summary>宣言で属性が指定されたものとしてパラメーターをバインドします。</summary>
      <returns>HTTP パラメーター バインディング オブジェクト。</returns>
      <param name="parameter">バインディング対象のパラメーター。</param>
      <param name="attribute">バインディングを説明する属性。</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithFormatter(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>HTTP ボディ コンテンツを解析して、パラメーターをバインドします。</summary>
      <returns>HTTP パラメーター バインディング オブジェクト。</returns>
      <param name="parameter">バインドするパラメーターを説明するパラメーター記述子。</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithFormatter(System.Web.Http.Controllers.HttpParameterDescriptor,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>HTTP ボディ コンテンツを解析して、パラメーターをバインドします。</summary>
      <returns>HTTP パラメーター バインディング オブジェクト。</returns>
      <param name="parameter">バインドするパラメーターを説明するパラメーター記述子。</param>
      <param name="formatters">オブジェクトに対するパラメーターのシリアル化に適したフォーマッタの選択肢を提供するフォーマッタの一覧。</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithFormatter(System.Web.Http.Controllers.HttpParameterDescriptor,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Web.Http.Validation.IBodyModelValidator)">
      <summary>HTTP ボディ コンテンツを解析して、パラメーターをバインドします。</summary>
      <returns>HTTP パラメーター バインディング オブジェクト。</returns>
      <param name="parameter">バインドするパラメーターを説明するパラメーター記述子。</param>
      <param name="formatters">オブジェクトに対するパラメーターのシリアル化に適したフォーマッタの選択肢を提供するフォーマッタの一覧。</param>
      <param name="bodyModelValidator">パラメーターの検証に使用されるボディのモデル検証コントロール。</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithFormatter(System.Web.Http.Controllers.HttpParameterDescriptor,System.Net.Http.Formatting.MediaTypeFormatter[])">
      <summary>HTTP ボディ コンテンツを解析して、パラメーターをバインドします。</summary>
      <returns>HTTP パラメーター バインディング オブジェクト。</returns>
      <param name="parameter">バインドするパラメーターを説明するパラメーター記述子。</param>
      <param name="formatters">オブジェクトに対するパラメーターのシリアル化に適したフォーマッタの選択肢を提供するフォーマッタの一覧。</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithModelBinding(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>クエリ文字列を解析して、パラメーターをバインドします。</summary>
      <returns>HTTP パラメーター バインディング オブジェクト。</returns>
      <param name="parameter">バインドするパラメーターを説明するパラメーター記述子。</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithModelBinding(System.Web.Http.Controllers.HttpParameterDescriptor,System.Collections.Generic.IEnumerable{System.Web.Http.ValueProviders.ValueProviderFactory})">
      <summary>クエリ文字列を解析して、パラメーターをバインドします。</summary>
      <returns>HTTP パラメーター バインディング オブジェクト。</returns>
      <param name="parameter">バインドするパラメーターを説明するパラメーター記述子。</param>
      <param name="valueProviderFactories">クエリ文字列パラメーター データを提供する値プロバイダー ファクトリ。</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithModelBinding(System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.ModelBinding.IModelBinder)">
      <summary>クエリ文字列を解析して、パラメーターをバインドします。</summary>
      <returns>HTTP パラメーター バインディング オブジェクト。</returns>
      <param name="parameter">バインドするパラメーターを説明するパラメーター記述子。</param>
      <param name="binder">オブジェクトに対するパラメーターのアセンブルに使用されるモデル バインダー。</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithModelBinding(System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.ModelBinding.IModelBinder,System.Collections.Generic.IEnumerable{System.Web.Http.ValueProviders.ValueProviderFactory})">
      <summary>クエリ文字列を解析して、パラメーターをバインドします。</summary>
      <returns>HTTP パラメーター バインディング オブジェクト。</returns>
      <param name="parameter">バインドするパラメーターを説明するパラメーター記述子。</param>
      <param name="binder">オブジェクトに対するパラメーターのアセンブルに使用されるモデル バインダー。</param>
      <param name="valueProviderFactories">クエリ文字列パラメーター データを提供する値プロバイダー ファクトリ。</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithModelBinding(System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.ValueProviders.ValueProviderFactory[])">
      <summary>クエリ文字列を解析して、パラメーターをバインドします。</summary>
      <returns>HTTP パラメーター バインディング オブジェクト。</returns>
      <param name="parameter">バインドするパラメーターを説明するパラメーター記述子。</param>
      <param name="valueProviderFactories">クエリ文字列パラメーター データを提供する値プロバイダー ファクトリ。</param>
    </member>
    <member name="T:System.Web.Http.Controllers.ReflectedHttpActionDescriptor">
      <summary>リフレクションされた同期または非同期のアクション メソッドを表します。</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Controllers.ReflectedHttpActionDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.#ctor(System.Web.Http.Controllers.HttpControllerDescriptor,System.Reflection.MethodInfo)">
      <summary>指定された記述子およびメソッドの詳細を使用して、<see cref="T:System.Web.Http.Controllers.ReflectedHttpActionDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="controllerDescriptor">コントローラー記述子。</param>
      <param name="methodInfo">アクション メソッド情報。</param>
    </member>
    <member name="P:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.ActionName">
      <summary>アクションの名前を取得します。</summary>
      <returns>アクションの名前。</returns>
    </member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.Equals(System.Object)"></member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
      <summary>記述されたアクションを実行し、完了後にアクションの戻り値を格納する <see cref="T:System.Threading.Tasks.Task`1" /> を返します。</summary>
      <returns>完了後にアクションの戻り値を格納する [T:System.Threading.Tasks.Task`1"]。</returns>
      <param name="controllerContext">コンテキスト。</param>
      <param name="arguments">引数。</param>
      <param name="cancellationToken">アクションを取り消すキャンセル トークン。</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.GetCustomAttributes``1(System.Boolean)">
      <summary>型によって識別される、このメンバーに定義されているカスタム属性の配列を返します。</summary>
      <returns>カスタム属性の配列、カスタム属性が存在しない場合は空の配列。</returns>
      <param name="inherit">このアクションの継承チェーンを検索して属性を見つける場合は true、それ以外の場合は false。</param>
      <typeparam name="T">カスタム属性の型。</typeparam>
    </member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.GetFilters">
      <summary>アクション フィルターに関する情報を取得します。</summary>
      <returns>フィルター情報。</returns>
    </member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.GetHashCode"></member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.GetParameters">
      <summary>アクション メソッドのパラメーターを取得します。</summary>
      <returns>アクション メソッドのパラメーター。</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.MethodInfo">
      <summary>アクション メソッド情報を取得または設定します。</summary>
      <returns>アクション メソッド情報。</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.ReturnType">
      <summary>このメソッドの戻り型を取得します。</summary>
      <returns>このメソッドの戻り型。</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.SupportedHttpMethods">
      <summary>サポートされている HTTP メソッドを取得または設定します。</summary>
      <returns>サポートされている HTTP メソッド。</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor">
      <summary>反映される HTTP パラメーター記述子を表します。</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor.#ctor(System.Web.Http.Controllers.HttpActionDescriptor,System.Reflection.ParameterInfo)">
      <summary>
        <see cref="T:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="actionDescriptor">アクション記述子。</param>
      <param name="parameterInfo">パラメーター情報。</param>
    </member>
    <member name="P:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor.DefaultValue">
      <summary>パラメーターの既定値を取得します。</summary>
      <returns>パラメーターの既定値。</returns>
    </member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor.GetCustomAttributes``1">
      <summary>パラメーターからカスタム属性のコレクションを取得します。</summary>
      <returns>パラメーターからのカスタム属性のコレクション。</returns>
      <typeparam name="TAttribute">カスタム属性の型。</typeparam>
    </member>
    <member name="P:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor.IsOptional">
      <summary>パラメーターがオプションかどうかを示す値を取得します。</summary>
      <returns>パラメーターがオプションである場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor.ParameterInfo">
      <summary>パラメーター情報を取得または設定します。</summary>
      <returns>パラメーター情報。</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor.ParameterName">
      <summary>パラメーターの名前を取得します。</summary>
      <returns>パラメーターの名前。</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor.ParameterType">
      <summary>パラメーターの型を取得します。</summary>
      <returns>パラメーターの型。</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.ResponseMessageResultConverter">
      <summary>戻り型が <see cref="T:System.Net.Http.HttpResponseMessage" /> のアクションのコンバーターを表します。</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ResponseMessageResultConverter.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Controllers.ResponseMessageResultConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ResponseMessageResultConverter.Convert(System.Web.Http.Controllers.HttpControllerContext,System.Object)">
      <summary>
        <see cref="T:System.Web.Http.Controllers.ResponseMessageResultConverter" /> オブジェクトを別のオブジェクトに変換します。</summary>
      <returns>変換されたオブジェクト。</returns>
      <param name="controllerContext">コントローラー コンテキスト。</param>
      <param name="actionResult">アクションの結果。</param>
    </member>
    <member name="T:System.Web.Http.Controllers.ServicesContainer">
      <summary>ASP.NET Web API によって使用されるサービスのコンテナーを提供する抽象クラス。</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Controllers.ServicesContainer" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.Add(System.Type,System.Object)">
      <summary> 指定されたサービスの種類のサービス一覧の末尾にサービスを追加します。</summary>
      <param name="serviceType">サービスの種類。</param>
      <param name="service">サービス インスタンス。</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.AddRange(System.Type,System.Collections.Generic.IEnumerable{System.Object})">
      <summary> 指定されたサービスの種類のサービス一覧の末尾に、指定されたコレクションのサービスを追加します。</summary>
      <param name="serviceType">サービスの種類。</param>
      <param name="services">追加するサービス。</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.Clear(System.Type)">
      <summary> 指定されたサービスの種類のすべてのサービス インスタンスを削除します。</summary>
      <param name="serviceType">サービス一覧からクリアするサービスの種類。</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.ClearMultiple(System.Type)">
      <summary>サービスの種類がマルチインスタンスであるすべてのインスタンスを削除します。</summary>
      <param name="serviceType">削除するサービスの種類。</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.ClearSingle(System.Type)">
      <summary>サービスの種類が単一インスタンスであるものを削除します。</summary>
      <param name="serviceType">削除するサービスの種類。</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.Dispose">
      <summary>アンマネージ リソースの解放およびリセットに関連付けられているアプリケーション定義のタスクを実行します。</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.FindIndex(System.Type,System.Predicate{System.Object})">
      <summary> 指定された述語により定義される条件にするサービスを検索し、最初に見つかったサービスの 0 から始まるインデックスを返します。</summary>
      <returns>最初に見つかったサービスの 0 から始まるインデックス。見つからなかった場合は -1。</returns>
      <param name="serviceType">サービスの種類。</param>
      <param name="match">検索する要素の条件を定義するデリゲート。</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.GetService(System.Type)">
      <summary>指定された種類のサービス インスタンスを取得します。</summary>
      <param name="serviceType">サービスの種類。</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.GetServiceInstances(System.Type)">
      <summary>指定された種類のサービス インスタンスの変更可能な一覧を取得します。</summary>
      <returns>サービス インスタンスの変更可能な一覧</returns>
      <param name="serviceType">サービスの種類。</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.GetServices(System.Type)">
      <summary>指定された種類のサービス インスタンスのコレクションを取得します。</summary>
      <returns>サービス インスタンスのコレクション。</returns>
      <param name="serviceType">サービスの種類。</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.Insert(System.Type,System.Int32,System.Object)">
      <summary> コレクション内の指定したインデックスの位置にサービスを挿入します。</summary>
      <param name="serviceType">サービスの種類。</param>
      <param name="index">サービスを挿入する位置の 0 から始まるインデックス。<see cref="F:System.Int32.MaxValue" /> が渡された場合は、末尾に要素が追加されます。</param>
      <param name="service">挿入するサービス。</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.InsertRange(System.Type,System.Int32,System.Collections.Generic.IEnumerable{System.Object})">
      <summary> サービス一覧内の指定したインデックスの位置にコレクションの要素を挿入します。</summary>
      <param name="serviceType">サービスの種類。</param>
      <param name="index">新しい要素を挿入する位置の 0 から始まるインデックス。<see cref="F:System.Int32.MaxValue" /> が渡された場合は、末尾に要素が追加されます。</param>
      <param name="services">挿入するサービスのコレクション。</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.IsSingleService(System.Type)">
      <summary> GetService または GetServices を使用してサービスの種類を取得するかどうかを指定します。</summary>
      <returns>サービスが単数の場合は true。</returns>
      <param name="serviceType">問い合わせるサービスの種類。</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.Remove(System.Type,System.Object)">
      <summary> 指定されたサービスの種類のサービス一覧から、最初に見つかった指定されたサービスを削除します。</summary>
      <returns>項目が正常に削除された場合は true。それ以外の場合は false。</returns>
      <param name="serviceType">サービスの種類。</param>
      <param name="service">削除するサービス インスタンス。</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.RemoveAll(System.Type,System.Predicate{System.Object})">
      <summary> 指定した述語により定義される条件に一致するすべての要素を削除します。</summary>
      <returns>一覧から削除される要素の数。</returns>
      <param name="serviceType">サービスの種類。</param>
      <param name="match">削除する要素の条件を定義するデリゲート。</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.RemoveAt(System.Type,System.Int32)">
      <summary> 指定したインデックス位置にあるサービスを削除します。</summary>
      <param name="serviceType">サービスの種類。</param>
      <param name="index">削除するサービスの 0 から始まるインデックス。</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.Replace(System.Type,System.Object)">
      <summary>指定したサービスの種類のすべての既存のサービスを、指定したサービス インスタンスで置き換えます。これは単数および複数のサービスの両方に対して有効です。</summary>
      <param name="serviceType">サービスの種類。</param>
      <param name="service">サービス インスタンス。</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.ReplaceMultiple(System.Type,System.Object)">
      <summary>マルチインスタンス サービスのすべてのインスタンスを新しいインスタンスで置き換えます。</summary>
      <param name="serviceType">サービスの種類。</param>
      <param name="service">この種類の現在のサービスを置き換えるサービス インスタンス。</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.ReplaceRange(System.Type,System.Collections.Generic.IEnumerable{System.Object})">
      <summary> 指定したサービスの種類のすべての既存のサービスを、指定したサービス インスタンスで置き換えます。</summary>
      <param name="serviceType">サービスの種類。</param>
      <param name="services">サービス インスタンス。</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.ReplaceSingle(System.Type,System.Object)">
      <summary>指定された種類の単一インスタンスのサービスを置き換えます。</summary>
      <param name="serviceType">サービスの種類。</param>
      <param name="service">サービス インスタンス。</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.ResetCache(System.Type)">
      <summary>単一であるサービスの種類に対してキャッシュされた値を削除します。</summary>
      <param name="serviceType">サービスの種類。</param>
    </member>
    <member name="T:System.Web.Http.Controllers.ValueResultConverter`1">
      <summary> 任意の <paramref name="T" /> 値を返すアクションから応答を作成するコンバーター。</summary>
      <typeparam name="T">アクションの宣言された戻り型。</typeparam>
    </member>
    <member name="M:System.Web.Http.Controllers.ValueResultConverter`1.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Controllers.ValueResultConverter`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ValueResultConverter`1.Convert(System.Web.Http.Controllers.HttpControllerContext,System.Object)">
      <summary>任意の戻り型 <paramref name="T" /> のアクションの結果を、<see cref="T:System.Net.Http.HttpResponseMessage" /> のインスタンスに変換します。</summary>
      <returns>新しく作成された <see cref="T:System.Net.Http.HttpResponseMessage" /> オブジェクト。</returns>
      <param name="controllerContext">アクション コントローラー コンテキスト。</param>
      <param name="actionResult">実行結果。</param>
    </member>
    <member name="T:System.Web.Http.Controllers.VoidResultConverter">
      <summary>値を返さないアクションから応答を作成するコンバーターを表します。</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.VoidResultConverter.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Controllers.VoidResultConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.VoidResultConverter.Convert(System.Web.Http.Controllers.HttpControllerContext,System.Object)">
      <summary>値を返さないアクションから作成された応答を変換します。</summary>
      <returns>変換された応答。</returns>
      <param name="controllerContext">コントローラーのコンテキスト。</param>
      <param name="actionResult">アクションの結果。</param>
    </member>
    <member name="T:System.Web.Http.Dependencies.IDependencyResolver">
      <summary>依存性の注入コンテナーを表します。</summary>
    </member>
    <member name="M:System.Web.Http.Dependencies.IDependencyResolver.BeginScope">
      <summary> 解決スコープを開始します。</summary>
      <returns>依存性スコープ。</returns>
    </member>
    <member name="T:System.Web.Http.Dependencies.IDependencyScope">
      <summary>依存性の範囲に関するインターフェイスを表します。</summary>
    </member>
    <member name="M:System.Web.Http.Dependencies.IDependencyScope.GetService(System.Type)">
      <summary>スコープからサービスを取得します。</summary>
      <returns>取得されたサービス。</returns>
      <param name="serviceType">取得するサービス。</param>
    </member>
    <member name="M:System.Web.Http.Dependencies.IDependencyScope.GetServices(System.Type)">
      <summary>スコープからサービスのコレクションを取得します。</summary>
      <returns>取得されたサービスのコレクション。</returns>
      <param name="serviceType">取得するサービスのコレクション。</param>
    </member>
    <member name="T:System.Web.Http.Description.ApiDescription">
      <summary> 相対 URI パスおよび HTTP メソッドによって定義された API を説明します。</summary>
    </member>
    <member name="M:System.Web.Http.Description.ApiDescription.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Description.ApiDescription" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.ActionDescriptor">
      <summary> API を処理するアクション記述子を取得または設定します。</summary>
      <returns> アクション記述子。</returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.Documentation">
      <summary> API のドキュメントを取得または設定します。</summary>
      <returns> ドキュメント。</returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.HttpMethod">
      <summary> HTTP メソッドを取得または設定します。</summary>
      <returns> HTTP メソッド。</returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.ID">
      <summary>ID を取得します。ID は <see cref="T:System.Web.Http.HttpServer" /> 内で一意です。</summary>
      <returns>ID。</returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.ParameterDescriptions">
      <summary> パラメーターの説明を取得します。</summary>
      <returns>パラメーターの説明。</returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.RelativePath">
      <summary> 相対パスを取得または設定します。</summary>
      <returns> 相対パス。</returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.ResponseDescription">
      <summary>応答の説明を取得または設定します。</summary>
      <returns>応答の説明。</returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.Route">
      <summary> API の登録ルートを取得または設定します。</summary>
      <returns> ルート。</returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.SupportedRequestBodyFormatters">
      <summary> サポートされる要求本文のフォーマッタを取得します。</summary>
      <returns>サポートされる要求本文のフォーマッタ。</returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.SupportedResponseFormatters">
      <summary> サポートされる応答フォーマッタを取得します。</summary>
      <returns>サポートされる応答フォーマッタ。</returns>
    </member>
    <member name="T:System.Web.Http.Description.ApiExplorer">
      <summary> システムで使用できるルート、コントローラー、およびアクションに基づいてサービスの URI 領域を調査します。</summary>
    </member>
    <member name="M:System.Web.Http.Description.ApiExplorer.#ctor(System.Web.Http.HttpConfiguration)">
      <summary>
        <see cref="T:System.Web.Http.Description.ApiExplorer" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="configuration">構成。</param>
    </member>
    <member name="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions">
      <summary> API の説明を取得します。説明は最初のアクセス時に初期化されます。</summary>
    </member>
    <member name="P:System.Web.Http.Description.ApiExplorer.DocumentationProvider">
      <summary> ドキュメント プロバイダーを取得または設定します。プロバイダーは API をドキュメント化します。</summary>
      <returns> ドキュメント プロバイダー。</returns>
    </member>
    <member name="M:System.Web.Http.Description.ApiExplorer.GetHttpMethodsSupportedByAction(System.Web.Http.Routing.IHttpRoute,System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary> アクションでサポートされる HttpMethod のコレクションを取得します。<see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions" /> を初期化するときに呼び出されます。</summary>
      <returns>アクションでサポートされる HttpMethod のコレクション。</returns>
      <param name="route">ルート。</param>
      <param name="actionDescriptor">アクション記述子。</param>
    </member>
    <member name="M:System.Web.Http.Description.ApiExplorer.ShouldExploreAction(System.String,System.Web.Http.Controllers.HttpActionDescriptor,System.Web.Http.Routing.IHttpRoute)">
      <summary>
        <see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions" /> の生成でアクションを考慮するかどうかを判断します。<see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions" /> を初期化するときに呼び出されます。</summary>
      <returns>
        <see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions" /> の生成でアクションを考慮する場合は true、それ以外の場合は false。</returns>
      <param name="actionVariableValue">ルートからのアクション変数値。</param>
      <param name="actionDescriptor">アクション記述子。</param>
      <param name="route">ルート。</param>
    </member>
    <member name="M:System.Web.Http.Description.ApiExplorer.ShouldExploreController(System.String,System.Web.Http.Controllers.HttpControllerDescriptor,System.Web.Http.Routing.IHttpRoute)">
      <summary>
        <see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions" /> の生成でコントローラーを考慮するかどうかを判断します。<see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions" /> を初期化するときに呼び出されます。</summary>
      <returns>
        <see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions" /> の生成でコントローラーを考慮する場合は true、それ以外の場合は false。</returns>
      <param name="controllerVariableValue">ルートからのコントローラー変数値。</param>
      <param name="controllerDescriptor">コントローラー記述子。</param>
      <param name="route">ルート。</param>
    </member>
    <member name="T:System.Web.Http.Description.ApiExplorerSettingsAttribute">
      <summary> この属性は、コントローラーとアクションで使用して <see cref="T:System.Web.Http.Description.ApiExplorer" /> の動作に影響を与えることができます。</summary>
    </member>
    <member name="M:System.Web.Http.Description.ApiExplorerSettingsAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Description.ApiExplorerSettingsAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Http.Description.ApiExplorerSettingsAttribute.IgnoreApi">
      <summary>
        <see cref="T:System.Web.Http.Description.ApiExplorer" /> によって生成された <see cref="T:System.Web.Http.Description.ApiDescription" /> インスタンスからコントローラーまたはアクションを除外するかどうかを示す値を取得または設定します。</summary>
      <returns>コントローラーまたはアクションを無視する必要がある場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="T:System.Web.Http.Description.ApiParameterDescription">
      <summary> 相対 URI パスおよび HTTP メソッドによって定義された API のパラメーターを説明します。</summary>
    </member>
    <member name="M:System.Web.Http.Description.ApiParameterDescription.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Description.ApiParameterDescription" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Http.Description.ApiParameterDescription.Documentation">
      <summary> ドキュメントを取得または設定します。</summary>
      <returns> ドキュメント。</returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiParameterDescription.Name">
      <summary> 名前を取得または設定します。</summary>
      <returns> 名前。</returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiParameterDescription.ParameterDescriptor">
      <summary> パラメーター記述子を取得または設定します。</summary>
      <returns> パラメーター記述子。</returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiParameterDescription.Source">
      <summary> パラメーターのソースを取得または設定します。ソースの場所は、要求 URI、要求本体などです。</summary>
      <returns> ソース。 </returns>
    </member>
    <member name="T:System.Web.Http.Description.ApiParameterSource">
      <summary> パラメーターの取得元の場所を説明します。</summary>
    </member>
    <member name="F:System.Web.Http.Description.ApiParameterSource.FromBody">
      <summary>パラメーターの取得元はボディです。</summary>
    </member>
    <member name="F:System.Web.Http.Description.ApiParameterSource.FromUri">
      <summary>パラメーターの取得元は URI です。</summary>
    </member>
    <member name="F:System.Web.Http.Description.ApiParameterSource.Unknown">
      <summary>場所は不明です。</summary>
    </member>
    <member name="T:System.Web.Http.Description.IApiExplorer">
      <summary>
        <see cref="T:System.Web.Http.Description.ApiDescription" /> のコレクションを取得するインターフェイスを定義します。</summary>
    </member>
    <member name="P:System.Web.Http.Description.IApiExplorer.ApiDescriptions">
      <summary> API の説明を取得します。 </summary>
    </member>
    <member name="T:System.Web.Http.Description.IDocumentationProvider">
      <summary> サービスをドキュメント化するためのプロバイダーを定義します。</summary>
    </member>
    <member name="M:System.Web.Http.Description.IDocumentationProvider.GetDocumentation(System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary>
        <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor" /> に基づいてドキュメントを取得します。</summary>
      <returns>コントローラーのドキュメント。</returns>
      <param name="actionDescriptor">アクション記述子。</param>
    </member>
    <member name="M:System.Web.Http.Description.IDocumentationProvider.GetDocumentation(System.Web.Http.Controllers.HttpControllerDescriptor)"></member>
    <member name="M:System.Web.Http.Description.IDocumentationProvider.GetDocumentation(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>
        <see cref="T:System.Web.Http.Controllers.HttpParameterDescriptor" /> に基づいてドキュメントを取得します。</summary>
      <returns>コントローラーのドキュメント。</returns>
      <param name="parameterDescriptor">パラメーター記述子。</param>
    </member>
    <member name="M:System.Web.Http.Description.IDocumentationProvider.GetResponseDocumentation(System.Web.Http.Controllers.HttpActionDescriptor)"></member>
    <member name="T:System.Web.Http.Description.ResponseDescription">
      <summary>API 応答について説明します。</summary>
    </member>
    <member name="M:System.Web.Http.Description.ResponseDescription.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Description.ResponseDescription" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Http.Description.ResponseDescription.DeclaredType">
      <summary>宣言された応答の種類を取得または設定します。</summary>
      <returns>宣言された応答の種類。</returns>
    </member>
    <member name="P:System.Web.Http.Description.ResponseDescription.Documentation">
      <summary>応答のドキュメントを取得または設定します。</summary>
      <returns>応答のドキュメント。</returns>
    </member>
    <member name="P:System.Web.Http.Description.ResponseDescription.ResponseType">
      <summary>実際の応答の種類を取得または設定します。</summary>
      <returns>実際の応答の種類。</returns>
    </member>
    <member name="T:System.Web.Http.Description.ResponseTypeAttribute">
      <summary>これを使用して、宣言された戻り型が <see cref="T:System.Net.Http.HttpResponseMessage" /> または <see cref="T:System.Web.Http.IHttpActionResult" /> である場合に、アクションによって返されるエンティティ型を指定します。<see cref="P:System.Web.Http.Description.ResponseTypeAttribute.ResponseType" /> は、<see cref="T:System.Web.Http.Description.ApiDescription" /> を生成するときに <see cref="T:System.Web.Http.Description.ApiExplorer" /> によって読み取られます。</summary>
    </member>
    <member name="M:System.Web.Http.Description.ResponseTypeAttribute.#ctor(System.Type)">
      <summary>
        <see cref="T:System.Web.Http.Description.ResponseTypeAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="responseType">応答の種類。</param>
    </member>
    <member name="P:System.Web.Http.Description.ResponseTypeAttribute.ResponseType">
      <summary>応答の種類を取得します。</summary>
    </member>
    <member name="T:System.Web.Http.Dispatcher.DefaultAssembliesResolver">
      <summary> 外部依存関係のない <see cref="T:System.Web.Http.Dispatcher.IAssembliesResolver" /> の実装を提供します。</summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultAssembliesResolver.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Dispatcher.DefaultAssembliesResolver" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultAssembliesResolver.GetAssemblies">
      <summary> アプリケーションで使用できるアセンブリのリストを返します。</summary>
      <returns>アセンブリの &lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;。</returns>
    </member>
    <member name="T:System.Web.Http.Dispatcher.DefaultHttpControllerActivator">
      <summary>
        <see cref="T:System.Web.Http.Dispatcher.IHttpControllerActivator" /> の既定の実装を表します。<see cref="T:System.Web.Http.Services.DependencyResolver" /> によって別の実装を登録できます。<see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> のインスタンスごとに <see cref="T:System.Web.Http.Controllers.ApiControllerActionInvoker" /> のインスタンスがある場合について最適化しますが、1 つの <see cref="T:System.Web.Http.Controllers.ApiControllerActionInvoker" /> について多数の <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> のインスタンスがある場合もサポートできます。後者の場合、<see cref="P:HttpControllerDescriptor.Properties" /> ディクショナリを調べるため、参照が多少遅くなります。</summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerActivator.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Dispatcher.DefaultHttpControllerActivator" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerActivator.Create(System.Net.Http.HttpRequestMessage,System.Web.Http.Controllers.HttpControllerDescriptor,System.Type)">
      <summary> 指定された <paramref name="request" /> を使用して、<paramref name="controllerType" /> によって指定される <see cref="T:System.Web.Http.Controllers.IHttpController" /> を作成します。</summary>
      <returns>
        <paramref name="controllerType" /> 型のインスタンス。</returns>
      <param name="request">要求メッセージ。</param>
      <param name="controllerDescriptor">コントローラー記述子。</param>
      <param name="controllerType">コントローラーの種類。</param>
    </member>
    <member name="T:System.Web.Http.Dispatcher.DefaultHttpControllerSelector">
      <summary>
        <see cref="T:System.Net.Http.HttpRequestMessage" /> が指定された状態で <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> を選択するための既定の <see cref="T:System.Web.Http.Dispatcher.IHttpControllerSelector" /> インスタンスを表します。<see cref="P:System.Web.Http.HttpConfiguration.Services" /> によって別の実装を登録できます。</summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerSelector.#ctor(System.Web.Http.HttpConfiguration)">
      <summary>
        <see cref="T:System.Web.Http.Dispatcher.DefaultHttpControllerSelector" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="configuration">構成。</param>
    </member>
    <member name="F:System.Web.Http.Dispatcher.DefaultHttpControllerSelector.ControllerSuffix">
      <summary>コントローラー名のサフィックス文字列を指定します。</summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerSelector.GetControllerMapping">
      <summary>セレクターが選択できるすべての <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> の、コントローラー文字列によってキーが入力されたマップを返します。</summary>
      <returns>セレクターが選択できるすべての <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> のマップ。正しく定義された <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> のマッピングがセレクターにない場合は null。</returns>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerSelector.GetControllerName(System.Net.Http.HttpRequestMessage)">
      <summary>指定された <see cref="T:System.Net.Http.HttpRequestMessage" /> のコントローラーの名前を取得します。</summary>
      <returns>指定された <see cref="T:System.Net.Http.HttpRequestMessage" /> のコントローラーの名前。</returns>
      <param name="request">HTTP 要求メッセージ。</param>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerSelector.SelectController(System.Net.Http.HttpRequestMessage)">
      <summary>指定された <see cref="T:System.Net.Http.HttpRequestMessage" /> の <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> を選択します。</summary>
      <returns>指定された <see cref="T:System.Net.Http.HttpRequestMessage" /> の <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> インスタンス。</returns>
      <param name="request">HTTP 要求メッセージ。</param>
    </member>
    <member name="T:System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver">
      <summary> 外部依存関係のない <see cref="T:System.Web.Http.Dispatcher.IHttpControllerTypeResolver" /> の実装を提供します。</summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver.#ctor(System.Predicate{System.Type})">
      <summary>コントローラーの種類をフィルター処理する述語を使用して新しい <see cref="T:System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver" /> インスタンスを初期化します。</summary>
      <param name="predicate">述語。</param>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver.GetControllerTypes(System.Web.Http.Dispatcher.IAssembliesResolver)">
      <summary> アプリケーションで使用できるコントローラーのリストを返します。</summary>
      <returns>コントローラーの &lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;。</returns>
      <param name="assembliesResolver">アセンブリ競合回避モジュール。</param>
    </member>
    <member name="P:System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver.IsControllerTypePredicate">
      <summary>競合回避モジュールの種類がコントローラーの種類の述語であるかどうかを示す値を取得します。</summary>
      <returns>競合回避モジュールの種類がコントローラーの種類の述語である場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="T:System.Web.Http.Dispatcher.HttpControllerDispatcher">
      <summary>受け取った <see cref="T:System.Net.Http.HttpRequestMessage" /> を、処理のために <see cref="T:System.Web.Http.Controllers.IHttpController" /> の実装にディスパッチします。</summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.HttpControllerDispatcher.#ctor(System.Web.Http.HttpConfiguration)">
      <summary>指定された構成を使用して <see cref="T:System.Web.Http.Dispatcher.HttpControllerDispatcher" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="configuration">HTTP 構成。</param>
    </member>
    <member name="P:System.Web.Http.Dispatcher.HttpControllerDispatcher.Configuration">
      <summary>HTTP 構成を取得します。</summary>
      <returns>HTTP 構成。</returns>
    </member>
    <member name="M:System.Web.Http.Dispatcher.HttpControllerDispatcher.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>受け取った <see cref="T:System.Net.Http.HttpRequestMessage" /> を <see cref="T:System.Web.Http.Controllers.IHttpController" /> にディスパッチします。</summary>
      <returns>進行中の操作を表す <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="request">ディスパッチする要求。</param>
      <param name="cancellationToken">キャンセル トークン。</param>
    </member>
    <member name="T:System.Web.Http.Dispatcher.HttpRoutingDispatcher">
      <summary> このクラスは、一致したルートの <see cref="T:System.Web.Http.Routing.IHttpRoute" /> を確認し、呼び出すメッセージ ハンドラーを選択する既定のエンドポイント メッセージ ハンドラーです。<see cref="P:System.Web.Http.Routing.IHttpRoute.Handler" /> が null の場合、<see cref="T:System.Web.Http.Dispatcher.HttpControllerDispatcher" /> にデリゲートします。</summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.HttpRoutingDispatcher.#ctor(System.Web.Http.HttpConfiguration)">
      <summary> 指定された <see cref="T:System.Web.Http.HttpConfiguration" /> および <see cref="T:System.Web.Http.Dispatcher.HttpControllerDispatcher" /> を既定のハンドラーとして使用して、<see cref="T:System.Web.Http.Dispatcher.HttpRoutingDispatcher" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="configuration">サーバー構成。</param>
    </member>
    <member name="M:System.Web.Http.Dispatcher.HttpRoutingDispatcher.#ctor(System.Web.Http.HttpConfiguration,System.Net.Http.HttpMessageHandler)">
      <summary> 指定された <see cref="T:System.Web.Http.HttpConfiguration" /> および <see cref="T:System.Net.Http.HttpMessageHandler" /> を使用して、<see cref="T:System.Web.Http.Dispatcher.HttpRoutingDispatcher" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="configuration">サーバー構成。</param>
      <param name="defaultHandler">
        <see cref="T:System.Web.Http.Routing.IHttpRoute" /> に <see cref="P:System.Web.Http.Routing.IHttpRoute.Handler" /> がない場合に使用する既定のハンドラー。</param>
    </member>
    <member name="M:System.Web.Http.Dispatcher.HttpRoutingDispatcher.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>HTTP 要求を非同期操作として送信します。</summary>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
      <param name="request">送信する HTTP 要求メッセージ。</param>
      <param name="cancellationToken">操作を取り消すキャンセル トークン。</param>
    </member>
    <member name="T:System.Web.Http.Dispatcher.IAssembliesResolver">
      <summary>アプリケーションのアセンブリを管理するための抽象型を提供します。<see cref="T:System.Web.Http.Services.DependencyResolver" /> によって別の実装を登録できます。</summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.IAssembliesResolver.GetAssemblies">
      <summary> アプリケーションで使用できるアセンブリのリストを返します。</summary>
      <returns>アセンブリの &lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;。</returns>
    </member>
    <member name="T:System.Web.Http.Dispatcher.IHttpControllerActivator">
      <summary>
        <see cref="T:System.Web.Http.Dispatcher.IHttpControllerActivator" /> に必要なメソッドを定義します。</summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.IHttpControllerActivator.Create(System.Net.Http.HttpRequestMessage,System.Web.Http.Controllers.HttpControllerDescriptor,System.Type)">
      <summary>
        <see cref="T:System.Web.Http.Controllers.IHttpController" /> オブジェクトを作成します。</summary>
      <returns>
        <see cref="T:System.Web.Http.Controllers.IHttpController" /> オブジェクト。</returns>
      <param name="request">メッセージ要求。</param>
      <param name="controllerDescriptor">HTTP コントローラー記述子。</param>
      <param name="controllerType">コントローラーの種類。</param>
    </member>
    <member name="T:System.Web.Http.Dispatcher.IHttpControllerSelector">
      <summary>
        <see cref="T:System.Web.Http.Controllers.IHttpController" /> ファクトリに必要なメソッドを定義します。</summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.IHttpControllerSelector.GetControllerMapping">
      <summary>セレクターが選択できるすべての <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> の、コントローラー文字列によってキーが入力されたマップを返します。これは主に、システム内で使用可能なすべてのコントローラーを検出するために <see cref="T:System.Web.Http.Description.IApiExplorer" /> によって呼び出されます。</summary>
      <returns>セレクターが選択できるすべての <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> のマップ。正しく定義された <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> のマッピングがセレクターにない場合は null。</returns>
    </member>
    <member name="M:System.Web.Http.Dispatcher.IHttpControllerSelector.SelectController(System.Net.Http.HttpRequestMessage)">
      <summary> 指定された <see cref="T:System.Net.Http.HttpRequestMessage" /> の <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> を選択します。</summary>
      <returns>
        <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> のインスタンス。</returns>
      <param name="request">要求メッセージ。</param>
    </member>
    <member name="T:System.Web.Http.Dispatcher.IHttpControllerTypeResolver">
      <summary> アプリケーションのコントローラーの種類を管理するための抽象型を提供します。DependencyResolver によって別の実装を登録できます。</summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.IHttpControllerTypeResolver.GetControllerTypes(System.Web.Http.Dispatcher.IAssembliesResolver)">
      <summary> アプリケーションで使用できるコントローラーのリストを返します。</summary>
      <returns>コントローラーの &lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;。</returns>
      <param name="assembliesResolver">失敗したアセンブリの競合回避モジュール。</param>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.ExceptionCatchBlocks">
      <summary>このアセンブリ内で使用される catch ブロックを提供します。</summary>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.HttpBatchHandler">
      <summary>System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.HttpBatchHandler.SendAsync の catch ブロックを取得します。</summary>
      <returns>System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.HttpBatchHandler.SendAsync の catch ブロック。</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.HttpControllerDispatcher">
      <summary>System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.HttpControllerDispatcher.SendAsync の catch ブロックを取得します。</summary>
      <returns>System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.HttpControllerDispatcher.SendAsync の catch ブロック。</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.HttpServer">
      <summary>System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.HttpServer.SendAsync の catch ブロックを取得します。</summary>
      <returns>System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.HttpServer.SendAsync の catch ブロック。</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.IExceptionFilter">
      <summary>
        <see cref="P:System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.IExceptionFilter" /> を使用する時の System.Web.Http.ApiController.ExecuteAsync の catch ブロックを取得します。</summary>
      <returns>
        <see cref="P:System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.IExceptionFilter" /> を使用する時の System.Web.Http.ApiController.ExecuteAsync の catch ブロック。</returns>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.ExceptionContext">
      <summary>例外とキャッチされた時に関連付けられるコンテキスト データを表します。</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionContext.#ctor(System.Exception,System.Web.Http.ExceptionHandling.ExceptionContextCatchBlock)">
      <summary>
        <see cref="T:System.Web.Http.ExceptionHandling.ExceptionContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="exception">キャッチされた例外。</param>
      <param name="catchBlock">例外がキャッチされた時の catch ブロック。</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionContext.#ctor(System.Exception,System.Web.Http.ExceptionHandling.ExceptionContextCatchBlock,System.Net.Http.HttpRequestMessage)">
      <summary>
        <see cref="T:System.Web.Http.ExceptionHandling.ExceptionContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="exception">キャッチされた例外。</param>
      <param name="catchBlock">例外がキャッチされた時の catch ブロック。</param>
      <param name="request">例外がキャッチされた時に処理される要求。</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionContext.#ctor(System.Exception,System.Web.Http.ExceptionHandling.ExceptionContextCatchBlock,System.Net.Http.HttpRequestMessage,System.Net.Http.HttpResponseMessage)">
      <summary>
        <see cref="T:System.Web.Http.ExceptionHandling.ExceptionContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="exception">キャッチされた例外。</param>
      <param name="catchBlock">例外がキャッチされた時の catch ブロック。</param>
      <param name="request">例外がキャッチされた時に処理される要求。</param>
      <param name="response">例外がキャッチされた時に返される応答。</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionContext.#ctor(System.Exception,System.Web.Http.ExceptionHandling.ExceptionContextCatchBlock,System.Web.Http.Controllers.HttpActionContext)">
      <summary>
        <see cref="T:System.Web.Http.ExceptionHandling.ExceptionContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="exception">キャッチされた例外。</param>
      <param name="catchBlock">例外がキャッチされた時の catch ブロック。</param>
      <param name="actionContext">例外が発生する操作コンテキスト。</param>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionContext.ActionContext">
      <summary>該当する場合、例外が発生する操作コンテキストを取得します。</summary>
      <returns>該当する場合の、例外が発生する操作コンテキスト。</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionContext.CatchBlock">
      <summary>例外がキャッチされた catch ブロックを取得します。</summary>
      <returns>例外がキャッチされた catch ブロック。</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionContext.ControllerContext">
      <summary>該当する場合、例外が発生するコントローラー コンテキストを取得します。</summary>
      <returns>該当する場合の、例外が発生するコントローラー コンテキスト。</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionContext.Exception">
      <summary>キャッチされた例外を取得します。</summary>
      <returns>キャッチされた例外。</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionContext.Request">
      <summary>例外がキャッチされた時に処理される要求を取得します。</summary>
      <returns>例外がキャッチされた時に処理される要求。</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionContext.RequestContext">
      <summary>例外が発生した要求コンテキストを取得します。</summary>
      <returns>例外が発生した要求コンテキスト。</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionContext.Response">
      <summary>例外がキャッチされた時に送信される応答を取得します。</summary>
      <returns>例外がキャッチされた時に送信される応答。</returns>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.ExceptionContextCatchBlock">
      <summary>例外コンテキストの catch ブロックの場所を表します。</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionContextCatchBlock.#ctor(System.String,System.Boolean,System.Boolean)">
      <summary>
        <see cref="T:System.Web.Http.ExceptionHandling.ExceptionContextCatchBlock" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">例外がキャッチされた catch ブロックのラベル。</param>
      <param name="isTopLevel">例外がキャッチされた catch ブロックがホストの直前のものであるかを示す値。</param>
      <param name="callsHandler">catch ブロックの例外がログ後に処理できるかどうかを示す値。</param>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionContextCatchBlock.CallsHandler">
      <summary>catch ブロックの例外がログ後に処理できるかどうかを示す値を取得します。</summary>
      <returns>catch ブロックの例外がログ後に処理できるかどうかを示す値。</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionContextCatchBlock.IsTopLevel">
      <summary>例外がキャッチされた catch ブロックがホストの直前のものであるかを示す値を取得します。</summary>
      <returns>例外がキャッチされた catch ブロックがホストの直前のものであるかを示す値。</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionContextCatchBlock.Name">
      <summary>例外がキャッチされた catch ブロックのラベルを取得します。</summary>
      <returns>例外がキャッチされた catch ブロックのラベル。</returns>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionContextCatchBlock.ToString">
      <returns>
        <see cref="T:System.String" /> を返します。</returns>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.ExceptionHandler">
      <summary>未処理の例外ハンドラーを表します。</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionHandler.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ExceptionHandling.ExceptionHandler" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionHandler.Handle(System.Web.Http.ExceptionHandling.ExceptionHandlerContext)">
      <summary>派生クラスでオーバーライドされた時、例外を同期的に処理します。</summary>
      <param name="context">例外ハンドラーのコンテキスト。</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionHandler.HandleAsync(System.Web.Http.ExceptionHandling.ExceptionHandlerContext,System.Threading.CancellationToken)">
      <summary>派生クラスでオーバーライドされた時、例外を非同期的に処理します。</summary>
      <returns>非同期の例外処理の操作を表すタスク。</returns>
      <param name="context">例外ハンドラーのコンテキスト。</param>
      <param name="cancellationToken">キャンセル要求を監視するトークン。</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionHandler.ShouldHandle(System.Web.Http.ExceptionHandling.ExceptionHandlerContext)">
      <summary>例外を処理すべきかどうかを決定します。</summary>
      <returns>例外を処理する場合は true、それ以外の場合は false。</returns>
      <param name="context">例外ハンドラーのコンテキスト。</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionHandler.System#Web#Http#ExceptionHandling#IExceptionHandler#HandleAsync(System.Web.Http.ExceptionHandling.ExceptionHandlerContext,System.Threading.CancellationToken)">
      <returns>
        <see cref="T:System.Threading.Tasks.Task" /> を返します。</returns>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.ExceptionHandlerContext">
      <summary>未処理の例外処理があるコンテキストを表します。</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionHandlerContext.#ctor(System.Web.Http.ExceptionHandling.ExceptionContext)">
      <summary>
        <see cref="T:System.Web.Http.ExceptionHandling.ExceptionHandlerContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="exceptionContext">例外コンテキスト。</param>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionHandlerContext.CatchBlock">
      <summary>例外がキャッチされた catch ブロックを取得します。</summary>
      <returns>例外がキャッチされた catch ブロック。</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionHandlerContext.Exception">
      <summary>キャッチされた例外を取得します。</summary>
      <returns>キャッチされた例外。</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionHandlerContext.ExceptionContext">
      <summary>例外と関連データを提供する例外コンテキストを取得します。</summary>
      <returns>例外と関連データを提供する例外コンテキスト。</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionHandlerContext.Request">
      <summary>例外がキャッチされた時に処理される要求を取得します。</summary>
      <returns>例外がキャッチされた時に処理される要求。</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionHandlerContext.RequestContext">
      <summary>例外が発生した要求コンテキストを取得します。</summary>
      <returns>例外が発生した要求コンテキスト。</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionHandlerContext.Result">
      <summary>例外が処理された時の応答メッセージを提供する結果を取得または設定します。</summary>
      <returns>例外が処理された時の応答メッセージを提供する結果。</returns>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.ExceptionHandlerExtensions">
      <summary>
        <see cref="T:System.Web.Http.ExceptionHandling.IExceptionHandler" /> の拡張メソッドを提供します。</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionHandlerExtensions.HandleAsync(System.Web.Http.ExceptionHandling.IExceptionHandler,System.Web.Http.ExceptionHandling.ExceptionContext,System.Threading.CancellationToken)">
      <summary>例外ハンドラーを呼び出し、該当する場合はそれを処理する応答を決定します。</summary>
      <returns>タスクの完了時に例外が処理された時に返す応答メッセージを含むタスク、または例外が未処理のままの場合は null。</returns>
      <param name="handler">未処理の例外ハンドラー。</param>
      <param name="context">例外コンテキスト。</param>
      <param name="cancellationToken">キャンセル要求を監視するトークン。</param>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.ExceptionLogger">
      <summary>未処理の例外ロガーを表します。</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionLogger.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ExceptionHandling.ExceptionLogger" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionLogger.Log(System.Web.Http.ExceptionHandling.ExceptionLoggerContext)">
      <summary>派生クラスでオーバーライドされた時、例外を同期的に記録します。</summary>
      <param name="context">例外ロガーのコンテキスト。</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionLogger.LogAsync(System.Web.Http.ExceptionHandling.ExceptionLoggerContext,System.Threading.CancellationToken)">
      <summary>派生クラスでオーバーライドされた時、例外を非同期的に記録します。</summary>
      <returns>非同期の例外ログ操作を表すタスク。</returns>
      <param name="context">例外ロガーのコンテキスト。</param>
      <param name="cancellationToken">キャンセル要求を監視するトークン。</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionLogger.ShouldLog(System.Web.Http.ExceptionHandling.ExceptionLoggerContext)">
      <summary>例外を記録すべきかどうかを決定します。</summary>
      <returns>例外を記録する場合は true、それ以外の場合は false。</returns>
      <param name="context">例外ロガーのコンテキスト。</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionLogger.System#Web#Http#ExceptionHandling#IExceptionLogger#LogAsync(System.Web.Http.ExceptionHandling.ExceptionLoggerContext,System.Threading.CancellationToken)">
      <returns>
        <see cref="T:System.Threading.Tasks.Task" /> を返します。</returns>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.ExceptionLoggerContext">
      <summary>未処理の例外ログが発生するコンテキストを表します。</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionLoggerContext.#ctor(System.Web.Http.ExceptionHandling.ExceptionContext)">
      <summary>
        <see cref="T:System.Web.Http.ExceptionHandling.ExceptionLoggerContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="exceptionContext">例外コンテキスト。</param>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionLoggerContext.CallsHandler">
      <summary>例外が続いて <see cref="T:System.Web.Http.ExceptionHandling.IExceptionHandler" /> で処理され、新しい応答メッセージを作成できるかどうかを示す値を取得または設定します。</summary>
      <returns>例外が続いて <see cref="T:System.Web.Http.ExceptionHandling.IExceptionHandler" /> で処理され、新しい応答メッセージを作成できるかどうかを示す値。</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionLoggerContext.CatchBlock">
      <summary>例外がキャッチされた catch ブロックを取得します。</summary>
      <returns>例外がキャッチされた catch ブロック。</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionLoggerContext.Exception">
      <summary>キャッチされた例外を取得します。</summary>
      <returns>キャッチされた例外。</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionLoggerContext.ExceptionContext">
      <summary>例外と関連データを提供する例外コンテキストを取得します。</summary>
      <returns>例外と関連データを提供する例外コンテキスト。</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionLoggerContext.Request">
      <summary>例外がキャッチされた時に処理される要求を取得します。</summary>
      <returns>例外がキャッチされた時に処理される要求。</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionLoggerContext.RequestContext">
      <summary>例外が発生した要求コンテキストを取得します。</summary>
      <returns>例外が発生した要求コンテキスト。</returns>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.ExceptionLoggerExtensions">
      <summary>
        <see cref="T:System.Web.Http.ExceptionHandling.IExceptionLogger" /> の拡張メソッドを提供します。</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionLoggerExtensions.LogAsync(System.Web.Http.ExceptionHandling.IExceptionLogger,System.Web.Http.ExceptionHandling.ExceptionContext,System.Threading.CancellationToken)">
      <summary>例外ロガーを呼び出します。</summary>
      <returns>非同期の例外ログ操作を表すタスク。</returns>
      <param name="logger">未処理の例外ロガー。</param>
      <param name="context">例外コンテキスト。</param>
      <param name="cancellationToken">キャンセル要求を監視するトークン。</param>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.ExceptionServices">
      <summary>catch ブロックからのログと処理を呼び出す例外サービスを作成します。</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionServices.GetHandler(System.Web.Http.Controllers.ServicesContainer)">
      <summary>該当する場合、例外が誤ってホストに伝達することのないよう登録済みのハンドラー サービスを呼び出す例外ハンドラーを取得します。</summary>
      <returns>該当する場合、例外が誤ってホストに伝達することのないよう登録済みのハンドラー サービスを呼び出す例外ハンドラー。</returns>
      <param name="services">サービス コンテナー。</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionServices.GetHandler(System.Web.Http.HttpConfiguration)">
      <summary>該当する場合、例外が誤ってホストに伝達することのないよう登録済みのハンドラー サービスを呼び出す例外ハンドラーを取得します。</summary>
      <returns>該当する場合、例外が誤ってホストに伝達することのないよう登録済みのハンドラー サービスを呼び出す例外ハンドラー。</returns>
      <param name="configuration">構成。</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionServices.GetLogger(System.Web.Http.Controllers.ServicesContainer)">
      <summary>すべての登録済みログ サービスを呼び出す例外ログを取得します。</summary>
      <returns>複合ログ。</returns>
      <param name="services">サービス コンテナー。</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionServices.GetLogger(System.Web.Http.HttpConfiguration)">
      <summary>すべての登録済みログ サービスを呼び出す例外ログを取得します。</summary>
      <returns>複合ログ。</returns>
      <param name="configuration">構成。</param>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.IExceptionHandler">
      <summary>未処理の例外ハンドラーを定義します。</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.IExceptionHandler.HandleAsync(System.Web.Http.ExceptionHandling.ExceptionHandlerContext,System.Threading.CancellationToken)">
      <summary>未処理の例外を処理して伝達を許可する、または返す応答メッセージを代わりに提供することで処理します。</summary>
      <returns>非同期の例外処理の操作を表すタスク。</returns>
      <param name="context">例外ハンドラーのコンテキスト。</param>
      <param name="cancellationToken">キャンセル要求を監視するトークン。</param>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.IExceptionLogger">
      <summary>未処理の例外ロガーを定義します。</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.IExceptionLogger.LogAsync(System.Web.Http.ExceptionHandling.ExceptionLoggerContext,System.Threading.CancellationToken)">
      <summary>未処理の例外を記録します。</summary>
      <returns>非同期の例外ログ操作を表すタスク。</returns>
      <param name="context">例外ロガーのコンテキスト。</param>
      <param name="cancellationToken">キャンセル要求を監視するトークン。</param>
    </member>
    <member name="T:System.Web.Http.Filters.ActionDescriptorFilterProvider">
      <summary>名前、コントローラー、パラメーター、属性、フィルターなど、アクション メソッドに関する情報を提供します。</summary>
    </member>
    <member name="M:System.Web.Http.Filters.ActionDescriptorFilterProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Filters.ActionDescriptorFilterProvider" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.Filters.ActionDescriptorFilterProvider.GetFilters(System.Web.Http.HttpConfiguration,System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary>このアクション メソッドに関連付けられたフィルターを返します。</summary>
      <returns>このアクション メソッドに関連付けられたフィルター。</returns>
      <param name="configuration">構成。</param>
      <param name="actionDescriptor">アクション記述子。</param>
    </member>
    <member name="T:System.Web.Http.Filters.ActionFilterAttribute">
      <summary>すべてのアクション フィルター属性の基本クラスを表します。</summary>
    </member>
    <member name="M:System.Web.Http.Filters.ActionFilterAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Filters.ActionFilterAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.Filters.ActionFilterAttribute.OnActionExecuted(System.Web.Http.Filters.HttpActionExecutedContext)">
      <summary>アクション メソッドの呼び出し後に発生します。</summary>
      <param name="actionExecutedContext">アクション実行コンテキスト。</param>
    </member>
    <member name="M:System.Web.Http.Filters.ActionFilterAttribute.OnActionExecutedAsync(System.Web.Http.Filters.HttpActionExecutedContext,System.Threading.CancellationToken)"></member>
    <member name="M:System.Web.Http.Filters.ActionFilterAttribute.OnActionExecuting(System.Web.Http.Controllers.HttpActionContext)">
      <summary>アクション メソッドの呼び出し前に発生します。</summary>
      <param name="actionContext">アクション コンテキスト。</param>
    </member>
    <member name="M:System.Web.Http.Filters.ActionFilterAttribute.OnActionExecutingAsync(System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)"></member>
    <member name="M:System.Web.Http.Filters.ActionFilterAttribute.System#Web#Http#Filters#IActionFilter#ExecuteActionFilterAsync(System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken,System.Func{System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}})">
      <summary>フィルター アクションを非同期に実行します。</summary>
      <returns>この操作用に新しく作成されたタスク。</returns>
      <param name="actionContext">アクション コンテキスト。</param>
      <param name="cancellationToken">このタスクに割り当てられたキャンセル トークン。</param>
      <param name="continuation">アクション メソッドを呼び出した後に続行されるデリゲート関数。</param>
    </member>
    <member name="T:System.Web.Http.Filters.AuthorizationFilterAttribute">
      <summary>承認フィルターの詳細を提供します。</summary>
    </member>
    <member name="M:System.Web.Http.Filters.AuthorizationFilterAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Filters.AuthorizationFilterAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.Filters.AuthorizationFilterAttribute.OnAuthorization(System.Web.Http.Controllers.HttpActionContext)">
      <summary>プロセスが承認を要求したときに呼び出します。</summary>
      <param name="actionContext">
        <see cref="T:System.Web.Http.Filters.AuthorizationFilterAttribute" /> を使用するための情報をカプセル化するアクション コンテキスト。</param>
    </member>
    <member name="M:System.Web.Http.Filters.AuthorizationFilterAttribute.OnAuthorizationAsync(System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)"></member>
    <member name="M:System.Web.Http.Filters.AuthorizationFilterAttribute.System#Web#Http#Filters#IAuthorizationFilter#ExecuteAuthorizationFilterAsync(System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken,System.Func{System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}})">
      <summary>同期中に承認フィルターを実行します。</summary>
      <returns>同期中の承認フィルター。</returns>
      <param name="actionContext">
        <see cref="T:System.Web.Http.Filters.AuthorizationFilterAttribute" /> を使用するための情報をカプセル化するアクション コンテキスト。</param>
      <param name="cancellationToken">操作を取り消すキャンセル トークン。</param>
      <param name="continuation">操作の続行。</param>
    </member>
    <member name="T:System.Web.Http.Filters.ConfigurationFilterProvider">
      <summary>構成フィルター プロバイダーを表します。</summary>
    </member>
    <member name="M:System.Web.Http.Filters.ConfigurationFilterProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Filters.ConfigurationFilterProvider" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.Filters.ConfigurationFilterProvider.GetFilters(System.Web.Http.HttpConfiguration,System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary>この構成メソッドに関連付けられたフィルターを返します。</summary>
      <returns>この構成メソッドに関連付けられたフィルター。</returns>
      <param name="configuration">構成。</param>
      <param name="actionDescriptor">アクション記述子。</param>
    </member>
    <member name="T:System.Web.Http.Filters.ExceptionFilterAttribute">
      <summary>例外フィルターの属性を表します。</summary>
    </member>
    <member name="M:System.Web.Http.Filters.ExceptionFilterAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Filters.ExceptionFilterAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.Filters.ExceptionFilterAttribute.OnException(System.Web.Http.Filters.HttpActionExecutedContext)">
      <summary>例外イベントを発生させます。</summary>
      <param name="actionExecutedContext">アクションのコンテキスト。</param>
    </member>
    <member name="M:System.Web.Http.Filters.ExceptionFilterAttribute.OnExceptionAsync(System.Web.Http.Filters.HttpActionExecutedContext,System.Threading.CancellationToken)"></member>
    <member name="M:System.Web.Http.Filters.ExceptionFilterAttribute.System#Web#Http#Filters#IExceptionFilter#ExecuteExceptionFilterAsync(System.Web.Http.Filters.HttpActionExecutedContext,System.Threading.CancellationToken)">
      <summary>例外フィルターを非同期に実行します。</summary>
      <returns>実行の結果。</returns>
      <param name="actionExecutedContext">アクションのコンテキスト。</param>
      <param name="cancellationToken">キャンセル コンテキスト。</param>
    </member>
    <member name="T:System.Web.Http.Filters.FilterAttribute">
      <summary>アクション フィルター属性の基本クラスを表します。</summary>
    </member>
    <member name="M:System.Web.Http.Filters.FilterAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Filters.FilterAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Http.Filters.FilterAttribute.AllowMultiple">
      <summary>複数のフィルターが許可されるかどうかを示す値を取得します。</summary>
      <returns>複数のフィルターが許可される場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="T:System.Web.Http.Filters.FilterInfo">
      <summary>使用できるアクション フィルターに関する情報を提供します。</summary>
    </member>
    <member name="M:System.Web.Http.Filters.FilterInfo.#ctor(System.Web.Http.Filters.IFilter,System.Web.Http.Filters.FilterScope)">
      <summary>
        <see cref="T:System.Web.Http.Filters.FilterInfo" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="instance">このクラスのインスタンス。</param>
      <param name="scope">このクラスのスコープ。</param>
    </member>
    <member name="P:System.Web.Http.Filters.FilterInfo.Instance">
      <summary>
        <see cref="T:System.Web.Http.Filters.FilterInfo" /> のインスタンスを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Web.Http.Filters.FilterInfo" />。</returns>
    </member>
    <member name="P:System.Web.Http.Filters.FilterInfo.Scope">
      <summary>スコープ <see cref="T:System.Web.Http.Filters.FilterInfo" /> を取得または設定します。</summary>
      <returns>FilterInfo のスコープ。</returns>
    </member>
    <member name="T:System.Web.Http.Filters.FilterScope">
      <summary>同じフィルターの種類とフィルターの順序でフィルターを実行する際の順序を指定する値を定義します。</summary>
    </member>
    <member name="F:System.Web.Http.Filters.FilterScope.Action">
      <summary>Controller の後の順序を指定します。 </summary>
    </member>
    <member name="F:System.Web.Http.Filters.FilterScope.Controller">
      <summary>Action の前と Global の後の順序を指定します。</summary>
    </member>
    <member name="F:System.Web.Http.Filters.FilterScope.Global">
      <summary>Controller の前のアクションを指定します。</summary>
    </member>
    <member name="T:System.Web.Http.Filters.HttpActionExecutedContext">
      <summary>HTTP 実行コンテキストのアクションを表します。</summary>
    </member>
    <member name="M:System.Web.Http.Filters.HttpActionExecutedContext.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Filters.HttpActionExecutedContext" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.Filters.HttpActionExecutedContext.#ctor(System.Web.Http.Controllers.HttpActionContext,System.Exception)">
      <summary>
        <see cref="T:System.Web.Http.Filters.HttpActionExecutedContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="actionContext">アクション コンテキスト。</param>
      <param name="exception">例外。</param>
    </member>
    <member name="P:System.Web.Http.Filters.HttpActionExecutedContext.ActionContext">
      <summary>HTTP アクション コンテキストを取得または設定します。</summary>
      <returns>HTTP アクション コンテキスト。</returns>
    </member>
    <member name="P:System.Web.Http.Filters.HttpActionExecutedContext.Exception">
      <summary>実行中に発生した例外を取得または設定します。</summary>
      <returns>実行中に発生した例外。</returns>
    </member>
    <member name="P:System.Web.Http.Filters.HttpActionExecutedContext.Request">
      <summary>コンテキストの <see cref="T:System.Net.Http.HttpRequestMessage" /> オブジェクトを取得します。</summary>
      <returns>コンテキストの <see cref="T:System.Net.Http.HttpRequestMessage" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Web.Http.Filters.HttpActionExecutedContext.Response">
      <summary>コンテキストの <see cref="T:System.Net.Http.HttpResponseMessage" /> を取得または設定します。</summary>
      <returns>コンテキストの <see cref="T:System.Net.Http.HttpResponseMessage" />。</returns>
    </member>
    <member name="T:System.Web.Http.Filters.HttpAuthenticationChallengeContext">
      <summary>認証チャレンジを実行するための情報を格納する認証チャレンジ コンテキストを表します。</summary>
    </member>
    <member name="M:System.Web.Http.Filters.HttpAuthenticationChallengeContext.#ctor(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.IHttpActionResult)">
      <summary>
        <see cref="T:System.Web.Http.Filters.HttpAuthenticationChallengeContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="actionContext">アクション コンテキスト。</param>
      <param name="result">現在のアクションの結果。</param>
    </member>
    <member name="P:System.Web.Http.Filters.HttpAuthenticationChallengeContext.ActionContext">
      <summary>アクション コンテキストを取得します。</summary>
    </member>
    <member name="P:System.Web.Http.Filters.HttpAuthenticationChallengeContext.Request">
      <summary>要求メッセージを取得します。</summary>
    </member>
    <member name="P:System.Web.Http.Filters.HttpAuthenticationChallengeContext.Result">
      <summary>実行するアクションの結果を取得または設定します。</summary>
    </member>
    <member name="T:System.Web.Http.Filters.HttpAuthenticationContext">
      <summary>認証を実行するための情報を格納している認証コンテキストを表します。</summary>
    </member>
    <member name="M:System.Web.Http.Filters.HttpAuthenticationContext.#ctor(System.Web.Http.Controllers.HttpActionContext,System.Security.Principal.IPrincipal)">
      <summary>
        <see cref="T:System.Web.Http.Filters.HttpAuthenticationContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="actionContext">アクション コンテキスト。</param>
      <param name="principal">現在のプリンシパル。</param>
    </member>
    <member name="P:System.Web.Http.Filters.HttpAuthenticationContext.ActionContext">
      <summary>アクション コンテキストを取得します。</summary>
      <returns>アクション コンテキスト。</returns>
    </member>
    <member name="P:System.Web.Http.Filters.HttpAuthenticationContext.ErrorResult">
      <summary>エラー応答を生成するアクション結果を取得または設定します (認証が失敗した場合。それ以外の場合は null)。</summary>
      <returns>エラー応答を生成するアクション結果。</returns>
    </member>
    <member name="P:System.Web.Http.Filters.HttpAuthenticationContext.Principal">
      <summary>認証されたプリンシパルを取得または設定します。</summary>
      <returns>認証されたプリンシパル。</returns>
    </member>
    <member name="P:System.Web.Http.Filters.HttpAuthenticationContext.Request">
      <summary>要求メッセージを取得します。</summary>
      <returns>要求メッセージ。</returns>
    </member>
    <member name="T:System.Web.Http.Filters.HttpFilterCollection">
      <summary>HTTP フィルターのコレクションを表します。</summary>
    </member>
    <member name="M:System.Web.Http.Filters.HttpFilterCollection.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Filters.HttpFilterCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.Filters.HttpFilterCollection.Add(System.Web.Http.Filters.IFilter)">
      <summary>コレクションの最後に項目を追加します。</summary>
      <param name="filter">コレクションに追加する項目。</param>
    </member>
    <member name="M:System.Web.Http.Filters.HttpFilterCollection.AddRange(System.Collections.Generic.IEnumerable{System.Web.Http.Filters.IFilter})"></member>
    <member name="M:System.Web.Http.Filters.HttpFilterCollection.Clear">
      <summary>コレクションのすべての項目を削除します。</summary>
    </member>
    <member name="M:System.Web.Http.Filters.HttpFilterCollection.Contains(System.Web.Http.Filters.IFilter)">
      <summary>指定した項目がコレクションに格納されているかどうかを確認します。</summary>
      <returns>指定した項目がコレクションに含まれている場合は true。それ以外の場合は false。</returns>
      <param name="filter">確認する項目。</param>
    </member>
    <member name="P:System.Web.Http.Filters.HttpFilterCollection.Count">
      <summary>コレクション内の要素の数を取得します。</summary>
      <returns>コレクション内の要素の数。</returns>
    </member>
    <member name="M:System.Web.Http.Filters.HttpFilterCollection.GetEnumerator">
      <summary>コレクションを反復処理する列挙子を取得します。</summary>
      <returns>コレクションの反復処理に使用できる列挙子オブジェクト。</returns>
    </member>
    <member name="M:System.Web.Http.Filters.HttpFilterCollection.Remove(System.Web.Http.Filters.IFilter)">
      <summary>指定された項目をコレクションから削除します。</summary>
      <param name="filter">コレクション内で削除する項目。</param>
    </member>
    <member name="M:System.Web.Http.Filters.HttpFilterCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を取得します。</summary>
      <returns>コレクションの反復処理に使用できる列挙子オブジェクト。</returns>
    </member>
    <member name="T:System.Web.Http.Filters.IActionFilter">
      <summary>アクション フィルターで使用されるメソッドを定義します。</summary>
    </member>
    <member name="M:System.Web.Http.Filters.IActionFilter.ExecuteActionFilterAsync(System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken,System.Func{System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}})">
      <summary>フィルター アクションを非同期に実行します。</summary>
      <returns>この操作用に新しく作成されたタスク。</returns>
      <param name="actionContext">アクション コンテキスト。</param>
      <param name="cancellationToken">このタスクに割り当てられたキャンセル トークン。</param>
      <param name="continuation">アクション メソッドを呼び出した後に続行されるデリゲート関数。</param>
    </member>
    <member name="T:System.Web.Http.Filters.IAuthenticationFilter">
      <summary>認証を実行するフィルターを定義します。</summary>
    </member>
    <member name="M:System.Web.Http.Filters.IAuthenticationFilter.AuthenticateAsync(System.Web.Http.Filters.HttpAuthenticationContext,System.Threading.CancellationToken)">
      <summary>要求を認証します。</summary>
      <returns>認証を実行するタスク。</returns>
      <param name="context">認証コンテキスト。</param>
      <param name="cancellationToken">キャンセル要求を監視するトークン。</param>
    </member>
    <member name="M:System.Web.Http.Filters.IAuthenticationFilter.ChallengeAsync(System.Web.Http.Filters.HttpAuthenticationChallengeContext,System.Threading.CancellationToken)"></member>
    <member name="T:System.Web.Http.Filters.IAuthorizationFilter">
      <summary>承認フィルターに必要なメソッドを定義します。</summary>
    </member>
    <member name="M:System.Web.Http.Filters.IAuthorizationFilter.ExecuteAuthorizationFilterAsync(System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken,System.Func{System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}})">
      <summary>同期する認証フィルターを実行します。</summary>
      <returns>同期する認証フィルター。</returns>
      <param name="actionContext">アクション コンテキスト。</param>
      <param name="cancellationToken">フィルターに関連付けられたキャンセル トークン。</param>
      <param name="continuation">続行。</param>
    </member>
    <member name="T:System.Web.Http.Filters.IExceptionFilter">
      <summary>例外フィルターに必要なメソッドを定義します。</summary>
    </member>
    <member name="M:System.Web.Http.Filters.IExceptionFilter.ExecuteExceptionFilterAsync(System.Web.Http.Filters.HttpActionExecutedContext,System.Threading.CancellationToken)">
      <summary>非同期の例外フィルターを実行します。</summary>
      <returns>非同期の例外フィルター。</returns>
      <param name="actionExecutedContext">アクション実行コンテキスト。</param>
      <param name="cancellationToken">キャンセル トークン。</param>
    </member>
    <member name="T:System.Web.Http.Filters.IFilter">
      <summary>フィルターで使用されるメソッドを定義します。</summary>
    </member>
    <member name="P:System.Web.Http.Filters.IFilter.AllowMultiple">
      <summary>示された属性の複数のインスタンスを 1 つのプログラム要素に対して指定できるかどうかを示す値を取得または設定します。</summary>
      <returns>複数のインスタンスを指定できる場合は true。それ以外の場合は false。既定値は false です。</returns>
    </member>
    <member name="T:System.Web.Http.Filters.IFilterProvider">
      <summary>フィルター情報を提供します。</summary>
    </member>
    <member name="M:System.Web.Http.Filters.IFilterProvider.GetFilters(System.Web.Http.HttpConfiguration,System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary>フィルターの列挙を返します。</summary>
      <returns>フィルターの列挙。</returns>
      <param name="configuration">HTTP 構成。</param>
      <param name="actionDescriptor">アクション記述子。</param>
    </member>
    <member name="T:System.Web.Http.Filters.IOverrideFilter"></member>
    <member name="P:System.Web.Http.Filters.IOverrideFilter.FiltersToOverride"></member>
    <member name="T:System.Web.Http.Hosting.HttpPropertyKeys">
      <summary>
        <see cref="P:System.Net.Http.HttpRequestMessage.Properties" /> に格納されているプロパティに共通のキーを提供します。</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.ClientCertificateKey">
      <summary>この要求のクライアント証明書のキーを提供します。</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.DependencyScope">
      <summary>この要求に関連付けられている <see cref="T:System.Web.Http.Dependencies.IDependencyScope" /> のキーを提供します。</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.DisposableRequestResourcesKey">
      <summary>要求が破棄されたときに破棄する必要があるリソースのコレクションにキーを提供します。</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.HttpActionDescriptorKey">
      <summary> この要求に関連付けられている <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor" /> のキーを提供します。</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.HttpConfigurationKey">
      <summary>この要求に関連付けられている <see cref="T:System.Web.Http.HttpConfiguration" /> のキーを提供します。</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.HttpRouteDataKey">
      <summary>この要求に関連付けられている <see cref="T:System.Web.Http.Routing.IHttpRouteData" /> のキーを提供します。</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.IncludeErrorDetailKey">
      <summary>この HTTP 要求の応答にエラーの詳細を含めるかどうかを示すキーを提供します。</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.IsBatchRequest">
      <summary> 要求がバッチ要求かどうかを示すキーを提供します。</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.IsLocalKey">
      <summary>要求元がローカル アドレスであるかどうかを示すキーを提供します。</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.NoRouteMatched">
      <summary> 要求がルートの一致に失敗したかどうかを示すキーを提供します。</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.RequestContextKey">
      <summary>この要求の <see cref="T:System.Web.Http.Controllers.HttpRequestContext" /> のキーを提供します。</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.RequestCorrelationKey">
      <summary>
        <see cref="T:System.Net.Http.Properties" /> に格納されている <see cref="T:System.Guid" /> にキーを提供します。これはその要求の相関 ID です。</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.RequestQueryNameValuePairsKey">
      <summary>
        <see cref="T:System.Net.Http.Properties" /> に格納されている解析済みのクエリ文字列のキーを提供します。</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.RetrieveClientCertificateDelegateKey">
      <summary>この要求のクライアント証明書を取得できるデリゲートのキーを提供します。</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.SynchronizationContextKey">
      <summary>Properties() に格納されている現在の <see cref="T:System.Threading.SynchronizationContext" /> のキーを提供します。Current() が null の場合、コンテキストは格納されません。</summary>
    </member>
    <member name="T:System.Web.Http.Hosting.IHostBufferPolicySelector">
      <summary> ホストでのバッファリング要求とバッファリング応答の使用を制御するインターフェイス。ホストがバッファリング要求、バッファリング応答、またはその両方のサポートを提供する場合、ホストはこのインターフェイスを使用して、いつバッファリングを使用するかに関するポリシーを決定できます。</summary>
    </member>
    <member name="M:System.Web.Http.Hosting.IHostBufferPolicySelector.UseBufferedInputStream(System.Object)">
      <summary>ホストが <see cref="T:System.Net.Http.HttpRequestMessage" /> エンティティ ボディをバッファーする必要があるかどうかを判断します。</summary>
      <returns>バッファリングを使用する場合は true。それ以外の場合は、ストリーミングされた要求が使用されます。</returns>
      <param name="hostContext">ホストのコンテキスト。</param>
    </member>
    <member name="M:System.Web.Http.Hosting.IHostBufferPolicySelector.UseBufferedOutputStream(System.Net.Http.HttpResponseMessage)">
      <summary>ホストが <see cref="T.System.Net.Http.HttpResponseMessage" /> エンティティ ボディをバッファーする必要があるかどうかを判断します。</summary>
      <returns>バッファリングを使用する場合は true。それ以外の場合は、ストリーミングされた応答が使用されます。</returns>
      <param name="response">HTTP 応答メッセージ。</param>
    </member>
    <member name="T:System.Web.Http.Hosting.SuppressHostPrincipalMessageHandler">
      <summary>ホストの認証結果を抑制するメッセージ ハンドラーを表します。</summary>
    </member>
    <member name="M:System.Web.Http.Hosting.SuppressHostPrincipalMessageHandler.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Hosting.SuppressHostPrincipalMessageHandler" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.Hosting.SuppressHostPrincipalMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>要求メッセージを非同期に送信します。</summary>
      <returns>非同期操作を完了するタスク。</returns>
      <param name="request">送信する要求メッセージ。</param>
      <param name="cancellationToken">キャンセル トークン。</param>
    </member>
    <member name="T:System.Web.Http.Metadata.ModelMetadata">
      <summary>ModelMetadata のメタデータ クラスを表します。</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.ModelMetadata.#ctor(System.Web.Http.Metadata.ModelMetadataProvider,System.Type,System.Func{System.Object},System.Type,System.String)">
      <summary>
        <see cref="T:System.Web.Http.Metadata.ModelMetadata" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="provider">プロバイダー。</param>
      <param name="containerType">コンテナーの型。</param>
      <param name="modelAccessor">モデル アクセサー。</param>
      <param name="modelType">モデルの型。</param>
      <param name="propertyName">プロパティの名前。</param>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.AdditionalValues">
      <summary>モデルについてのその他のメタデータを格納しているディクショナリを取得します。</summary>
      <returns>モデルについてのその他のメタデータを格納しているディクショナリ。</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.ContainerType">
      <summary>モデルのコンテナーの型を取得または設定します。</summary>
      <returns>モデルのコンテナーの型。</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.ConvertEmptyStringToNull">
      <summary>フォームからポストバックされる空の文字列を null に変換するかどうかを示す値を取得または設定します。</summary>
      <returns>フォームからポストバックされる空の文字列が null に変換される場合は true。それ以外の場合は false。既定値は、true です。</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.Description">
      <summary>モデルの説明を取得または設定します。</summary>
      <returns>モデルの説明。既定値は、null です。</returns>
    </member>
    <member name="M:System.Web.Http.Metadata.ModelMetadata.GetDisplayName">
      <summary>モデルの表示名を取得します。</summary>
      <returns>モデルの表示名。</returns>
    </member>
    <member name="M:System.Web.Http.Metadata.ModelMetadata.GetValidators(System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider})">
      <summary>モデルの検証コントロールの一覧を取得します。</summary>
      <returns>モデルの検証コントロールの一覧。</returns>
      <param name="validatorProviders">モデルの検証コントロール プロバイダー。</param>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.IsComplexType">
      <summary>モデルが複合型であるかどうかを示す値を取得または設定します。</summary>
      <returns>モデルが複合型であると見なされるかどうかを示す値。</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.IsNullableValueType">
      <summary>型が null 許容型かどうかを示す値を取得します。</summary>
      <returns>型が null 許容型である場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.IsReadOnly">
      <summary>モデルが読み取り専用かどうかを示す値を取得または設定します。</summary>
      <returns>モデルが読み取り専用である場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.Model">
      <summary>モデルの値を取得します。</summary>
      <returns>モデル値は null の場合があります。</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.ModelType">
      <summary>モデルの型を取得します。</summary>
      <returns>モデルの型。</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.Properties">
      <summary>モデルのプロパティを記述するモデル メタデータ オブジェクトのコレクションを取得します。</summary>
      <returns>モデルのプロパティを記述するモデル メタデータ オブジェクトのコレクション。</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.PropertyName">
      <summary>プロパティ名を取得します。</summary>
      <returns>プロパティ名。</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.Provider">
      <summary>プロバイダーを取得または設定します。</summary>
      <returns>プロバイダー。</returns>
    </member>
    <member name="T:System.Web.Http.Metadata.ModelMetadataProvider">
      <summary>カスタム メタデータ プロバイダーの抽象基本クラスです。</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.ModelMetadataProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Metadata.ModelMetadataProvider" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.ModelMetadataProvider.GetMetadataForProperties(System.Object,System.Type)">
      <summary>モデルの各プロパティの ModelMetadata オブジェクトを取得します。</summary>
      <returns>モデルの各プロパティの ModelMetadata オブジェクト。</returns>
      <param name="container">コンテナー。</param>
      <param name="containerType">コンテナーの型。</param>
    </member>
    <member name="M:System.Web.Http.Metadata.ModelMetadataProvider.GetMetadataForProperty(System.Func{System.Object},System.Type,System.String)">
      <summary>指定したプロパティのメタデータを取得します。</summary>
      <returns>指定したプロパティのメタデータ モデル。</returns>
      <param name="modelAccessor">モデル アクセサー。</param>
      <param name="containerType">コンテナーの型。</param>
      <param name="propertyName">メタデータ モデルを取得する対象のプロパティ。</param>
    </member>
    <member name="M:System.Web.Http.Metadata.ModelMetadataProvider.GetMetadataForType(System.Func{System.Object},System.Type)">
      <summary>指定したモデル アクセサーおよびモデルの型のメタデータを取得します。</summary>
      <returns>メタデータ。</returns>
      <param name="modelAccessor">モデル アクセサー。</param>
      <param name="modelType">モードの型。</param>
    </member>
    <member name="T:System.Web.Http.Metadata.Providers.AssociatedMetadataProvider`1">
      <summary>メタデータ プロバイダーを実装するための抽象クラスを提供します。</summary>
      <typeparam name="TModelMetadata">モデル メタデータの型。</typeparam>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.AssociatedMetadataProvider`1.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Metadata.Providers.AssociatedMetadataProvider`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.AssociatedMetadataProvider`1.CreateMetadataFromPrototype(`0,System.Func{System.Object})">
      <summary>派生クラスによってオーバーライドされると、指定されたプロトタイプを使用してプロパティのモデル メタデータを作成します。</summary>
      <returns>プロパティのモデル メタデータ。</returns>
      <param name="prototype">モデル メタデータの作成元であるプロトタイプ。</param>
      <param name="modelAccessor">モデル アクセサー。</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.AssociatedMetadataProvider`1.CreateMetadataPrototype(System.Collections.Generic.IEnumerable{System.Attribute},System.Type,System.Type,System.String)">
      <summary>派生クラスによってオーバーライドされると、プロパティのモデル メタデータを作成します。</summary>
      <returns>プロパティのモデル メタデータ。</returns>
      <param name="attributes">属性のセット。</param>
      <param name="containerType">コンテナーの型。</param>
      <param name="modelType">モデルの型。</param>
      <param name="propertyName">プロパティの名前。</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.AssociatedMetadataProvider`1.GetMetadataForProperties(System.Object,System.Type)">
      <summary>モデルのプロパティの一覧を取得します。</summary>
      <returns>モデルのプロパティのリスト。</returns>
      <param name="container">モデル コンテナー。</param>
      <param name="containerType">コンテナーの型。</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.AssociatedMetadataProvider`1.GetMetadataForProperty(System.Func{System.Object},System.Type,System.String)">
      <summary>コンテナーの型およびプロパティ名を使用して指定したプロパティのメタデータを取得します。</summary>
      <returns>指定したプロパティのメタデータ。</returns>
      <param name="modelAccessor">モデル アクセサー。</param>
      <param name="containerType">コンテナーの型。</param>
      <param name="propertyName">プロパティの名前。</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.AssociatedMetadataProvider`1.GetMetadataForType(System.Func{System.Object},System.Type)">
      <summary>モデルの型を使用して指定したプロパティのメタデータを返します。</summary>
      <returns>指定したプロパティのメタデータ。</returns>
      <param name="modelAccessor">モデル アクセサー。</param>
      <param name="modelType">コンテナーの型。</param>
    </member>
    <member name="T:System.Web.Http.Metadata.Providers.CachedDataAnnotationsMetadataAttributes">
      <summary>
        <see cref="T:System.Web.Http.Metadata.Providers.CachedModelMetadata`1" /> のプロトタイプ キャッシュ データを提供します。</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedDataAnnotationsMetadataAttributes.#ctor(System.Collections.Generic.IEnumerable{System.Attribute})">
      <summary>
        <see cref="T:System.Web.Http.Metadata.Providers.CachedDataAnnotationsMetadataAttributes" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="attributes">初期化用のデータを提供する属性。</param>
    </member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedDataAnnotationsMetadataAttributes.Display">
      <summary>メタデータの表示属性を取得または設定します。</summary>
      <returns>メタデータの表示属性。</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedDataAnnotationsMetadataAttributes.DisplayFormat">
      <summary>メタデータの表示書式属性を取得または設定します。</summary>
      <returns>メタデータの表示書式属性。</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedDataAnnotationsMetadataAttributes.DisplayName"></member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedDataAnnotationsMetadataAttributes.Editable">
      <summary>メタデータの編集可能な属性を取得または設定します。</summary>
      <returns>メタデータの編集可能な属性。</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedDataAnnotationsMetadataAttributes.ReadOnly">
      <summary>メタデータの読み取り専用属性を取得または設定します。</summary>
      <returns>メタデータの読み取り専用属性。</returns>
    </member>
    <member name="T:System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata">
      <summary>データ モデルの共通のメタデータ、<see cref="T:System.Web.Http.Metadata.Providers.DataAnnotationsModelMetadataProvider" /> クラスのコンテナーを提供します。</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata.#ctor(System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata,System.Func{System.Object})">
      <summary>
        <see cref="T:System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="prototype">モデルのメタデータを初期化するために使用されるプロトタイプ。</param>
      <param name="modelAccessor">モデル アクセサー。</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata.#ctor(System.Web.Http.Metadata.Providers.DataAnnotationsModelMetadataProvider,System.Type,System.Type,System.String,System.Collections.Generic.IEnumerable{System.Attribute})">
      <summary>
        <see cref="T:System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="provider">メタデータ プロバイダー。</param>
      <param name="containerType">コンテナーの型。</param>
      <param name="modelType">モデルの型。</param>
      <param name="propertyName">プロパティの名前。</param>
      <param name="attributes">初期化用のデータを提供する属性。</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata.ComputeConvertEmptyStringToNull">
      <summary>フォームからポストバックされる空の文字列を null に変換するかどうかを示す値を取得します。</summary>
      <returns>フォームからポストバックされる空の文字列が null に変換される場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata.ComputeDescription">
      <summary>モデルの説明を取得します。</summary>
      <returns>モデルの説明。</returns>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata.ComputeIsReadOnly">
      <summary>モデルが読み取り専用かどうかを示す値を取得します。</summary>
      <returns>モデルが読み取り専用である場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata.GetDisplayName"></member>
    <member name="T:System.Web.Http.Metadata.Providers.CachedModelMetadata`1">
      <summary>
        <see cref="T:System.Web.Http.Metadata.Providers.CachedModelMetadata`1" /> のプロトタイプ キャッシュ データを提供します。</summary>
      <typeparam name="TPrototypeCache">プロトタイプ キャッシュの型。</typeparam>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.#ctor(System.Web.Http.Metadata.Providers.CachedModelMetadata{`0},System.Func{System.Object})">
      <summary>
        <see cref="T:System.Web.Http.Metadata.Providers.CachedModelMetadata`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="prototype">プロトタイプ。</param>
      <param name="modelAccessor">モデル アクセサー。</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.#ctor(System.Web.Http.Metadata.Providers.DataAnnotationsModelMetadataProvider,System.Type,System.Type,System.String,`0)">
      <summary>
        <see cref="T:System.Web.Http.Metadata.Providers.CachedModelMetadata`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="provider">プロバイダー。</param>
      <param name="containerType">コンテナーの型。</param>
      <param name="modelType">モデルの型。</param>
      <param name="propertyName">プロパティの名前。</param>
      <param name="prototypeCache">プロトタイプ キャッシュ。</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.ComputeConvertEmptyStringToNull">
      <summary>フォームからポストバックされる空の文字列が計算され、null に変換されるかどうかを示します。</summary>
      <returns>フォームからポストバックされる空の文字列が計算され、null に変換される場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.ComputeDescription">
      <summary>計算値を示します。</summary>
      <returns>計算値。</returns>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.ComputeIsComplexType">
      <summary>モデルが複合型であるかどうかを示す値を取得します。</summary>
      <returns>Web API フレームワークによってモデルが複合型であると見なされるかどうかを示す値。</returns>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.ComputeIsReadOnly">
      <summary>計算するモデルが読み取り専用かどうかを示す値を取得します。</summary>
      <returns>計算するモデルが読み取り専用である場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.ConvertEmptyStringToNull">
      <summary>フォームからポストバックされる空の文字列を null に変換するかどうかを示す値を取得または設定します。</summary>
      <returns>フォームからポストバックされる空の文字列が null に変換される場合は true。それ以外の場合は false。既定値は、true です。</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.Description">
      <summary>モデルの説明を取得または設定します。</summary>
      <returns>モデルの説明。</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.IsComplexType">
      <summary>モデルが複合型であるかどうかを示す値を取得します。</summary>
      <returns>Web API フレームワークによってモデルが複合型であると見なされるかどうかを示す値。</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.IsReadOnly">
      <summary>モデルが読み取り専用かどうかを示す値を取得または設定します。</summary>
      <returns>モデルが読み取り専用である場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.PrototypeCache">
      <summary>プロトタイプのキャッシュが更新中であるかどうかを示す値を取得または設定します。</summary>
      <returns>プロトタイプのキャッシュが更新中の場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="T:System.Web.Http.Metadata.Providers.DataAnnotationsModelMetadataProvider">
      <summary>既定のモデル メタデータ プロバイダーを実装します。</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.DataAnnotationsModelMetadataProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Metadata.Providers.DataAnnotationsModelMetadataProvider" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.DataAnnotationsModelMetadataProvider.CreateMetadataFromPrototype(System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata,System.Func{System.Object})">
      <summary>指定されたプロパティのプロトタイプからメタデータを作成します。</summary>
      <returns>プロパティのメタデータ。</returns>
      <param name="prototype">プロトタイプ。</param>
      <param name="modelAccessor">モデル アクセサー。</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.DataAnnotationsModelMetadataProvider.CreateMetadataPrototype(System.Collections.Generic.IEnumerable{System.Attribute},System.Type,System.Type,System.String)">
      <summary>指定されたプロパティのメタデータを作成します。</summary>
      <returns>プロパティのメタデータ。</returns>
      <param name="attributes">属性。</param>
      <param name="containerType">コンテナーの型。</param>
      <param name="modelType">モデルの型。</param>
      <param name="propertyName">プロパティの名前。</param>
    </member>
    <member name="T:System.Web.Http.Metadata.Providers.EmptyModelMetadataProvider">
      <summary>空のモデル メタデータ プロバイダーを表します。</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.EmptyModelMetadataProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Metadata.Providers.EmptyModelMetadataProvider" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.EmptyModelMetadataProvider.CreateMetadataFromPrototype(System.Web.Http.Metadata.ModelMetadata,System.Func{System.Object})">
      <summary>プロトタイプからメタデータを作成します。</summary>
      <returns>メタデータ。</returns>
      <param name="prototype">モデル メタデータのプロトタイプ。</param>
      <param name="modelAccessor">モデル アクセサー。</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.EmptyModelMetadataProvider.CreateMetadataPrototype(System.Collections.Generic.IEnumerable{System.Attribute},System.Type,System.Type,System.String)">
      <summary>
        <see cref="T:System.Web.Http.Metadata.Providers.EmptyModelMetadataProvider" /> のメタデータ プロバイダーのプロトタイプを作成します。</summary>
      <returns>メタデータ プロバイダーのプロトタイプ。</returns>
      <param name="attributes">属性。</param>
      <param name="containerType">コンテナーの型。</param>
      <param name="modelType">モデルの型。</param>
      <param name="propertyName">プロパティの名前。</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.CancellationTokenParameterBinding">
      <summary>キャンセル トークンに対する直接バインディングを表します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.CancellationTokenParameterBinding.#ctor(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.CancellationTokenParameterBinding" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="descriptor">バインディング記述子。</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.CancellationTokenParameterBinding.ExecuteBindingAsync(System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
      <summary>同期中にバインディングを実行します。</summary>
      <returns>同期中のバインディング。</returns>
      <param name="metadataProvider">メタデータ プロバイダー。</param>
      <param name="actionContext">アクション コンテキスト。</param>
      <param name="cancellationToken">操作の取り消し後の通知。</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.CustomModelBinderAttribute">
      <summary>カスタム モデル バインダーを呼び出す属性を表します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.CustomModelBinderAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.CustomModelBinderAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.CustomModelBinderAttribute.GetBinder">
      <summary>関連付けられたモデル バインダーを取得します。</summary>
      <returns>
        <see cref="T:System.Web.Http.ModelBinding.IModelBinder" /> インターフェイスを実装するオブジェクトへの参照。</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.DefaultActionValueBinder">
      <summary>バインダーの既定のアクション値を表します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.DefaultActionValueBinder.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.DefaultActionValueBinder" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.DefaultActionValueBinder.GetBinding(System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary>
        <see cref="T:System.Web.Http.Controllers.IActionValueBinder" /> インターフェイスの既定の実装。このインターフェイスは、アクションのパラメーターをバインドするための主なエントリ ポイントです。</summary>
      <returns>
        <see cref="T:System.Web.Http.ModelBinding.DefaultActionValueBinder" /> に関連付けられた <see cref="T:System.Web.Http.Controllers.HttpActionBinding" />。</returns>
      <param name="actionDescriptor">アクション記述子。</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.DefaultActionValueBinder.GetParameterBinding(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.DefaultActionValueBinder" /> に関連付けられた <see cref="T:System.Web.Http.Controllers.HttpParameterBinding" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Web.Http.ModelBinding.DefaultActionValueBinder" /> に関連付けられた <see cref="T:System.Web.Http.Controllers.HttpParameterBinding" />。</returns>
      <param name="parameter">パラメーター記述子。</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ErrorParameterBinding">
      <summary>バインディング エラーを定義します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ErrorParameterBinding.#ctor(System.Web.Http.Controllers.HttpParameterDescriptor,System.String)">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.ErrorParameterBinding" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="descriptor">エラー記述子。</param>
      <param name="message">メッセージ。</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ErrorParameterBinding.ErrorMessage">
      <summary>エラー メッセージを取得します。</summary>
      <returns>エラー メッセージ。</returns>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ErrorParameterBinding.ExecuteBindingAsync(System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
      <summary>同期中にバインディング メソッドを実行します。</summary>
      <param name="metadataProvider">メタデータ プロバイダー。</param>
      <param name="actionContext">アクション コンテキスト。</param>
      <param name="cancellationToken">キャンセル トークンの値。</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.FormatterParameterBinding">
      <summary>ボディから読み取られ、フォーマッタを呼び出すパラメーター バインディングを表します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormatterParameterBinding.#ctor(System.Web.Http.Controllers.HttpParameterDescriptor,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Web.Http.Validation.IBodyModelValidator)">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.FormatterParameterBinding" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="descriptor">記述子。</param>
      <param name="formatters">フォーマッタ。</param>
      <param name="bodyModelValidator">ボディのモデル検証コントロール。</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.FormatterParameterBinding.BodyModelValidator">
      <summary>ボディ モデルの検証コントロール用のインターフェイスを取得または設定します。</summary>
      <returns>ボディ モデルの検証コントロール用のインターフェイス。</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.FormatterParameterBinding.ErrorMessage">
      <summary>エラー メッセージを取得します。</summary>
      <returns>エラー メッセージ。</returns>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormatterParameterBinding.ExecuteBindingAsync(System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.FormatterParameterBinding" /> のバインドを非同期に実行します。</summary>
      <returns>アクションの結果。</returns>
      <param name="metadataProvider">メタデータ プロバイダー。</param>
      <param name="actionContext">アクションに関連付けられたコンテキスト。</param>
      <param name="cancellationToken">キャンセル トークン。</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.FormatterParameterBinding.Formatters">
      <summary>パラメーター バインディングのフォーマッタを表す列挙可能なオブジェクトを取得または設定します。</summary>
      <returns>パラメーター バインディングのフォーマッタを表す列挙可能なオブジェクト。</returns>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormatterParameterBinding.ReadContentAsync(System.Net.Http.HttpRequestMessage,System.Type,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Net.Http.Formatting.IFormatterLogger)">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.FormatterParameterBinding" /> の内容を非同期に読み取ります。</summary>
      <returns>アクションの結果。</returns>
      <param name="request">要求。</param>
      <param name="type">型。</param>
      <param name="formatters">フォーマッタ。</param>
      <param name="formatterLogger">フォーマット ロガー。</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormatterParameterBinding.ReadContentAsync(System.Net.Http.HttpRequestMessage,System.Type,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Net.Http.Formatting.IFormatterLogger,System.Threading.CancellationToken)"></member>
    <member name="P:System.Web.Http.ModelBinding.FormatterParameterBinding.WillReadBody">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.FormatterParameterBinding" /> がボディを読み取るかどうかを取得します。</summary>
      <returns>
        <see cref="T:System.Web.Http.ModelBinding.FormatterParameterBinding" /> がボディを読み取る場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.FormDataCollectionExtensions">
      <summary>フォーム データのコレクションの拡張機能を表します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs``1(System.Net.Http.Formatting.FormDataCollection)">
      <summary>指定された型のコレクションの拡張機能を読み取ります。</summary>
      <returns>読み取られたコレクションの拡張機能。</returns>
      <param name="formData">フォーム データ。</param>
      <typeparam name="T">ジェネリック型。</typeparam>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs``1(System.Net.Http.Formatting.FormDataCollection,System.String,System.Net.Http.Formatting.IRequiredMemberSelector,System.Net.Http.Formatting.IFormatterLogger)">
      <summary>指定された型のコレクションの拡張機能を読み取ります。</summary>
      <returns>コレクションの拡張機能。</returns>
      <param name="formData">フォーム データ。</param>
      <param name="modelName">モデルの名前。</param>
      <param name="requiredMemberSelector">必要なメンバー セレクター。</param>
      <param name="formatterLogger">フォーマッタ ロガー。</param>
      <typeparam name="T">ジェネリック型。</typeparam>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs``1(System.Net.Http.Formatting.FormDataCollection,System.String,System.Web.Http.Controllers.HttpActionContext)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs(System.Net.Http.Formatting.FormDataCollection,System.Type)">
      <summary>指定された型のコレクションの拡張機能を読み取ります。</summary>
      <returns>指定された型のコレクションの拡張機能。</returns>
      <param name="formData">フォーム データ。</param>
      <param name="type">オブジェクトの型。</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs(System.Net.Http.Formatting.FormDataCollection,System.Type,System.String,System.Net.Http.Formatting.IRequiredMemberSelector,System.Net.Http.Formatting.IFormatterLogger)">
      <summary>指定された型およびモデル名のコレクションの拡張機能を読み取ります。</summary>
      <returns>コレクションの拡張機能。</returns>
      <param name="formData">フォーム データ。</param>
      <param name="type">オブジェクトの型。</param>
      <param name="modelName">モデルの名前。</param>
      <param name="requiredMemberSelector">必要なメンバー セレクター。</param>
      <param name="formatterLogger">フォーマッタ ロガー。</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs(System.Net.Http.Formatting.FormDataCollection,System.Type,System.String,System.Net.Http.Formatting.IRequiredMemberSelector,System.Net.Http.Formatting.IFormatterLogger,System.Web.Http.HttpConfiguration)">
      <summary>モデル バインディングを使用してフォーム データを指定された型に逆シリアル化します。</summary>
      <returns>オブジェクトをバインドする最善の試み。最善の試みは null にすることができます。</returns>
      <param name="formData">解析されたフォーム URL データを含むコレクション</param>
      <param name="type">読み取る対象の型</param>
      <param name="modelName">フォーム全体を単一のオブジェクトとして読み取る場合は null または空白。これはボディ データにも共通します。または、フォーム データに対して部分的なバインディングを実行する場合はモデルの名前。これは、各フィールドの抽出にも共通します。</param>
      <param name="requiredMemberSelector">必要なメンバーを決定するために使用される <see cref="T:System.Net.Http.Formatting.IRequiredMemberSelector" />。</param>
      <param name="formatterLogger">イベントを記録する <see cref="T:System.Net.Http.Formatting.IFormatterLogger" />。</param>
      <param name="config">バインダーの選択元の <see cref="T:System.Web.Http.HttpConfiguration" /> 構成。構成がまだ作成されていない場合は null にすることができます。その場合、新しい構成が作成されます。</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs(System.Net.Http.Formatting.FormDataCollection,System.Type,System.String,System.Web.Http.Controllers.HttpActionContext)"></member>
    <member name="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs(System.Net.Http.Formatting.FormDataCollection,System.Type,System.Web.Http.Controllers.HttpActionContext)"></member>
    <member name="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs``1(System.Net.Http.Formatting.FormDataCollection,System.Web.Http.Controllers.HttpActionContext)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="T:System.Web.Http.ModelBinding.HttpBindingBehavior">
      <summary>HTTP バインドの動作を列挙します。</summary>
    </member>
    <member name="F:System.Web.Http.ModelBinding.HttpBindingBehavior.Never">
      <summary>HTTP バインドを使用しません。</summary>
    </member>
    <member name="F:System.Web.Http.ModelBinding.HttpBindingBehavior.Optional">
      <summary>オプションのバインド動作</summary>
    </member>
    <member name="F:System.Web.Http.ModelBinding.HttpBindingBehavior.Required">
      <summary>HTTP バインドが必要です。</summary>
    </member>
    <member name="T:System.Web.Http.ModelBinding.HttpBindingBehaviorAttribute">
      <summary>モデル バインディング動作属性の基本クラスを提供します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.HttpBindingBehaviorAttribute.#ctor(System.Web.Http.ModelBinding.HttpBindingBehavior)">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.HttpBindingBehaviorAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="behavior">動作。</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.HttpBindingBehaviorAttribute.Behavior">
      <summary>動作カテゴリを取得または設定します。</summary>
      <returns>動作カテゴリ。</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.HttpBindingBehaviorAttribute.TypeId">
      <summary>この属性の一意の識別子を取得します。</summary>
      <returns>この属性の ID。</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.HttpRequestParameterBinding">
      <summary>パラメーターは要求にバインドされます。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.HttpRequestParameterBinding.#ctor(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.HttpRequestParameterBinding" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="descriptor">パラメーター記述子。</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.HttpRequestParameterBinding.ExecuteBindingAsync(System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
      <summary>パラメーター バインディングを非同期に実行します。</summary>
      <returns>バインドされたパラメーター。</returns>
      <param name="metadataProvider">メタデータ プロバイダー。</param>
      <param name="actionContext">アクション コンテキスト。</param>
      <param name="cancellationToken">キャンセル トークン。</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.IModelBinder">
      <summary>モデル バインダーに必要なメソッドを定義します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.IModelBinder.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>指定されたコントローラー コンテキストおよびバインディング コンテキストを使用して、モデルを値にバインドします。</summary>
      <returns>モデル バインディングが正常に実行された場合は true。それ以外の場合は false。</returns>
      <param name="actionContext">アクション コンテキスト。</param>
      <param name="bindingContext">バインディング コンテキスト。</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.IValueProviderParameterBinding">
      <summary>パラメーター バインディングの値プロバイダーを表します。</summary>
    </member>
    <member name="P:System.Web.Http.ModelBinding.IValueProviderParameterBinding.ValueProviderFactories">
      <summary>このパラメーター バインディングで使用される <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" /> のインスタンスを取得します。</summary>
      <returns>このパラメーター バインディングで使用される <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" /> のインスタンス。</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.JQueryMvcFormUrlEncodedFormatter">
      <summary>HTML フォームの URL エンコード データを処理する <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> クラスを表し、application/x-www-form-urlencoded とも呼ばれます。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.JQueryMvcFormUrlEncodedFormatter.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.JQueryMvcFormUrlEncodedFormatter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.JQueryMvcFormUrlEncodedFormatter.#ctor(System.Web.Http.HttpConfiguration)"></member>
    <member name="M:System.Web.Http.ModelBinding.JQueryMvcFormUrlEncodedFormatter.CanReadType(System.Type)">
      <summary> この <see cref="T:System.Web.Http.ModelBinding.JQueryMvcFormUrlEncodedFormatter" /> が、指定された <paramref name="type" /> のオブジェクトを読み取ることができるかどうかを判断します。</summary>
      <returns>この型のオブジェクトを読み取ることができる場合は true。それ以外の場合は false。</returns>
      <param name="type">読み込まれるオブジェクトの型。</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.JQueryMvcFormUrlEncodedFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
      <summary>指定された <paramref name="type" /> のオブジェクトを、指定されたストリームから読み取ります。このメソッドは逆シリアル化中に呼び出されます。</summary>
      <returns>読み取ったオブジェクト インスタンスを生成する <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="type">読み取るオブジェクトの型。</param>
      <param name="readStream">読み取り元の <see cref="T:System.IO.Stream" />。</param>
      <param name="content">読み取られるコンテンツ。</param>
      <param name="formatterLogger">イベントを記録する <see cref="T:System.Net.Http.Formatting.IFormatterLogger" />。</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelBinderAttribute">
      <summary>このパラメーターがモデル バインダーを使用することを指定します。これによって、オプションで、特定のモデル バインダーやモデル バインダーを駆動する値プロバイダーを指定できます。派生属性によって、モデル バインダーまたは値プロバイダーの便利な設定を指定することもできます。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.ModelBinderAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderAttribute.#ctor(System.Type)">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.ModelBinderAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="binderType">モデル バインダーの型。</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBinderAttribute.BinderType">
      <summary>モデル バインダーの型を取得または設定します。</summary>
      <returns>モデル バインダーの型。</returns>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderAttribute.GetBinding(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>パラメーターのバインディングを取得します。</summary>
      <returns>バインディングを格納している <see cref="T:System.Web.Http.Controllers.HttpParameterBinding" />。</returns>
      <param name="parameter">バインドするパラメーター。</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderAttribute.GetModelBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary> この型の IModelBinder を取得します。</summary>
      <returns> null でないモデル バインダー。</returns>
      <param name="configuration">構成。</param>
      <param name="modelType">バインダーがバインドすることが想定されているモデル型。</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderAttribute.GetModelBinderProvider(System.Web.Http.HttpConfiguration)">
      <summary>モデル バインダー プロバイダーを取得します。</summary>
      <returns>
        <see cref="T:System.Web.Http.ModelBinding.ModelBinderProvider" /> インスタンス。</returns>
      <param name="configuration">
        <see cref="T:System.Web.Http.HttpConfiguration" /> 構成オブジェクト。</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderAttribute.GetValueProviderFactories(System.Web.Http.HttpConfiguration)">
      <summary> モデル バインダーにフィードされる値プロバイダーを取得します。</summary>
      <returns>
        <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" /> のインスタンスのコレクション。</returns>
      <param name="configuration">
        <see cref="T:System.Web.Http.HttpConfiguration" /> 構成オブジェクト。</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBinderAttribute.Name">
      <summary>モデル バインド時にパラメーター名と見なす名前を取得または設定します。</summary>
      <returns>考慮するパラメーター名。</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBinderAttribute.SuppressPrefixCheck">
      <summary>プレフィックス チェックを抑制する必要があるかどうかを示す値を取得または設定します。</summary>
      <returns>プレフィックス チェックを抑制する必要がある場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelBinderConfig">
      <summary>モデル バインダー構成のコンテナーを提供します。</summary>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBinderConfig.ResourceClassKey">
      <summary>ローカライズ済みの文字列値が含まれるリソース ファイル (クラス キー) の名前を取得または設定します。</summary>
      <returns>リソース ファイル (クラス キー) の名前。</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBinderConfig.TypeConversionErrorMessageProvider">
      <summary>型変換エラー メッセージの現在のプロバイダーを取得または設定します。</summary>
      <returns>型変換エラー メッセージの現在のプロバイダー。</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBinderConfig.ValueRequiredErrorMessageProvider">
      <summary>必須値のエラー メッセージの現在のプロバイダーを取得または設定します。</summary>
      <returns>エラー メッセージ プロバイダー。</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelBinderErrorMessageProvider">
      <summary>モデル バインダーのエラー メッセージ プロバイダーのコンテナーを提供します。</summary>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelBinderParameterBinding">
      <summary> ModelBinding によってバインドされるパラメーターを記述します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderParameterBinding.#ctor(System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.ModelBinding.IModelBinder,System.Collections.Generic.IEnumerable{System.Web.Http.ValueProviders.ValueProviderFactory})">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.ModelBinderParameterBinding" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="descriptor">パラメーター記述子。</param>
      <param name="modelBinder">モデル バインダー。</param>
      <param name="valueProviderFactories">値プロバイダー ファクトリのコレクション。</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBinderParameterBinding.Binder">
      <summary>モデル バインダーを取得します。</summary>
      <returns>モデル バインダー。</returns>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderParameterBinding.ExecuteBindingAsync(System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
      <summary>モデル バインダーによってパラメーター バインディングを非同期に実行します。</summary>
      <returns>バインディングが完了したときに通知されるタスク。</returns>
      <param name="metadataProvider">検証に使用するメタデータ プロバイダー。</param>
      <param name="actionContext">バインディングのアクション コンテキスト。</param>
      <param name="cancellationToken">バインディング操作を取り消すために、このタスクに割り当てられたキャンセル トークン。</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBinderParameterBinding.ValueProviderFactories">
      <summary>値プロバイダー ファクトリのコレクションを取得します。</summary>
      <returns>値プロバイダー ファクトリのコレクション。</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelBinderProvider">
      <summary>モデル バインダー プロバイダーの抽象型基本クラスを提供します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.ModelBinderProvider" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>指定された型のバインダーを検索します。</summary>
      <returns>この型のバインドを試みることができるバインダー。バインダーがこの型を静的にバインドできないことがわかっている場合は null。</returns>
      <param name="configuration">構成オブジェクト。</param>
      <param name="modelType">バインドするモデルの型。</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelBindingContext">
      <summary>モデル バインダーが動作するコンテキストを提供します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBindingContext.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.ModelBindingContext" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBindingContext.#ctor(System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.ModelBindingContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="bindingContext">バインディング コンテキスト。</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBindingContext.FallbackToEmptyPrefix">
      <summary>バインダーが空のプレフィックスを使用する必要があるかどうかを示す値を取得または設定します。</summary>
      <returns>バインダーが空のプレフィックスを使用する必要がある場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBindingContext.Model">
      <summary>モデルを取得または設定します。</summary>
      <returns>モデル。</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBindingContext.ModelMetadata">
      <summary>モデル メタデータを取得または設定します。</summary>
      <returns>モデル メタデータ。</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBindingContext.ModelName">
      <summary>モデルの名前を取得または設定します。</summary>
      <returns>モデルの名前。</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBindingContext.ModelState">
      <summary>モデルの状態を取得または設定します。</summary>
      <returns>モデルの状態。</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBindingContext.ModelType">
      <summary>モデルの型を取得または設定します。</summary>
      <returns>モデルの型。</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBindingContext.PropertyMetadata">
      <summary>プロパティのメタデータを取得します。</summary>
      <returns>プロパティのメタデータ。</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBindingContext.ValidationNode">
      <summary>検証ノードを取得または設定します。</summary>
      <returns>検証ノード。</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBindingContext.ValueProvider">
      <summary>値プロバイダーを取得または設定します。</summary>
      <returns>値プロバイダー。</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelError">
      <summary>モデル バインディング時に発生するエラーを表します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelError.#ctor(System.Exception)">
      <summary>指定された例外を使用して、<see cref="T:System.Web.Http.ModelBinding.ModelError" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="exception">例外。</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelError.#ctor(System.Exception,System.String)">
      <summary>指定された例外およびエラー メッセージを使用して、<see cref="T:System.Web.Http.ModelBinding.ModelError" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="exception">例外。</param>
      <param name="errorMessage">エラー メッセージ。</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelError.#ctor(System.String)">
      <summary>指定されたエラー メッセージを使用して、<see cref="T:System.Web.Http.ModelBinding.ModelError" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="errorMessage">エラー メッセージ。</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelError.ErrorMessage">
      <summary>エラー メッセージを取得または設定します。</summary>
      <returns>エラー メッセージ。</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelError.Exception">
      <summary>例外オブジェクトを取得または設定します。</summary>
      <returns>例外オブジェクト。</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelErrorCollection">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.ModelError" /> のインスタンスのコレクションを表します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelErrorCollection.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.ModelErrorCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelErrorCollection.Add(System.Exception)">
      <summary>指定された Exception オブジェクトをモデル エラー コレクションに追加します。</summary>
      <param name="exception">例外。</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelErrorCollection.Add(System.String)">
      <summary>指定されたエラー メッセージをモデル エラー コレクションに追加します。</summary>
      <param name="errorMessage">エラー メッセージ。</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelState">
      <summary>アクション メソッド引数のプロパティまたはアクション メソッド引数自体へのモデル バインディングの状態をカプセル化します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelState.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.ModelState" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelState.Errors">
      <summary>モデル バインディング時に発生したエラーを格納している <see cref="T:System.Web.Http.ModelBinding.ModelErrorCollection" /> オブジェクトを取得します。</summary>
      <returns>モデル状態エラー。</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelState.Value">
      <summary>モデル バインド中にバインディングが行われていた値をカプセル化する <see cref="T:System.Web.Http.ValueProviders.ValueProviderResult" /> オブジェクトを取得します。</summary>
      <returns>モデル状態値。</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelStateDictionary">
      <summary>検証情報を含めて、アクション メソッドへのポストされたフォームのバインド試行の状態を表します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.ModelStateDictionary" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.#ctor(System.Web.Http.ModelBinding.ModelStateDictionary)">
      <summary>指定されたモデル状態ディクショナリからコピーされた値を使用して、<see cref="T:System.Web.Http.ModelBinding.ModelStateDictionary" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dictionary">ディクショナリ。</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Web.Http.ModelBinding.ModelState})">
      <summary>指定された項目をモデル状態ディクショナリに追加します。</summary>
      <param name="item">モデル状態ディクショナリに追加するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.Add(System.String,System.Web.Http.ModelBinding.ModelState)">
      <summary>指定されたキーと値を持つ要素をモデル状態ディクショナリに追加します。</summary>
      <param name="key">追加する要素のキー。</param>
      <param name="value">追加する要素の値。</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.AddModelError(System.String,System.Exception)">
      <summary>指定されたキーに関連付けられたモデル状態ディクショナリのエラー コレクションに、指定されたモデル エラーを追加します。</summary>
      <param name="key">キー。</param>
      <param name="exception">例外。</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.AddModelError(System.String,System.String)">
      <summary>指定されたエラー メッセージを、指定されたキーに関連付けられたモデル状態ディクショナリのエラー コレクションに追加します。</summary>
      <param name="key">キー。</param>
      <param name="errorMessage">エラー メッセージ。</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.Clear">
      <summary>モデル状態ディクショナリからすべての項目を削除します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Web.Http.ModelBinding.ModelState})">
      <summary>特定の値がモデル状態ディクショナリに格納されているかどうかを判断します。</summary>
      <returns>項目がモデル状態ディクショナリ内に存在する場合は true。それ以外の場合は false。</returns>
      <param name="item">モデル状態ディクショナリ内で検索するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.ContainsKey(System.String)">
      <summary>指定されたキーがモデル状態ディクショナリに格納されているかどうかを判断します。</summary>
      <returns>指定されたキーがモデル状態ディクショナリに格納されている場合は true。それ以外の場合は false。</returns>
      <param name="key">モデル状態ディクショナリ内で検索するキー。</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Web.Http.ModelBinding.ModelState}[],System.Int32)">
      <summary>指定されたインデックスを開始位置として、モデル状態ディクショナリの要素を配列にコピーします。</summary>
      <param name="array">配列。この配列には、0 から始まるインデックスを使用する必要があります。</param>
      <param name="arrayIndex">コピーの開始位置となる、配列内の 0 から始まるインデックス。</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelStateDictionary.Count">
      <summary>コレクション内のキーと値のペアの数を取得します。</summary>
      <returns>コレクション内のキーと値のペア数。</returns>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.GetEnumerator">
      <summary>コレクションを反復処理するために使用できる列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelStateDictionary.IsReadOnly">
      <summary>コレクションが読み取り専用かどうかを示す値を取得します。</summary>
      <returns>コレクションが読み取り専用である場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelStateDictionary.IsValid">
      <summary>このモデル状態ディクショナリのインスタンスが有効であるかどうかを示す値を取得します。</summary>
      <returns>このインスタンスが有効である場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.IsValidField(System.String)">
      <summary>指定されたキーに関連付けられているか指定されたキーをプレフィックスとする <see cref="T:System.Web.Http.ModelBinding.ModelError" /> オブジェクトが存在するかどうかを判断します。</summary>
      <returns>指定されたキーに関連付けられた値がモデル状態ディクショナリに含まれている場合は true。それ以外の場合は false。</returns>
      <param name="key">キー。</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelStateDictionary.Item(System.String)">
      <summary>指定したキーに関連付けられている値を取得または設定します。</summary>
      <returns>モデル状態項目。</returns>
      <param name="key">キー。</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelStateDictionary.Keys">
      <summary>ディクショナリ内のキーが格納されているコレクションを取得します。</summary>
      <returns>モデル状態ディクショナリのキーが格納されているコレクション。</returns>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.Merge(System.Web.Http.ModelBinding.ModelStateDictionary)">
      <summary>指定された <see cref="T:System.Web.Http.ModelBinding.ModelStateDictionary" /> オブジェクトからこのディクショナリに値をコピーし、キーが同じである場合は既存の値を上書きします。</summary>
      <param name="dictionary">ディクショナリ。</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Web.Http.ModelBinding.ModelState})">
      <summary>モデル状態ディクショナリから最初に見つかった指定のオブジェクトを削除します。</summary>
      <returns>項目がモデル状態ディクショナリから正常に削除された場合は true。それ以外の場合は false。このメソッドは、項目がモデル状態ディクショナリ内で見つからない場合にも false を返します。</returns>
      <param name="item">モデル状態ディクショナリから削除するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.Remove(System.String)">
      <summary>指定されたキーを持つ要素をモデル状態ディクショナリから削除します。</summary>
      <returns>要素が正常に削除された場合は true。それ以外の場合は false。このメソッドは、キーがモデル状態ディクショナリ内で見つからない場合にも false を返します。</returns>
      <param name="key">削除する要素のキー。</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.SetModelValue(System.String,System.Web.Http.ValueProviders.ValueProviderResult)">
      <summary>指定された値プロバイダー ディクショナリを使用して、指定されたキーの値を設定します。</summary>
      <param name="key">キー。</param>
      <param name="value">値。</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションを反復処理するために使用できる IEnumerator オブジェクト。</returns>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.TryGetValue(System.String,System.Web.Http.ModelBinding.ModelState@)">
      <summary>指定されたキーに関連付けられている値の取得を試みます。</summary>
      <returns>指定されたキーを持つ要素がオブジェクトに格納されている場合は true。それ以外の場合は false。</returns>
      <param name="key">取得する値のキー。</param>
      <param name="value">指定されたキーに関連付けられている値。</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelStateDictionary.Values">
      <summary>ディクショナリ内の値が格納されているコレクションを取得します。</summary>
      <returns>モデル状態ディクショナリの値が格納されているコレクション。</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ParameterBindingRulesCollection">
      <summary> 指定されたパラメーターのパラメーター バインディングを作成できる関数のコレクション。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ParameterBindingRulesCollection.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.ParameterBindingRulesCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ParameterBindingRulesCollection.Add(System.Type,System.Func{System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.Controllers.HttpParameterBinding})">
      <summary> コレクションの末尾に関数を追加します。追加される関数は、parameterType が typeMatch に一致することを確認する、funcInner のラッパーです。</summary>
      <param name="typeMatch">HttpParameterDescriptor.ParameterType に対して一致させる型</param>
      <param name="funcInner">型一致が成功した場合に呼び出される内部関数</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ParameterBindingRulesCollection.Insert(System.Int32,System.Type,System.Func{System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.Controllers.HttpParameterBinding})">
      <summary> コレクションの指定されたインデックス位置に関数を挿入します。/// 追加される関数は、parameterType が typeMatch に一致することを確認する、funcInner のラッパーです。</summary>
      <param name="index">挿入する位置のインデックス。</param>
      <param name="typeMatch">HttpParameterDescriptor.ParameterType に対して一致させる型</param>
      <param name="funcInner">型一致が成功した場合に呼び出される内部関数</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ParameterBindingRulesCollection.LookupBinding(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary> バインド関数の 1 つが null でないバインディングを返すまで、各バインド関数を順に実行します。</summary>
      <returns>パラメーターに対して作成された最初の null でないバインディング。バインディングが作成されない場合は null。</returns>
      <param name="parameter">バインドするパラメーター。</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.ArrayModelBinder`1">
      <summary>ブラウザー要求を配列に対応付けます。</summary>
      <typeparam name="TElement">配列の型。</typeparam>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ArrayModelBinder`1.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.ArrayModelBinder`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ArrayModelBinder`1.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>モデルがバインドされているかどうかを示します。</summary>
      <returns>指定されたモデルがバインドされている場合は true。それ以外の場合は false。</returns>
      <param name="actionContext">アクション コンテキスト。</param>
      <param name="bindingContext">バインディング コンテキスト。</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ArrayModelBinder`1.CreateOrReplaceCollection(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext,System.Collections.Generic.IList{`0})">
      <summary>コレクションを配列に変換します。</summary>
      <returns>すべてのケースで true。</returns>
      <param name="actionContext">アクション コンテキスト。</param>
      <param name="bindingContext">バインディング コンテキスト。</param>
      <param name="newCollection">新しいコレクション。</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.ArrayModelBinderProvider">
      <summary>配列のモデル バインダーを提供します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ArrayModelBinderProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.ArrayModelBinderProvider" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ArrayModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>配列のモデル バインダーを返します。</summary>
      <returns>モデル バインダー オブジェクト。モデル バインダーの取得に失敗した場合は null。</returns>
      <param name="configuration">構成。</param>
      <param name="modelType">モデルの型。</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.CollectionModelBinder`1">
      <summary>ブラウザー要求をコレクションに対応付けます。</summary>
      <typeparam name="TElement">コレクションの型。</typeparam>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CollectionModelBinder`1.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.CollectionModelBinder`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CollectionModelBinder`1.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>指定された実行コンテキストおよびバインディング コンテキストを使用して、モデルをバインドします。</summary>
      <returns>モデル バインディングが正常に実行された場合は true。それ以外の場合は false。</returns>
      <param name="actionContext">アクション コンテキスト。</param>
      <param name="bindingContext">バインディング コンテキスト。</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CollectionModelBinder`1.CreateOrReplaceCollection(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext,System.Collections.Generic.IList{`0})">
      <summary>派生クラスがコレクションを操作した後でそれをバインダーから返す方法を提供します。</summary>
      <returns>すべてのケースで true。</returns>
      <param name="actionContext">アクション コンテキスト。</param>
      <param name="bindingContext">バインディング コンテキスト。</param>
      <param name="newCollection">新しいコレクション。</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.CollectionModelBinderProvider">
      <summary>コレクションのモデル バインダーを提供します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CollectionModelBinderProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.CollectionModelBinderProvider" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CollectionModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>コレクションのモデル バインダーを取得します。</summary>
      <returns>モデル バインダー。</returns>
      <param name="configuration">モデルの構成。</param>
      <param name="modelType">モデルの型。</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto">
      <summary>複合型モデルのデータ転送オブジェクト (DTO) を表します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ComplexModelDto.#ctor(System.Web.Http.Metadata.ModelMetadata,System.Collections.Generic.IEnumerable{System.Web.Http.Metadata.ModelMetadata})">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="modelMetadata">モデル メタデータ。</param>
      <param name="propertyMetadata">プロパティ メタデータのコレクション。</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.Binders.ComplexModelDto.ModelMetadata">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto" /> のモデル メタデータを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto" /> のモデル メタデータ。</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.Binders.ComplexModelDto.PropertyMetadata">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto" /> のプロパティ メタデータのコレクションを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto" /> のプロパティ メタデータのコレクション。</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.Binders.ComplexModelDto.Results">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto" /> の結果を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto" /> の結果。</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.ComplexModelDtoModelBinder">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto" /> オブジェクトのモデル バインダーを表します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ComplexModelDtoModelBinder.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDtoModelBinder" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ComplexModelDtoModelBinder.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>指定されたモデルがバインドされているかどうかを判断します。</summary>
      <returns>指定されたモデルがバインドされている場合は true。それ以外の場合は false。</returns>
      <param name="actionContext">アクション コンテキスト。</param>
      <param name="bindingContext">バインディング コンテキスト。</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.ComplexModelDtoModelBinderProvider">
      <summary>モデル バインダー プロバイダーを呼び出す複合型モデルを表します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ComplexModelDtoModelBinderProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDtoModelBinderProvider" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ComplexModelDtoModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>関連付けられたモデル バインダーを取得します。</summary>
      <returns>モデル バインダー。</returns>
      <param name="configuration">構成。</param>
      <param name="modelType">取得するモデルの型。</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.ComplexModelDtoResult">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto" /> オブジェクトの結果を表します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ComplexModelDtoResult.#ctor(System.Object,System.Web.Http.Validation.ModelValidationNode)">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDtoResult" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="model">オブジェクト モデル。</param>
      <param name="validationNode">検証ノード。</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.Binders.ComplexModelDtoResult.Model">
      <summary>このオブジェクトのモデルを取得または設定します。</summary>
      <returns>このオブジェクトのモデル。</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.Binders.ComplexModelDtoResult.ValidationNode">
      <summary>このオブジェクトの <see cref="T:System.Web.Http.Validation.ModelValidationNode" /> を取得または設定します。</summary>
      <returns>このオブジェクトの <see cref="T:System.Web.Http.Validation.ModelValidationNode" />。</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.CompositeModelBinder">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.ModelBinderProvider" /> インスタンスのコレクションのいずれかにデリゲートされる <see cref="T:System.Web.Http.ModelBinding.IModelBinder" /> を表します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CompositeModelBinder.#ctor(System.Collections.Generic.IEnumerable{System.Web.Http.ModelBinding.IModelBinder})">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.CompositeModelBinder" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="binders">バインダーの列挙。</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CompositeModelBinder.#ctor(System.Web.Http.ModelBinding.IModelBinder[])">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.CompositeModelBinder" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="binders">バインダーの配列。</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CompositeModelBinder.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>指定されたモデルがバインドされているかどうかを示します。</summary>
      <returns>モデルがバインドされている場合は true。それ以外の場合は false。</returns>
      <param name="actionContext">アクション コンテキスト。</param>
      <param name="bindingContext">バインディング コンテキスト。</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.CompositeModelBinderProvider">
      <summary>複合モデル バインド プロバイダーのクラスを表します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CompositeModelBinderProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.CompositeModelBinderProvider" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CompositeModelBinderProvider.#ctor(System.Collections.Generic.IEnumerable{System.Web.Http.ModelBinding.ModelBinderProvider})">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.CompositeModelBinderProvider" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="providers">
        <see cref="T:System.Web.Http.ModelBinding.ModelBinderProvider" /> のコレクション。</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CompositeModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>モデルのバインダーを取得します。</summary>
      <returns>モデルのバインダー。</returns>
      <param name="configuration">バインダー構成。</param>
      <param name="modelType">モデルの型。</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.Binders.CompositeModelBinderProvider.Providers">
      <summary>複合モデル バインダーのプロバイダーを取得します。</summary>
      <returns>プロバイダーのコレクション。</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.DictionaryModelBinder`2">
      <summary>ブラウザー要求をディクショナリ データ オブジェクトに対応付けます。</summary>
      <typeparam name="TKey">キーの型。</typeparam>
      <typeparam name="TValue">値の型。</typeparam>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.DictionaryModelBinder`2.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.DictionaryModelBinder`2" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.DictionaryModelBinder`2.CreateOrReplaceCollection(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>コレクションをディクショナリに変換します。</summary>
      <returns>すべてのケースで true。</returns>
      <param name="actionContext">アクション コンテキスト。</param>
      <param name="bindingContext">バインディング コンテキスト。</param>
      <param name="newCollection">新しいコレクション。</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.DictionaryModelBinderProvider">
      <summary>ディクショナリのモデル バインダーを提供します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.DictionaryModelBinderProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.DictionaryModelBinderProvider" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.DictionaryModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>関連付けられたモデル バインダーを取得します。</summary>
      <returns>関連付けられたモデル バインダー。</returns>
      <param name="configuration">使用する構成。</param>
      <param name="modelType">モデルの型。</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.KeyValuePairModelBinder`2">
      <summary>ブラウザー要求を、キーと値のペアのデータ オブジェクトに対応付けます。</summary>
      <typeparam name="TKey">キーの型。</typeparam>
      <typeparam name="TValue">値の型。</typeparam>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.KeyValuePairModelBinder`2.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.KeyValuePairModelBinder`2" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.KeyValuePairModelBinder`2.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>指定された実行コンテキストおよびバインディング コンテキストを使用して、モデルをバインドします。</summary>
      <returns>モデル バインディングが正常に実行された場合は true。それ以外の場合は false。</returns>
      <param name="actionContext">アクション コンテキスト。</param>
      <param name="bindingContext">バインディング コンテキスト。</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.KeyValuePairModelBinderProvider">
      <summary>キーと値のペア コレクションのモデル バインダーを提供します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.KeyValuePairModelBinderProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.KeyValuePairModelBinderProvider" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.KeyValuePairModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>関連付けられたモデル バインダーを取得します。</summary>
      <returns>関連付けられたモデル バインダー。</returns>
      <param name="configuration">構成。</param>
      <param name="modelType">モデルの型。</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinder">
      <summary>ブラウザー要求を変更可能なデータ オブジェクトに対応付けます。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinder.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinder" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinder.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>指定されたアクション コンテキストおよびバインディング コンテキストを使用して、モデルをバインドします。</summary>
      <returns>バインディングが正常に実行された場合は true。それ以外の場合は false。</returns>
      <param name="actionContext">アクション コンテキスト。</param>
      <param name="bindingContext">バインディング コンテキスト。</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinder.CanUpdateProperty(System.Web.Http.Metadata.ModelMetadata)">
      <summary>プロパティを更新できるかどうかを示す値を取得します。</summary>
      <returns>プロパティを更新できる場合は true。それ以外の場合は false。</returns>
      <param name="propertyMetadata">評価するプロパティのメタデータ。</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinder.CreateModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>モデルのインスタンスを作成します。</summary>
      <returns>新しく作成されたモデル オブジェクト。</returns>
      <param name="actionContext">アクション コンテキスト。</param>
      <param name="bindingContext">バインディング コンテキスト。</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinder.EnsureModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>バインディング コンテキスト内にまだモデル インスタンスが存在しない場合、インスタンスを作成します。</summary>
      <param name="actionContext">アクション コンテキスト。</param>
      <param name="bindingContext">バインディング コンテキスト。</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinder.GetMetadataForProperties(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>モデルのプロパティのメタデータを取得します。</summary>
      <returns>モデルのプロパティのメタデータ。</returns>
      <param name="actionContext">アクション コンテキスト。</param>
      <param name="bindingContext">バインディング コンテキスト。</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinder.SetProperty(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext,System.Web.Http.Metadata.ModelMetadata,System.Web.Http.ModelBinding.Binders.ComplexModelDtoResult,System.Web.Http.Validation.ModelValidator)">
      <summary>指定されたプロパティの値を設定します。</summary>
      <param name="actionContext">アクション コンテキスト。</param>
      <param name="bindingContext">バインディング コンテキスト。</param>
      <param name="propertyMetadata">設定するプロパティのメタデータ。</param>
      <param name="dtoResult">プロパティに関する検証情報。</param>
      <param name="requiredValidator">モデルの検証コントロール。</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinderProvider">
      <summary>変更可能なオブジェクトのモデル バインダーを提供します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinderProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinderProvider" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>指定された型のモデル バインダーを取得します。</summary>
      <returns>モデル バインダー。</returns>
      <param name="configuration">構成。</param>
      <param name="modelType">取得するモデルの型。</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.SimpleModelBinderProvider">
      <summary>このモデル バインディング クラスの単純なモデル バインダーを提供します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.SimpleModelBinderProvider.#ctor(System.Type,System.Func{System.Web.Http.ModelBinding.IModelBinder})">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.SimpleModelBinderProvider" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="modelType">モデルの型。</param>
      <param name="modelBinderFactory">モデル バインダー ファクトリ。</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.SimpleModelBinderProvider.#ctor(System.Type,System.Web.Http.ModelBinding.IModelBinder)">
      <summary>指定されたモデルの型およびモデル バインダーを使用して、<see cref="T:System.Web.Http.ModelBinding.Binders.SimpleModelBinderProvider" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="modelType">モデルの型。</param>
      <param name="modelBinder">モデル バインダー。</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.SimpleModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>指定された実行コンテキストおよびバインディング コンテキストを使用して、モデル バインダーを返します。</summary>
      <returns>モデル バインダー。モデル バインダーの取得に失敗した場合は null。</returns>
      <param name="configuration">構成。</param>
      <param name="modelType">モデルの型。</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.Binders.SimpleModelBinderProvider.ModelType">
      <summary>モデルの型を取得します。</summary>
      <returns>モデルの型。</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.Binders.SimpleModelBinderProvider.SuppressPrefixCheck">
      <summary>プレフィックス チェックを抑制する必要があるかどうかを示す値を取得または設定します。</summary>
      <returns>プレフィックス チェックを抑制する必要がある場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.TypeConverterModelBinder">
      <summary>ブラウザー要求をデータ オブジェクトに対応付けます。この型は、モデル バインディングで .NET Framework の型コンバーターを使用した変換が必要な場合に使用します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.TypeConverterModelBinder.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.TypeConverterModelBinder" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.TypeConverterModelBinder.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>指定されたコントローラー コンテキストおよびバインディング コンテキストを使用して、モデルをバインドします。</summary>
      <returns>モデル バインディングが正常に実行された場合は true。それ以外の場合は false。</returns>
      <param name="actionContext">アクション コンテキスト。</param>
      <param name="bindingContext">バインディング コンテキスト。</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.TypeConverterModelBinderProvider">
      <summary>型変換を必要とするモデルのモデル バインダーを提供します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.TypeConverterModelBinderProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.TypeConverterModelBinderProvider" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.TypeConverterModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>型変換を必要とするモデルのモデル バインダーを取得します。</summary>
      <returns>モデル バインダー。型を変換できない場合または変換する値がない場合は Nothing。</returns>
      <param name="configuration">バインダーの構成。</param>
      <param name="modelType">モデルの型。</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.TypeMatchModelBinder">
      <summary>ブラウザー要求をデータ オブジェクトに対応付けます。このクラスは、モデル バインディングで型変換の必要がない場合に使用します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.TypeMatchModelBinder.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.TypeMatchModelBinder" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.TypeMatchModelBinder.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>指定された実行コンテキストおよびバインディング コンテキストを使用して、モデルをバインドします。</summary>
      <returns>モデル バインディングが正常に実行された場合は true。それ以外の場合は false。</returns>
      <param name="actionContext">アクション コンテキスト。</param>
      <param name="bindingContext">バインディング コンテキスト。</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.TypeMatchModelBinderProvider">
      <summary>型変換を必要としないモデルのモデル バインダーを提供します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.TypeMatchModelBinderProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.TypeMatchModelBinderProvider" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.TypeMatchModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>関連付けられたモデル バインダーを取得します。</summary>
      <returns>関連付けられたモデル バインダー。</returns>
      <param name="configuration">構成。</param>
      <param name="modelType">モデルの型。</param>
    </member>
    <member name="T:System.Web.Http.Results.BadRequestErrorMessageResult">
      <summary>
        <see cref="F:System.Net.HttpStatusCode.BadRequest" /> 応答を返し、<see cref="P:System.Web.Http.HttpError.Message" /> を使用して <see cref="T:System.Web.Http.HttpError" /> 上でコンテンツ ネゴシエーションを実行するアクション結果を表します。</summary>
    </member>
    <member name="M:System.Web.Http.Results.BadRequestErrorMessageResult.#ctor(System.String,System.Net.Http.Formatting.IContentNegotiator,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>
        <see cref="T:System.Web.Http.Results.BadRequestErrorMessageResult" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">ユーザーに表示するエラー メッセージ。</param>
      <param name="contentNegotiator">コンテンツ ネゴシエーションを処理するコンテンツ ネゴシエーター。</param>
      <param name="request">この結果に至った要求メッセージ。</param>
      <param name="formatters">コンテンツをネゴシエートし、書式設定するために使用するフォーマッタ。</param>
    </member>
    <member name="M:System.Web.Http.Results.BadRequestErrorMessageResult.#ctor(System.String,System.Web.Http.ApiController)">
      <summary>
        <see cref="T:System.Web.Http.Results.BadRequestErrorMessageResult" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">ユーザーに表示するエラー メッセージ。</param>
      <param name="controller">実行に必要な依存関係の取得元のコントローラー。</param>
    </member>
    <member name="P:System.Web.Http.Results.BadRequestErrorMessageResult.ContentNegotiator">
      <summary>コンテンツ ネゴシエーションを処理するコンテンツ ネゴシエーターを取得します。</summary>
      <returns>
        <see cref="T:System.Net.Http.Formatting.IContentNegotiator" /> を返します。</returns>
    </member>
    <member name="M:System.Web.Http.Results.BadRequestErrorMessageResult.ExecuteAsync(System.Threading.CancellationToken)">
      <returns>
        <see cref="T:System.Threading.Tasks.Task`1" /> を返します。</returns>
    </member>
    <member name="P:System.Web.Http.Results.BadRequestErrorMessageResult.Formatters">
      <summary>コンテンツをネゴシエートし、書式設定するために使用するフォーマッタを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> を返します。</returns>
    </member>
    <member name="P:System.Web.Http.Results.BadRequestErrorMessageResult.Message">
      <summary>ユーザーに表示されるエラー メッセージを取得します。</summary>
      <returns>
        <see cref="T:System.String" /> を返します。</returns>
    </member>
    <member name="P:System.Web.Http.Results.BadRequestErrorMessageResult.Request">
      <summary>この結果に至った要求メッセージを取得します。</summary>
      <returns>
        <see cref="T:System.Net.Http.HttpRequestMessage" /> を返します。</returns>
    </member>
    <member name="T:System.Web.Http.Results.BadRequestResult">
      <summary>空の <see cref="F:System.Net.HttpStatusCode.BadRequest" /> 応答を返すアクション結果を表します。</summary>
    </member>
    <member name="M:System.Web.Http.Results.BadRequestResult.#ctor(System.Net.Http.HttpRequestMessage)">
      <summary>
        <see cref="T:System.Web.Http.Results.BadRequestResult" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="request">この結果に至った要求メッセージ。</param>
    </member>
    <member name="M:System.Web.Http.Results.BadRequestResult.#ctor(System.Web.Http.ApiController)">
      <summary>
        <see cref="T:System.Web.Http.Results.BadRequestResult" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="controller">実行に必要な依存関係の取得元のコントローラー。</param>
    </member>
    <member name="M:System.Web.Http.Results.BadRequestResult.ExecuteAsync(System.Threading.CancellationToken)">
      <summary>要求を非同期に実行します。</summary>
      <returns>実行操作を完了するタスク。</returns>
      <param name="cancellationToken">キャンセル トークン。</param>
    </member>
    <member name="P:System.Web.Http.Results.BadRequestResult.Request">
      <summary>この結果に至った要求メッセージを取得します。</summary>
      <returns>この結果に至った要求メッセージ。</returns>
    </member>
    <member name="T:System.Web.Http.Results.ConflictResult">
      <summary>空の HttpStatusCode.Conflict 応答を返すアクション結果を表します。</summary>
    </member>
    <member name="M:System.Web.Http.Results.ConflictResult.#ctor(System.Net.Http.HttpRequestMessage)">
      <summary>
        <see cref="T:System.Web.Http.Results.ConflictResult" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="request">この結果に至った要求メッセージ。</param>
    </member>
    <member name="M:System.Web.Http.Results.ConflictResult.#ctor(System.Web.Http.ApiController)">
      <summary>
        <see cref="T:System.Web.Http.Results.ConflictResult" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="controller">実行に必要な依存関係の取得元のコントローラー。</param>
    </member>
    <member name="M:System.Web.Http.Results.ConflictResult.ExecuteAsync(System.Threading.CancellationToken)">
      <summary>競合結果の操作を非同期に実行します。</summary>
      <returns>指定されたタスクを非同期に実行します。</returns>
      <param name="cancellationToken">キャンセル トークン。</param>
    </member>
    <member name="P:System.Web.Http.Results.ConflictResult.Request">
      <summary>この結果に至った要求メッセージを取得します。</summary>
      <returns>この結果をもたらした HTTP 要求メッセージ。</returns>
    </member>
    <member name="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1">
      <summary>ルート生成とコンテンツ ネゴシエーションを実行し、コンテンツ ネゴシエーションの成功時に <see cref="F:System.Net.HttpStatusCode.Created" /> 応答を返すアクション結果を表します。</summary>
      <typeparam name="T">エンティティ ボディ内のコンテンツの型。</typeparam>
    </member>
    <member name="M:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},`0,System.Web.Http.ApiController)">
      <summary>指定された値を使用して <see cref="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="routeName">URL を生成するために使用するルートの名前。</param>
      <param name="routeValues">URL の生成に使用するルート データ。</param>
      <param name="content">エンティティ ボディでネゴシエートおよび書式設定するコンテンツ値。</param>
      <param name="controller">実行に必要な依存関係の取得元のコントローラー。</param>
    </member>
    <member name="M:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},`0,System.Web.Http.Routing.UrlHelper,System.Net.Http.Formatting.IContentNegotiator,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>指定された値を使用して <see cref="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="routeName">URL を生成するために使用するルートの名前。</param>
      <param name="routeValues">URL の生成に使用するルート データ。</param>
      <param name="content">エンティティ ボディでネゴシエートおよび書式設定するコンテンツ値。</param>
      <param name="urlFactory">ルート URL の生成に使用するファクトリ。</param>
      <param name="contentNegotiator">コンテンツ ネゴシエーションを処理するコンテンツ ネゴシエーター。</param>
      <param name="request">この結果に至った要求メッセージ。</param>
      <param name="formatters">コンテンツをネゴシエートし、書式設定するために使用するフォーマッタ。</param>
    </member>
    <member name="P:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.Content">
      <summary>エンティティ ボディでネゴシエートおよび書式設定するコンテンツ値を取得します。</summary>
    </member>
    <member name="P:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.ContentNegotiator">
      <summary>コンテンツ ネゴシエーションを処理するコンテンツ ネゴシエーターを取得します。</summary>
    </member>
    <member name="M:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.ExecuteAsync(System.Threading.CancellationToken)"></member>
    <member name="P:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.Formatters">
      <summary>コンテンツをネゴシエートし、書式設定するために使用するフォーマッタを取得します。</summary>
    </member>
    <member name="P:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.Request">
      <summary>この結果に至った要求メッセージを取得します。</summary>
    </member>
    <member name="P:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.RouteName">
      <summary>URL の生成に使用するルートの名前を取得します。</summary>
    </member>
    <member name="P:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.RouteValues">
      <summary>URL の生成に使用するルート データを取得します。</summary>
    </member>
    <member name="P:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.UrlFactory">
      <summary>ルート URL の生成に使用するファクトリを取得します。</summary>
    </member>
    <member name="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1">
      <summary>コンテンツ ネゴシエーションを実行し、成功時に <see cref="F:System.Net.HttpStatusCode.Created" /> 応答を返すアクション結果を表します。</summary>
      <typeparam name="T">エンティティ ボディ内のコンテンツの型。</typeparam>
    </member>
    <member name="M:System.Web.Http.Results.CreatedNegotiatedContentResult`1.#ctor(System.Uri,`0,System.Net.Http.Formatting.IContentNegotiator,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>指定された値を使用して <see cref="T:System.Web.Http.Results.OkNegotiatedContentResult`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="location">エンティティ ボディでネゴシエートおよび書式設定するコンテンツ値。</param>
      <param name="content">コンテンツが作成された場所。</param>
      <param name="contentNegotiator">コンテンツ ネゴシエーションを処理するコンテンツ ネゴシエーター。</param>
      <param name="request">この結果に至った要求メッセージ。</param>
      <param name="formatters">コンテンツをネゴシエートし、書式設定するために使用するフォーマッタ。</param>
    </member>
    <member name="M:System.Web.Http.Results.CreatedNegotiatedContentResult`1.#ctor(System.Uri,`0,System.Web.Http.ApiController)">
      <summary>指定された値を使用して <see cref="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="location">コンテンツが作成された場所。</param>
      <param name="content">エンティティ ボディでネゴシエートおよび書式設定するコンテンツ値。</param>
      <param name="controller">実行に必要な依存関係の取得元のコントローラー。</param>
    </member>
    <member name="P:System.Web.Http.Results.CreatedNegotiatedContentResult`1.Content">
      <summary>エンティティ ボディでネゴシエートおよび書式設定するコンテンツ値を取得します。</summary>
      <returns>エンティティ ボディでネゴシエートおよび書式設定するコンテンツ値。</returns>
    </member>
    <member name="P:System.Web.Http.Results.CreatedNegotiatedContentResult`1.ContentNegotiator">
      <summary>コンテンツ ネゴシエーションを処理するコンテンツ ネゴシエーターを取得します。</summary>
      <returns>コンテンツ ネゴシエーションを処理するコンテンツ ネゴシエーター。</returns>
    </member>
    <member name="M:System.Web.Http.Results.CreatedNegotiatedContentResult`1.ExecuteAsync(System.Threading.CancellationToken)">
      <summary>作成されたネゴシエーション コンテンツ結果の操作を非同期に実行します。</summary>
      <returns>戻り値を非同期に実行します。</returns>
      <param name="cancellationToken">キャンセル トークン。</param>
    </member>
    <member name="P:System.Web.Http.Results.CreatedNegotiatedContentResult`1.Formatters">
      <summary>コンテンツをネゴシエートし、書式設定するために使用するフォーマッタを取得します。</summary>
      <returns>コンテンツをネゴシエートし、書式設定するために使用するフォーマッタ。</returns>
    </member>
    <member name="P:System.Web.Http.Results.CreatedNegotiatedContentResult`1.Location">
      <summary>コンテンツが作成された場所を取得します。</summary>
      <returns>コンテンツが作成された場所。</returns>
    </member>
    <member name="P:System.Web.Http.Results.CreatedNegotiatedContentResult`1.Request">
      <summary>この結果に至った要求メッセージを取得します。</summary>
      <returns>この結果をもたらした HTTP 要求メッセージ。</returns>
    </member>
    <member name="T:System.Web.Http.Results.ExceptionResult">
      <summary>
        <see cref="F:System.Net.HttpStatusCode.InternalServerError" /> 応答を返し、<see cref="P:System.Web.Http.Results.ExceptionResult.Exception" /> に基づいて <see cref="T:System.Web.Http.HttpError" /> 上でコンテンツ ネゴシエーションを実行するアクション結果を表します。</summary>
    </member>
    <member name="M:System.Web.Http.Results.ExceptionResult.#ctor(System.Exception,System.Boolean,System.Net.Http.Formatting.IContentNegotiator,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>
        <see cref="T:System.Web.Http.Results.ExceptionResult" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="exception">エラーに含める例外。</param>
      <param name="includeErrorDetail">エラーに例外メッセージを含める必要がある場合は true。それ以外の場合は false。</param>
      <param name="contentNegotiator">コンテンツ ネゴシエーションを処理するコンテンツ ネゴシエーター。</param>
      <param name="request">この結果に至った要求メッセージ。</param>
      <param name="formatters">コンテンツをネゴシエートし、書式設定するために使用するフォーマッタ。</param>
    </member>
    <member name="M:System.Web.Http.Results.ExceptionResult.#ctor(System.Exception,System.Web.Http.ApiController)">
      <summary>
        <see cref="T:System.Web.Http.Results.ExceptionResult" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="exception">エラーに含める例外。</param>
      <param name="controller">実行に必要な依存関係の取得元のコントローラー。</param>
    </member>
    <member name="P:System.Web.Http.Results.ExceptionResult.ContentNegotiator">
      <summary>コンテンツ ネゴシエーションを処理するコンテンツ ネゴシエーターを取得します。</summary>
      <returns>
        <see cref="T:System.Net.Http.Formatting.IContentNegotiator" /> を返します。</returns>
    </member>
    <member name="P:System.Web.Http.Results.ExceptionResult.Exception">
      <summary>エラーに含める例外を取得します。</summary>
      <returns>
        <see cref="T:System.Exception" /> を返します。</returns>
    </member>
    <member name="M:System.Web.Http.Results.ExceptionResult.ExecuteAsync(System.Threading.CancellationToken)">
      <returns>
        <see cref="T:System.Threading.Tasks.Task`1" /> を返します。</returns>
    </member>
    <member name="P:System.Web.Http.Results.ExceptionResult.Formatters">
      <summary>コンテンツをネゴシエートし、書式設定するために使用するフォーマッタを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> を返します。</returns>
    </member>
    <member name="P:System.Web.Http.Results.ExceptionResult.IncludeErrorDetail">
      <summary>エラーに例外メッセージを含める必要があるかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Boolean" /> を返します。</returns>
    </member>
    <member name="P:System.Web.Http.Results.ExceptionResult.Request">
      <summary>この結果に至った要求メッセージを取得します。</summary>
      <returns>
        <see cref="T:System.Net.Http.HttpRequestMessage" /> を返します。</returns>
    </member>
    <member name="T:System.Web.Http.Results.FormattedContentResult`1">
      <summary>書式設定されたコンテンツを返すアクション結果を表します。</summary>
      <typeparam name="T">エンティティ ボディ内のコンテンツの型。</typeparam>
    </member>
    <member name="M:System.Web.Http.Results.FormattedContentResult`1.#ctor(System.Net.HttpStatusCode,`0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,System.Net.Http.HttpRequestMessage)">
      <summary>指定された値を使用して <see cref="T:System.Web.Http.Results.FormattedContentResult`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="statusCode">応答メッセージの HTTP ステータス コード。</param>
      <param name="content">エンティティ ボディ内で書式設定するコンテンツ値。</param>
      <param name="formatter">コンテンツを書式設定するために使用するフォーマッタ。</param>
      <param name="mediaType">Content-Type ヘッダーの値。または、フォーマッタで既定値を取得する場合は <see cref="null" />。</param>
      <param name="request">この結果に至った要求メッセージ。</param>
    </member>
    <member name="M:System.Web.Http.Results.FormattedContentResult`1.#ctor(System.Net.HttpStatusCode,`0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,System.Web.Http.ApiController)">
      <summary>指定された値を使用して <see cref="T:System.Web.Http.Results.FormattedContentResult`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="statusCode">応答メッセージの HTTP ステータス コード。</param>
      <param name="content">エンティティ ボディ内で書式設定するコンテンツ値。</param>
      <param name="formatter">コンテンツを書式設定するために使用するフォーマッタ。</param>
      <param name="mediaType">Content-Type ヘッダーの値。または、フォーマッタで既定値を取得する場合は <see cref="null" />。</param>
      <param name="controller">実行に必要な依存関係の取得元のコントローラー。</param>
    </member>
    <member name="P:System.Web.Http.Results.FormattedContentResult`1.Content">
      <summary>エンティティ本文内で書式設定するコンテンツ値を取得します。</summary>
    </member>
    <member name="M:System.Web.Http.Results.FormattedContentResult`1.ExecuteAsync(System.Threading.CancellationToken)"></member>
    <member name="P:System.Web.Http.Results.FormattedContentResult`1.Formatter">
      <summary>コンテンツを書式設定するために使用するフォーマッタを取得します。</summary>
    </member>
    <member name="P:System.Web.Http.Results.FormattedContentResult`1.MediaType">
      <summary>Content-Type ヘッダーの値を取得します。フォーマッタで既定値を取得する場合は <see cref="null" /> を取得します。</summary>
    </member>
    <member name="P:System.Web.Http.Results.FormattedContentResult`1.Request">
      <summary>この結果に至った要求メッセージを取得します。</summary>
    </member>
    <member name="P:System.Web.Http.Results.FormattedContentResult`1.StatusCode">
      <summary>応答メッセージの HTTP ステータス コードを取得します。</summary>
    </member>
    <member name="T:System.Web.Http.Results.InternalServerErrorResult">
      <summary>空の <see cref="F:System.Net.HttpStatusCode.InternalServerError" /> 応答を返すアクション結果を表します。</summary>
    </member>
    <member name="M:System.Web.Http.Results.InternalServerErrorResult.#ctor(System.Net.Http.HttpRequestMessage)">
      <summary>
        <see cref="T:System.Web.Http.Results.InternalServerErrorResult" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="request">この結果に至った要求メッセージ。</param>
    </member>
    <member name="M:System.Web.Http.Results.InternalServerErrorResult.#ctor(System.Web.Http.ApiController)">
      <summary>
        <see cref="T:System.Web.Http.Results.InternalServerErrorResult" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="controller">実行に必要な依存関係の取得元のコントローラー。</param>
    </member>
    <member name="M:System.Web.Http.Results.InternalServerErrorResult.ExecuteAsync(System.Threading.CancellationToken)">
      <returns>
        <see cref="T:System.Threading.Tasks.Task`1" /> を返します。</returns>
    </member>
    <member name="P:System.Web.Http.Results.InternalServerErrorResult.Request">
      <summary>この結果に至った要求メッセージを取得します。</summary>
      <returns>
        <see cref="T:System.Net.Http.HttpRequestMessage" /> を返します。</returns>
    </member>
    <member name="T:System.Web.Http.Results.InvalidModelStateResult">
      <summary>
        <see cref="F:System.Net.HttpStatusCode.BadRequest" /> 応答を返し、<see cref="T:System.Web.Http.ModelBinding.ModelStateDictionary" /> に基づいて <see cref="T:System.Web.Http.HttpError" /> 上でコンテンツ ネゴシエーションを実行するアクション結果を表します。</summary>
    </member>
    <member name="M:System.Web.Http.Results.InvalidModelStateResult.#ctor(System.Web.Http.ModelBinding.ModelStateDictionary,System.Boolean,System.Net.Http.Formatting.IContentNegotiator,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>
        <see cref="T:System.Web.Http.Results.InvalidModelStateResult" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="modelState">エラーに含めるモデルの状態。</param>
      <param name="includeErrorDetail">エラーに例外メッセージを含める必要がある場合は true。それ以外の場合は false。</param>
      <param name="contentNegotiator">コンテンツ ネゴシエーションを処理するコンテンツ ネゴシエーター。</param>
      <param name="request">この結果に至った要求メッセージ。</param>
      <param name="formatters">コンテンツをネゴシエートし、書式設定するために使用するフォーマッタ。</param>
    </member>
    <member name="M:System.Web.Http.Results.InvalidModelStateResult.#ctor(System.Web.Http.ModelBinding.ModelStateDictionary,System.Web.Http.ApiController)">
      <summary>
        <see cref="T:System.Web.Http.Results.InvalidModelStateResult" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="modelState">エラーに含めるモデルの状態。</param>
      <param name="controller">実行に必要な依存関係の取得元のコントローラー。</param>
    </member>
    <member name="P:System.Web.Http.Results.InvalidModelStateResult.ContentNegotiator">
      <summary>コンテンツ ネゴシエーションを処理するコンテンツ ネゴシエーターを取得します。</summary>
      <returns>コンテンツ ネゴシエーションを処理するコンテンツ ネゴシエーター。</returns>
    </member>
    <member name="M:System.Web.Http.Results.InvalidModelStateResult.ExecuteAsync(System.Threading.CancellationToken)">
      <summary>応答メッセージを非同期に作成します。</summary>
      <returns>完了時に、応答メッセージを格納するタスク。</returns>
      <param name="cancellationToken">キャンセル要求を監視するトークン。</param>
    </member>
    <member name="P:System.Web.Http.Results.InvalidModelStateResult.Formatters">
      <summary>コンテンツをネゴシエートし、書式設定するために使用するフォーマッタを取得します。</summary>
      <returns>コンテンツをネゴシエートし、書式設定するために使用するフォーマッタ。</returns>
    </member>
    <member name="P:System.Web.Http.Results.InvalidModelStateResult.IncludeErrorDetail">
      <summary>エラーに例外メッセージを含める必要があるかどうかを示す値を取得します。</summary>
      <returns>エラーに例外メッセージを含める必要がある場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Web.Http.Results.InvalidModelStateResult.ModelState">
      <summary>エラーに含めるモデルの状態を取得します。</summary>
      <returns>エラーに含めるモデルの状態。</returns>
    </member>
    <member name="P:System.Web.Http.Results.InvalidModelStateResult.Request">
      <summary>この結果に至った要求メッセージを取得します。</summary>
      <returns>この結果に至った要求メッセージ。</returns>
    </member>
    <member name="T:System.Web.Http.Results.JsonResult`1">
      <summary>JSON データを含む <see cref="F:System.Net.HttpStatusCode.OK" /> 応答を返すアクション結果を表します。</summary>
      <typeparam name="T">エンティティ ボディ内のコンテンツの型。</typeparam>
    </member>
    <member name="M:System.Web.Http.Results.JsonResult`1.#ctor(`0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding,System.Net.Http.HttpRequestMessage)">
      <summary>指定された値を使用して <see cref="T:System.Web.Http.Results.JsonResult`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="content">エンティティ ボディ内でシリアル化するコンテンツ値。</param>
      <param name="serializerSettings">シリアライザー設定。</param>
      <param name="encoding">コンテンツ エンコーディング。</param>
      <param name="request">この結果に至った要求メッセージ。</param>
    </member>
    <member name="M:System.Web.Http.Results.JsonResult`1.#ctor(`0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding,System.Web.Http.ApiController)">
      <summary>指定された値を使用して <see cref="T:System.Web.Http.Results.JsonResult`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="content">エンティティ ボディ内でシリアル化するコンテンツ値。</param>
      <param name="serializerSettings">シリアライザー設定。</param>
      <param name="encoding">コンテンツ エンコーディング。</param>
      <param name="controller">実行に必要な依存関係の取得元のコントローラー。</param>
    </member>
    <member name="P:System.Web.Http.Results.JsonResult`1.Content">
      <summary>エンティティ ボディ内でシリアル化するコンテンツ値を取得します。</summary>
      <returns>エンティティ ボディ内でシリアル化するコンテンツ値。</returns>
    </member>
    <member name="P:System.Web.Http.Results.JsonResult`1.Encoding">
      <summary>コンテンツ エンコーディングを取得します。</summary>
      <returns>コンテンツ エンコーディング。</returns>
    </member>
    <member name="M:System.Web.Http.Results.JsonResult`1.ExecuteAsync(System.Threading.CancellationToken)">
      <summary>応答メッセージを非同期に作成します。</summary>
      <returns>完了時に、応答メッセージを格納するタスク。</returns>
      <param name="cancellationToken">キャンセル要求を監視するトークン。</param>
    </member>
    <member name="P:System.Web.Http.Results.JsonResult`1.Request">
      <summary>この結果に至った要求メッセージを取得します。</summary>
      <returns>この結果に至った要求メッセージ。</returns>
    </member>
    <member name="P:System.Web.Http.Results.JsonResult`1.SerializerSettings">
      <summary>シリアライザー設定を取得します。</summary>
      <returns>シリアライザー設定。</returns>
    </member>
    <member name="T:System.Web.Http.Results.NegotiatedContentResult`1">
      <summary>コンテンツ ネゴシエーションを実行するアクション結果を表します。</summary>
      <typeparam name="T">エンティティ ボディ内のコンテンツの型。</typeparam>
    </member>
    <member name="M:System.Web.Http.Results.NegotiatedContentResult`1.#ctor(System.Net.HttpStatusCode,`0,System.Net.Http.Formatting.IContentNegotiator,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>指定された値を使用して <see cref="T:System.Web.Http.Results.NegotiatedContentResult`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="statusCode">応答メッセージの HTTP ステータス コード。</param>
      <param name="content">エンティティ ボディでネゴシエートおよび書式設定するコンテンツ値。</param>
      <param name="contentNegotiator">コンテンツ ネゴシエーションを処理するコンテンツ ネゴシエーター。</param>
      <param name="request">この結果に至った要求メッセージ。</param>
      <param name="formatters">コンテンツをネゴシエートし、書式設定するために使用するフォーマッタ。</param>
    </member>
    <member name="M:System.Web.Http.Results.NegotiatedContentResult`1.#ctor(System.Net.HttpStatusCode,`0,System.Web.Http.ApiController)">
      <summary>指定された値を使用して <see cref="T:System.Web.Http.Results.NegotiatedContentResult`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="statusCode">応答メッセージの HTTP ステータス コード。</param>
      <param name="content">エンティティ ボディでネゴシエートおよび書式設定するコンテンツ値。</param>
      <param name="controller">実行に必要な依存関係の取得元のコントローラー。</param>
    </member>
    <member name="P:System.Web.Http.Results.NegotiatedContentResult`1.Content">
      <summary>エンティティ ボディでネゴシエートおよび書式設定するコンテンツ値を取得します。</summary>
      <returns>エンティティ ボディでネゴシエートおよび書式設定するコンテンツ値。</returns>
    </member>
    <member name="P:System.Web.Http.Results.NegotiatedContentResult`1.ContentNegotiator">
      <summary>コンテンツ ネゴシエーションを処理するコンテンツ ネゴシエーターを取得します。</summary>
      <returns>コンテンツ ネゴシエーションを処理するコンテンツ ネゴシエーター。</returns>
    </member>
    <member name="M:System.Web.Http.Results.NegotiatedContentResult`1.ExecuteAsync(System.Threading.CancellationToken)">
      <summary>HTTP ネゴシエーション コンテンツ結果を非同期に実行します。</summary>
      <returns>HTTP ネゴシエーション コンテンツ結果を非同期に実行します。</returns>
      <param name="cancellationToken">キャンセル トークン。</param>
    </member>
    <member name="P:System.Web.Http.Results.NegotiatedContentResult`1.Formatters">
      <summary>コンテンツをネゴシエートし、書式設定するために使用するフォーマッタを取得します。</summary>
      <returns>コンテンツをネゴシエートし、書式設定するために使用するフォーマッタ。</returns>
    </member>
    <member name="P:System.Web.Http.Results.NegotiatedContentResult`1.Request">
      <summary>この結果に至った要求メッセージを取得します。</summary>
      <returns>この結果をもたらした HTTP 要求メッセージ。</returns>
    </member>
    <member name="P:System.Web.Http.Results.NegotiatedContentResult`1.StatusCode">
      <summary>応答メッセージの HTTP ステータス コードを取得します。</summary>
      <returns>応答メッセージの HTTP ステータス コード。</returns>
    </member>
    <member name="T:System.Web.Http.Results.NotFoundResult">
      <summary>空の <see cref="F:System.Net.HttpStatusCode.NotFound" /> 応答を返すアクション結果を表します。</summary>
    </member>
    <member name="M:System.Web.Http.Results.NotFoundResult.#ctor(System.Net.Http.HttpRequestMessage)">
      <summary>
        <see cref="T:System.Web.Http.Results.NotFoundResult" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="request">この結果に至った要求メッセージ。</param>
    </member>
    <member name="M:System.Web.Http.Results.NotFoundResult.#ctor(System.Web.Http.ApiController)">
      <summary>
        <see cref="T:System.Web.Http.Results.NotFoundResult" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="controller">実行に必要な依存関係の取得元のコントローラー。</param>
    </member>
    <member name="M:System.Web.Http.Results.NotFoundResult.ExecuteAsync(System.Threading.CancellationToken)"></member>
    <member name="P:System.Web.Http.Results.NotFoundResult.Request">
      <summary>この結果に至った要求メッセージを取得します。</summary>
    </member>
    <member name="T:System.Web.Http.Results.OkNegotiatedContentResult`1">
      <summary>コンテンツ ネゴシエーションを実行し、成功時に HttpStatusCode.OK 応答を返すアクション結果を表します。</summary>
      <typeparam name="T">エンティティ ボディ内のコンテンツの型。</typeparam>
    </member>
    <member name="M:System.Web.Http.Results.OkNegotiatedContentResult`1.#ctor(`0,System.Net.Http.Formatting.IContentNegotiator,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>指定された値を使用して <see cref="T:System.Web.Http.Results.OkNegotiatedContentResult`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="content">エンティティ ボディでネゴシエートおよび書式設定するコンテンツ値。</param>
      <param name="contentNegotiator">コンテンツ ネゴシエーションを処理するコンテンツ ネゴシエーター。</param>
      <param name="request">この結果に至った要求メッセージ。</param>
      <param name="formatters">コンテンツをネゴシエートし、書式設定するために使用するフォーマッタ。</param>
    </member>
    <member name="M:System.Web.Http.Results.OkNegotiatedContentResult`1.#ctor(`0,System.Web.Http.ApiController)">
      <summary>指定された値を使用して <see cref="T:System.Web.Http.Results.OkNegotiatedContentResult`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="content">エンティティ ボディでネゴシエートおよび書式設定するコンテンツ値。</param>
      <param name="controller">実行に必要な依存関係の取得元のコントローラー。</param>
    </member>
    <member name="P:System.Web.Http.Results.OkNegotiatedContentResult`1.Content">
      <summary>エンティティ ボディでネゴシエートおよび書式設定するコンテンツ値を取得します。</summary>
    </member>
    <member name="P:System.Web.Http.Results.OkNegotiatedContentResult`1.ContentNegotiator">
      <summary>コンテンツ ネゴシエーションを処理するコンテンツ ネゴシエーターを取得します。</summary>
    </member>
    <member name="M:System.Web.Http.Results.OkNegotiatedContentResult`1.ExecuteAsync(System.Threading.CancellationToken)"></member>
    <member name="P:System.Web.Http.Results.OkNegotiatedContentResult`1.Formatters">
      <summary>コンテンツをネゴシエートし、書式設定するために使用するフォーマッタを取得します。</summary>
    </member>
    <member name="P:System.Web.Http.Results.OkNegotiatedContentResult`1.Request">
      <summary>この結果に至った要求メッセージを取得します。</summary>
    </member>
    <member name="T:System.Web.Http.Results.OkResult">
      <summary>空の HttpStatusCode.OK 応答を返すアクション結果を表します。</summary>
    </member>
    <member name="M:System.Web.Http.Results.OkResult.#ctor(System.Net.Http.HttpRequestMessage)">
      <summary>
        <see cref="T:System.Web.Http.Results.NotFoundResult" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="request">この結果に至った要求メッセージ。</param>
    </member>
    <member name="M:System.Web.Http.Results.OkResult.#ctor(System.Web.Http.ApiController)">
      <summary>
        <see cref="T:System.Web.Http.Results.NotFoundResult" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="controller">実行に必要な依存関係の取得元のコントローラー。</param>
    </member>
    <member name="M:System.Web.Http.Results.OkResult.ExecuteAsync(System.Threading.CancellationToken)">
      <summary>非同期的に実行します。</summary>
      <returns>タスクを返します。</returns>
      <param name="cancellationToken">キャンセル トークン。</param>
    </member>
    <member name="P:System.Web.Http.Results.OkResult.Request">
      <summary>結果の HTTP 要求メッセージを取得します。</summary>
      <returns>結果の HTTP 要求メッセージ。</returns>
    </member>
    <member name="T:System.Web.Http.Results.RedirectResult">
      <summary>&lt;see cref="F:System.Net.HttpStatusCode.Redirect"/&gt; に対するアクション結果を表します。</summary>
    </member>
    <member name="M:System.Web.Http.Results.RedirectResult.#ctor(System.Uri,System.Net.Http.HttpRequestMessage)">
      <summary>提供された値を持つ &lt;see cref="T:System.Web.Http.Results.RedirectResult"/&gt; クラスの新しいインスタンスを初期化します。</summary>
      <param name="location">リダイレクト先の場所。</param>
      <param name="request">この結果に至った要求メッセージ。</param>
    </member>
    <member name="M:System.Web.Http.Results.RedirectResult.#ctor(System.Uri,System.Web.Http.ApiController)">
      <summary>提供された値を持つ &lt;see cref="T:System.Web.Http.Results.RedirectResult"/&gt; クラスの新しいインスタンスを初期化します。</summary>
      <param name="location">リダイレクト先の場所。</param>
      <param name="controller">実行に必要な依存関係の取得元のコントローラー。</param>
    </member>
    <member name="M:System.Web.Http.Results.RedirectResult.ExecuteAsync(System.Threading.CancellationToken)">
      <returns>
        <see cref="T:System.Threading.Tasks.Task`1" /> を返します。</returns>
    </member>
    <member name="P:System.Web.Http.Results.RedirectResult.Location">
      <summary>コンテンツが作成された場所を取得します。</summary>
      <returns>
        <see cref="T:System.Uri" /> を返します。</returns>
    </member>
    <member name="P:System.Web.Http.Results.RedirectResult.Request">
      <summary>この結果に至った要求メッセージを取得します。</summary>
      <returns>
        <see cref="T:System.Net.Http.HttpRequestMessage" /> を返します。</returns>
    </member>
    <member name="T:System.Web.Http.Results.RedirectToRouteResult">
      <summary>ルート生成を実行し、&lt;see cref="F:System.Net.HttpStatusCode.Redirect"/&gt; 応答を返すアクション結果を表します。</summary>
    </member>
    <member name="M:System.Web.Http.Results.RedirectToRouteResult.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.ApiController)">
      <summary>提供された値を持つ &lt;see cref="T:System.Web.Http.Results.RedirectToRouteResult"/&gt; クラスの新しいインスタンスを初期化します。</summary>
      <param name="routeName">URL を生成するために使用するルートの名前。</param>
      <param name="routeValues">URL の生成に使用するルート データ。</param>
      <param name="controller">実行に必要な依存関係の取得元のコントローラー。</param>
    </member>
    <member name="M:System.Web.Http.Results.RedirectToRouteResult.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.UrlHelper,System.Net.Http.HttpRequestMessage)">
      <summary>提供された値を持つ &lt;see cref="T:System.Web.Http.Results.RedirectToRouteResult"/&gt; クラスの新しいインスタンスを初期化します。</summary>
      <param name="routeName">URL を生成するために使用するルートの名前。</param>
      <param name="routeValues">URL の生成に使用するルート データ。</param>
      <param name="urlFactory">ルート URL の生成に使用するファクトリ。</param>
      <param name="request">この結果に至った要求メッセージ。</param>
    </member>
    <member name="M:System.Web.Http.Results.RedirectToRouteResult.ExecuteAsync(System.Threading.CancellationToken)">
      <returns>
        <see cref="T:System.Threading.Tasks.Task`1" /> を返します。</returns>
    </member>
    <member name="P:System.Web.Http.Results.RedirectToRouteResult.Request">
      <summary>この結果に至った要求メッセージを取得します。</summary>
      <returns>
        <see cref="T:System.Net.Http.HttpRequestMessage" /> を返します。</returns>
    </member>
    <member name="P:System.Web.Http.Results.RedirectToRouteResult.RouteName">
      <summary>URL の生成に使用するルートの名前を取得します。</summary>
      <returns>
        <see cref="T:System.String" /> を返します。</returns>
    </member>
    <member name="P:System.Web.Http.Results.RedirectToRouteResult.RouteValues">
      <summary>URL の生成に使用するルート データを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IDictionary`2" /> を返します。</returns>
    </member>
    <member name="P:System.Web.Http.Results.RedirectToRouteResult.UrlFactory">
      <summary>ルート URL の生成に使用するファクトリを取得します。</summary>
      <returns>
        <see cref="T:System.Web.Http.Routing.UrlHelper" /> を返します。</returns>
    </member>
    <member name="T:System.Web.Http.Results.ResponseMessageResult">
      <summary>指定された応答メッセージを返すアクション結果を表します。</summary>
    </member>
    <member name="M:System.Web.Http.Results.ResponseMessageResult.#ctor(System.Net.Http.HttpResponseMessage)">
      <summary>
        <see cref="T:System.Web.Http.Results.ResponseMessageResult" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="response">応答メッセージ。</param>
    </member>
    <member name="M:System.Web.Http.Results.ResponseMessageResult.ExecuteAsync(System.Threading.CancellationToken)"></member>
    <member name="P:System.Web.Http.Results.ResponseMessageResult.Response">
      <summary>応答メッセージを取得します。</summary>
    </member>
    <member name="T:System.Web.Http.Results.StatusCodeResult">
      <summary>指定された HTTP ステータス コードを返すアクション結果を表します。</summary>
    </member>
    <member name="M:System.Web.Http.Results.StatusCodeResult.#ctor(System.Net.HttpStatusCode,System.Net.Http.HttpRequestMessage)">
      <summary>
        <see cref="T:System.Web.Http.Results.StatusCodeResult" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="statusCode">応答メッセージの HTTP ステータス コード。</param>
      <param name="request">この結果に至った要求メッセージ。</param>
    </member>
    <member name="M:System.Web.Http.Results.StatusCodeResult.#ctor(System.Net.HttpStatusCode,System.Web.Http.ApiController)">
      <summary>
        <see cref="T:System.Web.Http.Results.StatusCodeResult" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="statusCode">応答メッセージの HTTP ステータス コード。</param>
      <param name="controller">実行に必要な依存関係の取得元のコントローラー。</param>
    </member>
    <member name="M:System.Web.Http.Results.StatusCodeResult.ExecuteAsync(System.Threading.CancellationToken)">
      <summary>応答メッセージを非同期に作成します。</summary>
      <returns>完了時に、応答メッセージを格納するタスク。</returns>
      <param name="cancellationToken">キャンセル要求を監視するトークン。</param>
    </member>
    <member name="P:System.Web.Http.Results.StatusCodeResult.Request">
      <summary>この結果に至った要求メッセージを取得します。</summary>
      <returns>この結果に至った要求メッセージ。</returns>
    </member>
    <member name="P:System.Web.Http.Results.StatusCodeResult.StatusCode">
      <summary>応答メッセージの HTTP ステータス コードを取得します。</summary>
      <returns>応答メッセージの HTTP ステータス コード。</returns>
    </member>
    <member name="T:System.Web.Http.Results.UnauthorizedResult">
      <summary>
        <see cref="F:System.Net.HttpStatusCode.Unauthorized" /> 応答を返すアクション結果を表します。</summary>
    </member>
    <member name="M:System.Web.Http.Results.UnauthorizedResult.#ctor(System.Collections.Generic.IEnumerable{System.Net.Http.Headers.AuthenticationHeaderValue},System.Net.Http.HttpRequestMessage)">
      <summary>
        <see cref="T:System.Web.Http.Results.StatusCodeResult" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="challenges">WWW-Authenticate チャレンジ。</param>
      <param name="request">この結果に至った要求メッセージ。</param>
    </member>
    <member name="M:System.Web.Http.Results.UnauthorizedResult.#ctor(System.Collections.Generic.IEnumerable{System.Net.Http.Headers.AuthenticationHeaderValue},System.Web.Http.ApiController)">
      <summary>
        <see cref="T:System.Web.Http.Results.StatusCodeResult" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="challenges">WWW-Authenticate チャレンジ。</param>
      <param name="controller">実行に必要な依存関係の取得元のコントローラー。</param>
    </member>
    <member name="P:System.Web.Http.Results.UnauthorizedResult.Challenges">
      <summary>WWW-Authenticate チャレンジを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> を返します。</returns>
    </member>
    <member name="M:System.Web.Http.Results.UnauthorizedResult.ExecuteAsync(System.Threading.CancellationToken)">
      <returns>
        <see cref="T:System.Threading.Tasks.Task`1" /> を返します。</returns>
    </member>
    <member name="P:System.Web.Http.Results.UnauthorizedResult.Request">
      <summary>この結果に至った要求メッセージを取得します。</summary>
      <returns>
        <see cref="T:System.Net.Http.HttpRequestMessage" /> を返します。</returns>
    </member>
    <member name="T:System.Web.Http.Routing.DefaultDirectRouteProvider">
      <summary>既定の <see cref="T:System.Web.Http.Routing.IDirectRouteProvider" /> の実装。</summary>
    </member>
    <member name="M:System.Web.Http.Routing.DefaultDirectRouteProvider.#ctor"></member>
    <member name="M:System.Web.Http.Routing.DefaultDirectRouteProvider.GetActionDirectRoutes(System.Web.Http.Controllers.HttpActionDescriptor,System.Collections.Generic.IReadOnlyList{System.Web.Http.Routing.IDirectRouteFactory},System.Web.Http.Routing.IInlineConstraintResolver)">
      <summary>提供されたファクトリとアクションを基にして <see cref="T:System.Web.Http.Routing.RouteEntry" /> インスタンスを作成します。ルート エントリは、提供されたアクションへの直接ルーティングを提供します。</summary>
      <returns>ルート エントリのセット。</returns>
      <param name="actionDescriptor">アクション記述子。</param>
      <param name="factories">ダイレクト ルートのファクトリ。</param>
      <param name="constraintResolver">制約リゾルバー。</param>
    </member>
    <member name="M:System.Web.Http.Routing.DefaultDirectRouteProvider.GetActionRouteFactories(System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary>指定のアクション記述子のルート ファクトリのセットを取得します。</summary>
      <returns>ルート ファクトリのセット。</returns>
      <param name="actionDescriptor">アクション記述子。</param>
    </member>
    <member name="M:System.Web.Http.Routing.DefaultDirectRouteProvider.GetControllerDirectRoutes(System.Web.Http.Controllers.HttpControllerDescriptor,System.Collections.Generic.IReadOnlyList{System.Web.Http.Controllers.HttpActionDescriptor},System.Collections.Generic.IReadOnlyList{System.Web.Http.Routing.IDirectRouteFactory},System.Web.Http.Routing.IInlineConstraintResolver)">
      <summary>提供されたファクトリ、コントローラー、およびアクションを基にして <see cref="T:System.Web.Http.Routing.RouteEntry" /> インスタンスを作成します。ルート エントリは、指定されているコントローラーへの直接ルーティングを提供したため、指定されているアクションのセットに到達できます。</summary>
      <returns>ルート エントリのセット。</returns>
      <param name="controllerDescriptor">コントローラー記述子。</param>
      <param name="actionDescriptors">アクション記述子。</param>
      <param name="factories">ダイレクト ルートのファクトリ。</param>
      <param name="constraintResolver">制約リゾルバー。</param>
    </member>
    <member name="M:System.Web.Http.Routing.DefaultDirectRouteProvider.GetControllerRouteFactories(System.Web.Http.Controllers.HttpControllerDescriptor)">
      <summary>指定のコントローラー記述子のルート ファクトリを取得します。</summary>
      <returns>ルート ファクトリのセット。</returns>
      <param name="controllerDescriptor">コントローラー記述子。</param>
    </member>
    <member name="M:System.Web.Http.Routing.DefaultDirectRouteProvider.GetDirectRoutes(System.Web.Http.Controllers.HttpControllerDescriptor,System.Collections.Generic.IReadOnlyList{System.Web.Http.Controllers.HttpActionDescriptor},System.Web.Http.Routing.IInlineConstraintResolver)">
      <summary>
        <see cref="T:System.Web.Http.Routing.IDirectRouteFactory" /> 属性を基にして、指定されたコントローラー記述子およびアクション記述子のダイレクト ルートを取得します。</summary>
      <returns>ルート エントリのセット。</returns>
      <param name="controllerDescriptor">コントローラー記述子。</param>
      <param name="actionDescriptors">すべてのアクションのアクション記述子。</param>
      <param name="constraintResolver">制約リゾルバー。</param>
    </member>
    <member name="M:System.Web.Http.Routing.DefaultDirectRouteProvider.GetRoutePrefix(System.Web.Http.Controllers.HttpControllerDescriptor)">
      <summary>指定されたコントローラーからルート プレフィックスを取得します。</summary>
      <returns>ルート プレフィックスまたは null。</returns>
      <param name="controllerDescriptor">コントローラー記述子。</param>
    </member>
    <member name="T:System.Web.Http.Routing.DefaultInlineConstraintResolver">
      <summary>既定の <see cref="T:System.Web.Http.Routing.IInlineConstraintResolver" /> の実装。制約キーと制約引数を解析し、マップを使用して制約の種類を解決し、制約の種類に適切なコンストラクターを呼び出して、制約を解決します。</summary>
    </member>
    <member name="M:System.Web.Http.Routing.DefaultInlineConstraintResolver.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Routing.DefaultInlineConstraintResolver" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Http.Routing.DefaultInlineConstraintResolver.ConstraintMap">
      <summary> 制約キーを特定の制約の種類にマップする変更可能な辞書を取得します。</summary>
      <returns>制約キーを特定の制約の種類にマップする変更可能なディクショナリ。</returns>
    </member>
    <member name="M:System.Web.Http.Routing.DefaultInlineConstraintResolver.ResolveConstraint(System.String)">
      <summary>インライン制約を解決します。</summary>
      <returns>インライン制約が解決された <see cref="T:System.Web.Http.Routing.IHttpRouteConstraint" />。</returns>
      <param name="inlineConstraint">解決するインライン制約。</param>
    </member>
    <member name="T:System.Web.Http.Routing.DirectRouteFactoryContext">
      <summary>ダイレクト ルートの作成をサポートするコンテキストを表します。</summary>
    </member>
    <member name="M:System.Web.Http.Routing.DirectRouteFactoryContext.#ctor(System.String,System.Collections.Generic.IReadOnlyCollection{System.Web.Http.Controllers.HttpActionDescriptor},System.Web.Http.Routing.IInlineConstraintResolver,System.Boolean)">
      <summary>
        <see cref="T:System.Web.Http.Routing.DirectRouteFactoryContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="prefix">コントローラーで定義されたルート プレフィックスがある場合は、そのルート プレフィックス。</param>
      <param name="actions">ルートの作成先であるアクションの説明。</param>
      <param name="inlineConstraintResolver">インライン制約のリゾルバー。</param>
      <param name="targetIsAction">ルートがアクション レベルまたはコントローラー レベルのどちらで設定されているかを示す値。</param>
    </member>
    <member name="P:System.Web.Http.Routing.DirectRouteFactoryContext.Actions">
      <summary>ルートの作成先であるアクションの説明を取得します。</summary>
      <returns>ルートの作成先であるアクションの説明。</returns>
    </member>
    <member name="M:System.Web.Http.Routing.DirectRouteFactoryContext.CreateBuilder(System.String)">
      <summary>このコンテキストと一致するルートをビルドできるルート ビルダーを作成します。</summary>
      <returns>このコンテキストと一致するルートをビルドできるルート ビルダー。</returns>
      <param name="template">ルート テンプレート。</param>
    </member>
    <member name="M:System.Web.Http.Routing.DirectRouteFactoryContext.CreateBuilder(System.String,System.Web.Http.Routing.IInlineConstraintResolver)">
      <summary>このコンテキストと一致するルートをビルドできるルート ビルダーを作成します。</summary>
      <returns>このコンテキストと一致するルートをビルドできるルート ビルダー。</returns>
      <param name="template">ルート テンプレート。</param>
      <param name="constraintResolver">該当する場合は、使用するインライン制約リゾルバー、それ以外の場合は null。</param>
    </member>
    <member name="P:System.Web.Http.Routing.DirectRouteFactoryContext.InlineConstraintResolver">
      <summary>インライン制約のリゾルバーを取得します。</summary>
      <returns>インライン制約のリゾルバー。</returns>
    </member>
    <member name="P:System.Web.Http.Routing.DirectRouteFactoryContext.Prefix">
      <summary>コントローラーで定義されたルート プレフィックスがある場合は、そのルート プレフィックスを取得します。</summary>
      <returns>コントローラーで定義されたルート プレフィックスがある場合は、そのルート プレフィックス。</returns>
    </member>
    <member name="P:System.Web.Http.Routing.DirectRouteFactoryContext.TargetIsAction">
      <summary>ルートがアクション レベルまたはコントローラー レベルのどちらで設定されているかを示す値を取得します。</summary>
      <returns>ルートがアクション レベルで設定されている場合は true、ルートがコントローラー レベルを設定されている場合は false。</returns>
    </member>
    <member name="T:System.Web.Http.Routing.HttpMethodConstraint">
      <summary>ASP.NET ルーティングで URL とルートの一致を判定するときに使用できる HTTP 動詞を定義できます。</summary>
    </member>
    <member name="M:System.Web.Http.Routing.HttpMethodConstraint.#ctor(System.Net.Http.HttpMethod[])">
      <summary>ルートに使用できる HTTP 動詞を使用して、<see cref="T:System.Web.Http.Routing.HttpMethodConstraint" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="allowedMethods">ルートについて有効な HTTP 動詞。</param>
    </member>
    <member name="P:System.Web.Http.Routing.HttpMethodConstraint.AllowedMethods">
      <summary>ルートに使用できる HTTP 動詞のコレクションを取得または設定します。</summary>
      <returns>ルートに使用できる HTTP 動詞のコレクション。</returns>
    </member>
    <member name="M:System.Web.Http.Routing.HttpMethodConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>ルートに使用できる HTTP 動詞のいずれかを使用して要求が作成されたかどうかを判定します。</summary>
      <returns>ASP.NET ルーティングで要求を処理するとき、使用できる HTTP 動詞を使用してその要求が作成されている場合は true。それ以外の場合は false。ASP.NET ルーティングで URL を作成するとき、使用できる HTTP 動詞のいずれかと一致する HTTP 動詞が指定の値に含まれている場合は true。それ以外の場合は false。既定値は true です。</returns>
      <param name="request">URL との一致を判定するためにチェックされる要求。</param>
      <param name="route">URL との一致を判定するためにチェックされるオブジェクト。</param>
      <param name="parameterName">チェックされるパラメーターの名前。</param>
      <param name="values">ルートのパラメーターが含まれるオブジェクト。</param>
      <param name="routeDirection">受信要求の処理時または URL の生成時に制約チェックが実行されるかどうかを示すオブジェクト。</param>
    </member>
    <member name="M:System.Web.Http.Routing.HttpMethodConstraint.System#Web#Http#Routing#IHttpRouteConstraint#Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>ルートに使用できる HTTP 動詞のいずれかを使用して要求が作成されたかどうかを判定します。</summary>
      <returns>ASP.NET ルーティングで要求を処理するとき、使用できる HTTP 動詞を使用してその要求が作成されている場合は true。それ以外の場合は false。ASP.NET ルーティングで URL を作成するとき、使用できる HTTP 動詞のいずれかと一致する HTTP 動詞が指定の値に含まれている場合は true。それ以外の場合は false。既定値は true です。</returns>
      <param name="request">URL との一致を判定するためにチェックされる要求。</param>
      <param name="route">URL との一致を判定するためにチェックされるオブジェクト。</param>
      <param name="parameterName">チェックされるパラメーターの名前。</param>
      <param name="values">ルートのパラメーターが含まれるオブジェクト。</param>
      <param name="routeDirection">受信要求の処理時または URL の生成時に制約チェックが実行されるかどうかを示すオブジェクト。</param>
    </member>
    <member name="T:System.Web.Http.Routing.HttpRoute">
      <summary>セルフホスト (ASP.NET の外部でホストされる) のルート クラスを表します。</summary>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRoute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Routing.HttpRoute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRoute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Web.Http.Routing.HttpRoute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="routeTemplate">ルート テンプレート。</param>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRoute.#ctor(System.String,System.Web.Http.Routing.HttpRouteValueDictionary)">
      <summary>
        <see cref="T:System.Web.Http.Routing.HttpRoute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="routeTemplate">ルート テンプレート。</param>
      <param name="defaults">ルート パラメーターの既定値。</param>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRoute.#ctor(System.String,System.Web.Http.Routing.HttpRouteValueDictionary,System.Web.Http.Routing.HttpRouteValueDictionary)">
      <summary>
        <see cref="T:System.Web.Http.Routing.HttpRoute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="routeTemplate">ルート テンプレート。</param>
      <param name="defaults">ルート パラメーターの既定値。</param>
      <param name="constraints">ルート パラメーターの制約。</param>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRoute.#ctor(System.String,System.Web.Http.Routing.HttpRouteValueDictionary,System.Web.Http.Routing.HttpRouteValueDictionary,System.Web.Http.Routing.HttpRouteValueDictionary)">
      <summary>
        <see cref="T:System.Web.Http.Routing.HttpRoute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="routeTemplate">ルート テンプレート。</param>
      <param name="defaults">ルート パラメーターの既定値。</param>
      <param name="constraints">ルート パラメーターの制約。</param>
      <param name="dataTokens">ルート パラメーターの追加トークン。</param>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRoute.#ctor(System.String,System.Web.Http.Routing.HttpRouteValueDictionary,System.Web.Http.Routing.HttpRouteValueDictionary,System.Web.Http.Routing.HttpRouteValueDictionary,System.Net.Http.HttpMessageHandler)">
      <summary>
        <see cref="T:System.Web.Http.Routing.HttpRoute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="routeTemplate">ルート テンプレート。</param>
      <param name="defaults">ルート パラメーターの既定値。</param>
      <param name="constraints">ルート パラメーターの制約。</param>
      <param name="dataTokens">ルート パラメーターの追加トークン。</param>
      <param name="handler">要求の受信者となるメッセージ ハンドラー。</param>
    </member>
    <member name="P:System.Web.Http.Routing.HttpRoute.Constraints">
      <summary>ルート パラメーターの制約を取得します。</summary>
      <returns>ルート パラメーターの制約。</returns>
    </member>
    <member name="P:System.Web.Http.Routing.HttpRoute.DataTokens">
      <summary>受け取った <see cref="T:System.Net.Http.HttpRequestMessage" /> とルートが一致するかどうかを判断する、直接使用されない追加のデータ トークンを取得します。</summary>
      <returns>受け取った <see cref="T:System.Net.Http.HttpRequestMessage" /> とルートが一致するかどうかを判断する、直接使用されない追加のデータ トークン。</returns>
    </member>
    <member name="P:System.Web.Http.Routing.HttpRoute.Defaults">
      <summary>受け取った <see cref="T:System.Net.Http.HttpRequestMessage" /> で指定されていない場合、ルート パラメーターの既定値を取得します。</summary>
      <returns>受け取った <see cref="T:System.Net.Http.HttpRequestMessage" /> で指定されていない場合、ルート パラメーターの既定値。</returns>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRoute.GetRouteData(System.String,System.Net.Http.HttpRequestMessage)">
      <summary>ルートの <see cref="T:System.Web.Http.Routing.HttpRouteData" /> を検索することによって、このルートが受け取った要求と一致するかどうかを判断します。</summary>
      <returns>一致する場合はルートの <see cref="T:System.Web.Http.Routing.HttpRouteData" />。それ以外の場合は null。</returns>
      <param name="virtualPathRoot">仮想パスのルート。</param>
      <param name="request">HTTP 要求。</param>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRoute.GetVirtualPath(System.Net.Http.HttpRequestMessage,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
        <see cref="T:System.Web.Http.Routing.HttpRouteData" /> の現在の値、および指定された <see cref="T:System.Web.Http.Routing.HttpRoute" /> を使用する新しい値に基づいて渡される値を表す URI を生成しようとします。</summary>
      <returns>
        <see cref="T:System.Web.Http.Routing.HttpVirtualPathData" /> インスタンス。または URI を生成できなかった場合は null。</returns>
      <param name="request">HTTP 要求メッセージ。</param>
      <param name="values">ルート値。</param>
    </member>
    <member name="P:System.Web.Http.Routing.HttpRoute.Handler">
      <summary>HTTP ルート ハンドラーを取得または設定します。</summary>
      <returns>HTTP ルート ハンドラー。</returns>
    </member>
    <member name="F:System.Web.Http.Routing.HttpRoute.HttpRouteKey">
      <summary>HTTP ルート キーを指定します。</summary>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRoute.ProcessConstraint(System.Net.Http.HttpRequestMessage,System.Object,System.String,System.Web.Http.Routing.HttpRouteValueDictionary,System.Web.Http.Routing.HttpRouteDirection)">
      <summary>このインスタンスが指定したルートと同じかどうかを判断します。</summary>
      <returns>このインスタンスが、指定されたルートと等しい場合は true。それ以外の場合は false。</returns>
      <param name="request">HTTP 要求。</param>
      <param name="constraint">ルート パラメーターの制約。</param>
      <param name="parameterName">パラメーターの名前。</param>
      <param name="values">パラメーター値の一覧。</param>
      <param name="routeDirection">
        <see cref="System.Web.Http.Routing.HttpRouteDirection" /> 列挙の列挙値の 1 つ。</param>
    </member>
    <member name="P:System.Web.Http.Routing.HttpRoute.RouteTemplate">
      <summary>照合の対象となる URI パターンを記述するルート テンプレートを取得します。</summary>
      <returns>照合の対象となる URI パターンを記述するルート テンプレート。</returns>
    </member>
    <member name="T:System.Web.Http.Routing.HttpRouteData">
      <summary>HTTP ルートに関する情報をカプセル化します。</summary>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRouteData.#ctor(System.Web.Http.Routing.IHttpRoute)">
      <summary>
        <see cref="T:System.Web.Http.Routing.HttpRouteData" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="route">ルートを定義するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRouteData.#ctor(System.Web.Http.Routing.IHttpRoute,System.Web.Http.Routing.HttpRouteValueDictionary)">
      <summary>
        <see cref="T:System.Web.Http.Routing.HttpRouteData" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="route">ルートを定義するオブジェクト。</param>
      <param name="values">値。</param>
    </member>
    <member name="P:System.Web.Http.Routing.HttpRouteData.Route">
      <summary>ルートを表すオブジェクトを取得します。</summary>
      <returns>ルートを表すオブジェクト。</returns>
    </member>
    <member name="P:System.Web.Http.Routing.HttpRouteData.Values">
      <summary>ルートの URL パラメーター値と既定値のコレクションを取得します。</summary>
      <returns>URL および既定値から解析される値が含まれるオブジェクト。</returns>
    </member>
    <member name="T:System.Web.Http.Routing.HttpRouteDataExtensions">
      <summary>値を持たないオプション パラメーターをルート データから削除します。</summary>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRouteDataExtensions.GetSubRoutes(System.Web.Http.Routing.IHttpRouteData)">
      <summary>ルートが本当に他のルートの結合である場合、一連のサブ ルートを返します。</summary>
      <returns>このルート内に含まれる一連のサブ ルートを返します。</returns>
      <param name="routeData">結合ルート データ。</param>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRouteDataExtensions.RemoveOptionalRoutingParameters(System.Web.Http.Routing.IHttpRouteData)">
      <summary>値を持たないオプション パラメーターをルート データから削除します。</summary>
      <param name="routeData">インプレースで変換されるルート データ。</param>
    </member>
    <member name="T:System.Web.Http.Routing.HttpRouteDirection">
      <summary>ルート方向の列挙を指定します。</summary>
    </member>
    <member name="F:System.Web.Http.Routing.HttpRouteDirection.UriGeneration">
      <summary>UriGeneration の方向。</summary>
    </member>
    <member name="F:System.Web.Http.Routing.HttpRouteDirection.UriResolution">
      <summary>UriResolution の方向。</summary>
    </member>
    <member name="T:System.Web.Http.Routing.HttpRouteValueDictionary">
      <summary>指定されたキーと値のペアのセルフホストのルート クラスを表します。</summary>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRouteValueDictionary.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Routing.HttpRouteValueDictionary" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRouteValueDictionary.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
        <see cref="T:System.Web.Http.Routing.HttpRouteValueDictionary" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dictionary">ディクショナリ。</param>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRouteValueDictionary.#ctor(System.Object)">
      <summary>
        <see cref="T:System.Web.Http.Routing.HttpRouteValueDictionary" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="values">キーの値。</param>
    </member>
    <member name="T:System.Web.Http.Routing.HttpVirtualPathData">
      <summary>HTTP 仮想パスに関するデータを示します。</summary>
    </member>
    <member name="M:System.Web.Http.Routing.HttpVirtualPathData.#ctor(System.Web.Http.Routing.IHttpRoute,System.String)">
      <summary>
        <see cref="T:System.Web.Http.Routing.HttpVirtualPathData" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="route">仮想パスのルート。</param>
      <param name="virtualPath">ルート定義から作成された URL。</param>
    </member>
    <member name="P:System.Web.Http.Routing.HttpVirtualPathData.Route">
      <summary>仮想パスのルートを取得または設定します。</summary>
      <returns>仮想パスのルート。</returns>
    </member>
    <member name="P:System.Web.Http.Routing.HttpVirtualPathData.VirtualPath">
      <summary>ルート定義から作成された URL を取得または設定します。</summary>
      <returns>ルート定義から作成された URL。</returns>
    </member>
    <member name="T:System.Web.Http.Routing.IDirectRouteBuilder">
      <summary>アクションへのダイレクト ルートを作成するビルダーを定義します (属性ルート)。</summary>
    </member>
    <member name="P:System.Web.Http.Routing.IDirectRouteBuilder.Actions">
      <summary>ルートの作成先であるアクションの説明を取得します。</summary>
      <returns>ルートの作成先であるアクションの説明。</returns>
    </member>
    <member name="M:System.Web.Http.Routing.IDirectRouteBuilder.Build">
      <summary>現在のプロパティ値に基づいてルート エントリを作成します。</summary>
      <returns>作成されたルート エントリ。</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IDirectRouteBuilder.Constraints">
      <summary>ルート制約を取得または設定します。</summary>
      <returns>ルート制約。</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IDirectRouteBuilder.DataTokens">
      <summary>ルート データ トークンを取得または設定します。</summary>
      <returns>ルート データ トークン。</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IDirectRouteBuilder.Defaults">
      <summary>ルートの既定を取得または設定します。</summary>
      <returns>ルートの既定値。</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IDirectRouteBuilder.Name">
      <summary>ルート名がある場合はルート名を取得または設定、それ以外の場合は null。</summary>
      <returns>ルート名がある場合はルート名、それ以外の場合は null。</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IDirectRouteBuilder.Order">
      <summary>ルートの順序を取得または設定します。</summary>
      <returns>ルートの順序。</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IDirectRouteBuilder.Precedence">
      <summary>ルートの優先順位を取得または設定します。</summary>
      <returns>ルートの優先順位。</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IDirectRouteBuilder.TargetIsAction">
      <summary>ルートがアクション レベルまたはコントローラー レベルのどちらで設定されているかを示す値を取得します。</summary>
      <returns>ルートがアクション レベルで設定されている場合は true、ルートがコントローラー レベルで設定されている場合は false。</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IDirectRouteBuilder.Template">
      <summary>ルートのテンプレートを取得または設定します。</summary>
      <returns>ルート テンプレート。</returns>
    </member>
    <member name="T:System.Web.Http.Routing.IDirectRouteFactory">
      <summary>ルートを一連のアクションの説明に直接作成するファクトリを定義します (属性ルート)。</summary>
    </member>
    <member name="M:System.Web.Http.Routing.IDirectRouteFactory.CreateRoute(System.Web.Http.Routing.DirectRouteFactoryContext)">
      <summary>ダイレクト ルートのエントリを作成します。</summary>
      <returns>ダイレクト ルートのエントリ。</returns>
      <param name="context">ルートの作成に使用するコンテキスト。</param>
    </member>
    <member name="T:System.Web.Http.Routing.IDirectRouteProvider">
      <summary>アクション記述子 (属性ルート) を直接ターゲットとするルートのプロバイダーを定義します。</summary>
    </member>
    <member name="M:System.Web.Http.Routing.IDirectRouteProvider.GetDirectRoutes(System.Web.Http.Controllers.HttpControllerDescriptor,System.Collections.Generic.IReadOnlyList{System.Web.Http.Controllers.HttpActionDescriptor},System.Web.Http.Routing.IInlineConstraintResolver)">
      <summary>コントローラーのダイレクト ルートを取得します。</summary>
      <returns>コントローラーのルート エントリのセット。</returns>
      <param name="controllerDescriptor">コントローラー記述子。</param>
      <param name="actionDescriptors">アクション記述子。</param>
      <param name="constraintResolver">インライン制約のリゾルバー。</param>
    </member>
    <member name="T:System.Web.Http.Routing.IHttpRoute">
      <summary>
        <see cref="T:System.Web.Http.Routing.IHttpRoute" /> は、受け取った <see cref="T:System.Net.Http.HttpRequestMessage" /> を特定のコントローラーおよびアクションにマップする方法を示すルートのインターフェイスを定義します。</summary>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRoute.Constraints">
      <summary> ルート パラメーターの制約を取得します。</summary>
      <returns>ルート パラメーターの制約。</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRoute.DataTokens">
      <summary> 受け取った <see cref="T:System.Net.Http.HttpRequestMessage" /> とルートが一致するかどうかを判断する、直接使用されない追加のデータ トークンを取得します。</summary>
      <returns>追加のデータ トークン。</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRoute.Defaults">
      <summary> 受け取った <see cref="T:System.Net.Http.HttpRequestMessage" /> で指定されていない場合、ルート パラメーターの既定値を取得します。</summary>
      <returns>ルート パラメーターの既定値。</returns>
    </member>
    <member name="M:System.Web.Http.Routing.IHttpRoute.GetRouteData(System.String,System.Net.Http.HttpRequestMessage)">
      <summary> ルートの &lt;see cref="!:IRouteData" /&gt; を検索することによって、このルートが受け取った要求と一致するかどうかを判断します。</summary>
      <returns>一致する場合はルートの &lt;see cref="!:RouteData" /&gt;。それ以外の場合は null。</returns>
      <param name="virtualPathRoot">仮想パスのルート。</param>
      <param name="request">要求。</param>
    </member>
    <member name="M:System.Web.Http.Routing.IHttpRoute.GetVirtualPath(System.Net.Http.HttpRequestMessage,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定されたルートと値に基づいて仮想パス データを取得します。</summary>
      <returns>仮想パス データ。</returns>
      <param name="request">要求メッセージ。</param>
      <param name="values">値。</param>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRoute.Handler">
      <summary>要求の受信者となるメッセージ ハンドラーを取得します。</summary>
      <returns>メッセージ ハンドラー。</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRoute.RouteTemplate">
      <summary> 照合の対象となる URI パターンを記述するルート テンプレートを取得します。</summary>
      <returns>ルート テンプレート。</returns>
    </member>
    <member name="T:System.Web.Http.Routing.IHttpRouteConstraint">
      <summary>基本クラスのルート制約を表します。</summary>
    </member>
    <member name="M:System.Web.Http.Routing.IHttpRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>このインスタンスが指定したルートと同じかどうかを判断します。</summary>
      <returns>このインスタンスが、指定されたルートと等しい場合は true。それ以外の場合は false。</returns>
      <param name="request">要求。</param>
      <param name="route">比較するルート。</param>
      <param name="parameterName">パラメーターの名前。</param>
      <param name="values">パラメーター値の一覧。</param>
      <param name="routeDirection">ルート方向。</param>
    </member>
    <member name="T:System.Web.Http.Routing.IHttpRouteData">
      <summary>ルートに関する情報を提供します。</summary>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRouteData.Route">
      <summary>ルートを表すオブジェクトを取得します。</summary>
      <returns>ルートを表すオブジェクト。</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRouteData.Values">
      <summary>ルートの URL パラメーター値と既定値のコレクションを取得します。</summary>
      <returns>URL および既定値から解析される値。</returns>
    </member>
    <member name="T:System.Web.Http.Routing.IHttpRouteInfoProvider">
      <summary> ルートの定義に関する情報を提供します。</summary>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRouteInfoProvider.Name">
      <summary> 生成するルートの名前を取得します。</summary>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRouteInfoProvider.Order">
      <summary> 他のルートとの相対関係でルートの順序を取得します。</summary>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRouteInfoProvider.Template">
      <summary> 照合の対象となる URI パターンを記述するルート テンプレートを取得します。 </summary>
    </member>
    <member name="T:System.Web.Http.Routing.IHttpVirtualPathData">
      <summary>HTTP ルートのプロパティを定義します。</summary>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpVirtualPathData.Route">
      <summary>HTTP ルートを取得します。</summary>
      <returns>HTTP ルート。</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpVirtualPathData.VirtualPath">
      <summary>現在の HTTP ルートの仮想パスを表す URI を取得します。</summary>
      <returns>現在の HTTP ルートの仮想パスを表す URI。</returns>
    </member>
    <member name="T:System.Web.Http.Routing.IInlineConstraintResolver">
      <summary>
        <see cref="T:System.Web.Http.Routing.IHttpRouteConstraint" /> のインスタンスとしてインライン制約を解決するための抽象型を定義します。</summary>
    </member>
    <member name="M:System.Web.Http.Routing.IInlineConstraintResolver.ResolveConstraint(System.String)">
      <summary> インライン制約を解決します。</summary>
      <returns>インライン制約が解決された <see cref="T:System.Web.Http.Routing.IHttpRouteConstraint" />。</returns>
      <param name="inlineConstraint">解決するインライン制約。</param>
    </member>
    <member name="T:System.Web.Http.Routing.IRoutePrefix">
      <summary>ルート プレフィックスを定義します。</summary>
    </member>
    <member name="P:System.Web.Http.Routing.IRoutePrefix.Prefix">
      <summary>ルート プレフィックスを取得します。</summary>
      <returns>ルートのプレフィックス。</returns>
    </member>
    <member name="T:System.Web.Http.Routing.RouteEntry">
      <summary>名前付きルートを表します。</summary>
    </member>
    <member name="M:System.Web.Http.Routing.RouteEntry.#ctor(System.String,System.Web.Http.Routing.IHttpRoute)">
      <summary>
        <see cref="T:System.Web.Http.Routing.RouteEntry" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">ルート名がある場合はルート名、それ以外の場合は null。</param>
      <param name="route">ルート。</param>
    </member>
    <member name="P:System.Web.Http.Routing.RouteEntry.Name">
      <summary>ルート名がある場合はルート名、それ以外の場合は null を取得します。</summary>
      <returns>ルート名がある場合はルート名、それ以外の場合は null。</returns>
    </member>
    <member name="P:System.Web.Http.Routing.RouteEntry.Route">
      <summary>ルートを取得します。</summary>
      <returns>ルート。</returns>
    </member>
    <member name="T:System.Web.Http.Routing.RouteFactoryAttribute">
      <summary>カスタム制約を含む可能性のある属性ルートを表します。</summary>
    </member>
    <member name="M:System.Web.Http.Routing.RouteFactoryAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Web.Http.Routing.RouteFactoryAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="template">ルート テンプレート。</param>
    </member>
    <member name="P:System.Web.Http.Routing.RouteFactoryAttribute.Constraints">
      <summary>ルート制約がある場合はルート制約を取得、それ以外の場合は null。</summary>
      <returns>ルート制約がある場合はルート制約、それ以外の場合は null。</returns>
    </member>
    <member name="M:System.Web.Http.Routing.RouteFactoryAttribute.CreateRoute(System.Web.Http.Routing.DirectRouteFactoryContext)">
      <summary>ルート エントリを作成します。</summary>
      <returns>作成されたルート エントリ。</returns>
      <param name="context">コンテキスト。</param>
    </member>
    <member name="P:System.Web.Http.Routing.RouteFactoryAttribute.DataTokens">
      <summary>ルート データ トークンがある場合はルート データ トークンを取得、それ以外の場合は null。</summary>
      <returns>ルート データ トークンがある場合はルート データ トークン、それ以外の場合は null。</returns>
    </member>
    <member name="P:System.Web.Http.Routing.RouteFactoryAttribute.Defaults">
      <summary>ルートの既定がある場合はルートの既定を取得、それ以外の場合は null。</summary>
      <returns>ルートの既定がある場合はルートの既定、それ以外の場合は null。</returns>
    </member>
    <member name="P:System.Web.Http.Routing.RouteFactoryAttribute.Name">
      <summary>ルート名がある場合はルート名を取得または設定、それ以外の場合は null。</summary>
      <returns>ルート名がある場合はルート名、それ以外の場合は null。</returns>
    </member>
    <member name="P:System.Web.Http.Routing.RouteFactoryAttribute.Order">
      <summary>ルートの順序を取得または設定します。</summary>
      <returns>ルートの順序。</returns>
    </member>
    <member name="P:System.Web.Http.Routing.RouteFactoryAttribute.Template">
      <summary>ルート テンプレートを取得します。</summary>
      <returns>ルート テンプレート。</returns>
    </member>
    <member name="T:System.Web.Http.Routing.StopRoutingHandler">
      <summary>ルーティングでルート テンプレートの要求を処理しないよう指定するハンドラーを表します。ルートがこのクラスをハンドラーとして提供する場合、ルートに対する要求マッチは無視されます。</summary>
    </member>
    <member name="M:System.Web.Http.Routing.StopRoutingHandler.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Routing.StopRoutingHandler" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Web.Http.Routing.UrlHelper">
      <summary>URL を作成するためのファクトリを表します。</summary>
    </member>
    <member name="M:System.Web.Http.Routing.UrlHelper.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Routing.UrlHelper" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.Routing.UrlHelper.#ctor(System.Net.Http.HttpRequestMessage)">
      <summary>
        <see cref="T:System.Web.Http.Routing.UrlHelper" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="request">このインスタンスの HTTP 要求。</param>
    </member>
    <member name="M:System.Web.Http.Routing.UrlHelper.Content(System.String)">
      <summary>指定されたパスを使用して絶対 URL を作成します。</summary>
      <returns>生成された URL。</returns>
      <param name="path">URL パス (相対 URL、ルート指定の URL、または仮想パスが使用可能)。</param>
    </member>
    <member name="M:System.Web.Http.Routing.UrlHelper.Link(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>指定されたルートのリンクを返します。</summary>
      <returns>指定されたルートのリンク。</returns>
      <param name="routeName">ルートの名前。</param>
      <param name="routeValues">ルートのパラメーターが含まれるオブジェクト。</param>
    </member>
    <member name="M:System.Web.Http.Routing.UrlHelper.Link(System.String,System.Object)">
      <summary>指定されたルートのリンクを返します。</summary>
      <returns>指定されたルートのリンク。</returns>
      <param name="routeName">ルートの名前。</param>
      <param name="routeValues">ルートの値。</param>
    </member>
    <member name="P:System.Web.Http.Routing.UrlHelper.Request">
      <summary>現在の <see cref="T:System.Web.Http.Routing.UrlHelper" /> インスタンスの <see cref="T:System.Net.Http.HttpRequestMessage" /> を取得または設定します。</summary>
      <returns>現在のインスタンスの <see cref="T:System.Net.Http.HttpRequestMessage" />。</returns>
    </member>
    <member name="M:System.Web.Http.Routing.UrlHelper.Route(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
        <see cref="T:System.Web.Http.Routing.UrlHelper" /> のルートを返します。</summary>
      <returns>
        <see cref="T:System.Web.Http.Routing.UrlHelper" /> のルート。</returns>
      <param name="routeName">ルートの名前。</param>
      <param name="routeValues">ルートの値のリスト。</param>
    </member>
    <member name="M:System.Web.Http.Routing.UrlHelper.Route(System.String,System.Object)">
      <summary>
        <see cref="T:System.Web.Http.Routing.UrlHelper" /> のルートを返します。</summary>
      <returns>
        <see cref="T:System.Web.Http.Routing.UrlHelper" /> のルート。</returns>
      <param name="routeName">ルートの名前。</param>
      <param name="routeValues">ルート値。</param>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.AlphaRouteConstraint">
      <summary>英語のアルファベットの大文字または小文字の A から Z のみを含むようにルート パラメーターを制約します。</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.AlphaRouteConstraint.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Routing.Constraints.AlphaRouteConstraint" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.BoolRouteConstraint">
      <summary>ルート パラメーターをブール値のみで表すように制約します。</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.BoolRouteConstraint.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Routing.Constraints.BoolRouteConstraint" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.BoolRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>このインスタンスが指定したルートと同じかどうかを判断します。</summary>
      <returns>このインスタンスが、指定されたルートと等しい場合は true。それ以外の場合は false。</returns>
      <param name="request">要求。</param>
      <param name="route">比較するルート。</param>
      <param name="parameterName">パラメーターの名前。</param>
      <param name="values">パラメーター値の一覧。</param>
      <param name="routeDirection">ルート方向。</param>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.CompoundRouteConstraint">
      <summary>複数の子制約によってルートを制約します。</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.CompoundRouteConstraint.#ctor(System.Collections.Generic.IList{System.Web.Http.Routing.IHttpRouteConstraint})">
      <summary>
        <see cref="T:System.Web.Http.Routing.Constraints.CompoundRouteConstraint" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="constraints">この制約が一致するために、一致する必要がある子制約。</param>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.CompoundRouteConstraint.Constraints">
      <summary>この制約が一致するために、一致する必要がある子制約を取得します。</summary>
      <returns>この制約が一致するために、一致する必要がある子制約。</returns>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.CompoundRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>このインスタンスが指定したルートと同じかどうかを判断します。</summary>
      <returns>このインスタンスが、指定されたルートと等しい場合は true。それ以外の場合は false。</returns>
      <param name="request">要求。</param>
      <param name="route">比較するルート。</param>
      <param name="parameterName">パラメーターの名前。</param>
      <param name="values">パラメーター値の一覧。</param>
      <param name="routeDirection">ルート方向。</param>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.DateTimeRouteConstraint">
      <summary>ルート パラメーターを <see cref="T:System.DateTime" /> 値のみで表すように制約します。</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.DateTimeRouteConstraint.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Routing.Constraints.DateTimeRouteConstraint" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.DateTimeRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>このインスタンスが指定したルートと同じかどうかを判断します。</summary>
      <returns>このインスタンスが、指定されたルートと等しい場合は true。それ以外の場合は false。</returns>
      <param name="request">要求。</param>
      <param name="route">比較するルート。</param>
      <param name="parameterName">パラメーターの名前。</param>
      <param name="values">パラメーター値の一覧。</param>
      <param name="routeDirection">ルート方向。</param>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.DecimalRouteConstraint">
      <summary>ルート パラメーターを 10 進値のみで表すように制約します。</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.DecimalRouteConstraint.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Routing.Constraints.DecimalRouteConstraint" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.DecimalRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>このインスタンスが指定したルートと同じかどうかを判断します。</summary>
      <returns>このインスタンスが、指定されたルートと等しい場合は true。それ以外の場合は false。</returns>
      <param name="request">要求。</param>
      <param name="route">比較するルート。</param>
      <param name="parameterName">パラメーターの名前。</param>
      <param name="values">パラメーター値の一覧。</param>
      <param name="routeDirection">ルート方向。</param>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.DoubleRouteConstraint">
      <summary>ルート パラメーターを 64 ビット浮動小数点値のみで表すように制約します。</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.DoubleRouteConstraint.#ctor"></member>
    <member name="M:System.Web.Http.Routing.Constraints.DoubleRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)"></member>
    <member name="T:System.Web.Http.Routing.Constraints.FloatRouteConstraint">
      <summary>ルート パラメーターを 32 ビット浮動小数点値のみで表すように制約します。</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.FloatRouteConstraint.#ctor"></member>
    <member name="M:System.Web.Http.Routing.Constraints.FloatRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)"></member>
    <member name="T:System.Web.Http.Routing.Constraints.GuidRouteConstraint">
      <summary>ルート パラメーターを <see cref="T:System.Guid" /> 値のみで表すように制約します。</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.GuidRouteConstraint.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Routing.Constraints.GuidRouteConstraint" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.GuidRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>このインスタンスが指定したルートと同じかどうかを判断します。</summary>
      <returns>このインスタンスが、指定されたルートと等しい場合は true。それ以外の場合は false。</returns>
      <param name="request">要求。</param>
      <param name="route">比較するルート。</param>
      <param name="parameterName">パラメーターの名前。</param>
      <param name="values">パラメーター値の一覧。</param>
      <param name="routeDirection">ルート方向。</param>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.IntRouteConstraint">
      <summary>ルート パラメーターを 32 ビット整数値のみで表すように制約します。</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.IntRouteConstraint.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Routing.Constraints.IntRouteConstraint" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.IntRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>このインスタンスが指定したルートと同じかどうかを判断します。</summary>
      <returns>このインスタンスが、指定されたルートと等しい場合は true。それ以外の場合は false。</returns>
      <param name="request">要求。</param>
      <param name="route">比較するルート。</param>
      <param name="parameterName">パラメーターの名前。</param>
      <param name="values">パラメーター値の一覧。</param>
      <param name="routeDirection">ルート方向。</param>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.LengthRouteConstraint">
      <summary>ルート パラメーターを、指定された長さまたは指定された長さの範囲内の文字列になるように制約します。</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.LengthRouteConstraint.#ctor(System.Int32)"></member>
    <member name="M:System.Web.Http.Routing.Constraints.LengthRouteConstraint.#ctor(System.Int32,System.Int32)">
      <summary>ルート パラメーターを指定された長さの文字列に制約する <see cref="T:System.Web.Http.Routing.Constraints.LengthRouteConstraint" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="minLength">ルート パラメーターの最小長。</param>
      <param name="maxLength">ルート パラメーターの最大長。</param>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.LengthRouteConstraint.Length">
      <summary>ルート パラメーターの長さが設定されている場合、それを取得します。</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.LengthRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)"></member>
    <member name="P:System.Web.Http.Routing.Constraints.LengthRouteConstraint.MaxLength">
      <summary>ルート パラメーターの最大長が設定されている場合、それを取得します。</summary>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.LengthRouteConstraint.MinLength">
      <summary>ルート パラメーターの最小長が設定されている場合、それを取得します。</summary>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.LongRouteConstraint">
      <summary>ルート パラメーターを 64 ビット整数値のみで表すように制約します。</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.LongRouteConstraint.#ctor"></member>
    <member name="M:System.Web.Http.Routing.Constraints.LongRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)"></member>
    <member name="T:System.Web.Http.Routing.Constraints.MaxLengthRouteConstraint">
      <summary>ルート パラメーターを最大長の文字列になるように制約します。</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.MaxLengthRouteConstraint.#ctor(System.Int32)">
      <summary>
        <see cref="T:System.Web.Http.Routing.Constraints.MaxLengthRouteConstraint" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="maxLength">最大長。</param>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.MaxLengthRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>このインスタンスが指定したルートと同じかどうかを判断します。</summary>
      <returns>このインスタンスが、指定されたルートと等しい場合は true。それ以外の場合は false。</returns>
      <param name="request">要求。</param>
      <param name="route">比較するルート。</param>
      <param name="parameterName">パラメーターの名前。</param>
      <param name="values">パラメーター値の一覧。</param>
      <param name="routeDirection">ルート方向。</param>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.MaxLengthRouteConstraint.MaxLength">
      <summary>ルート パラメーターの最大長を取得します。</summary>
      <returns>ルート パラメーターの最大長。</returns>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.MaxRouteConstraint">
      <summary>ルート パラメーターを最大値の整数になるように制約します。</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.MaxRouteConstraint.#ctor(System.Int64)"></member>
    <member name="M:System.Web.Http.Routing.Constraints.MaxRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)"></member>
    <member name="P:System.Web.Http.Routing.Constraints.MaxRouteConstraint.Max">
      <summary>ルート パラメーターの最大値を取得します。</summary>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.MinLengthRouteConstraint">
      <summary>ルート パラメーターを最大長の文字列になるように制約します。</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.MinLengthRouteConstraint.#ctor(System.Int32)">
      <summary>
        <see cref="T:System.Web.Http.Routing.Constraints.MinLengthRouteConstraint" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="minLength">最小長。</param>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.MinLengthRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>このインスタンスが指定したルートと同じかどうかを判断します。</summary>
      <returns>このインスタンスが、指定されたルートと等しい場合は true。それ以外の場合は false。</returns>
      <param name="request">要求。</param>
      <param name="route">比較するルート。</param>
      <param name="parameterName">パラメーターの名前。</param>
      <param name="values">パラメーター値の一覧。</param>
      <param name="routeDirection">ルート方向。</param>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.MinLengthRouteConstraint.MinLength">
      <summary>ルート パラメーターの最小長を取得します。</summary>
      <returns>ルート パラメーターの最小長。</returns>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.MinRouteConstraint">
      <summary>ルート パラメーターを最小値の長さになるように制約します。</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.MinRouteConstraint.#ctor(System.Int64)">
      <summary>
        <see cref="T:System.Web.Http.Routing.Constraints.MinRouteConstraint" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="min">ルート パラメーターの最小値。</param>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.MinRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>このインスタンスが指定したルートと同じかどうかを判断します。</summary>
      <returns>このインスタンスが、指定されたルートと等しい場合は true。それ以外の場合は false。</returns>
      <param name="request">要求。</param>
      <param name="route">比較するルート。</param>
      <param name="parameterName">パラメーターの名前。</param>
      <param name="values">パラメーター値の一覧。</param>
      <param name="routeDirection">ルート方向。</param>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.MinRouteConstraint.Min">
      <summary>ルート パラメーターの最小値を取得します。</summary>
      <returns>ルート パラメーターの最小値。</returns>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.OptionalRouteConstraint">
      <summary>オプションのパラメーターがその既定値に設定されている場合に失敗することがない内部制約によって、ルートを制約します。</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.OptionalRouteConstraint.#ctor(System.Web.Http.Routing.IHttpRouteConstraint)">
      <summary>
        <see cref="T:System.Web.Http.Routing.Constraints.OptionalRouteConstraint" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="innerConstraint">パラメーターが値のないオプションのパラメーターでない場合に、一致する内部制約</param>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.OptionalRouteConstraint.InnerConstraint">
      <summary>パラメーターが値のないオプションのパラメーターでない場合に、一致する内部制約を取得します。</summary>
      <returns>パラメーターが値のない省略可能なパラメーターでない場合に一致させる内部制約。</returns>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.OptionalRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>このインスタンスが指定したルートと同じかどうかを判断します。</summary>
      <returns>このインスタンスが、指定されたルートと等しい場合は true。それ以外の場合は false。</returns>
      <param name="request">要求。</param>
      <param name="route">比較するルート。</param>
      <param name="parameterName">パラメーターの名前。</param>
      <param name="values">パラメーター値の一覧。</param>
      <param name="routeDirection">ルート方向。</param>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.RangeRouteConstraint">
      <summary>ルート パラメーターを指定された値の範囲内の整数になるように制約します。</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.RangeRouteConstraint.#ctor(System.Int64,System.Int64)">
      <summary>
        <see cref="T:System.Web.Http.Routing.Constraints.RangeRouteConstraint" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="min">最小値。</param>
      <param name="max">最大値。</param>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.RangeRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>このインスタンスが指定したルートと同じかどうかを判断します。</summary>
      <returns>このインスタンスが、指定されたルートと等しい場合は true。それ以外の場合は false。</returns>
      <param name="request">要求。</param>
      <param name="route">比較するルート。</param>
      <param name="parameterName">パラメーターの名前。</param>
      <param name="values">パラメーター値の一覧。</param>
      <param name="routeDirection">ルート方向。</param>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.RangeRouteConstraint.Max">
      <summary>ルート パラメーターの最大値を取得します。</summary>
      <returns>ルート パラメーターの最大値。</returns>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.RangeRouteConstraint.Min">
      <summary>ルート パラメーターの最小値を取得します。</summary>
      <returns>ルート パラメーターの最小値。</returns>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.RegexRouteConstraint">
      <summary>ルート パラメーターを正規表現に一致するように制約します。</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.RegexRouteConstraint.#ctor(System.String)">
      <summary>
        <see cref="T:System.Web.Http.Routing.Constraints.RegexRouteConstraint" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="pattern">パターン。</param>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.RegexRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>このインスタンスが指定したルートと同じかどうかを判断します。</summary>
      <returns>このインスタンスが、指定されたルートと等しい場合は true。それ以外の場合は false。</returns>
      <param name="request">要求。</param>
      <param name="route">比較するルート。</param>
      <param name="parameterName">パラメーターの名前。</param>
      <param name="values">パラメーター値の一覧。</param>
      <param name="routeDirection">ルート方向。</param>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.RegexRouteConstraint.Pattern">
      <summary>照合する正規表現パターンを取得します。</summary>
      <returns>照合する正規表現パターン。</returns>
    </member>
    <member name="T:System.Web.Http.Services.Decorator">
      <summary> &lt;see cref="T:System.Web.Http.Services.IDecorator`1" /&gt; によってラップされる可能性のある、オブジェクトの最深部のオブジェクトを取得するメソッドを提供します。</summary>
    </member>
    <member name="M:System.Web.Http.Services.Decorator.GetInner``1(``0)">
      <summary> &lt;see cref="T:System.Web.Http.Services.IDecorator`1" /&gt; を実装しない最深部のオブジェクトを取得します。</summary>
      <param name="outer">ラップ解除する必要があるオブジェクト。</param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="T:System.Web.Http.Services.DefaultServices">
      <summary>
        <see cref="T:System.Web.Http.HttpConfiguration" /> によって使用されるサービス インスタンスのコンテナーを表します。このコンテナーは既知の種類のみをサポートし、任意のサービスの種類を取得または設定するメッソドは、呼び出されると <see cref="T:System.ArgumentException" /> をスローすることに注意してください。任意の種類を作成するには、代わりに <see cref="T:System.Web.Http.Dependencies.IDependencyResolver" /> を使用してください。このコンテナーでサポートされている種類を以下に示します。<see cref="T:System.Web.Http.Controllers.IActionValueBinder" /><see cref="T:System.Web.Http.Description.IApiExplorer" /><see cref="T:System.Web.Http.Dispatcher.IAssembliesResolver" /><see cref="T:System.Web.Http.Validation.IBodyModelValidator" /><see cref="T:System.Net.Http.Formatting.IContentNegotiator" /><see cref="T:System.Web.Http.Description.IDocumentationProvider" /><see cref="T:System.Web.Http.Filters.IFilterProvider" /><see cref="T:System.Web.Http.Hosting.IHostBufferPolicySelector" /><see cref="T:System.Web.Http.Controllers.IHttpActionInvoker" /><see cref="T:System.Web.Http.Controllers.IHttpActionSelector" /><see cref="T:System.Web.Http.Dispatcher.IHttpControllerActivator" /><see cref="T:System.Web.Http.Dispatcher.IHttpControllerSelector" /><see cref="T:System.Web.Http.Dispatcher.IHttpControllerTypeResolver" /><see cref="T:System.Web.Http.Tracing.ITraceManager" /><see cref="T:System.Web.Http.Tracing.ITraceWriter" /><see cref="T:System.Web.Http.Query.IStructuredQueryBuilder" /><see cref="T:System.Web.Http.ModelBinding.ModelBinderProvider" /><see cref="T:System.Web.Http.Metadata.ModelMetadataProvider" /><see cref="T:System.Web.Http.Validation.ModelValidatorProvider" /><see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" />ここに示されていない種類をこのインターフェイス上のメッソドに渡すと、<see cref="T:System.ArgumentException" /> がスローされます。</summary>
    </member>
    <member name="M:System.Web.Http.Services.DefaultServices.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Services.DefaultServices" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.Services.DefaultServices.#ctor(System.Web.Http.HttpConfiguration)">
      <summary>指定された <see cref="T:System.Web.Http.HttpConfiguration" /> オブジェクトを使用して <see cref="T:System.Web.Http.Services.DefaultServices" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="configuration">
        <see cref="T:System.Web.Http.HttpConfiguration" /> オブジェクト。</param>
    </member>
    <member name="M:System.Web.Http.Services.DefaultServices.ClearSingle(System.Type)">
      <summary>既定のサービスから単一インスタンスのサービスを削除します。</summary>
      <param name="serviceType">サービスの種類。</param>
    </member>
    <member name="M:System.Web.Http.Services.DefaultServices.GetService(System.Type)">
      <summary>指定された種類のサービスを取得します。</summary>
      <returns>サービスの最初のインスタンス。サービスが見つからない場合は null。</returns>
      <param name="serviceType">サービスの種類。</param>
    </member>
    <member name="M:System.Web.Http.Services.DefaultServices.GetServiceInstances(System.Type)">
      <summary>指定されたサービスの種類のサービス オブジェクトの一覧を取得し、そのサービスの種類を検証します。</summary>
      <returns>指定された種類のサービス オブジェクトの一覧。</returns>
      <param name="serviceType">サービスの種類。</param>
    </member>
    <member name="M:System.Web.Http.Services.DefaultServices.GetServices(System.Type)">
      <summary>指定されたサービスの種類のサービス オブジェクトの一覧を取得します。</summary>
      <returns>指定された種類のサービス オブジェクトの一覧。サービスが見つからない場合は空の一覧。</returns>
      <param name="serviceType">サービスの種類。</param>
    </member>
    <member name="M:System.Web.Http.Services.DefaultServices.IsSingleService(System.Type)">
      <summary>サービスの種類が単一インスタンスかどうかを問い合わせます。</summary>
      <returns>サービスの種類のインスタンス数が最大で 1 の場合は true。サービスの種類が複数のインスタンスをサポートしている場合は false。</returns>
      <param name="serviceType">サービスの種類。</param>
    </member>
    <member name="M:System.Web.Http.Services.DefaultServices.ReplaceSingle(System.Type,System.Object)">
      <summary>単一インスタンスのサービス オブジェクトを置き換えます。</summary>
      <param name="serviceType">サービスの種類。</param>
      <param name="service">前のインスタンスを置き換えるサービス オブジェクト。</param>
    </member>
    <member name="M:System.Web.Http.Services.DefaultServices.ResetCache(System.Type)">
      <summary>単一であるサービスの種類に対してキャッシュされた値を削除します。</summary>
      <param name="serviceType">サービスの種類。</param>
    </member>
    <member name="T:System.Web.Http.Services.IDecorator`1">
      <summary> 装飾された内部オブジェクトを公開するデコレータを定義します。</summary>
      <typeparam name="T">このパラメーターが共変の型パラメーターです。つまり、その指定した型を使用するか、それよりも強い任意の派生型を使用することができます。 共変性と反変性の詳細については、「」を参照してください。</typeparam>
    </member>
    <member name="P:System.Web.Http.Services.IDecorator`1.Inner">
      <summary> 内部オブジェクトを取得します。 </summary>
    </member>
    <member name="T:System.Web.Http.Tracing.ITraceManager">
      <summary>メッソドの開始/終了および期間を記録するためのパフォーマンス トレース クラスを表します。</summary>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceManager.Initialize(System.Web.Http.HttpConfiguration)">
      <summary>指定された構成を使用して <see cref="T:System.Web.Http.Tracing.ITraceManager" /> クラスを初期化します。</summary>
      <param name="configuration">構成。</param>
    </member>
    <member name="T:System.Web.Http.Tracing.ITraceWriter">
      <summary>トレース ライターを表します。</summary>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriter.Trace(System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.Action{System.Web.Http.Tracing.TraceRecord})">
      <summary> 指定された category と level でトレースが許可されている場合にのみ、指定された traceAction を呼び出して新しい <see cref="T:System.Web.Http.Tracing.TraceRecord" /> での値の設定を許可します。</summary>
      <param name="request">現在の <see cref="T:System.Net.Http.HttpRequestMessage" />。null にすることもできますが、null にすることによって、以降のトレース分析でトレースと特定の要求との相関関係を分析できなくなります。</param>
      <param name="category">トレースの論理カテゴリ。ユーザーが独自に定義できます。</param>
      <param name="level">このトレースを書き込む <see cref="T:System.Web.Http.Tracing.TraceLevel" />。</param>
      <param name="traceAction">トレースが有効である場合に呼び出すアクション。呼び出し元は、このアクションで指定された <see cref="T:System.Web.Http.Tracing.TraceRecord" /> のフィールドに入力することが想定されています。</param>
    </member>
    <member name="T:System.Web.Http.Tracing.ITraceWriterExtensions">
      <summary>
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" /> の拡張メソッドを表します。</summary>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Debug(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception)">
      <summary>指定されたライター、要求、カテゴリおよび例外が含まれるコードのデバッグに役立つ、一連のメッソドとプロパティを提供します。</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />。</param>
      <param name="request">トレースを関連付ける <see cref="T:System.Net.Http.HttpRequestMessage" />。null にすることができます。</param>
      <param name="category">トレースの論理カテゴリ。</param>
      <param name="exception">実行中に発生したエラー。</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Debug(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception,System.String,System.Object[])">
      <summary>指定されたライター、要求、カテゴリ、例外、メッセージ形式、および引数が含まれるコードのデバッグに役立つ、一連のメソッドとプロパティを提供します。</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />。</param>
      <param name="request">トレースを関連付ける <see cref="T:System.Net.Http.HttpRequestMessage" />。null にすることができます。</param>
      <param name="category">トレースの論理カテゴリ。</param>
      <param name="exception">実行中に発生したエラー。</param>
      <param name="messageFormat">メッセージの形式。</param>
      <param name="messageArguments">メッセージの引数。</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Debug(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.String,System.Object[])">
      <summary>指定されたライター、要求、カテゴリ、例外、メッセージ形式、および引数が含まれるコードのデバッグに役立つ、一連のメソッドとプロパティを提供します。</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />。</param>
      <param name="request">トレースを関連付ける <see cref="T:System.Net.Http.HttpRequestMessage" />。null にすることができます。</param>
      <param name="category">トレースの論理カテゴリ。</param>
      <param name="messageFormat">メッセージの形式。</param>
      <param name="messageArguments">メッセージの引数。</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Error(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception)">
      <summary>指定されたライター、要求、カテゴリおよび例外を使用して、一覧にエラー メッセージを表示します。</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />。</param>
      <param name="request">トレースを関連付ける <see cref="T:System.Net.Http.HttpRequestMessage" />。null にすることができます。</param>
      <param name="category">トレースの論理カテゴリ。</param>
      <param name="exception">実行中に発生したエラー。</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Error(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception,System.String,System.Object[])">
      <summary>指定されたライター、要求、カテゴリ、例外、メッセージ形式および引数を使用して、一覧にエラー メッセージを表示します。</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />。</param>
      <param name="request">トレースを関連付ける <see cref="T:System.Net.Http.HttpRequestMessage" />。null にすることができます。</param>
      <param name="category">トレースの論理カテゴリ。</param>
      <param name="exception">例外。</param>
      <param name="messageFormat">メッセージの形式。</param>
      <param name="messageArguments">メッセージ内の引数。</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Error(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.String,System.Object[])">
      <summary>指定されたライター、要求、カテゴリ、メッセージ形式および引数を使用して、一覧にエラー メッセージを表示します。</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />。</param>
      <param name="request">トレースを関連付ける <see cref="T:System.Net.Http.HttpRequestMessage" />。null にすることができます。</param>
      <param name="category">トレースの論理カテゴリ。</param>
      <param name="messageFormat">メッセージの形式。</param>
      <param name="messageArguments">メッセージ内の引数。</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Fatal(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception)">
      <summary>指定されたライター、要求、カテゴリおよび例外を使用して、<see cref="T:System.Web.Http.Tracing.ITraceWriterExtensions" /> クラスのエラー メッセージを表示します。</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />。</param>
      <param name="request">トレースを関連付ける <see cref="T:System.Net.Http.HttpRequestMessage" />。null にすることができます。</param>
      <param name="category">トレースの論理カテゴリ。</param>
      <param name="exception">実行中に出現する例外。</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Fatal(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception,System.String,System.Object[])">
      <summary>指定されたライター、要求、カテゴリ、例外、メッセージ形式および引数を使用して、<see cref="T:System.Web.Http.Tracing.ITraceWriterExtensions" /> クラスのエラー メッセージを表示します。</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />。</param>
      <param name="request">トレースを関連付ける <see cref="T:System.Net.Http.HttpRequestMessage" />。null にすることができます。</param>
      <param name="category">トレースの論理カテゴリ。</param>
      <param name="exception">例外。</param>
      <param name="messageFormat">メッセージの形式。</param>
      <param name="messageArguments">メッセージの引数。</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Fatal(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.String,System.Object[])">
      <summary>指定されたライター、要求、カテゴリ、メッセージ形式および引数を使用して、<see cref="T:System.Web.Http.Tracing.ITraceWriterExtensions" /> クラスのエラー メッセージを表示します。</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />。</param>
      <param name="request">トレースを関連付ける <see cref="T:System.Net.Http.HttpRequestMessage" />。null にすることができます。</param>
      <param name="category">トレースの論理カテゴリ。</param>
      <param name="messageFormat">メッセージの形式。</param>
      <param name="messageArguments">メッセージの引数。</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Info(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception)">
      <summary>
        <see cref="System.Web.Http.Tracing.ITraceWriterExtensions" /> の詳細を表示します。</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />。</param>
      <param name="request">トレースを関連付ける <see cref="T:System.Net.Http.HttpRequestMessage" />。null にすることができます。</param>
      <param name="category">トレースの論理カテゴリ。</param>
      <param name="exception">実行中に発生したエラー。</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Info(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception,System.String,System.Object[])">
      <summary>
        <see cref="System.Web.Http.Tracing.ITraceWriterExtensions" /> の詳細を表示します。</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />。</param>
      <param name="request">トレースを関連付ける <see cref="T:System.Net.Http.HttpRequestMessage" />。null にすることができます。</param>
      <param name="category">トレースの論理カテゴリ。</param>
      <param name="exception">実行中に発生したエラー。</param>
      <param name="messageFormat">メッセージの形式。</param>
      <param name="messageArguments">メッセージの引数。</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Info(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.String,System.Object[])">
      <summary>
        <see cref="System.Web.Http.Tracing.ITraceWriterExtensions" /> の詳細を表示します。</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />。</param>
      <param name="request">トレースを関連付ける <see cref="T:System.Net.Http.HttpRequestMessage" />。null にすることができます。</param>
      <param name="category">トレースの論理カテゴリ。</param>
      <param name="messageFormat">メッセージの形式。</param>
      <param name="messageArguments">メッセージの引数。</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Trace(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.Exception)">
      <summary>Listeners コレクションのトレース リスナーを示します。</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />。</param>
      <param name="request">トレースを関連付ける <see cref="T:System.Net.Http.HttpRequestMessage" />。null にすることができます。</param>
      <param name="category">トレースの論理カテゴリ。</param>
      <param name="level">トレース レベル。</param>
      <param name="exception">実行中に発生したエラー。</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Trace(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.Exception,System.String,System.Object[])">
      <summary>Listeners コレクションのトレース リスナーを示します。</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />。</param>
      <param name="request">トレースを関連付ける <see cref="T:System.Net.Http.HttpRequestMessage" />。null にすることができます。</param>
      <param name="category">トレースの論理カテゴリ。</param>
      <param name="level">トレース レベル。</param>
      <param name="exception">実行中に発生したエラー。</param>
      <param name="messageFormat">メッセージの形式。</param>
      <param name="messageArguments">メッセージの引数。</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Trace(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.String,System.Object[])">
      <summary>Listeners コレクションのトレース リスナーを示します。</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />。</param>
      <param name="request">トレースを関連付ける <see cref="T:System.Net.Http.HttpRequestMessage" />。null にすることができます。</param>
      <param name="category">トレースの論理カテゴリ。</param>
      <param name="level">トレースの <see cref="T:System.Web.Http.Tracing.TraceLevel" />。</param>
      <param name="messageFormat">メッセージの形式。</param>
      <param name="messageArguments">メッセージの引数。</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.TraceBeginEnd(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.String,System.String,System.Action{System.Web.Http.Tracing.TraceRecord},System.Action,System.Action{System.Web.Http.Tracing.TraceRecord},System.Action{System.Web.Http.Tracing.TraceRecord})">
      <summary>指定された操作を囲む開始トレースと終了トレースの両方をトレースします。</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />。</param>
      <param name="request">トレースを関連付ける <see cref="T:System.Net.Http.HttpRequestMessage" />。null にすることができます。</param>
      <param name="category">トレースの論理カテゴリ。</param>
      <param name="level">トレースの <see cref="T:System.Web.Http.Tracing.TraceLevel" />。</param>
      <param name="operatorName">操作を実行するオブジェクトの名前。null にすることができます。</param>
      <param name="operationName">実行中の操作の名前。null にすることができます。</param>
      <param name="beginTrace">操作を実行する前に呼び出す <see cref="T:System.Action" /> で、指定された <see cref="T:System.Web.Http.Tracing.TraceRecord" /> を入力できるようにします。null にすることができます。</param>
      <param name="execute">操作を実行する <see cref="T:System.Threading.Tasks.Task" /> を返す &lt;see cref="T:System.Func`1" /&gt;。</param>
      <param name="endTrace">操作が正しく実行された後で呼び出す <see cref="T:System.Action" /> で、指定された <see cref="T:System.Web.Http.Tracing.TraceRecord" /> を入力できるようにします。null にすることができます。</param>
      <param name="errorTrace">操作の実行中にエラーが発生した場合に呼び出す <see cref="T:System.Action" /> で、指定された <see cref="T:System.Web.Http.Tracing.TraceRecord" /> を入力できるようにします。null にすることができます。</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.TraceBeginEndAsync``1(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.String,System.String,System.Action{System.Web.Http.Tracing.TraceRecord},System.Func{System.Threading.Tasks.Task{``0}},System.Action{System.Web.Http.Tracing.TraceRecord,``0},System.Action{System.Web.Http.Tracing.TraceRecord})">
      <summary> 指定された操作を囲む開始トレースと終了トレースの両方をトレースします。</summary>
      <returns>操作によって返される <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />。</param>
      <param name="request">トレースを関連付ける <see cref="T:System.Net.Http.HttpRequestMessage" />。null にすることができます。</param>
      <param name="category">トレースの論理カテゴリ。</param>
      <param name="level">トレースの <see cref="T:System.Web.Http.Tracing.TraceLevel" />。</param>
      <param name="operatorName">操作を実行するオブジェクトの名前。null にすることができます。</param>
      <param name="operationName">実行中の操作の名前。null にすることができます。</param>
      <param name="beginTrace">操作を実行する前に呼び出す <see cref="T:System.Action" /> で、指定された <see cref="T:System.Web.Http.Tracing.TraceRecord" /> を入力できるようにします。null にすることができます。</param>
      <param name="execute">操作を実行する <see cref="T:System.Threading.Tasks.Task" /> を返す &lt;see cref="T:System.Func`1" /&gt;。</param>
      <param name="endTrace">操作が正しく実行された後で呼び出す <see cref="T:System.Action" /> で、指定された <see cref="T:System.Web.Http.Tracing.TraceRecord" /> を入力できるようにします。また、完了したタスクの結果もこのアクションに渡されます。このアクションは null にすることができます。</param>
      <param name="errorTrace">操作の実行中にエラーが発生した場合に呼び出す <see cref="T:System.Action" /> で、指定された <see cref="T:System.Web.Http.Tracing.TraceRecord" /> を入力できるようにします。null にすることができます。</param>
      <typeparam name="TResult">
        <see cref="T:System.Threading.Tasks.Task" /> によって生成される結果の型。</typeparam>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.TraceBeginEndAsync(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.String,System.String,System.Action{System.Web.Http.Tracing.TraceRecord},System.Func{System.Threading.Tasks.Task},System.Action{System.Web.Http.Tracing.TraceRecord},System.Action{System.Web.Http.Tracing.TraceRecord})">
      <summary> 指定された操作を囲む開始トレースと終了トレースの両方をトレースします。</summary>
      <returns>操作によって返される <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />。</param>
      <param name="request">トレースを関連付ける <see cref="T:System.Net.Http.HttpRequestMessage" />。null にすることができます。</param>
      <param name="category">トレースの論理カテゴリ。</param>
      <param name="level">トレースの <see cref="T:System.Web.Http.Tracing.TraceLevel" />。</param>
      <param name="operatorName">操作を実行するオブジェクトの名前。null にすることができます。</param>
      <param name="operationName">実行中の操作の名前。null にすることができます。</param>
      <param name="beginTrace">操作を実行する前に呼び出す <see cref="T:System.Action" /> で、指定された <see cref="T:System.Web.Http.Tracing.TraceRecord" /> を入力できるようにします。null にすることができます。</param>
      <param name="execute">操作を実行する <see cref="T:System.Threading.Tasks.Task" /> を返す &lt;see cref="T:System.Func`1" /&gt;。</param>
      <param name="endTrace">操作が正しく実行された後で呼び出す <see cref="T:System.Action" /> で、指定された <see cref="T:System.Web.Http.Tracing.TraceRecord" /> を入力できるようにします。null にすることができます。</param>
      <param name="errorTrace">操作の実行中にエラーが発生した場合に呼び出す <see cref="T:System.Action" /> で、指定された <see cref="T:System.Web.Http.Tracing.TraceRecord" /> を入力できるようにします。null にすることができます。</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Warn(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception)">
      <summary>実行の警告レベルを示します。</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />。</param>
      <param name="request">トレースを関連付ける <see cref="T:System.Net.Http.HttpRequestMessage" />。null にすることができます。</param>
      <param name="category">トレースの論理カテゴリ。</param>
      <param name="exception">実行中に発生したエラー。</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Warn(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception,System.String,System.Object[])">
      <summary>実行の警告レベルを示します。</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />。</param>
      <param name="request">トレースを関連付ける <see cref="T:System.Net.Http.HttpRequestMessage" />。null にすることができます。</param>
      <param name="category">トレースの論理カテゴリ。</param>
      <param name="exception">実行中に発生したエラー。</param>
      <param name="messageFormat">メッセージの形式。</param>
      <param name="messageArguments">メッセージの引数。</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Warn(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.String,System.Object[])">
      <summary>実行の警告レベルを示します。</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />。</param>
      <param name="request">トレースを関連付ける <see cref="T:System.Net.Http.HttpRequestMessage" />。null にすることができます。</param>
      <param name="category">トレースの論理カテゴリ。</param>
      <param name="messageFormat">メッセージの形式。</param>
      <param name="messageArguments">メッセージの引数。</param>
    </member>
    <member name="T:System.Web.Http.Tracing.TraceCategories">
      <summary>トレース カテゴリの列挙を指定します。</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceCategories.ActionCategory">
      <summary>アクションのカテゴリ。</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceCategories.ControllersCategory">
      <summary>コントローラーのカテゴリ。</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceCategories.FiltersCategory">
      <summary>フィルターのカテゴリ。</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceCategories.FormattingCategory">
      <summary>書式設定のカテゴリ。</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceCategories.MessageHandlersCategory">
      <summary>メッセージ ハンドラーのカテゴリ。</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceCategories.ModelBindingCategory">
      <summary>モデル バインディングのカテゴリ。</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceCategories.RequestCategory">
      <summary>要求のカテゴリ。</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceCategories.RoutingCategory">
      <summary>ルーティングのカテゴリ。</summary>
    </member>
    <member name="T:System.Web.Http.Tracing.TraceKind">
      <summary>トレース操作の種類を指定します。</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceKind.Begin">
      <summary>操作の開始をマークするトレース。</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceKind.End">
      <summary>操作の終了をマークするトレース。</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceKind.Trace">
      <summary>Begin/End トレースのペアの一部ではなく、単一のトレース。</summary>
    </member>
    <member name="T:System.Web.Http.Tracing.TraceLevel">
      <summary>トレース レベルの列挙を指定します。</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceLevel.Debug">
      <summary>デバッグ トレースのトレース レベル。</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceLevel.Error">
      <summary>エラー トレースのトレース レベル。</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceLevel.Fatal">
      <summary>致命的トレースのトレース レベル。</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceLevel.Info">
      <summary>情報トレースのトレース レベル。</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceLevel.Off">
      <summary>トレースが無効です。</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceLevel.Warn">
      <summary>警告トレースのトレース レベル。</summary>
    </member>
    <member name="T:System.Web.Http.Tracing.TraceRecord">
      <summary>トレース レコードを表します。</summary>
    </member>
    <member name="M:System.Web.Http.Tracing.TraceRecord.#ctor(System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel)">
      <summary>
        <see cref="T:System.Web.Http.Tracing.TraceRecord" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="request">メッセージ要求。</param>
      <param name="category">トレースのカテゴリ。</param>
      <param name="level">トレース レベル。</param>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Category">
      <summary>トレース カテゴリを取得または設定します。</summary>
      <returns>トレースのカテゴリ。</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Exception">
      <summary>例外を取得または設定します。</summary>
      <returns>例外。</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Kind">
      <summary>トレースの種類を取得または設定します。</summary>
      <returns>トレースの種類。</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Level">
      <summary>トレース レベルを取得または設定します。</summary>
      <returns>トレース レベル。</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Message">
      <summary>メッセージを取得または設定します。</summary>
      <returns>メッセージ。</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Operation">
      <summary>実行中の論理操作名を取得または設定します。</summary>
      <returns>実行中の論理操作名。</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Operator">
      <summary>操作を実行するオブジェクトの論理名を取得または設定します。</summary>
      <returns>操作を実行するオブジェクトの論理名。</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Properties">
      <summary>オプションのユーザー定義プロパティを取得します。</summary>
      <returns>オプションのユーザー定義のプロパティ。</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Request">
      <summary>レコードから <see cref="T:System.Net.Http.HttpRequestMessage" /> を取得します。</summary>
      <returns>レコードからの <see cref="T:System.Net.Http.HttpRequestMessage" />。</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.RequestId">
      <summary>
        <see cref="P:System.Web.Http.Tracing.TraceRecord.Request" /> の相関 ID を取得します。</summary>
      <returns>
        <see cref="P:System.Web.Http.Tracing.TraceRecord.Request" /> からの相関 ID。</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Status">
      <summary>
        <see cref="T:System.Net.Http.HttpResponseMessage" /> に関連付けられた <see cref="T:System.Net.HttpStatusCode" /> を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Net.Http.HttpResponseMessage" /> に関連付けられた <see cref="T:System.Net.HttpStatusCode" />。</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Timestamp">
      <summary>このトレースの <see cref="T:System.DateTime" /> を (<see cref="P:System.DateTime.UtcNow" /> によって) 取得します。</summary>
      <returns>このトレースの <see cref="T:System.DateTime" /> (<see cref="P:System.DateTime.UtcNow" /> による)。</returns>
    </member>
    <member name="T:System.Web.Http.Validation.DefaultBodyModelValidator">
      <summary>オブジェクトの再帰的な検証に使用されるクラスを表します。</summary>
    </member>
    <member name="M:System.Web.Http.Validation.DefaultBodyModelValidator.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Validation.DefaultBodyModelValidator" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.Validation.DefaultBodyModelValidator.ShouldValidateType(System.Type)">
      <summary>特定の型のインスタンスを検証する必要があるかどうかを決定します</summary>
      <returns>型を検証する必要がある場合は true。それ以外の場合は false。</returns>
      <param name="type">検証する型。</param>
    </member>
    <member name="M:System.Web.Http.Validation.DefaultBodyModelValidator.Validate(System.Object,System.Type,System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.String)">
      <summary>
        <paramref name="model" /> が有効であるかどうかを判断し、<paramref name="actionContext" /> の <see cref="T:System.Web.Http.ModelBinding.ModelStateDictionary" /> に検証エラーを追加します。</summary>
      <returns>モデルが有効な場合は true。それ以外の場合は false。</returns>
      <param name="model">検証されるモデル。</param>
      <param name="type">検証に使用する <see cref="T:System.Type" />。</param>
      <param name="metadataProvider">モデルのメタデータを提供するために使用される <see cref="T:System.Web.Http.Metadata.ModelMetadataProvider" />。</param>
      <param name="actionContext">モデルが検証されている <see cref="T:System.Web.Http.Controllers.HttpActionContext" />。</param>
      <param name="keyPrefix">検証エラーのキーに追加する <see cref="T:System.String" />。</param>
    </member>
    <member name="T:System.Web.Http.Validation.IBodyModelValidator">
      <summary>モデルの検証のインターフェイスを表します。</summary>
    </member>
    <member name="M:System.Web.Http.Validation.IBodyModelValidator.Validate(System.Object,System.Type,System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.String)">
      <summary>model が有効であるかどうかを判断し、actionContext の <see cref="T:System.Web.Http.ModelBinding.ModelStateDictionary" /> に検証エラーを追加します。</summary>
      <returns>model が有効である場合は true。それ以外の場合は false。</returns>
      <param name="model">検証されるモデル。</param>
      <param name="type">検証に使用する <see cref="T:System.Type" />。</param>
      <param name="metadataProvider">モデルのメタデータを提供するために使用される <see cref="T:System.Web.Http.Metadata.ModelMetadataProvider" />。</param>
      <param name="actionContext">モデルが検証されている <see cref="T:System.Web.Http.Controllers.HttpActionContext" />。</param>
      <param name="keyPrefix">検証エラーのキーに追加する <see cref="T:System.String" />。</param>
    </member>
    <member name="T:System.Web.Http.Validation.ModelStateFormatterLogger">
      <summary>この <see cref="T:System.Net.Http.Formatting.IFormatterLogger" /> は、提供された <see cref="T:System.Web.Http.ModelBinding.ModelStateDictionary" /> にフォーマッタのエラーを記録します。</summary>
    </member>
    <member name="M:System.Web.Http.Validation.ModelStateFormatterLogger.#ctor(System.Web.Http.ModelBinding.ModelStateDictionary,System.String)">
      <summary>
        <see cref="T:System.Web.Http.Validation.ModelStateFormatterLogger" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="modelState">モデルの状態。</param>
      <param name="prefix">プレフィックス。</param>
    </member>
    <member name="M:System.Web.Http.Validation.ModelStateFormatterLogger.LogError(System.String,System.Exception)">
      <summary>指定したモデルのエラーを記録します。</summary>
      <param name="errorPath">エラーのパス。</param>
      <param name="exception">エラー メッセージ。</param>
    </member>
    <member name="M:System.Web.Http.Validation.ModelStateFormatterLogger.LogError(System.String,System.String)">
      <summary>指定したモデルのエラーを記録します。</summary>
      <param name="errorPath">エラーのパス。</param>
      <param name="errorMessage">エラー メッセージ。</param>
    </member>
    <member name="T:System.Web.Http.Validation.ModelValidatedEventArgs">
      <summary>
        <see cref="E:System.Web.Http.Validation.ModelValidationNode.Validated" /> イベントのデータを提供します。</summary>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidatedEventArgs.#ctor(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.Validation.ModelValidationNode)">
      <summary>
        <see cref="T:System.Web.Http.Validation.ModelValidatedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="actionContext">アクション コンテキスト。</param>
      <param name="parentNode">親ノード。</param>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidatedEventArgs.ActionContext">
      <summary>アクションのコンテキストを取得または設定します。</summary>
      <returns>アクションのコンテキスト。</returns>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidatedEventArgs.ParentNode">
      <summary>このノードの親を取得または設定します。</summary>
      <returns>このノードの親。</returns>
    </member>
    <member name="T:System.Web.Http.Validation.ModelValidatingEventArgs">
      <summary>
        <see cref="E:System.Web.Http.Validation.ModelValidationNode.Validating" /> イベントのデータを提供します。</summary>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidatingEventArgs.#ctor(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.Validation.ModelValidationNode)">
      <summary>
        <see cref="T:System.Web.Http.Validation.ModelValidatingEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="actionContext">アクション コンテキスト。</param>
      <param name="parentNode">親ノード。</param>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidatingEventArgs.ActionContext">
      <summary>アクションのコンテキストを取得または設定します。</summary>
      <returns>アクションのコンテキスト。</returns>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidatingEventArgs.ParentNode">
      <summary>このノードの親を取得または設定します。</summary>
      <returns>このノードの親。</returns>
    </member>
    <member name="T:System.Web.Http.Validation.ModelValidationNode">
      <summary>モデル検証情報のコンテナーを提供します。</summary>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidationNode.#ctor(System.Web.Http.Metadata.ModelMetadata,System.String)">
      <summary>モデル メタデータと状態キーを使用して、<see cref="T:System.Web.Http.Validation.ModelValidationNode" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="modelMetadata">モデル メタデータ。</param>
      <param name="modelStateKey">モデル状態キー。</param>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidationNode.#ctor(System.Web.Http.Metadata.ModelMetadata,System.String,System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidationNode})">
      <summary>モデル メタデータ、モデル状態キー、およびモデル検証の子ノードを使用して、<see cref="T:System.Web.Http.Validation.ModelValidationNode" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="modelMetadata">モデル メタデータ。</param>
      <param name="modelStateKey">モデル状態キー。</param>
      <param name="childNodes">モデルの子ノード。</param>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidationNode.ChildNodes">
      <summary>子ノードを取得または設定します。</summary>
      <returns>子ノード。</returns>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidationNode.CombineWith(System.Web.Http.Validation.ModelValidationNode)">
      <summary>現在の <see cref="T:System.Web.Http.Validation.ModelValidationNode" /> のインスタンスと、指定された <see cref="T:System.Web.Http.Validation.ModelValidationNode" /> のインスタンスを組み合わせます。</summary>
      <param name="otherNode">現在のインスタンスと組み合わせるモデル検証ノード。</param>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidationNode.ModelMetadata">
      <summary>モデル メタデータを取得または設定します。</summary>
      <returns>モデル メタデータ。</returns>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidationNode.ModelStateKey">
      <summary>モデル状態キーを取得または設定します。</summary>
      <returns>モデル状態キー。</returns>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidationNode.SuppressValidation">
      <summary>検証を抑制する必要があるかどうかを示す値を取得または設定します。</summary>
      <returns>検証を抑制する必要がある場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidationNode.Validate(System.Web.Http.Controllers.HttpActionContext)">
      <summary>指定された実行コンテキストを使用してモデルを検証します。</summary>
      <param name="actionContext">アクション コンテキスト。</param>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidationNode.Validate(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.Validation.ModelValidationNode)">
      <summary>指定された実行コンテキストと親ノードを使用してモデルを検証します。</summary>
      <param name="actionContext">アクション コンテキスト。</param>
      <param name="parentNode">親ノード。</param>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidationNode.ValidateAllProperties">
      <summary>モデルのすべてのプロパティを検証する必要があるかどうかを示す値を取得または設定します。</summary>
      <returns>モデルのすべてのプロパティを検証する必要がある場合は true。検証をスキップする必要がある場合は false。</returns>
    </member>
    <member name="E:System.Web.Http.Validation.ModelValidationNode.Validated">
      <summary>モデルが検証されると発生します。</summary>
    </member>
    <member name="E:System.Web.Http.Validation.ModelValidationNode.Validating">
      <summary>モデルの検証中に発生します。</summary>
    </member>
    <member name="T:System.Web.Http.Validation.ModelValidationRequiredMemberSelector">
      <summary>メンバーと関連付けられた必須の ModelValidators を確認することによる必須のメンバーの選択を表します。</summary>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidationRequiredMemberSelector.#ctor(System.Web.Http.Metadata.ModelMetadataProvider,System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider})">
      <summary>
        <see cref="T:System.Web.Http.Validation.ModelValidationRequiredMemberSelector" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="metadataProvider">メタデータ プロバイダー。</param>
      <param name="validatorProviders">検証コントロール プロバイダー。</param>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidationRequiredMemberSelector.IsRequiredMember(System.Reflection.MemberInfo)">
      <summary>検証にメンバーが必須かどうかを示します。</summary>
      <returns>検証にメンバーが必須の場合は true。それ以外の場合は false。</returns>
      <param name="member">メンバー。</param>
    </member>
    <member name="T:System.Web.Http.Validation.ModelValidationResult">
      <summary>検証結果のコンテナーを提供します。</summary>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidationResult.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Validation.ModelValidationResult" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidationResult.MemberName">
      <summary>メンバーの名前を取得または設定します。</summary>
      <returns>メンバーの名前。</returns>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidationResult.Message">
      <summary>検証結果のメッセージを取得または設定します。</summary>
      <returns>検証結果のメッセージ。</returns>
    </member>
    <member name="T:System.Web.Http.Validation.ModelValidator">
      <summary>検証ロジックを実装するための基本クラスを提供します。</summary>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidator.#ctor(System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider})">
      <summary>
        <see cref="T:System.Web.Http.Validation.ModelValidator" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="validatorProviders">検証コントロール プロバイダー。</param>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidator.GetModelValidator(System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider})">
      <summary>モデルの複合モデル検証コントロールを返します。</summary>
      <returns>モデルの複合モデル検証コントロール。</returns>
      <param name="validatorProviders">検証プロバイダーの列挙。</param>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidator.IsRequired">
      <summary>モデル プロパティが必須かどうかを示す値を取得します。</summary>
      <returns>モデル プロパティが必須である場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidator.Validate(System.Web.Http.Metadata.ModelMetadata,System.Object)">
      <summary>指定されたオブジェクトを検証します。</summary>
      <returns>検証結果の一覧。</returns>
      <param name="metadata">メタデータ。</param>
      <param name="container">コンテナー。</param>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidator.ValidatorProviders">
      <summary>検証コントロール プロバイダーの列挙を取得または設定します。</summary>
      <returns>検証プロバイダーの列挙。</returns>
    </member>
    <member name="T:System.Web.Http.Validation.ModelValidatorProvider">
      <summary>モデルの検証コントロールの一覧を提供します。</summary>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidatorProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Validation.ModelValidatorProvider" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidatorProvider.GetValidators(System.Web.Http.Metadata.ModelMetadata,System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider})">
      <summary>この <see cref="T:System.Web.Http.Validation.ModelValidatorProvider" /> に関連付けられている検証コントロールの一覧を取得します。</summary>
      <returns>検証コントロールの一覧。</returns>
      <param name="metadata">メタデータ。</param>
      <param name="validatorProviders">検証コントロール プロバイダー。</param>
    </member>
    <member name="T:System.Web.Http.Validation.Providers.AssociatedValidatorProvider">
      <summary>検証プロバイダーを実装するクラスの抽象クラスです。</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.AssociatedValidatorProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Validation.Providers.AssociatedValidatorProvider" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.AssociatedValidatorProvider.GetTypeDescriptor(System.Type)">
      <summary>指定した型の型記述子を取得します。</summary>
      <returns>指定した型の型記述子。</returns>
      <param name="type">検証プロバイダーの種類。</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.AssociatedValidatorProvider.GetValidators(System.Web.Http.Metadata.ModelMetadata,System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider})">
      <summary>メタデータ プロバイダーおよび検証コントロール プロバイダーを使用して、モデルの検証コントロールを取得します。</summary>
      <returns>モデルの検証コントロール。</returns>
      <param name="metadata">メタデータ。</param>
      <param name="validatorProviders">検証プロバイダーの列挙。</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.AssociatedValidatorProvider.GetValidators(System.Web.Http.Metadata.ModelMetadata,System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider},System.Collections.Generic.IEnumerable{System.Attribute})">
      <summary>メタデータ、検証コントロール プロバイダー、および属性の一覧を使用して、モデルの検証コントロールを取得します。</summary>
      <returns>モデルの検証コントロール。</returns>
      <param name="metadata">メタデータ。</param>
      <param name="validatorProviders">検証プロバイダーの列挙。</param>
      <param name="attributes">属性の一覧。</param>
    </member>
    <member name="T:System.Web.Http.Validation.Providers.DataAnnotationsModelValidationFactory">
      <summary>
        <see cref="T:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider" /> インスタンスを作成するメソッドを表します。</summary>
    </member>
    <member name="T:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider">
      <summary>
        <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> から派生する属性の検証コントロールを提供する <see cref="T:System.Web.Http.Validation.ModelValidatorProvider" /> の実装を表します。また、<see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject" /> を実装する型の検証コントロールも提供します。クライアント側の検証をサポートするには、このクラスの静的メソッドを通じてアダプターを登録するか、検証属性によって <see cref="T:System.Web.Http.Validation.IClientValidatable" /> が実装されるようにします。IClientValidatable をサポートするためのロジックは <see cref="T:System.Web.Http.Validation.Validators.DataAnnotationsModelValidator" /> に実装されています。</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.GetValidators(System.Web.Http.Metadata.ModelMetadata,System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider},System.Collections.Generic.IEnumerable{System.Attribute})">
      <summary>指定されたメタデータ、検証コントロール プロバイダー、および属性を使用して、モデルの検証コントロールを取得します。</summary>
      <returns>モデルの検証コントロール。</returns>
      <param name="metadata">メタデータ。</param>
      <param name="validatorProviders">検証コントロール プロバイダー。</param>
      <param name="attributes">属性。</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterAdapter(System.Type,System.Type)">
      <summary>クライアント側の検証を行うアダプターを登録します。</summary>
      <param name="attributeType">検証属性の型。</param>
      <param name="adapterType">アダプターの型。</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterAdapterFactory(System.Type,System.Web.Http.Validation.Providers.DataAnnotationsModelValidationFactory)">
      <summary>検証プロバイダー用のアダプター ファクトリを登録します。</summary>
      <param name="attributeType">属性の型。</param>
      <param name="factory">指定した属性の <see cref="T:System.Web.Http.Validation.ModelValidator" /> オブジェクトの作成に使用するファクトリ。</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterDefaultAdapter(System.Type)">
      <summary>既定のアダプターを登録します。</summary>
      <param name="adapterType">アダプターの型。</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterDefaultAdapterFactory(System.Web.Http.Validation.Providers.DataAnnotationsModelValidationFactory)">
      <summary>既定のアダプター ファクトリを登録します。</summary>
      <param name="factory">既定のアダプターの <see cref="T:System.Web.Http.Validation.ModelValidator" /> オブジェクトの作成に使用するファクトリ。</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterDefaultValidatableObjectAdapter(System.Type)">
      <summary>
        <see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject" /> を実装するオブジェクト用の既定のアダプター型を登録します。アダプターの型は、<see cref="T:System.Web.Http.Validation.ModelValidator" /> から派生している必要があります。また、<see cref="T:System.Web.Http.Metadata.ModelMetadata" /> および <see cref="T:System.Web.Http.Controllers.HttpActionContext" /> の型の 2 つのパラメーターを受け取るパブリック コンストラクターを含んでいる必要があります。</summary>
      <param name="adapterType">アダプターの型。</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterDefaultValidatableObjectAdapterFactory(System.Web.Http.Validation.Providers.DataAnnotationsValidatableObjectAdapterFactory)">
      <summary>
        <see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject" /> を実装するオブジェクト用の既定のアダプター ファクトリを登録します。</summary>
      <param name="factory">ファクトリ。</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterValidatableObjectAdapter(System.Type,System.Type)">
      <summary>指定された modelType 用のアダプターの型を登録します。このパラメーターは <see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject" /> を実装している必要があります。アダプターの型は、<see cref="T:System.Web.Http.Validation.ModelValidator" /> から派生している必要があります。また、<see cref="T:System.Web.Http.Metadata.ModelMetadata" /> および <see cref="T:System.Web.Http.Controllers.HttpActionContext" /> の型の 2 つのパラメーターを受け取るパブリック コンストラクターを含んでいる必要があります。</summary>
      <param name="modelType">モデルの型。</param>
      <param name="adapterType">アダプターの型。</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterValidatableObjectAdapterFactory(System.Type,System.Web.Http.Validation.Providers.DataAnnotationsValidatableObjectAdapterFactory)">
      <summary>指定された modelType 用のアダプター ファクトリを登録します。このパラメーターは <see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject" /> を実装している必要があります。</summary>
      <param name="modelType">モデルの型。</param>
      <param name="factory">ファクトリ。</param>
    </member>
    <member name="T:System.Web.Http.Validation.Providers.DataAnnotationsValidatableObjectAdapterFactory">
      <summary>
        <see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject" /> に基づく検証コントロールのファクトリを提供します。</summary>
    </member>
    <member name="T:System.Web.Http.Validation.Providers.DataMemberModelValidatorProvider">
      <summary>データ メンバー モデルの検証コントロール プロバイダーを表します。</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataMemberModelValidatorProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Validation.Providers.DataMemberModelValidatorProvider" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataMemberModelValidatorProvider.GetValidators(System.Web.Http.Metadata.ModelMetadata,System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider},System.Collections.Generic.IEnumerable{System.Attribute})">
      <summary>モデルの検証コントロールを取得します。</summary>
      <returns>モデルの検証コントロール。</returns>
      <param name="metadata">メタデータ。</param>
      <param name="validatorProviders">検証コントロール プロバイダーの列挙子。</param>
      <param name="attributes">属性のリスト。</param>
    </member>
    <member name="T:System.Web.Http.Validation.Providers.InvalidModelValidatorProvider">
      <summary>モデルが無効な場合に例外をスローする検証コントロールを提供する <see cref="T:System.Web.Http.Validation.ModelValidatorProvider" /> の実装。</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.InvalidModelValidatorProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Validation.Providers.InvalidModelValidatorProvider" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.InvalidModelValidatorProvider.GetValidators(System.Web.Http.Metadata.ModelMetadata,System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider},System.Collections.Generic.IEnumerable{System.Attribute})">
      <summary>この <see cref="T:System.Web.Http.Validation.Providers.InvalidModelValidatorProvider" /> に関連付けられている検証コントロールの一覧を取得します。</summary>
      <returns>検証コントロールの一覧。</returns>
      <param name="metadata">メタデータ。</param>
      <param name="validatorProviders">検証コントロール プロバイダー。</param>
      <param name="attributes">属性の一覧。</param>
    </member>
    <member name="T:System.Web.Http.Validation.Providers.RequiredMemberModelValidatorProvider">
      <summary>必要なメンバー モデルの検証コントロールのプロバイダーを表します。</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.RequiredMemberModelValidatorProvider.#ctor(System.Net.Http.Formatting.IRequiredMemberSelector)">
      <summary>
        <see cref="T:System.Web.Http.Validation.Providers.RequiredMemberModelValidatorProvider" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="requiredMemberSelector">必要なメンバー セレクター。</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.RequiredMemberModelValidatorProvider.GetValidators(System.Web.Http.Metadata.ModelMetadata,System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider})">
      <summary>メンバー モデルの検証コントロールを取得します。</summary>
      <returns>メンバー モデルの検証コントロール。</returns>
      <param name="metadata">メタデータ。</param>
      <param name="validatorProviders">検証コントロール プロバイダー</param>
    </member>
    <member name="T:System.Web.Http.Validation.Validators.DataAnnotationsModelValidator">
      <summary>モデルの検証コントロールを提供します。</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Validators.DataAnnotationsModelValidator.#ctor(System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider},System.ComponentModel.DataAnnotations.ValidationAttribute)">
      <summary>
        <see cref="T:System.Web.Http.Validation.Validators.DataAnnotationsModelValidator" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="validatorProviders">検証コントロール プロバイダー。</param>
      <param name="attribute">モデルの検証属性。</param>
    </member>
    <member name="P:System.Web.Http.Validation.Validators.DataAnnotationsModelValidator.Attribute">
      <summary>モデルの検証コントロールの検証属性を取得または設定します。</summary>
      <returns>モデルの検証コントロールの検証属性。</returns>
    </member>
    <member name="P:System.Web.Http.Validation.Validators.DataAnnotationsModelValidator.IsRequired">
      <summary>モデルの検証が必要であるかどうかを示す値を取得します。</summary>
      <returns>モデルの検証が必要である場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Web.Http.Validation.Validators.DataAnnotationsModelValidator.Validate(System.Web.Http.Metadata.ModelMetadata,System.Object)">
      <summary>モデルを検証し、エラーが存在する場合は検証エラーを返します。</summary>
      <returns>モデルの検証エラー メッセージの一覧。エラーが発生しなかった場合は、空の一覧。</returns>
      <param name="metadata">モデル メタデータ。</param>
      <param name="container">モデルのコンテナー。</param>
    </member>
    <member name="T:System.Web.Http.Validation.Validators.ErrorModelValidator">
      <summary>エラーを表す <see cref="T:System.Web.Http.Validation.ModelValidator" />。この検証コントロールは、実際のモデル値にかかわらず常に例外をスローします。</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Validators.ErrorModelValidator.#ctor(System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider},System.String)">
      <summary>
        <see cref="T:System.Web.Http.Validation.Validators.ErrorModelValidator" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="validatorProviders">モデルの検証コントロール プロバイダーのリスト。</param>
      <param name="errorMessage">検証のエラー メッセージ。</param>
    </member>
    <member name="M:System.Web.Http.Validation.Validators.ErrorModelValidator.Validate(System.Web.Http.Metadata.ModelMetadata,System.Object)">
      <summary>指定されたオブジェクトを検証します。</summary>
      <returns>検証結果の一覧。</returns>
      <param name="metadata">メタデータ。</param>
      <param name="container">コンテナー。</param>
    </member>
    <member name="T:System.Web.Http.Validation.Validators.RequiredMemberModelValidator">
      <summary>必須のメンバーの <see cref="T:System.Web.Http.Validation.ModelValidator" /> を表します。</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Validators.RequiredMemberModelValidator.#ctor(System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider})">
      <summary>
        <see cref="T:System.Web.Http.Validation.Validators.RequiredMemberModelValidator" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="validatorProviders">検証コントロール プロバイダー。</param>
    </member>
    <member name="P:System.Web.Http.Validation.Validators.RequiredMemberModelValidator.IsRequired">
      <summary>検証時にメンバーが存在している必要があることを、シリアル化エンジンに指示する値を取得または設定します。</summary>
      <returns>メンバーが必須である場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Web.Http.Validation.Validators.RequiredMemberModelValidator.Validate(System.Web.Http.Metadata.ModelMetadata,System.Object)">
      <summary>オブジェクトを検証します。</summary>
      <returns>検証結果の一覧。</returns>
      <param name="metadata">メタデータ。</param>
      <param name="container">コンテナー。</param>
    </member>
    <member name="T:System.Web.Http.Validation.Validators.ValidatableObjectAdapter">
      <summary>検証できるオブジェクト アダプターを提供します。</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Validators.ValidatableObjectAdapter.#ctor(System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider})">
      <summary>
        <see cref="T:System.Web.Http.Validation.Validators.ValidatableObjectAdapter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="validatorProviders">検証プロバイダー。</param>
    </member>
    <member name="M:System.Web.Http.Validation.Validators.ValidatableObjectAdapter.Validate(System.Web.Http.Metadata.ModelMetadata,System.Object)">
      <summary>指定されたオブジェクトを検証します。</summary>
      <returns>検証結果の一覧。</returns>
      <param name="metadata">メタデータ。</param>
      <param name="container">コンテナー。</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.IEnumerableValueProvider">
      <summary>
        <see cref="T:System.Collections.IEnumerable" /> インターフェイスを実装するコレクションから値を取得する値プロバイダーの基本クラスを表します。</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.IEnumerableValueProvider.GetKeysFromPrefix(System.String)">
      <summary>指定した <paramref name="prefix" /> からキーを取得します。</summary>
      <returns>指定した <paramref name="prefix" /> のキー。</returns>
      <param name="prefix">プレフィックス。</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.IUriValueProviderFactory">
      <summary>受信する <see cref="T:System.Net.Http.HttpRequestMessage" /> の <see cref="T:System.Uri" /> にアクセスするために <see cref="T:System.Web.Http.ValueProviders.IValueProvider" /> の作成をサポートする <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" /> により実装されるインターフェイスを表します。</summary>
    </member>
    <member name="T:System.Web.Http.ValueProviders.IValueProvider">
      <summary>ASP.NET MVC の値プロバイダーに必要なメソッドを定義します。</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.IValueProvider.ContainsPrefix(System.String)">
      <summary>指定したプレフィックスがコレクションに含まれているかどうかを判断します。</summary>
      <returns>指定したプレフィックスがコレクションに含まれている場合は true。それ以外の場合は false。</returns>
      <param name="prefix">検索対象のプレフィックス。</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.IValueProvider.GetValue(System.String)">
      <summary>指定したキーを使用して値オブジェクトを取得します。</summary>
      <returns>指定されたキーのオブジェクトの値。キーが見つからない場合は null。</returns>
      <param name="key">取得する値オブジェクトのキー。</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.ValueProviderAttribute">
      <summary> この属性は、カスタム <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" /> を指定するために使用されます。</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.ValueProviderAttribute.#ctor(System.Type)">
      <summary>
        <see cref="T:System.Web.Http.ValueProviders.ValueProviderAttribute" /> の新しいインスタンスを初期化します。</summary>
      <param name="valueProviderFactory">モデル バインダーの型。</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.ValueProviderAttribute.#ctor(System.Type[])">
      <summary>
        <see cref="T:System.Web.Http.ValueProviders.ValueProviderAttribute" /> の新しいインスタンスを初期化します。</summary>
      <param name="valueProviderFactories">モデル バインダーの型の配列。</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.ValueProviderAttribute.GetValueProviderFactories(System.Web.Http.HttpConfiguration)">
      <summary>値プロバイダー ファクトリを取得します。</summary>
      <returns>値プロバイダー ファクトリのコレクション。</returns>
      <param name="configuration">構成オブジェクト。</param>
    </member>
    <member name="P:System.Web.Http.ValueProviders.ValueProviderAttribute.ValueProviderFactoryTypes">
      <summary>値プロバイダー ファクトリによって返されるオブジェクトの型を取得します。</summary>
      <returns>型のコレクション。</returns>
    </member>
    <member name="T:System.Web.Http.ValueProviders.ValueProviderFactory">
      <summary>値プロバイダー オブジェクトを作成するためのファクトリを表します。</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.ValueProviderFactory.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.ValueProviderFactory.GetValueProvider(System.Web.Http.Controllers.HttpActionContext)">
      <summary>指定されたコントローラー コンテキストの値プロバイダー オブジェクトを返します。</summary>
      <returns>値プロバイダー オブジェクト。</returns>
      <param name="actionContext">現在の HTTP 要求に関する情報をカプセル化するオブジェクト。</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.ValueProviderResult">
      <summary>(フォーム ポストやクエリ文字列などからの) 値をアクション メソッド引数プロパティまたはアクション メソッド引数自体にバインドした結果を表します。</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.ValueProviderResult.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ValueProviders.ValueProviderResult" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.ValueProviderResult.#ctor(System.Object,System.String,System.Globalization.CultureInfo)">
      <summary>
        <see cref="T:System.Web.Http.ValueProviders.ValueProviderResult" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="rawValue">生の値。</param>
      <param name="attemptedValue">試行された値。</param>
      <param name="culture">カルチャ。</param>
    </member>
    <member name="P:System.Web.Http.ValueProviders.ValueProviderResult.AttemptedValue">
      <summary>表示用の文字列に変換される生の値を取得または設定します。</summary>
      <returns>表示用の文字列に変換される生の値。</returns>
    </member>
    <member name="M:System.Web.Http.ValueProviders.ValueProviderResult.ConvertTo(System.Type)">
      <summary>この結果でカプセル化された値を、指定された型に変換します。</summary>
      <returns>変換された値。</returns>
      <param name="type">対象の型。</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.ValueProviderResult.ConvertTo(System.Type,System.Globalization.CultureInfo)">
      <summary>指定されたカルチャ情報を使用して、この結果でカプセル化された値を、指定された型に変換します。</summary>
      <returns>変換された値。</returns>
      <param name="type">対象の型。</param>
      <param name="culture">変換で使用するカルチャ。</param>
    </member>
    <member name="P:System.Web.Http.ValueProviders.ValueProviderResult.Culture">
      <summary>カルチャを取得または設定します。</summary>
      <returns>カルチャ。</returns>
    </member>
    <member name="P:System.Web.Http.ValueProviders.ValueProviderResult.RawValue">
      <summary>値プロバイダーから提供された生の値を取得または設定します。</summary>
      <returns>値プロバイダーから提供された生の値。</returns>
    </member>
    <member name="T:System.Web.Http.ValueProviders.Providers.CompositeValueProvider">
      <summary>
        <see cref="T:System.Collections.IEnumerable" /> インターフェイスを実装する値プロバイダーの一覧から値を取得する値プロバイダーを表します。</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.CompositeValueProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ValueProviders.Providers.CompositeValueProvider" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.CompositeValueProvider.#ctor(System.Collections.Generic.IList{System.Web.Http.ValueProviders.IValueProvider})">
      <summary>
        <see cref="T:System.Web.Http.ValueProviders.Providers.CompositeValueProvider" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="list">値プロバイダーの一覧。</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.CompositeValueProvider.ContainsPrefix(System.String)">
      <summary>指定した <paramref name="prefix" /> がコレクションに含まれているかどうかを確認します。</summary>
      <returns>指定した <paramref name="prefix" /> がコレクションに含まれている場合は true。それ以外の場合は false。</returns>
      <param name="prefix">検索対象のプレフィックス。</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.CompositeValueProvider.GetKeysFromPrefix(System.String)">
      <summary>指定した <paramref name="prefix" /> からキーを取得します。</summary>
      <returns>指定した <paramref name="prefix" /> のキー。</returns>
      <param name="prefix">キーの取得元であるプレフィックス。</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.CompositeValueProvider.GetValue(System.String)">
      <summary>指定した <paramref name="key" /> を使用して値オブジェクトを取得します。</summary>
      <returns>指定した <paramref name="key" /> の値オブジェクト。</returns>
      <param name="key">取得する値オブジェクトのキー。</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.CompositeValueProvider.InsertItem(System.Int32,System.Web.Http.ValueProviders.IValueProvider)">
      <summary>コレクション内の指定したインデックスの位置に要素を挿入します。</summary>
      <param name="index">
        <paramref name="item" /> を挿入する位置の 0 から始まるインデックス。</param>
      <param name="item">挿入するオブジェクト。</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.CompositeValueProvider.SetItem(System.Int32,System.Web.Http.ValueProviders.IValueProvider)">
      <summary>指定したインデックス位置にある要素を置き換えます。</summary>
      <param name="index">置き換える要素の 0 から始まるインデックス番号。</param>
      <param name="item">指定したインデックス位置に存在する要素の新しい値。</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.Providers.CompositeValueProviderFactory">
      <summary>値プロバイダー オブジェクトの一覧を作成するためのファクトリを表します。</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.CompositeValueProviderFactory.#ctor(System.Collections.Generic.IEnumerable{System.Web.Http.ValueProviders.ValueProviderFactory})">
      <summary>
        <see cref="T:System.Web.Http.ValueProviders.Providers.CompositeValueProviderFactory" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="factories">値プロバイダー ファクトリのコレクション。</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.CompositeValueProviderFactory.GetValueProvider(System.Web.Http.Controllers.HttpActionContext)">
      <summary>指定されたコントローラー コンテキストの値プロバイダー オブジェクトの一覧を取得します。</summary>
      <returns>指定されたコントローラー コンテキストの値プロバイダー オブジェクトの一覧。</returns>
      <param name="actionContext">現在の HTTP 要求に関する情報をカプセル化するオブジェクト。</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.Providers.NameValuePairsValueProvider">
      <summary>名前と値のペアの値プロバイダー。</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.NameValuePairsValueProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object},System.Globalization.CultureInfo)"></member>
    <member name="M:System.Web.Http.ValueProviders.Providers.NameValuePairsValueProvider.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Globalization.CultureInfo)">
      <summary>
        <see cref="T:System.Web.Http.ValueProviders.Providers.NameValuePairsValueProvider" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="values">プロバイダーの名前と値のペア。</param>
      <param name="culture">名前と値のペアに使用されるカルチャ。</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.NameValuePairsValueProvider.#ctor(System.Func{System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}},System.Globalization.CultureInfo)">
      <summary>名前と値のペアを提供するための関数デリゲートを使用して、<see cref="T:System.Web.Http.ValueProviders.Providers.NameValuePairsValueProvider" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="valuesFactory">名前と値のペアのコレクションを返す関数デリゲート。</param>
      <param name="culture">名前と値のペアに使用されるカルチャ。</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.NameValuePairsValueProvider.ContainsPrefix(System.String)">
      <summary>指定したプレフィックスがコレクションに含まれているかどうかを判断します。</summary>
      <returns>指定したプレフィックスがコレクションに含まれている場合は true。それ以外の場合は false。</returns>
      <param name="prefix">検索対象のプレフィックス。</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.NameValuePairsValueProvider.GetKeysFromPrefix(System.String)">
      <summary>プレフィックスからキーを取得します。</summary>
      <returns>キー。</returns>
      <param name="prefix">プレフィックス。</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.NameValuePairsValueProvider.GetValue(System.String)">
      <summary>指定したキーを使用して値オブジェクトを取得します。</summary>
      <returns>指定したキーの値オブジェクト。</returns>
      <param name="key">取得する値オブジェクトのキー。</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.Providers.QueryStringValueProvider">
      <summary>
        <see cref="T:System.Collections.Specialized.NameValueCollection" /> オブジェクトに格納されているクエリ文字列の値プロバイダーを表します。</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.QueryStringValueProvider.#ctor(System.Web.Http.Controllers.HttpActionContext,System.Globalization.CultureInfo)">
      <summary>
        <see cref="T:System.Web.Http.ValueProviders.Providers.QueryStringValueProvider" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="actionContext">現在の HTTP 要求に関する情報をカプセル化するオブジェクト。</param>
      <param name="culture">ターゲット カルチャに関する情報を格納しているオブジェクト。</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.Providers.QueryStringValueProviderFactory">
      <summary>クエリ文字列の値プロバイダー オブジェクトの新しいインスタンスを作成するクラスを表します。</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.QueryStringValueProviderFactory.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ValueProviders.Providers.QueryStringValueProviderFactory" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.QueryStringValueProviderFactory.GetValueProvider(System.Web.Http.Controllers.HttpActionContext)">
      <summary>指定されたコントローラー コンテキストの値プロバイダー オブジェクトを取得します。</summary>
      <returns>クエリ文字列の値プロバイダー オブジェクト。</returns>
      <param name="actionContext">現在の HTTP 要求に関する情報をカプセル化するオブジェクト。</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.Providers.RouteDataValueProvider">
      <summary>IDictionary(Of TKey, TValue) インターフェイスを実装するオブジェクトに格納されているルート データの値プロバイダーを表します。</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.RouteDataValueProvider.#ctor(System.Web.Http.Controllers.HttpActionContext,System.Globalization.CultureInfo)">
      <summary>
        <see cref="T:System.Web.Http.ValueProviders.Providers.RouteDataValueProvider" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="actionContext">HTTP 要求に関する情報が含まれるオブジェクト。</param>
      <param name="culture">ターゲット カルチャに関する情報を格納しているオブジェクト。</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.Providers.RouteDataValueProviderFactory">
      <summary>ルート データの値プロバイダー オブジェクトを作成するためのファクトリを表します。</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.RouteDataValueProviderFactory.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ValueProviders.Providers.RouteDataValueProviderFactory" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.RouteDataValueProviderFactory.GetValueProvider(System.Web.Http.Controllers.HttpActionContext)">
      <summary>指定されたコントローラー コンテキストの値プロバイダー オブジェクトを取得します。</summary>
      <returns>値プロバイダー オブジェクト。</returns>
      <param name="actionContext">現在の HTTP 要求に関する情報をカプセル化するオブジェクト。</param>
    </member>
  </members>
</doc>