<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.AspNet.SignalR.Core</name>
  </assembly>
  <members>
    <member name="T:Microsoft.AspNet.SignalR.AuthorizeAttribute">
      <summary>ハブおよびハブ メソッドに適用して、ハブへのクライアント接続を承認し、クライアントによるハブ メソッドの呼び出しを承認します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.AuthorizeAttribute.#ctor">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.AuthorizeAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.AuthorizeAttribute._requireOutgoing">
      <summary>ハブのサーバー側メソッドの呼び出しだけに承認を適用するかどうかを指定します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.AuthorizeAttribute.AuthorizeHubConnection(Microsoft.AspNet.SignalR.Hubs.HubDescriptor,Microsoft.AspNet.SignalR.IRequest)">
      <summary>クライアントが <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> への接続を承認されているかどうかを判定します。</summary>
      <returns>呼び出し元がハブへの接続を承認されている場合は true。それ以外の場合は false。</returns>
      <param name="hubDescriptor">接続を試行しているハブ クライアントの説明。</param>
      <param name="request">クライアントからの (再) 接続要求。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.AuthorizeAttribute.AuthorizeHubMethodInvocation(Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext,System.Boolean)">
      <summary>クライアントが <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> メソッドの呼び出しを承認されているかどうかを判定します。</summary>
      <returns>呼び出し元が <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> メソッドの呼び出しを承認されている場合は true。それ以外の場合は false。</returns>
      <param name="hubIncomingInvokerContext">
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> メソッドの呼び出しに関する詳細を提供する <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext" />。</param>
      <param name="appliesToMethod">インターフェイス インスタンスがメソッドに直接適用される属性である場合は true。それ以外の場合は false。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.AuthorizeAttribute.RequireOutgoing">
      <summary>ハブのサーバー側メソッドの呼び出しだけに承認を適用する場合は、false に設定します。このプロパティは、ハブ クラスに適用される属性にのみ影響します。このプロパティを読み取ることはできません。</summary>
      <returns>ハブのサーバー側メソッドの呼び出しだけに承認を適用する場合は false。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.AuthorizeAttribute.Roles">
      <summary>ユーザー ロールを取得または設定します。</summary>
      <returns>ユーザー ロール。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.AuthorizeAttribute.UserAuthorized(System.Security.Principal.IPrincipal)">
      <summary>オーバーライドされた場合、カスタムの承認チェックのエントリ ポイントを提供します。<see cref="M:Microsoft.AspNet.SignalR.AuthorizeAttribute.AuthorizeHubConnection(Microsoft.AspNet.SignalR.Hubs.HubDescriptor,Microsoft.AspNet.SignalR.IRequest)" /> および <see cref="M:Microsoft.AspNet.SignalR.AuthorizeAttribute.AuthorizeHubMethodInvocation(Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext,System.Boolean)" /> によって呼び出されます。</summary>
      <returns>ユーザーが承認された場合は true。それ以外の場合は false。</returns>
      <param name="user">承認対象のクライアントの <see cref="T:System.Security.Principal.IPrincipal" />。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.AuthorizeAttribute.Users">
      <summary>承認されたユーザーを取得または設定します。</summary>
      <returns>承認されたユーザー。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.ConnectionConfiguration">
      <summary>接続構成を表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.ConnectionConfiguration.#ctor">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.ConnectionConfiguration" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.ConnectionConfiguration.EnableJSONP">
      <summary>JSONP が有効であるかどうかを判断するブール値を取得または設定します。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.ConnectionConfiguration.Resolver">
      <summary>ハブ接続に使用する依存関係競合回避モジュールを取得または設定します。</summary>
      <returns>ハブ接続に使用する依存関係競合回避モジュール。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.ConnectionExtensions">
      <summary>特定の信号をサブスクライブするすべての接続にメッセージを送信するために使用される拡張メソッドを提供します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.ConnectionExtensions.Broadcast(Microsoft.AspNet.SignalR.IConnection,System.Object,System.String[])">
      <summary>指定された接続 ID を除くすべての接続に、値をブロードキャストします。</summary>
      <returns>ブロードキャストが完了したことを表すタスク。</returns>
      <param name="connection">接続。</param>
      <param name="value">ブロードキャストする値。</param>
      <param name="excludeConnectionIds">ブロードキャストで除外する接続 ID の一覧。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.ConnectionExtensions.Send(Microsoft.AspNet.SignalR.IConnection,System.Collections.Generic.IList{System.String},System.Object)">
      <summary>指定された信号をサブスクライブしたすべての接続にメッセージを送信します。信号の例としては、特定の接続 ID があります。</summary>
      <returns>ブロードキャストが完了したことを表すタスク。</returns>
      <param name="connection">接続。</param>
      <param name="connectionIds">送信先の接続 ID。</param>
      <param name="value">発行する値。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.ConnectionExtensions.Send(Microsoft.AspNet.SignalR.IConnection,System.String,System.Object)">
      <summary>指定された信号をサブスクライブしたすべての接続にメッセージを送信します。信号の例としては、特定の接続 ID があります。</summary>
      <returns>ブロードキャストが完了したことを表すタスク。</returns>
      <param name="connection">接続。</param>
      <param name="connectionId">送信先の接続 ID。</param>
      <param name="value">発行する値。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.ConnectionMessage">
      <summary>1 つ以上の接続に送信されるメッセージ。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.ConnectionMessage.#ctor(System.Collections.Generic.IList{System.String},System.Object)"></member>
    <member name="M:Microsoft.AspNet.SignalR.ConnectionMessage.#ctor(System.Collections.Generic.IList{System.String},System.Object,System.Collections.Generic.IList{System.String})"></member>
    <member name="M:Microsoft.AspNet.SignalR.ConnectionMessage.#ctor(System.String,System.Object)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.ConnectionMessage" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="signal">信号。</param>
      <param name="value">メッセージのペイロード。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.ConnectionMessage.#ctor(System.String,System.Object,System.Collections.Generic.IList{System.String})">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.ConnectionMessage" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="signal">信号。</param>
      <param name="value">メッセージのペイロード。</param>
      <param name="excludedSignals">除外する信号。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.ConnectionMessage.ExcludedSignals">
      <summary>このメッセージを受信する接続をフィルター処理するために使用される信号の一覧を表します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IList`1" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.ConnectionMessage.Signal">
      <summary>このメッセージの送信先の信号。この信号をサブスクライブする接続は、メッセージのペイロードを受信します。</summary>
      <returns>
        <see cref="T:System.String" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.ConnectionMessage.Signals">
      <summary>このメッセージの配信先の信号の一覧。これが使用される場合、Signal を使用することはできません。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.ConnectionMessage.Value">
      <summary>メッセージのペイロード。</summary>
      <returns>
        <see cref="T:System.Object" /> を返します。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Cookie">
      <summary>SignalR の Cookie を表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Cookie.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Cookie" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">Cookie のプロパティ名。</param>
      <param name="value">Cookie のプロパティ値。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Cookie.#ctor(System.String,System.String,System.String,System.String)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Cookie" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">Cookie のプロパティ名。</param>
      <param name="value">Cookie のプロパティ値。</param>
      <param name="domain">Cookie のドメイン プロパティ。</param>
      <param name="path">Cookie のプロパティ パス。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Cookie.Domain">
      <summary>Cookie のドメインを取得または設定します。</summary>
      <returns>Cookie のドメイン。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Cookie.Name">
      <summary>Cookie の名前を取得または設定します。</summary>
      <returns>Cookie の名前。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Cookie.Path">
      <summary>Cookie のパスを取得または設定します。</summary>
      <returns>Cookie のパス。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Cookie.Value">
      <summary>Cookie の値を取得または設定します。</summary>
      <returns>Cookie の値。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.DefaultDependencyResolver">
      <summary>既定の動作の依存関係競合回避モジュールを表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.DefaultDependencyResolver.#ctor">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.DefaultDependencyResolver" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.DefaultDependencyResolver.Dispose">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.DefaultDependencyResolver" /> クラスの現在のインスタンスによって使用されているリソースを解放します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.DefaultDependencyResolver.Dispose(System.Boolean)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.DefaultDependencyResolver" /> クラスの現在のインスタンスによって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</summary>
      <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は true。アンマネージ リソースだけを解放する場合は false。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.DefaultDependencyResolver.GetService(System.Type)">
      <summary>任意のオブジェクト作成をサポートする、単独で登録されているサービスを解決します。</summary>
      <returns>要求されたサービスまたはオブジェクト。</returns>
      <param name="serviceType">要求されたサービスまたはオブジェクトの型。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.DefaultDependencyResolver.GetServices(System.Type)">
      <summary>複数登録されているサービスを解決します。</summary>
      <returns>要求されたサービス。</returns>
      <param name="serviceType">要求されたサービスの型。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.DefaultDependencyResolver.Register(System.Type,System.Collections.Generic.IEnumerable{System.Func{System.Object}})">
      <summary>指定されたサービスを依存関係競合回避モジュールに登録します。</summary>
      <param name="serviceType">登録するサービスの種類。</param>
      <param name="activators">依存関係競合回避モジュールに登録するサービス。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.DefaultDependencyResolver.Register(System.Type,System.Func{System.Object})">
      <summary>指定されたサービスを依存関係競合回避モジュールに登録します。</summary>
      <param name="serviceType">登録するサービスの種類。</param>
      <param name="activator">依存関係競合回避モジュールに登録するサービス。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.DependencyResolverExtensions.Resolve``1(Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>拡張機能の型を解決します。</summary>
      <returns>拡張機能の型を解決するオブジェクトを返します。</returns>
      <param name="resolver">依存関係競合回避モジュール。</param>
      <typeparam name="T">解決する型。</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.DependencyResolverExtensions.Resolve(Microsoft.AspNet.SignalR.IDependencyResolver,System.Type)">
      <summary>拡張機能の型を解決します。</summary>
      <returns>拡張機能の型を解決するオブジェクトを返します。</returns>
      <param name="resolver">依存関係競合回避モジュール。</param>
      <param name="type">解決する型。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.DependencyResolverExtensions.ResolveAll``1(Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>拡張機能のすべての型を解決します。</summary>
      <returns>解決する拡張機能の型のコレクションを返します。</returns>
      <param name="resolver">依存関係競合回避モジュール。</param>
      <typeparam name="T">解決する型。</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.DependencyResolverExtensions.ResolveAll(Microsoft.AspNet.SignalR.IDependencyResolver,System.Type)">
      <summary>拡張機能のすべての型を解決します。</summary>
      <returns>解決型の拡張機能のコレクションを返します。</returns>
      <param name="resolver">依存関係競合回避モジュール。</param>
      <param name="type">解決する型。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.GlobalHost">
      <summary>既定のホスト情報へのアクセスを提供します。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.GlobalHost.Configuration">
      <summary>既定の <see cref="T:Microsoft.AspNet.SignalR.Configuration.IConfigurationManager" /> を取得します。</summary>
      <returns>既定の <see cref="T:Microsoft.AspNet.SignalR.Configuration.IConfigurationManager" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.GlobalHost.ConnectionManager">
      <summary>既定の <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IConnectionManager" /> を取得します。</summary>
      <returns>既定の <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IConnectionManager" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.GlobalHost.DependencyResolver">
      <summary>既定の <see cref="T:Microsoft.AspNet.SignalR.IDependencyResolver" /> を取得または設定します。</summary>
      <returns>既定の <see cref="T:Microsoft.AspNet.SignalR.IDependencyResolver" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.GlobalHost.HubPipeline">
      <summary>既定の <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> を取得します。</summary>
      <returns>既定の <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.GlobalHost.TraceManager">
      <summary>既定の <see cref="T:Microsoft.AspNet.SignalR.Tracing.ITraceManager" /> を取得します。</summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.GroupManager">
      <summary>接続のグループを管理します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.GroupManager.#ctor(Microsoft.AspNet.SignalR.IConnection,System.String)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.GroupManager" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="connection">このグループが存在している <see cref="T:Microsoft.AspNet.SignalR.IConnection" />。</param>
      <param name="groupPrefix">このグループのプレフィックス。<see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> の名前または <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> の型名。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.GroupManager.Add(System.String,System.String)">
      <summary>指定されたグループに接続を追加します。</summary>
      <returns>グループに追加される接続 ID を表すタスク。</returns>
      <param name="connectionId">グループに追加する接続 ID。</param>
      <param name="groupName">グループの名前。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.GroupManager.Remove(System.String,System.String)">
      <summary>指定されたグループから接続を削除します。</summary>
      <returns>グループから削除される接続 ID を表すタスク。</returns>
      <param name="connectionId">グループから削除する接続 ID。</param>
      <param name="groupName">グループの名前。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.GroupManager.Send(System.Collections.Generic.IList{System.String},System.Object,System.String[])">
      <summary>指定されたグループに値を送信します。</summary>
      <returns>送信が完了したことを表すタスク。</returns>
      <param name="groupNames">グループの名前。</param>
      <param name="value">送信する値。</param>
      <param name="excludeConnectionIds">除外する接続 ID の一覧。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.GroupManager.Send(System.String,System.Object,System.String[])">
      <summary>指定されたグループに値を送信します。</summary>
      <returns>送信が完了したことを表すタスク。</returns>
      <param name="groupName">グループの名前。</param>
      <param name="value">送信する値。</param>
      <param name="excludeConnectionIds">除外する接続 ID の一覧。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hub">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hub" /> に接続された SignalR 接続と通信するメソッドを提供します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hub.#ctor">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hub" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hub.Clients">
      <summary>SignalR 接続と通信するクライアントを取得または設定します。</summary>
      <returns>SignalR 接続と通信するクライアント。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hub.Context">
      <summary>呼び出し元のクライアントについての情報を取得または設定します。</summary>
      <returns>呼び出し元のクライアントに関する情報。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hub.Dispose">
      <summary>このインスタンスによって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hub.Dispose(System.Boolean)">
      <summary>このインスタンスによって使用されているすべてのリソースを解放します。</summary>
      <param name="disposing">マネージ リソースとアンマネージ リソースを解放する場合は true。アンマネージ リソースだけを解放する場合は false。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hub.Groups">
      <summary>このハブ インスタンスのグループ マネージャーを取得または設定します。</summary>
      <returns>このハブ インスタンスのグループ マネージャー。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hub.OnConnected">
      <summary>接続がこのハブ インスタンスに接続するときに発生します。</summary>
      <returns>操作の結果。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hub.OnDisconnected">
      <summary>接続がこのハブ インスタンスから切断するときに発生します。</summary>
      <returns>操作の結果。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hub.OnReconnected">
      <summary>接続がこのハブ インスタンスに再接続するときに発生します。</summary>
      <returns>操作の結果。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.HubConfiguration">
      <summary>ハブ構成を表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.HubConfiguration.#ctor">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.HubConfiguration" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.HubConfiguration.EnableDetailedErrors">
      <summary>ハブ メソッドでスローされた詳細な例外が呼び出し元のクライアントへのレポートで戻されるかどうかを指定します。既定値は false です。</summary>
      <returns>ハブ メソッドでスローされた詳細な例外が呼び出し元のクライアントへのレポートで戻される場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.HubConfiguration.EnableJavaScriptProxies">
      <summary>サーバー側ハブの JavaScript プロキシを {Path}/hubs に自動的に生成する必要があるかどうかを指定します。既定値は true です。</summary>
      <returns>サーバー側ハブの JavaScript プロキシを {Path}/hubs に自動的に生成する必要がある場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.HubException"></member>
    <member name="M:Microsoft.AspNet.SignalR.HubException.#ctor"></member>
    <member name="M:Microsoft.AspNet.SignalR.HubException.#ctor(System.String)"></member>
    <member name="M:Microsoft.AspNet.SignalR.HubException.#ctor(System.String,System.Object)"></member>
    <member name="P:Microsoft.AspNet.SignalR.HubException.ErrorData"></member>
    <member name="T:Microsoft.AspNet.SignalR.HubPipelineExtensions">
      <summary>データ型にカスタム機能を追加する拡張メソッドを提供します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.HubPipelineExtensions.RequireAuthentication(Microsoft.AspNet.SignalR.Hubs.IHubPipeline)">
      <summary>認証を要求すると、すべてのハブおよびハブ メソッドにグローバルに適用される <see cref="T:Microsoft.AspNet.SignalR.Hubs.IAuthorizeHubConnection" /> および <see cref="T:Microsoft.AspNet.SignalR.Hubs.IAuthorizeHubMethodInvocation" /> 承認者を含む <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> に <see cref="T:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule" /> が追加されます。これらの承認者によって、<see cref="T:System.Security.Principal.IPrincipal" /> の <see cref="T:System.Security.Principal.IIdentity" /> が、サーバー側ハブ メソッドを呼び出すクライアントまたはクライアント側ハブ メソッド呼び出しを受け取るクライアントに対して認証されることが要求されます。</summary>
      <param name="pipeline">
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule" /> が追加される <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" />。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.IConnection">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> とその接続の通信チャネル。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IConnection.DefaultSignal">
      <summary>この接続のメイン信号。これは <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> のメイン信号です。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.IConnection.Send(Microsoft.AspNet.SignalR.ConnectionMessage)">
      <summary>信号をサブスクライブした接続にメッセージを送信します。</summary>
      <returns>メッセージが送信されたときに返されるタスク。</returns>
      <param name="message">送信するメッセージ。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.IConnectionGroupManager">
      <summary>接続のグループを管理し、グループへのメッセージの送信を許可します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.IConnectionGroupManager.Send(System.Collections.Generic.IList{System.String},System.Object,System.String[])">
      <summary>指定されたグループに値を送信します。</summary>
      <returns>送信が完了したことを表すタスク。</returns>
      <param name="groupNames">グループの名前。</param>
      <param name="value">送信する値。</param>
      <param name="excludeConnectionIds">除外する接続 ID の一覧。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.IConnectionGroupManager.Send(System.String,System.Object,System.String[])">
      <summary>指定されたグループに値を送信します。</summary>
      <returns>送信が完了したことを表すタスク。</returns>
      <param name="groupName">グループの名前。</param>
      <param name="value">送信する値。</param>
      <param name="excludeConnectionIds">除外する接続 ID の一覧。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.IDependencyResolver">
      <summary>SignalR の依存関係競合回避モジュールを表すインターフェイスを提供します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.IDependencyResolver.GetService(System.Type)">
      <summary>指定された種類のサービスを返します。</summary>
      <returns>返されるサービス。</returns>
      <param name="serviceType">返すサービスの種類。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.IDependencyResolver.GetServices(System.Type)">
      <summary>指定された種類のサービスを返します。</summary>
      <returns>返されるサービス。</returns>
      <param name="serviceType">返すサービスの種類。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.IDependencyResolver.Register(System.Type,System.Collections.Generic.IEnumerable{System.Func{System.Object}})">
      <summary>指定された種類のサービスの一覧を登録します。</summary>
      <param name="serviceType">登録するサービスの種類。</param>
      <param name="activators">アクティブ化するサービスを表すパラメーターを受け入れる関数デリゲートの一覧。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.IDependencyResolver.Register(System.Type,System.Func{System.Object})">
      <summary>指定された種類のサービスを登録します。</summary>
      <param name="serviceType">登録するサービスの種類。</param>
      <param name="activator">アクティブ化するサービスを表すパラメーターを受け入れる関数デリゲート。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.IGroupManager">
      <summary>接続のグループを管理します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.IGroupManager.Add(System.String,System.String)">
      <summary>指定されたグループに接続を追加します。</summary>
      <returns>グループに追加される接続 ID を表すタスク。</returns>
      <param name="connectionId">グループに追加する接続 ID。</param>
      <param name="groupName">グループの名前。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.IGroupManager.Remove(System.String,System.String)">
      <summary>指定されたグループから接続を削除します。</summary>
      <returns>グループから削除される接続 ID を表すタスク。</returns>
      <param name="connectionId">グループから削除する接続 ID。</param>
      <param name="groupName">グループの名前。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.IHubContext">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> に関する情報へのアクセスを提供します。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IHubContext.Clients">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> の SignalR 接続に関するすべての情報をカプセル化します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubConnectionContext" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IHubContext.Groups">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.IGroupManager" /> ハブを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.IGroupManager" /> を返します。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.IPersistentConnectionContext">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> に関する情報へのアクセスを提供します。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IPersistentConnectionContext.Connection">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> の <see cref="T:Microsoft.AspNet.SignalR.IConnection" /> を取得します。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IPersistentConnectionContext.Groups">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> の <see cref="T:Microsoft.AspNet.SignalR.IConnectionGroupManager" /> を取得します。</summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.IRequest">
      <summary>SignalR 要求を表します。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IRequest.Cookies">
      <summary>クライアント接続の Cookie を取得します。</summary>
      <returns>クライアント接続の Cookie。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IRequest.Environment">
      <summary>owin 環境を取得します。</summary>
      <returns>owin 環境。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IRequest.Headers">
      <summary>要求のヘッダーを取得または設定します。</summary>
      <returns>要求のヘッダー。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IRequest.LocalPath">
      <summary>URL のローカル パス部分を取得します。</summary>
      <returns>URL のローカル パス部分。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IRequest.QueryString">
      <summary>IRequest クエリ文字列変数のコレクションを取得します。</summary>
      <returns>IRequest クエリ文字列変数のコレクション。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.IRequest.ReadForm">
      <summary>HTTP 要求の形式を読み取ります。</summary>
      <returns>読み取る HTTP 要求の形式。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IRequest.Url">
      <summary>IRequest の URI を取得します。</summary>
      <returns>IRequest の URI。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IRequest.User">
      <summary>IRequest のプリンシパル ユーザーを取得します。</summary>
      <returns>IRequest のプリンシパル ユーザー。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.IUserIdProvider"></member>
    <member name="M:Microsoft.AspNet.SignalR.IUserIdProvider.GetUserId(Microsoft.AspNet.SignalR.IRequest)"></member>
    <member name="T:Microsoft.AspNet.SignalR.PersistentConnection">
      <summary> クライアントとサーバーとの間の接続を表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.#ctor">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.PersistentConnection.AckHandler">
      <summary>この接続の Ack ハンドラーを取得または設定します。</summary>
      <returns>この接続の Ack ハンドラー。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.Authorize(Microsoft.AspNet.SignalR.IRequest)">
      <summary>この接続が承認されているかどうかを判断します。</summary>
      <returns>接続が承認されている場合は true。それ以外の場合は false。</returns>
      <param name="request">要求。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.AuthorizeRequest(Microsoft.AspNet.SignalR.IRequest)">
      <summary>接続の要求が承認されているかどうかを判断します。</summary>
      <returns>接続の要求が承認されている場合は true。それ以外の場合は false。</returns>
      <param name="request">要求。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.PersistentConnection.Connection">
      <summary>接続を取得または設定します。</summary>
      <returns>接続。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.PersistentConnection.Counters">
      <summary>パフォーマンス カウンター マネージャーを取得または設定します。</summary>
      <returns>パフォーマンス カウンター マネージャー。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.GetSignals(System.String,System.String)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> で使用される信号を返します。</summary>
      <returns>この <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> で使用される信号。</returns>
      <param name="userId">現在の接続のユーザー ID。</param>
      <param name="connectionId">受信接続の ID。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.PersistentConnection.Groups">
      <summary>接続のグループを取得または設定します。</summary>
      <returns>接続のグループ。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.Initialize(Microsoft.AspNet.SignalR.IDependencyResolver)"></member>
    <member name="P:Microsoft.AspNet.SignalR.PersistentConnection.JsonSerializer">
      <summary>JSON シリアライザーを取得または設定します。</summary>
      <returns>JSON シリアライザー。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.PersistentConnection.MessageBus">
      <summary>接続のメッセージ バスを取得または設定します。</summary>
      <returns>接続のメッセージ バス。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.OnConnected(Microsoft.AspNet.SignalR.IRequest,System.String)">
      <summary>新しい接続が作成されたときに呼び出されます。</summary>
      <returns>接続操作が完了したときに完了する <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="request">現在の接続の要求。</param>
      <param name="connectionId">再接続しているクライアントの ID。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.OnDisconnected(Microsoft.AspNet.SignalR.IRequest,System.String)">
      <summary>接続が切断されたときに呼び出されます。</summary>
      <returns>切断操作が完了したときに完了する <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="request">現在の接続の要求。</param>
      <param name="connectionId">切断されたクライアントの ID。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.OnReceived(Microsoft.AspNet.SignalR.IRequest,System.String,System.String)">
      <summary>接続からデータが受信されたときに呼び出されます。</summary>
      <returns>受信操作が完了したときに完了する <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="request">現在の接続の要求。</param>
      <param name="connectionId">データを送信している接続の ID。</param>
      <param name="data">接続に送信されたペイロード。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.OnReconnected(Microsoft.AspNet.SignalR.IRequest,System.String)">
      <summary>タイムアウトの後で接続が再接続するときに呼び出されます。</summary>
      <returns>再接続操作が完了したときに完了する <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="request">現在の接続の要求。</param>
      <param name="connectionId">再接続しているクライアントの ID。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.OnRejoiningGroups(Microsoft.AspNet.SignalR.IRequest,System.Collections.Generic.IList{System.String},System.String)">
      <summary>タイムアウトの後で接続が再接続するときに再参加するグループを判断するために呼び出されます。</summary>
      <returns>再接続に参加する必要のあるグループ名のコレクション。</returns>
      <param name="request">現在の接続の要求。</param>
      <param name="groups">呼び出し元の接続が属することを要求しているグループ。</param>
      <param name="connectionId">再接続しているクライアントの ID。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.ProcessRequest(Microsoft.AspNet.SignalR.Hosting.HostContext)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> のすべての要求を処理します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> パイプラインが完了したときに完了する <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="context">現在の要求の <see cref="T:Microsoft.AspNet.SignalR.Hosting.HostContext" />。</param>
      <exception cref="InvalidOperationException">接続が初期化されなかった場合にスローされます。トランスポートが指定されなかったときにスローされます。接続 ID が指定されなかった場合にスローされます。</exception>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.ProcessRequest(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>OWIN エントリ ポイント。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.PersistentConnection.ProtectedData">
      <summary>この接続の保護されたデータを取得または設定します。</summary>
      <returns>この接続の保護されたデータ。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.PersistentConnection.Trace">
      <summary>接続のソースを取得します。</summary>
      <returns>接続のソース。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.PersistentConnection.TraceManager">
      <summary>トレース マネージャーを取得または設定します。</summary>
      <returns>トレース マネージャー。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.PersistentConnection.Transport">
      <summary>この接続に関連付けられたトランスポートを取得または設定します。</summary>
      <returns>この接続に関連付けられたトランスポート。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.PersistentConnection.UserIdProvider"></member>
    <member name="T:Microsoft.AspNet.SignalR.Configuration.DefaultConfigurationManager">
      <summary>サーバーの既定の構成マネージャーへのアクセスを提供します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Configuration.DefaultConfigurationManager.#ctor">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Configuration.DefaultConfigurationManager" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.DefaultConfigurationManager.ConnectionTimeout">
      <summary>タイムアウトになるまで接続を開いておく時間を表す TimeSpan を取得または設定します。</summary>
      <returns>タイムアウトになるまで接続を開いておく時間を表す TimeSpan。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.DefaultConfigurationManager.DefaultMessageBufferSize">
      <summary>特定の信号に対してバッファーに格納するメッセージの数を取得または設定します。</summary>
      <returns>特定の信号に対してバッファーに格納するメッセージの数。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.DefaultConfigurationManager.DisconnectTimeout">
      <summary>接続が停止してから、切断イベントが発生するまで待機する時間を表す TimeSpan を取得または設定します。</summary>
      <returns>接続が停止してから、切断イベントが発生するまで待機する時間を表す TimeSpan。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.DefaultConfigurationManager.KeepAlive">
      <summary>送信キープ アライブ メッセージの間隔の時間を表す TimeSpan を取得または設定します。有効にする場合、この値は 2 秒以上である必要があります。無効にする場合は null に設定します。</summary>
      <returns>送信キープ アライブ メッセージの間隔の時間を表す TimeSpan。有効にする場合、この値は 2 秒以上である必要があります。無効にする場合は null に設定します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.DefaultConfigurationManager.LongPollDelay"></member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.DefaultConfigurationManager.TransportConnectTimeout"></member>
    <member name="T:Microsoft.AspNet.SignalR.Configuration.IConfigurationManager">
      <summary>サーバー構成へのアクセスを提供します。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.IConfigurationManager.ConnectionTimeout">
      <summary>タイムアウトになるまで接続を開いておく時間を表す <see cref="T:System.TimeSpan" /> を取得または設定します。</summary>
      <returns>タイムアウトになるまで接続を開いておく時間を表す <see cref="T:System.TimeSpan" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.IConfigurationManager.DefaultMessageBufferSize">
      <summary>特定の信号に対してバッファーに格納するメッセージの数を取得または設定します。</summary>
      <returns>特定の信号に対してバッファーに格納するメッセージの数。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.IConfigurationManager.DisconnectTimeout">
      <summary>接続が停止してから、切断イベントが発生するまで待機する時間を表す <see cref="T:System.TimeSpan" /> を取得または設定します。</summary>
      <returns>接続が停止してから、切断イベントが発生するまで待機する時間を表す <see cref="T:System.TimeSpan" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.IConfigurationManager.KeepAlive">
      <summary>送信キープ アライブ メッセージの間隔の時間を表す <see cref="T:System.TimeSpan" /> を取得または設定します。有効にする場合、この値は 2 秒以上である必要があります。無効にする場合は null に設定します。</summary>
      <returns>送信キープ アライブ メッセージの間隔の時間を表す <see cref="T:System.TimeSpan" />。有効にする場合、この値は 2 秒以上である必要があります。無効にする場合は null に設定します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.IConfigurationManager.LongPollDelay">
      <summary>データがサーバーから送信された後でポーリング時間の長い接続を再確立するまでにクライアントが待機する時間を表す <see cref="T:System.TimeSpan" /> を取得または設定します。既定値は 0 です。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.IConfigurationManager.TransportConnectTimeout">
      <summary>別のトランスポートにフォールバックするかエラーになるまでにクライアントが接続を許可する時間を表す <see cref="T:System.TimeSpan" /> を取得または設定します。既定値は 5 秒です。</summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hosting.HostContext">
      <summary>SignalR ホストのコンテキストを表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hosting.HostContext.#ctor(Microsoft.AspNet.SignalR.IRequest,Microsoft.AspNet.SignalR.Hosting.IResponse)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hosting.HostContext.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hosting.HostContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="environment">SignalR ホストの環境。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hosting.HostContext.Environment">
      <summary>SignalR ホストの環境を取得します。</summary>
      <returns>SignalR ホストの環境。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hosting.HostContext.Request"></member>
    <member name="P:Microsoft.AspNet.SignalR.Hosting.HostContext.Response"></member>
    <member name="T:Microsoft.AspNet.SignalR.Hosting.HostDependencyResolverExtensions">
      <summary>依存関係リゾルバー拡張機能用のホストを表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hosting.HostDependencyResolverExtensions.InitializeHost(Microsoft.AspNet.SignalR.IDependencyResolver,System.String,System.Threading.CancellationToken)">
      <summary>依存関係リゾルバー拡張機能用のホストを初期化します。</summary>
      <param name="resolver">IDependencyResolver。</param>
      <param name="instanceName">インスタンス名。</param>
      <param name="hostShutdownToken">ホストのシャットダウン トークン。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hosting.INameValueCollection"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hosting.INameValueCollection.Get(System.String)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hosting.INameValueCollection.GetValues(System.String)"></member>
    <member name="P:Microsoft.AspNet.SignalR.Hosting.INameValueCollection.Item(System.String)"></member>
    <member name="T:Microsoft.AspNet.SignalR.Hosting.IResponse">
      <summary>クライアントへの接続を表します。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hosting.IResponse.CancellationToken">
      <summary>クライアントの有効期間を表す取り消しトークンを取得します。</summary>
      <returns>クライアントの有効期間を表す取り消しトークン。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hosting.IResponse.ContentType">
      <summary>応答のコンテンツ タイプを取得または設定します。</summary>
      <returns>応答のコンテンツ タイプ。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hosting.IResponse.Flush">
      <summary>バッファーされた応答をクライアントにフラッシュします。</summary>
      <returns>データがフラッシュされたことを表すタスク。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hosting.IResponse.Write(System.ArraySegment{System.Byte})">
      <summary>バッファーされたデータを書き込みます。</summary>
      <param name="data">バッファーに書き込むデータ。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hosting.PersistentConnectionFactory">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> インスタンスを作成します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hosting.PersistentConnectionFactory.#ctor(Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hosting.PersistentConnectionFactory" /> クラスの新しいインスタンスを作成します。</summary>
      <param name="resolver">
        <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> を作成するときに使用する依存関係競合回避モジュール。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hosting.PersistentConnectionFactory.CreateInstance(System.Type)">
      <summary>依存関係競合回避モジュールまたは型の既定のコンストラクターを使用して、指定された型のインスタンスを作成します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> のインスタンス。</returns>
      <param name="connectionType">作成する <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> の型。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hosting.ResponseExtensions">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hosting.IResponse" /> の拡張メソッド。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hosting.ResponseExtensions.End(Microsoft.AspNet.SignalR.Hosting.IResponse,System.String)">
      <summary>省略可能なデータを含むクライアントへの接続を閉じます。</summary>
      <returns>接続が閉じられたことを表すタスク。</returns>
      <param name="response">
        <see cref="T:Microsoft.AspNet.SignalR.Hosting.IResponse" />。</param>
      <param name="data">接続に書き込むデータ。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hub" /> クラスからの承認属性を適用し、ハブから送信されたメッセージの受信をクライアントに許可するかどうかを決定します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule.#ctor">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule.#ctor(Microsoft.AspNet.SignalR.Hubs.IAuthorizeHubConnection,Microsoft.AspNet.SignalR.Hubs.IAuthorizeHubMethodInvocation)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="globalConnectionAuthorizer">グローバル接続の承認者。</param>
      <param name="globalInvocationAuthorizer">グローバル呼び出しの承認者。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule.BuildAuthorizeConnect(System.Func{Microsoft.AspNet.SignalR.Hubs.HubDescriptor,Microsoft.AspNet.SignalR.IRequest,System.Boolean})">
      <summary>クライアントが <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDescriptor" /> によって記述されたハブに属する信号をサブスクライブする前に呼び出される関数をラップします。既定では、<see cref="T:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule" /> はハブで属性を検索し、クライアントが記述されたハブのメソッド呼び出しをサブスクライブすることを承認されているかどうかを判断できるようにします。この関数は、クライアント側のハブ メソッド呼び出しのサブスクライブをクライアントが承認されている場合は true を返します。それ以外の場合は false を返します。</summary>
      <returns>記述されたハブに接続することをクライアントが承認されているかどうかを示すラップされた関数。</returns>
      <param name="authorizeConnect">記述されたハブに接続することをクライアントが承認されているかどうかを示す関数。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule.BuildIncoming(System.Func{Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext,System.Threading.Tasks.Task{System.Object}})">
      <summary>サーバー側のハブ メソッドを呼び出す関数をラップします。クライアントがハブに接続することを承認されていない場合でも、呼び出しパラメーターを実行しないことによって、<see cref="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule.BuildIncoming(System.Func{Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext,System.Threading.Tasks.Task{System.Object}})" /> で禁止されている場合を除き、クライアントはそのハブでサーバー側のメソッドを呼び出すことを承認されます。</summary>
      <returns>サーバー側のハブ メソッドを呼び出すラップされた関数。</returns>
      <param name="invoke">サーバー側のハブ メソッドを呼び出す関数。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.ClientHubInvocation">
      <summary>クライアント側のハブ メソッドの呼び出しについて説明します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ClientHubInvocation.#ctor">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.ClientHubInvocation" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.ClientHubInvocation.Args">
      <summary>クライアント側のハブ メソッドの呼び出しに使用される引数の一覧を取得または設定します。</summary>
      <returns>クライアント側のハブ メソッドに関連付けられた引数のリスト。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.ClientHubInvocation.Hub">
      <summary>呼び出されるメソッドが属しているハブの名前を取得または設定します。</summary>
      <returns>呼び出されるメソッドが属しているハブの名前。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.ClientHubInvocation.Method">
      <summary>呼び出されるクライアント側のハブ メソッドの名前を取得または設定します。</summary>
      <returns>呼び出されるクライアント側のハブ メソッドの名前。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.ClientHubInvocation.State">
      <summary>前回ハブの状態がクライアントに送信されてから変更されたサーバー上のハブの状態を表すキー値のストアを取得または設定します。</summary>
      <returns>サーバー上のハブの状態を表すキー値のストア。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.ClientProxy">
      <summary>クライアント側ハブのサーバー側プロキシを表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ClientProxy.#ctor(Microsoft.AspNet.SignalR.IConnection,Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker,System.String,System.Collections.Generic.IList{System.String})"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ClientProxy.Invoke(System.String,System.Object[])">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.ClientProxy" /> インスタンスによって表される接続でメソッドを呼び出します。</summary>
      <returns>データがクライアントに送信されたことを表すタスク。</returns>
      <param name="method">呼び出すメソッドの名前。</param>
      <param name="args">クライアントに渡す引数。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ClientProxy.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
      <summary>
        <see cref="M:Microsoft.AspNet.SignalR.Hubs.ClientProxy.Invoke(System.String,System.Object[])" /> メソッドを実行します。</summary>
      <returns>常に true。</returns>
      <param name="binder">バインディング セマンティクスおよびクライアント側ハブ操作の詳細を含む情報。</param>
      <param name="args">呼び出し操作の間にオブジェクト メンバーに渡される引数。</param>
      <param name="result">このメソッドが戻るときには、メンバー呼び出しの結果が格納されています。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.ConnectionIdProxy">
      <summary>クライアント側ハブの接続 ID プロキシを表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ConnectionIdProxy.#ctor(Microsoft.AspNet.SignalR.IConnection,Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker,System.String,System.String,System.String[])"></member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.DefaultAssemblyLocator">
      <summary>既定のアセンブリ ロケーターを表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultAssemblyLocator.#ctor">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.DefaultAssemblyLocator" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultAssemblyLocator.GetAssemblies">
      <summary>現在のアプリケーション ドメインに読み込まれたアセンブリを取得します。</summary>
      <returns>現在のアプリケーション ドメインのアセンブリの配列。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.DefaultHubActivator">
      <summary>SignalR ハブの既定のアクティベーターを表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultHubActivator.#ctor(Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.DefaultHubActivator" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="resolver">依存関係競合回避モジュール。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultHubActivator.Create(Microsoft.AspNet.SignalR.Hubs.HubDescriptor)">
      <summary>新しいハブのアクティベーターを作成します。</summary>
      <returns>作成されるハブのアクティベーター。</returns>
      <param name="descriptor">記述子。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.DefaultHubManager">
      <summary>既定のハブ マネージャーを表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultHubManager.#ctor(Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.DefaultHubManager" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="resolver">ハブ競合回避モジュール。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultHubManager.GetHub(System.String)">
      <summary>1 つのハブ記述子を取得します。</summary>
      <returns>見つかった場合はハブ既述子。それ以外の場合は null。</returns>
      <param name="hubName">ハブの名前。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultHubManager.GetHubMethod(System.String,System.String,System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Json.IJsonValue})">
      <summary>指定されたハブで指定された名前のメソッドを取得します。</summary>
      <returns>見つかった場合はメソッドの記述子。それ以外の場合は null。</returns>
      <param name="hubName">ハブの名前。</param>
      <param name="method">検索するメソッドの名前。</param>
      <param name="parameters">照合するメソッド パラメーター。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultHubManager.GetHubMethods(System.String,System.Func{Microsoft.AspNet.SignalR.Hubs.MethodDescriptor,System.Boolean})">
      <summary>指定されたハブで呼び出すことができるすべてのメソッドを取得します。</summary>
      <returns>使用可能なメソッドの一覧。</returns>
      <param name="hubName">ハブの名前。</param>
      <param name="predicate">結果をフィルター処理するための省略可能な述語。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultHubManager.GetHubs(System.Func{Microsoft.AspNet.SignalR.Hubs.HubDescriptor,System.Boolean})">
      <summary>指定された述語に一致する使用可能なすべてのハブを取得します。</summary>
      <returns>ハブ記述子の一覧。</returns>
      <param name="predicate">述語。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultHubManager.ResolveHub(System.String)">
      <summary>指定されたハブ名を具象オブジェクトに解決します。</summary>
      <returns>見つかった場合はハブ実装インスタンス。それ以外の場合は null。</returns>
      <param name="hubName">ハブの名前。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultHubManager.ResolveHubs">
      <summary>使用可能なすべてのハブを具象オブジェクトに解決します。</summary>
      <returns>ハブ インスタンスの一覧。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.DefaultJavaScriptProxyGenerator">
      <summary>既定の Javascript プロキシのジェネレーターを表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultJavaScriptProxyGenerator.#ctor(Microsoft.AspNet.SignalR.Hubs.IHubManager,Microsoft.AspNet.SignalR.Hubs.IJavaScriptMinifier)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.DefaultJavaScriptProxyGenerator" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="manager">ハブ マネージャー。</param>
      <param name="javaScriptMinifier">Javascript の縮小化。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultJavaScriptProxyGenerator.#ctor(Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.DefaultJavaScriptProxyGenerator" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="resolver">依存関係競合回避モジュール。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultJavaScriptProxyGenerator.GenerateProxy(System.String)">
      <summary>指定されたプロキシを生成します。</summary>
      <returns>生成されたプロキシ。</returns>
      <param name="serviceUrl">サービス URL。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultJavaScriptProxyGenerator.GenerateProxy(System.String,System.Boolean)">
      <summary>指定されたプロキシを生成します。</summary>
      <returns>生成されたプロキシ。</returns>
      <param name="serviceUrl">サービス URL。</param>
      <param name="includeDocComments">Doc コメントが含まれる場合は true。それ以外の場合は false。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.DefaultParameterResolver">
      <summary>ハブ パラメーターの既定の競合回避モジュールを表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultParameterResolver.#ctor">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.DefaultParameterResolver" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultParameterResolver.ResolveMethodParameters(Microsoft.AspNet.SignalR.Hubs.MethodDescriptor,System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Json.IJsonValue})">
      <summary>指定されたオブジェクトに基づいてメソッドのパラメーター値を解決します。</summary>
      <returns>パラメーター値の配列。</returns>
      <param name="method">メソッドの記述子。</param>
      <param name="values">パラメーター値の解決に使用する値のリスト。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultParameterResolver.ResolveParameter(Microsoft.AspNet.SignalR.Hubs.ParameterDescriptor,Microsoft.AspNet.SignalR.Json.IJsonValue)">
      <summary>指定されたオブジェクトに基づいてパラメーターの値を解決します。</summary>
      <returns>パラメーター値。</returns>
      <param name="descriptor">パラメーター記述子。</param>
      <param name="value">パラメーター値の解決に使用する値。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.Descriptor">
      <summary>ハブの情報について説明します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.Descriptor.#ctor">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.Descriptor" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.Descriptor.Name">
      <summary>ハブの名前を取得または設定します。</summary>
      <returns>ハブの名前。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.Descriptor.NameSpecified">
      <summary>ハブの属性名が指定されているかどうかを示す値を取得または設定します。</summary>
      <returns>ハブの属性名が指定されている場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary">
      <summary>キーと値のペアを格納するディクショナリのオブジェクトを含み、新しい構文をサポートするために TrySetMember メソッドおよび TryGetMember オブジェクトをオーバーライドします。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="obj">ディクショナリ オブジェクト。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>指定されたキーと値のペア オブジェクトをディクショナリに追加します。</summary>
      <param name="item">追加するキーと値のペア オブジェクト。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Add(System.String,System.Object)">
      <summary>指定されたキーと値をディクショナリに追加します。</summary>
      <param name="key">追加する要素のキー。</param>
      <param name="value">追加する要素の値。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Clear">
      <summary>すべてのキーと値をディクショナリから削除します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>ディクショナリに特定のキーと値のペア項目が格納されているかどうかを判断します。</summary>
      <returns>指定された値を持つ要素がディクショナリに格納されている場合は true。それ以外の場合は false。</returns>
      <param name="item">ディクショナリで検索するキーと値のペア項目。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.ContainsKey(System.String)">
      <summary>指定されたキーがディクショナリに格納されているかどうかを判断します。</summary>
      <returns>指定したキーがディクショナリに格納されている場合は true。それ以外の場合は false。</returns>
      <param name="key">ディクショナリ内で検索するキー。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>指定された配列インデックスから始まるキーと値のペア要素を既存の 1 次元配列にコピーします。</summary>
      <param name="array">ディクショナリからコピーされた要素のコピー先である 1 次元の配列。</param>
      <param name="arrayIndex">コピーの開始位置となる、配列の 0 から始まるインデックス。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Count">
      <summary>ディクショナリ内の項目の数を取得します。</summary>
      <returns>ディクショナリ内の項目の数。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.GetEnumerator">
      <summary>ディクショナリを反復処理する列挙子を返します。</summary>
      <returns>ディクショナリを反復処理する列挙子。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.IsReadOnly">
      <summary>動的なディクショナリが読み取り専用かどうかを取得します。</summary>
      <returns>動的なディクショナリが読み取り専用である場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Item(System.String)">
      <summary>ディクショナリ内で特定のキーを持つ項目を取得または設定します。</summary>
      <returns>ディクショナリ内で特定のキーを持つ項目。</returns>
      <param name="key">項目のキー。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Keys">
      <summary>ディクショナリに格納されているキーのコレクションを取得します。</summary>
      <returns>ディクショナリに格納されているキーのコレクション。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>特定のキーと値のペアの項目をディクショナリから削除します。</summary>
      <returns>削除された項目を含むディクショナリ。</returns>
      <param name="item">削除する項目。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Remove(System.String)">
      <summary>特定のキーをディクショナリから削除します。</summary>
      <returns>削除されたキーを含むディクショナリ。</returns>
      <param name="key">削除するキー。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションを反復処理する列挙子。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary>メンバー値を取得する操作の実装を提供します。</summary>
      <returns>操作が成功した場合は true。それ以外の場合は false。</returns>
      <param name="binder">動的操作を呼び出したオブジェクトに関する情報を提供します。</param>
      <param name="result">取得操作の結果。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.TryGetValue(System.String,System.Object@)">
      <summary>指定されたキーに関連付けられている値を取得します。</summary>
      <returns>指定されたキーを持つ要素がディクショナリに格納されている場合は true。それ以外の場合は false。</returns>
      <param name="key">取得する値のキー。</param>
      <param name="value">このメソッドから制御が戻るとき、指定されたキーが見つかった場合はそのキーに関連付けられている値、それ以外の場合は値パラメーターの型に対する既定値を含みます。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
      <summary>メンバー値を設定する操作の実装を提供します。</summary>
      <returns>操作が成功した場合は true。それ以外の場合は false。</returns>
      <param name="binder">動的操作を呼び出したオブジェクトに関する情報を提供します。</param>
      <param name="value">メンバーに設定する値。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Unwrap(System.Object)">
      <summary>ディクショナリに関連付けられている、指定された値をラップ解除します。</summary>
      <returns>ラップ解除された値。</returns>
      <param name="value">ラップ解除される値。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Values">
      <summary>ディクショナリに格納されている値のコレクションを取得します。</summary>
      <returns>ディクショナリに格納されている値のコレクション。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Wrap(System.Object)">
      <summary>ディクショナリに関連付けられた、指定された値をラップします。</summary>
      <returns>ラップされた値。</returns>
      <param name="value">ラップする値。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.EmptyJavaScriptProxyGenerator">
      <summary>空の Javascript プロキシのジェネレーターを表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.EmptyJavaScriptProxyGenerator.#ctor">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.EmptyJavaScriptProxyGenerator" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.EmptyJavaScriptProxyGenerator.GenerateProxy(System.String)">
      <summary>指定された URL を使用してプロキシを生成します。</summary>
      <returns>生成されたプロキシ。</returns>
      <param name="serviceUrl">サービス URL。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.EnumerableOfAssemblyLocator">
      <summary>アセンブリ ロケーターに関連付けられた列挙子を表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.EnumerableOfAssemblyLocator.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.EnumerableOfAssemblyLocator" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="assemblies">アセンブリ。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.EnumerableOfAssemblyLocator.GetAssemblies">
      <summary>アセンブリの一覧を返します。</summary>
      <returns>アセンブリの一覧。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.ExceptionContext"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ExceptionContext.#ctor(System.Exception)"></member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.ExceptionContext.Error">
      <summary>呼び出し元のクライアントに送信される例外。Error が <see cref="T:Microsoft.AspNet.SignalR.HubException" /> でない場合、または <see cref="P:Microsoft.AspNet.SignalR.HubConfiguration.EnableDetailedErrors" /> が true に設定されていない場合、これは汎用の Exception によって上書きされます。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.ExceptionContext.Result">
      <summary>Error をスローする代わりに返す値。Result が設定されると必ず Error は null に設定されます。</summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.GroupProxy">
      <summary>ハブによって使用される信号プロキシのグループを表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.GroupProxy.#ctor(Microsoft.AspNet.SignalR.IConnection,Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker,System.String,System.String,System.Collections.Generic.IList{System.String})"></member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.HubCallerContext">
      <summary>クライアントの呼び出し元コンテキストを表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubCallerContext.#ctor(Microsoft.AspNet.SignalR.IRequest,System.String)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubCallerContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="request">現在の HTTP 要求。</param>
      <param name="connectionId">接続 ID。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubCallerContext.ConnectionId">
      <summary>呼び出し元クライアントの接続 ID を取得します。</summary>
      <returns>呼び出し元クライアントの接続 ID。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubCallerContext.Headers">
      <summary>要求のヘッダーを取得します。</summary>
      <returns>要求のヘッダー。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubCallerContext.QueryString">
      <summary>要求のクエリ文字列を取得します。</summary>
      <returns>要求のクエリ文字列。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubCallerContext.Request">
      <summary>現在の HTTP 要求の <see cref="T:Microsoft.AspNet.SignalR.IRequest" /> を取得します。</summary>
      <returns>現在の HTTP 要求の <see cref="T:Microsoft.AspNet.SignalR.IRequest" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubCallerContext.RequestCookies">
      <summary>要求の Cookie を取得します。</summary>
      <returns>要求の Cookie。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubCallerContext.User">
      <summary>要求の <see cref="T:System.Security.Principal.IPrincipal" /> を取得します。</summary>
      <returns>要求の <see cref="T:System.Security.Principal.IPrincipal" />。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.HubConnectionContext">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> の個々の SignalR 接続に関するすべての情報をカプセル化します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContext.#ctor">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubConnectionContext" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContext.#ctor(Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker,Microsoft.AspNet.SignalR.IConnection,System.String,System.String,Microsoft.AspNet.SignalR.Hubs.StateChangeTracker)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubConnectionContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="pipelineInvoker">パイプラインの呼び出し元。</param>
      <param name="connection">インターフェイス接続。</param>
      <param name="hubName">ハブの名前。</param>
      <param name="connectionId">接続 ID。</param>
      <param name="tracker">状態の変化トラッカー。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubConnectionContext.Caller">
      <summary>呼び出し元のクライアントを取得または設定します。</summary>
      <returns>呼び出し元のクライアント。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubConnectionContext.Others">
      <summary>呼び出し元のクライアントを除く、接続されたすべてのクライアントを取得または設定します。</summary>
      <returns>呼び出し元のクライアントを除く、接続されたすべてのクライアント。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContext.OthersInGroup(System.String)">
      <summary>呼び出し元のクライアントを除く、グループ内のすべてのクライアントの動的な表現を返します。</summary>
      <returns>呼び出し元のクライアントを除く、グループ内のすべてのクライアントの動的な表現。</returns>
      <param name="groupName">グループの名前。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContext.OthersInGroups(System.Collections.Generic.IList{System.String})">
      <summary>呼び出し元のクライアントを除く、指定されたグループ内のすべてのクライアントの動的な表現を返します。</summary>
      <returns>呼び出し元のクライアントを除く、グループ内のすべてのクライアントの動的な表現。</returns>
      <param name="groupNames">グループの名前</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.#ctor"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.#ctor(Microsoft.AspNet.SignalR.IConnection,Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker,System.String)"></member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.All"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.AllExcept(System.String[])">
      <summary>指定された呼び出し元のクライアントのものを除く、すべてのクライアントの動的な表現を返します。</summary>
      <returns>指定された呼び出し元のクライアントのものを除く、すべてのクライアントの動的な表現。</returns>
      <param name="excludeConnectionIds">除外する接続 ID の一覧。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.Client(System.String)">
      <summary>指定された接続 ID を持つ接続の動的な表現を返します。</summary>
      <returns>指定されたクライアントの動的な表現。</returns>
      <param name="connectionId">接続 ID。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.Clients(System.Collections.Generic.IList{System.String})">
      <summary>指定された接続 ID を持つ接続の動的な表現を返します。</summary>
      <returns>指定されたクライアントの動的な表現。</returns>
      <param name="connectionIds">接続 ID。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.Connection"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.Group(System.String,System.String[])">
      <summary>指定されたグループの動的な表現を返します。</summary>
      <returns>指定されたグループの動的な表現。</returns>
      <param name="groupName">グループの名前。</param>
      <param name="excludeConnectionIds">除外する接続 ID の一覧。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.Groups(System.Collections.Generic.IList{System.String},System.String[])">
      <summary>指定されたグループの動的な表現を返します。</summary>
      <returns>指定されたグループの動的な表現。</returns>
      <param name="groupNames">グループの名前。</param>
      <param name="excludeConnectionIds">除外する接続 ID の一覧。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.HubName"></member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.Invoker"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.User(System.String)"></member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.HubDescriptor">
      <summary>1 つのハブに関する情報を表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDescriptor.#ctor">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDescriptor.CreateQualifiedName(System.String)">
      <summary>指定された非修飾名を使用してハブの修飾名を作成します。</summary>
      <returns>作成される修飾名。</returns>
      <param name="unqualifiedName">非修飾の名前。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubDescriptor.HubType">
      <summary>ハブの種類を取得または設定します。</summary>
      <returns>ハブの種類。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher">
      <summary>ハブの永続的な接続上でのすべての通信を処理します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDispatcher.#ctor(Microsoft.AspNet.SignalR.HubConfiguration)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="configuration">JS プロキシを有効にしてクライアントに詳細のハブ エラーを提供するかどうかを決定する構成設定。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDispatcher.AuthorizeRequest(Microsoft.AspNet.SignalR.IRequest)">
      <summary>接続に対する指定された要求で承認されているハブの一覧。</summary>
      <returns>承認されているハブがある場合は true。それ以外の場合は false。</returns>
      <param name="request">現在の接続の要求。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDispatcher.GetSignals(System.String,System.String)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDispatcher.Initialize(Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>IDependencyResolver のハブ ディスパッチを初期化するためにホストによって呼び出されます。</summary>
      <param name="resolver">IDependency 競合回避モジュール。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDispatcher.OnConnected(Microsoft.AspNet.SignalR.IRequest,System.String)">
      <summary>接続がこのハブ インスタンスに接続するときに呼び出されます。</summary>
      <returns>接続がこのハブ インスタンスに接続するときに呼び出されるタスク。</returns>
      <param name="request">現在の接続に対する IRequest。</param>
      <param name="connectionId">再接続しているクライアントの ID。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDispatcher.OnDisconnected(Microsoft.AspNet.SignalR.IRequest,System.String)">
      <summary>接続がこのハブ インスタンスから切断するときに呼び出されます。</summary>
      <returns>接続がこのハブ インスタンスから切断するときに呼び出されるタスク。</returns>
      <param name="request">現在の接続に対する IRequest。</param>
      <param name="connectionId">再接続しているクライアントの ID。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDispatcher.OnReceived(Microsoft.AspNet.SignalR.IRequest,System.String,System.String)">
      <summary>ハブの受信メソッド呼び出しを処理します。</summary>
      <returns>データがこのハブ インスタンスから受信されるときに呼び出されるタスク。</returns>
      <param name="request">現在の接続に対する IRequest。</param>
      <param name="connectionId">再接続しているクライアントの ID。</param>
      <param name="data">受信したデータ。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDispatcher.OnReconnected(Microsoft.AspNet.SignalR.IRequest,System.String)">
      <summary>接続がこのハブ インスタンスに再接続するときに呼び出されます。</summary>
      <returns>接続がこのハブ インスタンスに再接続するときに呼び出されるタスク。</returns>
      <param name="request">現在の接続に対する IRequest。</param>
      <param name="connectionId">再接続しているクライアントの ID。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDispatcher.OnRejoiningGroups(Microsoft.AspNet.SignalR.IRequest,System.Collections.Generic.IList{System.String},System.String)">
      <summary>タイムアウトの後で接続が再接続するときに再参加するグループを判断するために呼び出されます。</summary>
      <returns>タイムアウトの後で再接続するときに再接続するグループを判断するために使用する接続の一覧。</returns>
      <param name="request">現在の接続に対する IRequest。</param>
      <param name="groups">呼び出し元の接続が属することを要求しているグループ。</param>
      <param name="connectionId">再接続しているクライアントの ID。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDispatcher.ProcessRequest(Microsoft.AspNet.SignalR.Hosting.HostContext)">
      <summary>HostContext のすべての要求を処理します。</summary>
      <returns>HostContext のすべての要求を処理するタスク。</returns>
      <param name="context">ホストのコンテキスト。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubDispatcher.Trace">
      <summary>アプリケーションがコードの実行をトレースし、トレース メッセージをそのソースと関連付けられるようにするハブ接続を取得します。</summary>
      <returns>アプリケーションがコードの実行をトレースし、トレース メッセージをそのソースと関連付けられるようにするハブ接続。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.HubManagerExtensions">
      <summary>ハブ プロセス全体のハブ マネージャー拡張を提供します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubManagerExtensions.EnsureHub(Microsoft.AspNet.SignalR.Hubs.IHubManager,System.String,Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter[])">
      <summary>ハブ既述子に関するすべての情報を確実にします。</summary>
      <returns>すべての情報を確実にするハブ既述子。</returns>
      <param name="hubManager">ハブ マネージャー。</param>
      <param name="hubName">ハブの名前。</param>
      <param name="counters">パフォーマンス カウンター。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubManagerExtensions.GetHubMethods(Microsoft.AspNet.SignalR.Hubs.IHubManager,System.String)">
      <summary>指定されたハブで呼び出すことができるすべてのメソッドを取得します。</summary>
      <returns>指定されたハブで呼び出すメソッドのコレクション。</returns>
      <param name="hubManager">ハブ マネージャー。</param>
      <param name="hubName">ハブの名前。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubManagerExtensions.GetHubs(Microsoft.AspNet.SignalR.Hubs.IHubManager)">
      <summary>使用可能なすべてのハブを取得します。</summary>
      <returns>使用可能なすべてのハブの取得。</returns>
      <param name="hubManager">ハブ マネージャー。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.HubMethodNameAttribute">
      <summary>ハブのメソッド名属性を表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubMethodNameAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubMethodNameAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="methodName">メソッドの名前。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubMethodNameAttribute.MethodName">
      <summary>メソッド名を取得または設定します。</summary>
      <returns>メソッド名。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.HubNameAttribute">
      <summary>ハブ名の属性を表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubNameAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubNameAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="hubName">ハブの名前。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubNameAttribute.HubName">
      <summary>ハブの名前を取得または設定します。</summary>
      <returns>ハブの名前。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule">
      <summary>IHubPipelineModules の実装を簡素化する共通の基本クラス。モジュールは、接続、再接続、切断、サーバー側ハブ メソッドの呼び出し、クライアント側ハブ メソッドの呼び出し、ハブ クライアントの承認、ハブ グループの再参加など、ハブの処理のさまざまな段階をインターセプトし、カスタマイズできます。モジュールは <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHubPipeline.AddModule(Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule)" /> を呼び出すことによってアクティブ化することができます。<see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> に追加された結合モジュールは、<see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker" /> インターフェイスによって呼び出されます。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.#ctor">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.BuildAuthorizeConnect(System.Func{Microsoft.AspNet.SignalR.Hubs.HubDescriptor,Microsoft.AspNet.SignalR.IRequest,System.Boolean})">
      <summary>クライアントが <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDescriptor" /> によって記述されたハブに属する信号をサブスクライブする前に呼び出される関数をラップします。既定では、<see cref="T:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule" /> は <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> で属性を検索し、クライアントが記述されたハブのメソッド呼び出しをサブスクライブすることを承認されているかどうかを判断できるようにします。この関数は、クライアント側のハブ メソッド呼び出しのサブスクライブをクライアントが承認されている場合は true を返します。それ以外の場合は false を返します。</summary>
      <returns>記述されたハブに接続することをクライアントが承認されているかどうかを示すラップされた関数。</returns>
      <param name="authorizeConnect">記述されたハブに接続することをクライアントが承認されているかどうかを示す関数。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.BuildConnect(System.Func{Microsoft.AspNet.SignalR.Hubs.IHub,System.Threading.Tasks.Task})">
      <summary>クライアントの接続先の各 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> について、クライアントが <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher" /> に接続するときに呼び出される関数をラップします。既定では、これによって、<see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> の OnConnected メソッドが呼び出されます。</summary>
      <returns>クライアントがハブに接続するときに呼び出されるラップされた関数。</returns>
      <param name="connect">クライアントがハブに接続するときに呼び出される関数。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.BuildDisconnect(System.Func{Microsoft.AspNet.SignalR.Hubs.IHub,System.Threading.Tasks.Task})">
      <summary>クライアントの接続先の各 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> について、クライアントが <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher" /> から切断するときに呼び出される関数をラップします。既定では、これによって、<see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> の OnDisconnected メソッドが呼び出されます。</summary>
      <returns>クライアントがハブから切断するときに呼び出されるラップされた関数。</returns>
      <param name="disconnect">クライアントがハブから切断するときに呼び出される関数。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.BuildIncoming(System.Func{Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext,System.Threading.Tasks.Task{System.Object}})">
      <summary>サーバー側のハブ メソッドを呼び出す関数をラップします。クライアントがハブに接続することを承認されていない場合でも、呼び出しパラメーターを実行しないことによって、<see cref="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule.BuildIncoming(System.Func{Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext,System.Threading.Tasks.Task{System.Object}})" /> で禁止されている場合を除き、クライアントはそのハブでサーバー側のメソッドを呼び出すことを承認されます。</summary>
      <returns>サーバー側のハブ メソッドを呼び出すラップされた関数。</returns>
      <param name="invoke">サーバー側のハブ メソッドを呼び出す関数。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.BuildOutgoing(System.Func{Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext,System.Threading.Tasks.Task})">
      <summary>クライアント側のハブ メソッドを呼び出す関数をラップします。</summary>
      <returns>クライアント側のハブ メソッドを呼び出すラップされた関数。</returns>
      <param name="send">クライアント側のハブ メソッドを呼び出す関数。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.BuildReconnect(System.Func{Microsoft.AspNet.SignalR.Hubs.IHub,System.Threading.Tasks.Task})">
      <summary>クライアントの接続先の各 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> について、クライアントが <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher" /> に再接続するときに呼び出される関数をラップします。既定では、これによって、<see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> の OnReconnected メソッドが呼び出されます。</summary>
      <returns>クライアントがハブに再接続するときに呼び出されるラップされた関数。</returns>
      <param name="reconnect">クライアントがハブに再接続するときに呼び出される関数。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.BuildRejoiningGroups(System.Func{Microsoft.AspNet.SignalR.Hubs.HubDescriptor,Microsoft.AspNet.SignalR.IRequest,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String}})">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDescriptor" /> によって記述されたハブに属するどのグループにクライアントの再参加を許可するかを判断する関数をラップします。既定では、サーバーに再接続するクライアントは、以前にメンバーであったすべてのグループから削除されます。これは、信頼されていないクライアントが、参加を承認されたことがないグループのメンバーであることを要求する場合があるからです。</summary>
      <returns>クライアントに再参加を許可するグループを判断するラップされた関数。</returns>
      <param name="rejoiningGroups">クライアントに再参加を許可するグループを判断する関数。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnAfterConnect(Microsoft.AspNet.SignalR.Hubs.IHub)">
      <summary>このメソッドは、後で <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> に追加された任意のモジュールの接続コンポーネントが実行され、<see cref="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnConnected" /> が実行された後 (存在する場合)、呼び出されます。</summary>
      <param name="hub">クライアントが接続されたハブ。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnAfterDisconnect(Microsoft.AspNet.SignalR.Hubs.IHub)">
      <summary>このメソッドは、後で <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> に追加された任意のモジュールの切断コンポーネントが実行され、<see cref="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnDisconnected" /> が実行された後 (存在する場合)、呼び出されます。</summary>
      <param name="hub">クライアントが切断されたハブ。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnAfterIncoming(System.Object,Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext)">
      <summary>このメソッドは、後で <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> に追加された任意のモジュールの受信コンポーネントおよびサーバー側のハブ メソッドの実行が完了した後、呼び出されます。</summary>
      <returns>サーバー側のハブ メソッドの新しいまたは更新された戻り値。</returns>
      <param name="result">サーバー側のハブ メソッドの戻り値。</param>
      <param name="context">サーバー側のハブ メソッド呼び出しの説明。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnAfterOutgoing(Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext)">
      <summary>このメソッドは、後で <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> に追加された任意のモジュールの送信コンポーネントが実行された後、呼び出されます。これは、すべてのクライアントがハブ メソッド呼び出しを受信したという意味ではなく、ハブの呼び出しメッセージが正常にメッセージ バスに発行されたことを示します。</summary>
      <param name="context">クライアント側のハブ メソッド呼び出しの説明。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnAfterReconnect(Microsoft.AspNet.SignalR.Hubs.IHub)">
      <summary>このメソッドは、後で <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> に追加された任意のモジュールの再接続コンポーネントが実行され、<see cref="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnReconnected" /> が実行された後 (存在する場合)、呼び出されます。</summary>
      <param name="hub">クライアントが再接続されたハブ。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnBeforeAuthorizeConnect(Microsoft.AspNet.SignalR.Hubs.HubDescriptor,Microsoft.AspNet.SignalR.IRequest)">
      <summary>このメソッドは、後で <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> に追加された任意のモジュールの AuthorizeConnect コンポーネントが実行される前に、呼び出されます。これが false を返す場合、それらの後で追加されたモジュールは実行されず、クライアントは、<see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDescriptor" /> によって定義されたハブに属するメソッドのクライアント側の呼び出しをサブスクライブすることを許可されません。</summary>
      <returns>クライアントがハブへの接続を承認されている場合は true。それ以外の場合は false。</returns>
      <param name="hubDescriptor">クライアントがサブスクライブを試行するハブの説明。</param>
      <param name="request">ハブのサブスクライブを試行するクライアントの接続要求。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnBeforeConnect(Microsoft.AspNet.SignalR.Hubs.IHub)">
      <summary>このメソッドは、後で <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> に追加された任意のモジュールの接続コンポーネントが実行される前に、呼び出されます。これが false を返す場合、それらの後で追加されたモジュールおよび <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnConnected" /> メソッドは実行されません。</summary>
      <returns>後で追加されたモジュールの接続コンポーネントおよび <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnConnected" /> メソッドを実行する必要がある場合は true。それ以外の場合は false。</returns>
      <param name="hub">クライアントが接続されたハブ。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnBeforeDisconnect(Microsoft.AspNet.SignalR.Hubs.IHub)">
      <summary>このメソッドは、後で <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> に追加された任意のモジュールの切断コンポーネントが実行される前に、呼び出されます。これが false を返す場合、それらの後で追加されたモジュールおよび <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnDisconnected" /> メソッドは実行されません。</summary>
      <returns>後で追加されたモジュールの切断コンポーネントおよび <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnDisconnected" /> メソッドを実行する必要がある場合は true。それ以外の場合は false。</returns>
      <param name="hub">クライアントが切断されたハブ。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnBeforeIncoming(Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext)">
      <summary>このメソッドは、後で <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> に追加された任意のモジュールの受信コンポーネントが実行される前に、呼び出されます。これが false を返す場合、それらの後で追加されたモジュールおよびサーバー側のハブ メソッド呼び出しは実行されません。クライアントがハブに接続することを承認されていない場合でも、呼び出しパラメーターを実行しないことによって <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule.BuildIncoming(System.Func{Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext,System.Threading.Tasks.Task{System.Object}})" /> で禁止している場合を除き、または false を返すことによって <see cref="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnBeforeIncoming(Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext)" /> で禁止している場合を除き、クライアントはそのハブでサーバー側のメソッドを呼び出すことを承認されます。</summary>
      <returns>後で追加されたモジュールの受信コンポーネントおよびサーバー側のハブ メソッド呼び出しを実行する必要がある場合は true。それ以外の場合は false。</returns>
      <param name="context">サーバー側のハブ メソッド呼び出しの説明。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnBeforeOutgoing(Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext)">
      <summary>このメソッドは、後で <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> に追加された任意のモジュールの送信コンポーネントが実行される前に、呼び出されます。これが false を返す場合、それらの後で追加されたモジュールおよびクライアント側のハブ メソッド呼び出しは実行されません。</summary>
      <returns>後で追加されたモジュールの送信コンポーネントおよびクライアント側のハブ メソッド呼び出しを実行する必要がある場合は true。それ以外の場合は false。</returns>
      <param name="context">クライアント側のハブ メソッド呼び出しの説明。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnBeforeReconnect(Microsoft.AspNet.SignalR.Hubs.IHub)">
      <summary>このメソッドは、後で <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> に追加された任意のモジュールの再接続コンポーネントが実行される前に、呼び出されます。これが false を返す場合、それらの後で追加されたモジュールおよび <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnReconnected" /> メソッドは実行されません。</summary>
      <returns>後で追加されたモジュールの再接続コンポーネントおよび <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnReconnected" /> メソッドを実行する必要がある場合は true。それ以外の場合は false。</returns>
      <param name="hub">クライアントが再接続されたハブ。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnIncomingError(Microsoft.AspNet.SignalR.Hubs.ExceptionContext,Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext)">
      <summary>これは、サーバー側のハブ メソッドまたは後で <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> に追加されたモジュールの受信コンポーネントによって、キャッチされない例外がスローされたときに呼び出されます。このメソッドを使用して例外を監視しても、他のモジュールにバブルアップすることは防止されません。</summary>
      <param name="exceptionContext">サーバー側の呼び出し中にスローされた例外を表します。このコンテキストを使用してエラーを変更したり、結果を設定したりすることができます。</param>
      <param name="invokerContext">サーバー側のハブ メソッド呼び出しの説明。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.HubRequest">
      <summary>ハブに接続された SignalR 接続要求と通信するメソッドを提供します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubRequest.#ctor">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubRequest" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubRequest.Hub">
      <summary>ハブの接続値を取得または設定します。</summary>
      <returns>ハブの接続値。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubRequest.Id">
      <summary>接続 ID を取得または設定します。</summary>
      <returns>接続 ID。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubRequest.Method">
      <summary>要求メソッドを取得または設定します。</summary>
      <returns>要求メソッド。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubRequest.ParameterValues">
      <summary>パラメーター値を取得または設定します。</summary>
      <returns>パラメーター値。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubRequest.State">
      <summary>要求の現在の状態を取得または設定します。</summary>
      <returns>要求の現在の状態。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.HubResponse">
      <summary>受信ハブ要求から返された応答を表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubResponse.#ctor">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubResponse" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubResponse.Error">
      <summary>ハブ メソッドの呼び出しの結果として発生する例外を取得または設定します。</summary>
      <returns>ハブ メソッドの呼び出しの結果として発生する例外。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubResponse.ErrorData">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.HubException" /> に格納されている追加のエラー データ</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubResponse.Id">
      <summary>操作の ID を取得または設定します。</summary>
      <returns>操作の ID。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubResponse.IsHubException">
      <summary>Error が <see cref="T:Microsoft.AspNet.SignalR.HubException" /> かどうかを示します。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubResponse.Result">
      <summary>呼び出しの結果を取得または設定します。</summary>
      <returns>呼び出しの結果。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubResponse.StackTrace">
      <summary>ハブ メソッドの呼び出しの結果として発生する例外のスタック トレースを取得または設定します。</summary>
      <returns>ハブ メソッドの呼び出しの結果として発生する例外のスタック トレース。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubResponse.State">
      <summary>ラウンド トリップ状態になる変更を取得または設定します。</summary>
      <returns>ラウンド トリップ状態になる変更。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IAssemblyLocator">
      <summary>アセンブリを検索し、そのモジュールに関する情報を返します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IAssemblyLocator.GetAssemblies">
      <summary>モジュールによって参照されているアセンブリの一覧を返します。</summary>
      <returns>モジュールによって参照されているアセンブリの一覧。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IAuthorizeHubConnection">
      <summary>クライアントが <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> に接続することを承認できる、<see cref="T:System.Attribute" /> によって実装されるインターフェイス。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IAuthorizeHubConnection.AuthorizeHubConnection(Microsoft.AspNet.SignalR.Hubs.HubDescriptor,Microsoft.AspNet.SignalR.IRequest)">
      <summary>指定された <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubCallerContext" /> で、クライアントが <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> に接続することを承認されているかどうかを判断します。</summary>
      <returns>呼び出し元がハブへの接続を承認されている場合は true。それ以外の場合は false。</returns>
      <param name="hubDescriptor">接続を試行しているハブ クライアントの説明。</param>
      <param name="request">クライアントからの接続要求。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IAuthorizeHubMethodInvocation">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> メソッドの呼び出しを承認できる、<see cref="T:System.Attribute" /> によって実装されるインターフェイス。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IAuthorizeHubMethodInvocation.AuthorizeHubMethodInvocation(Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext,System.Boolean)">
      <summary>指定された <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext" /> で、クライアントが <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> メソッドを呼び出すことを承認されているかどうかを判断します。</summary>
      <returns>呼び出し元が <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> メソッドの呼び出しを承認されている場合は true。それ以外の場合は false。</returns>
      <param name="hubIncomingInvokerContext">
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> メソッドの呼び出しに関する詳細を提供する <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext" />。</param>
      <param name="appliesToMethod">インターフェイス インスタンスがメソッドに直接適用される属性かどうかを示します。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IClientProxy">
      <summary>クライアント側ハブのサーバー側プロキシ。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IClientProxy.Invoke(System.String,System.Object[])">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.IClientProxy" /> インスタンスによって表される接続でメソッドを呼び出します。</summary>
      <returns>データがクライアントに送信されたことを表すタスク。</returns>
      <param name="method">呼び出すメソッドの名前。</param>
      <param name="args">クライアントに渡す引数。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHub">
      <summary>ハブに接続された SignalR 接続と通信するメソッドを表すインターフェイスを提供します。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHub.Clients">
      <summary>ハブに接続中のクライアントを取得または設定します。</summary>
      <returns>ハブに接続中のクライアント。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHub.Context">
      <summary>呼び出し元のクライアントについての情報を取得または設定します。</summary>
      <returns>呼び出し元のクライアントに関する情報。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHub.Groups">
      <summary>このハブ インスタンスのグループ マネージャーを取得または設定します。</summary>
      <returns>このハブ インスタンスのグループ マネージャー。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnConnected">
      <summary>接続がこのハブ インスタンスに接続するときに呼び出されます。</summary>
      <returns>接続操作を表すタスク オブジェクト。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnDisconnected">
      <summary>接続がこのハブ インスタンスから切断するときに呼び出されます。</summary>
      <returns>切断操作を表すタスク オブジェクト。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnReconnected">
      <summary>接続がこのハブ インスタンスに再接続するときに呼び出されます。</summary>
      <returns>再接続操作を表すタスク オブジェクト。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHubActivator">
      <summary>ハブ インスタンスを作成するメソッドを提供します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubActivator.Create(Microsoft.AspNet.SignalR.Hubs.HubDescriptor)">
      <summary>新しいハブ インスタンスを作成します。</summary>
      <returns>新しく作成されたハブ。</returns>
      <param name="descriptor">ハブ記述子。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHubCallerConnectionContext">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> の個々の SignalR 接続に関するすべての情報をカプセル化します。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubCallerConnectionContext.Caller"></member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubCallerConnectionContext.Others"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubCallerConnectionContext.OthersInGroup(System.String)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubCallerConnectionContext.OthersInGroups(System.Collections.Generic.IList{System.String})"></member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHubConnectionContext">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> の SignalR 接続に関するすべての情報をカプセル化します。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubConnectionContext.All">
      <summary>接続されているすべてのクライアントを取得または設定します。</summary>
      <returns>接続されたすべてのクライアント。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubConnectionContext.AllExcept(System.String[])">
      <summary>指定された呼び出し元のクライアントのものを除く、すべてのクライアントの動的な表現を返します。</summary>
      <returns>指定された呼び出し元のクライアントのものを除く、すべてのクライアントの動的な表現。</returns>
      <param name="excludeConnectionIds">除外する接続 ID の一覧。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubConnectionContext.Client(System.String)">
      <summary>指定された接続 ID を持つ接続の動的な表現を返します。</summary>
      <returns>指定されたクライアントの動的な表現。</returns>
      <param name="connectionId">接続 ID。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubConnectionContext.Clients(System.Collections.Generic.IList{System.String})"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubConnectionContext.Group(System.String,System.String[])">
      <summary>指定されたグループの動的な表現を返します。</summary>
      <returns>指定されたグループの動的な表現。</returns>
      <param name="groupName">グループの名前。</param>
      <param name="excludeConnectionIds">除外する接続 ID の一覧。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubConnectionContext.Groups(System.Collections.Generic.IList{System.String},System.String[])"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubConnectionContext.User(System.String)"></member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHubDescriptorProvider">
      <summary>ハブ記述子プロバイダーを記述します。ハブ記述子プロバイダーは使用可能なハブに関する情報を提供します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubDescriptorProvider.GetHubs">
      <summary>使用可能なすべてのハブを取得します。</summary>
      <returns>ハブ記述子のコレクション。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubDescriptorProvider.TryGetHub(System.String,Microsoft.AspNet.SignalR.Hubs.HubDescriptor@)">
      <summary>指定された名前を使用してハブの取得を試行します。</summary>
      <returns>ハブが見つかった場合は True。</returns>
      <param name="hubName">ハブの名前。</param>
      <param name="descriptor">取得された記述子オブジェクト。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext">
      <summary>クライアントからのサーバー側ハブ メソッド呼び出しの説明。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext.Args">
      <summary>呼び出されたメソッドに渡される引数を取得します。</summary>
      <returns>呼び出されたメソッドに渡される引数。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext.Hub">
      <summary>呼び出されたメソッドをメンバーとして格納するハブ インスタンスを取得します。</summary>
      <returns>呼び出されたメソッドをメンバーとして格納するハブ インスタンス。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext.MethodDescriptor">
      <summary>クライアントによって呼び出されているメソッドの説明を取得します。</summary>
      <returns>クライアントによって呼び出されているメソッドの説明。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext.StateTracker">
      <summary>呼び出し時のクライアントでのハブの状態を表すキー値のストアを取得します。</summary>
      <returns>呼び出し時のクライアントでのハブの状態を表すキー値のストア。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHubManager">
      <summary>ハブ マネージャー (ハブ全体およびメソッドのルックアップ プロセスのメイン ポイント) を記述します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubManager.GetHub(System.String)">
      <summary>1 つのハブ記述子を取得します。</summary>
      <returns>見つかった場合はハブ記述子。その他の場合は Null。</returns>
      <param name="hubName">ハブの名前。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubManager.GetHubMethod(System.String,System.String,System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Json.IJsonValue})">
      <summary>指定されたハブで指定された名前のメソッドを取得します。</summary>
      <returns>見つかった場合はメソッドの記述子。その他の場合は Null。</returns>
      <param name="hubName">ハブの名前。</param>
      <param name="method">検索するメソッドの名前。</param>
      <param name="parameters">照合するメソッド パラメーター。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubManager.GetHubMethods(System.String,System.Func{Microsoft.AspNet.SignalR.Hubs.MethodDescriptor,System.Boolean})">
      <summary>指定されたハブで呼び出すことができるすべてのメソッドを取得します。</summary>
      <returns>使用可能なメソッドの一覧。</returns>
      <param name="hubName">ハブの名前。</param>
      <param name="predicate">結果をフィルター処理するための省略可能な述語。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubManager.GetHubs(System.Func{Microsoft.AspNet.SignalR.Hubs.HubDescriptor,System.Boolean})">
      <summary>指定された述語に一致する使用可能なすべてのハブを取得します。</summary>
      <returns>ハブ記述子の一覧。</returns>
      <param name="predicate">述語。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubManager.ResolveHub(System.String)">
      <summary>指定されたハブ名を具象オブジェクトに解決します。</summary>
      <returns>見つかった場合はハブ実装インスタンス。その他の場合は Null。</returns>
      <param name="hubName">ハブの名前。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubManager.ResolveHubs">
      <summary>使用可能なすべてのハブを具象オブジェクトに解決します。</summary>
      <returns>ハブ インスタンスの一覧。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext">
      <summary>サーバーからのクライアント側ハブ メソッド呼び出しの説明。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext.Connection">
      <summary>クライアント側のハブ メソッドを呼び出しているサーバー側のハブ メソッドを呼び出したクライアントに対応する <see cref="T:Microsoft.AspNet.SignalR.IConnection" /> を取得します (存在する場合)。</summary>
      <returns>クライアント側のハブ メソッドを呼び出しているサーバー側のハブ メソッドを呼び出したクライアントに対応する <see cref="T:Microsoft.AspNet.SignalR.IConnection" /> (存在する場合)。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext.ExcludedSignals">
      <summary>
        <see cref="P:Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext.Signal" /> に関係なくメソッドの呼び出しを受け取ってはならないクライアントに属する信号 (ConnectionId、ハブ種類名、またはハブ種類名 + "." + グループ名) を取得します。</summary>
      <returns>
        <see cref="P:Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext.Signal" /> に関係なくメソッドの呼び出しを受け取ってはならないクライアントに属する信号 (ConnectionId、ハブ種類名、またはハブ種類名 + "." + グループ名)。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext.Invocation">
      <summary>クライアントで行われるメソッド呼び出しの説明を取得します。</summary>
      <returns>クライアントで行われるメソッド呼び出しの説明。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext.Signal">
      <summary>メソッドの呼び出しを受け取るクライアントに属する信号 (ConnectionId、ハブ種類名、またはハブ種類名 + "." グループ名) を取得します。</summary>
      <returns>メソッドの呼び出しを受け取るクライアントに属する信号 (ConnectionId、ハブ種類名、またはハブ種類名 + "." + グループ名)。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext.Signals">
      <summary>
        <see cref="P:Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext.Signal" /> に関係なくメソッドの呼び出しを受け取ってはならないクライアントに属する信号 (ConnectionId、ハブ種類名、またはハブ種類名 + "." + グループ名)。</summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline">
      <summary>接続、再接続、切断、サーバー側ハブ メソッドの呼び出し、クライアント側ハブ メソッドの呼び出し、ハブ クライアントの承認、ハブ グループの再参加など、ハブの処理のさまざまな段階をインターセプトし、カスタマイズできるモジュールのコレクション。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipeline.AddModule(Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule" /> をハブ パイプラインに追加します。最初にパイプラインに追加されたモジュールは、後でパイプラインに追加されるモジュールをラップします。すべてのモジュールは、<see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker" /> でメソッドが呼び出される前にパイプラインに追加される必要があります。</summary>
      <returns>
        <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHubPipeline.AddModule(Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule)" /> の呼び出しをチェーンできるようにする新しく追加されたモジュールを含む <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> 自体。このメソッドは、その結果を格納する必要がないように、呼び出し元のパイプラインを変更します。</returns>
      <param name="pipelineModule">接続、再接続、切断、サーバー側ハブ メソッドの呼び出し、クライアント側ハブ メソッドの呼び出し、ハブ クライアントの承認、ハブ グループの再参加など、ハブの処理のさまざまな段階をインターセプトし、カスタマイズできるモジュール。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker">
      <summary>このインターフェイスの実装は、接続、再接続、切断、サーバー側ハブ メソッドの呼び出し、クライアント側ハブ メソッドの呼び出し、ハブ クライアントの承認、ハブ グループの再参加など、ハブの処理のさまざまな段階を完了するのに必要な操作を実行します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker.AuthorizeConnect(Microsoft.AspNet.SignalR.Hubs.HubDescriptor,Microsoft.AspNet.SignalR.IRequest)">
      <summary>クライアントが <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDescriptor" /> によって記述されたハブに属する信号をサブスクライブする前に呼び出されます。既定では、<see cref="T:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule" /> は <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> で属性を検索し、クライアントが記述されたハブのメソッド呼び出しをサブスクライブすることを承認されているかどうかを判断できるようにします。</summary>
      <returns>クライアント側のハブ メソッド呼び出しのサブスクライブをクライアントが承認されている場合は true。それ以外の場合は false。</returns>
      <param name="hubDescriptor">クライアントが接続を試行するハブの説明。</param>
      <param name="request">クライアントの <see cref="T:System.Security.Principal.IPrincipal" /> ユーザーを含む必要があるクライアントによって行われた接続要求。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker.Connect(Microsoft.AspNet.SignalR.Hubs.IHub)">
      <summary>クライアントの接続先の各 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> について、クライアントが <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher" /> に接続するときに呼び出されます。既定では、これによって、<see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> の OnConnected メソッドが呼び出されます。</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task" /> を返します。</returns>
      <param name="hub">クライアントが接続される <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker.Disconnect(Microsoft.AspNet.SignalR.Hubs.IHub)">
      <summary>クライアントが接続されていた各 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> について、クライアントが <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher" /> から切断するときに呼び出されます。既定では、これによって、<see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> の OnDisconnected メソッドが呼び出されます。</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task" /> を返します。</returns>
      <param name="hub">クライアントが切断された <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker.Invoke(Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext)">
      <summary>サーバー側のハブ メソッドを呼び出します。</summary>
      <returns>サーバー側のハブ メソッド呼び出しの戻り値を提供する非同期操作。</returns>
      <param name="context">サーバー側のハブ メソッド呼び出しの説明。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker.Reconnect(Microsoft.AspNet.SignalR.Hubs.IHub)">
      <summary>クライアントの接続先の各 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> について、クライアントが <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher" /> に再接続するときに呼び出されます。既定では、これによって、<see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> の OnReconnected メソッドが呼び出されます。</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task" /> を返します。</returns>
      <param name="hub">クライアントが再接続される <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker.RejoiningGroups(Microsoft.AspNet.SignalR.Hubs.HubDescriptor,Microsoft.AspNet.SignalR.IRequest,System.Collections.Generic.IList{System.String})">
      <summary>このメソッドは、<see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDescriptor" /> によって記述されたハブに属するどのグループにクライアントの再参加を許可するかを判断します。既定では、サーバーに再接続するクライアントは、以前にメンバーであったすべてのグループから削除されます。これは、信頼されていないクライアントが、参加を承認されたことがないグループのメンバーであることを要求する場合があるからです。</summary>
      <returns>クライアントが再参加を許可されているグループの一覧。</returns>
      <param name="hubDescriptor">クライアントがグループへの再参加を試行するハブの説明。</param>
      <param name="request">グループへの再参加を試行するクライアントによって行われた再接続要求。</param>
      <param name="groups">再接続の前にクライアントが以前にメンバーであったことを要求する関連ハブに属するグループの一覧。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker.Send(Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext)">
      <summary>クライアント側のハブ メソッドを呼び出します。</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task" /> を返します。</returns>
      <param name="context">クライアント側のハブ メソッド呼び出しの説明。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule" /> は、接続、再接続、切断、サーバー側ハブ メソッドの呼び出し、クライアント側ハブ メソッドの呼び出し、ハブ クライアントの承認、ハブ グループの再参加など、ハブの処理のさまざまな段階をインターセプトし、カスタマイズできます。モジュールは <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHubPipeline.AddModule(Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule)" /> を呼び出すことによってアクティブ化することができます。<see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> に追加された結合モジュールは、<see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker" /> インターフェイスによって呼び出されます。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule.BuildAuthorizeConnect(System.Func{Microsoft.AspNet.SignalR.Hubs.HubDescriptor,Microsoft.AspNet.SignalR.IRequest,System.Boolean})">
      <summary>クライアントが <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDescriptor" /> によって記述されたハブに属する信号をサブスクライブする前に呼び出される関数をラップします。既定では、<see cref="T:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule" /> は <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> で属性を検索し、クライアントが記述されたハブのメソッド呼び出しをサブスクライブすることを承認されているかどうかを判断できるようにします。この関数は、クライアント側のハブ メソッド呼び出しのサブスクライブをクライアントが承認されている場合は true を返します。それ以外の場合は false を返します。</summary>
      <returns>記述されたハブに接続することをクライアントが承認されているかどうかを示すラップされた関数。</returns>
      <param name="authorizeConnect">記述されたハブに接続することをクライアントが承認されているかどうかを示す関数。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule.BuildConnect(System.Func{Microsoft.AspNet.SignalR.Hubs.IHub,System.Threading.Tasks.Task})">
      <summary>クライアントの接続先の各 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> について、クライアントが <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher" /> に接続するときに呼び出される関数をラップします。既定では、これによって、<see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> の OnConnected メソッドが呼び出されます。</summary>
      <returns>クライアントがハブに接続するときに呼び出されるラップされた関数。</returns>
      <param name="connect">クライアントがハブに接続するときに呼び出される関数。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule.BuildDisconnect(System.Func{Microsoft.AspNet.SignalR.Hubs.IHub,System.Threading.Tasks.Task})">
      <summary>クライアントの接続先の各 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> について、クライアントが <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher" /> から切断するときに呼び出される関数をラップします。既定では、これによって、<see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> の OnDisconnected メソッドが呼び出されます。</summary>
      <returns>クライアントがハブから切断するときに呼び出されるラップされた関数。</returns>
      <param name="disconnect">クライアントがハブから切断するときに呼び出される関数。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule.BuildIncoming(System.Func{Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext,System.Threading.Tasks.Task{System.Object}})">
      <summary>サーバー側のハブ メソッドを呼び出す関数をラップします。クライアントがハブに接続することを承認されていない場合でも、呼び出しパラメーターを実行しないことによって、<see cref="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule.BuildIncoming(System.Func{Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext,System.Threading.Tasks.Task{System.Object}})" /> で禁止されている場合を除き、クライアントはそのハブでサーバー側のメソッドを呼び出すことを承認されます。</summary>
      <returns>サーバー側のハブ メソッドを呼び出すラップされた関数。</returns>
      <param name="invoke">サーバー側のハブ メソッドを呼び出す関数。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule.BuildOutgoing(System.Func{Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext,System.Threading.Tasks.Task})">
      <summary>クライアント側のハブ メソッドを呼び出す関数をラップします。</summary>
      <returns>クライアント側のハブ メソッドを呼び出すラップされた関数。</returns>
      <param name="send">クライアント側のハブ メソッドを呼び出す関数。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule.BuildReconnect(System.Func{Microsoft.AspNet.SignalR.Hubs.IHub,System.Threading.Tasks.Task})">
      <summary>クライアントの接続先の各 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> について、クライアントが <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher" /> に再接続するときに呼び出される関数をラップします。既定では、これによって、<see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> の OnReconnected メソッドが呼び出されます。</summary>
      <returns>クライアントがハブに再接続するときに呼び出されるラップされた関数。</returns>
      <param name="reconnect">クライアントがハブに再接続するときに呼び出される関数。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule.BuildRejoiningGroups(System.Func{Microsoft.AspNet.SignalR.Hubs.HubDescriptor,Microsoft.AspNet.SignalR.IRequest,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String}})">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDescriptor" /> によって記述されたハブに属するどのグループにクライアントの再参加を許可するかを判断する関数をラップします。既定では、サーバーに再接続するクライアントは、以前にメンバーであったすべてのグループから削除されます。これは、信頼されていないクライアントが、参加を承認されたことがないグループのメンバーであることを要求する場合があるからです。</summary>
      <returns>クライアントに再参加を許可するグループを判断するラップされた関数。</returns>
      <param name="rejoiningGroups">クライアントに再参加を許可するグループを判断する関数。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHubRequestParser">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher" /> を介した受信要求の解析を処理します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubRequestParser.Parse(System.String,Newtonsoft.Json.JsonSerializer)">
      <summary>受信ハブのペイロードを <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubRequest" /> に解析します。</summary>
      <returns>結果の <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubRequest" />。</returns>
      <param name="data">生のハブのペイロード。</param>
      <param name="serializer">データの分析に使用される JsonSerializer。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IJavaScriptMinifier">
      <summary>ハブの JavaScript を組み合わせ、縮小、およびキャッシュします。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IJavaScriptMinifier.Minify(System.String)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.IJavaScriptMinifier" /> の指定されたソースを縮小します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.IJavaScriptMinifier" /> の指定されたソース。</returns>
      <param name="source">縮小されたソース。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IJavaScriptProxyGenerator">
      <summary>JavaScript インターフェイスのプロキシ サービスを生成します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IJavaScriptProxyGenerator.GenerateProxy(System.String)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.IJavaScriptProxyGenerator" /> のサービス URL のプロキシを生成します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.IJavaScriptProxyGenerator" /> のサービス URL を生成するプロキシ。</returns>
      <param name="serviceUrl">URL のサービス。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IMethodDescriptorProvider">
      <summary>指定されたハブで使用可能なメソッドのコレクションを構築するハブ メソッド プロバイダーを記述します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IMethodDescriptorProvider.GetMethods(Microsoft.AspNet.SignalR.Hubs.HubDescriptor)">
      <summary>指定されたハブのすべてのメソッドを取得します。</summary>
      <returns>使用可能なメソッド。</returns>
      <param name="hub">ハブ記述子オブジェクト。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IMethodDescriptorProvider.TryGetMethod(Microsoft.AspNet.SignalR.Hubs.HubDescriptor,System.String,Microsoft.AspNet.SignalR.Hubs.MethodDescriptor@,System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Json.IJsonValue})">
      <summary>メソッドの取得を試行します。</summary>
      <returns>メソッドが見つかった場合は True。</returns>
      <param name="hub">ハブ記述子オブジェクト。</param>
      <param name="method">メソッドの名前。</param>
      <param name="descriptor">見つかった場合はメソッドの記述子。その他の場合は Null。</param>
      <param name="parameters">照合するメソッド パラメーター。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IParameterResolver">
      <summary>指定された情報に基づいて、パラメーターに一致する値を解決するためのパラメーター リゾルバーを記述します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IParameterResolver.ResolveMethodParameters(Microsoft.AspNet.SignalR.Hubs.MethodDescriptor,System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Json.IJsonValue})">
      <summary>指定されたオブジェクトに基づいてメソッドのパラメーター値を解決します。</summary>
      <returns>パラメーター値の配列。</returns>
      <param name="method">メソッド記述子。</param>
      <param name="values">パラメーター値の解決に使用する値のリスト。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.MethodDescriptor">
      <summary>1 つのハブ メソッドに関する情報を表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.MethodDescriptor.#ctor">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.MethodDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.MethodDescriptor.Attributes">
      <summary>このメソッドにアタッチされる属性を取得または設定します。</summary>
      <returns>このメソッドにアタッチされる属性。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.MethodDescriptor.Hub">
      <summary>このメソッドを対象とするハブ記述子オブジェクトを取得します。</summary>
      <returns>このメソッドを対象とするハブ記述子オブジェクト。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.MethodDescriptor.Invoker">
      <summary>メソッド呼び出しのデリゲートを取得または設定します。引数として、ターゲット ハブと呼び出し引数の配列を使用します。</summary>
      <returns>メソッド呼び出しのデリゲート。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.MethodDescriptor.Parameters">
      <summary>使用可能なメソッド パラメーターを取得または設定します。</summary>
      <returns>使用可能なメソッド パラメーター。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.MethodDescriptor.ReturnType">
      <summary>このメソッドの戻り型を取得または設定します。</summary>
      <returns>このメソッドの戻り型。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.MethodExtensions">
      <summary>SignalR ハブのメソッド拡張を表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.MethodExtensions.Matches(Microsoft.AspNet.SignalR.Hubs.MethodDescriptor,System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Json.IJsonValue})">
      <summary>メソッド拡張が別のメソッド識別子に一致するかどうかを指定します。</summary>
      <returns>メソッド拡張が別のメソッド識別子に一致する場合は true。それ以外の場合は false。</returns>
      <param name="methodDescriptor">メソッドの記述子。</param>
      <param name="parameters">パラメーターの一覧。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.MultipleSignalProxy"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.MultipleSignalProxy.#ctor(Microsoft.AspNet.SignalR.IConnection,Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker,System.Collections.Generic.IList{System.String},System.String,System.String,System.Collections.Generic.IList{System.String})"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.MultipleSignalProxy.GetInvocationData(System.String,System.Object[])"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.MultipleSignalProxy.Invoke(System.String,System.Object[])"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.MultipleSignalProxy.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.MultipleSignalProxy.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)"></member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.NotAuthorizedException">
      <summary>クライアントがハブに接続することが承認されていない場合にスローされる例外を表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.NotAuthorizedException.#ctor">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.NotAuthorizedException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.NotAuthorizedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化されたデータを使用して、<see cref="T:Microsoft.AspNet.SignalR.Hubs.NotAuthorizedException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">例外に関するシリアル化された情報。</param>
      <param name="context">送信元または送信先に関するコンテキスト情報。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.NotAuthorizedException.#ctor(System.String)">
      <summary>エラー メッセージを使用して、<see cref="T:Microsoft.AspNet.SignalR.Hubs.NotAuthorizedException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外に関するメッセージ。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.NotAuthorizedException.#ctor(System.String,System.Exception)">
      <summary>エラー メッセージおよび内部例外を使用して、<see cref="T:Microsoft.AspNet.SignalR.Hubs.NotAuthorizedException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外に関するメッセージ。</param>
      <param name="inner">例外を発生させたエラー。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.NullJavaScriptMinifier">
      <summary>null Javascript の縮小化を表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.NullJavaScriptMinifier.#ctor">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.NullJavaScriptMinifier" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Hubs.NullJavaScriptMinifier.Instance">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.NullJavaScriptMinifier" /> インスタンスを指定します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.NullJavaScriptMinifier.Minify(System.String)">
      <summary>Javascript の指定されたソースを縮小します。</summary>
      <returns>縮小されたソース。</returns>
      <param name="source">縮小するソース。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.NullMethodDescriptor">
      <summary>Provides details about the null method.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.NullMethodDescriptor.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.AspNet.SignalR.Hubs.NullMethodDescriptor" /> class.</summary>
      <param name="methodName">The name for this null method.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.NullMethodDescriptor.Attributes">
      <summary>Gets or sets the attributes attached to this method.</summary>
      <returns>The attributes attached to this method.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.NullMethodDescriptor.Invoker">
      <summary>Gets or sets the method invocation delegate. Takes a target hub and an array of invocation arguments as it's arguments.</summary>
      <returns>The method invocation delegate.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.NullMethodDescriptor.Parameters">
      <summary>Gets or sets the available method parameters.</summary>
      <returns>The available method parameters.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.ParameterDescriptor">
      <summary>1 つのハブ メソッド パラメーターに関する情報を表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ParameterDescriptor.#ctor">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.ParameterDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.ParameterDescriptor.Name">
      <summary>パラメーター名を取得または設定します。</summary>
      <returns>パラメーター名。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.ParameterDescriptor.ParameterType">
      <summary>パラメーター型を取得または設定します。</summary>
      <returns>パラメーター型。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.ReflectedHubDescriptorProvider">
      <summary>ハブ記述子プロバイダーを記述し、使用可能なハブに関するリフレクションされた情報を提供します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ReflectedHubDescriptorProvider.#ctor(Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.ReflectedHubDescriptorProvider" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="resolver">
        <see cref="T:Microsoft.AspNet.SignalR.IDependencyResolver" />。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ReflectedHubDescriptorProvider.BuildHubsCache">
      <summary>ハブ キャッシュを作成する接続のコレクションを取得します。</summary>
      <returns>ハブ キャッシュを作成する接続のコレクション。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ReflectedHubDescriptorProvider.GetHubs">
      <summary>使用可能なすべてのハブを取得します。</summary>
      <returns>使用可能なハブのコレクション。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ReflectedHubDescriptorProvider.TryGetHub(System.String,Microsoft.AspNet.SignalR.Hubs.HubDescriptor@)">
      <summary>指定された名前を使用してハブの取得を試行します。</summary>
      <returns>ハブが見つかった場合は true。それ以外の場合は false。</returns>
      <param name="hubName">取得するハブの名前。</param>
      <param name="descriptor">このメソッドから制御が戻るとき、取得した記述子オブジェクトが格納されます。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.ReflectedMethodDescriptorProvider">
      <summary>既述子プロバイダーのリフレクションされたメソッドを表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ReflectedMethodDescriptorProvider.#ctor">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.ReflectedMethodDescriptorProvider" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ReflectedMethodDescriptorProvider.GetMethods(Microsoft.AspNet.SignalR.Hubs.HubDescriptor)">
      <summary>プロバイダーのメソッドのコレクションを返します。</summary>
      <returns>プロバイダーのメソッドのコレクション。</returns>
      <param name="hub">ハブ記述子。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ReflectedMethodDescriptorProvider.TryGetMethod(Microsoft.AspNet.SignalR.Hubs.HubDescriptor,System.String,Microsoft.AspNet.SignalR.Hubs.MethodDescriptor@,System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Json.IJsonValue})">
      <summary>指定された <paramref name="method" /> の指定された <paramref name="hub" /> を検索します。</summary>
      <returns>名前/パラメーターのセットに一致するメソッドがハブで見つかった場合は true。それ以外の場合は false。</returns>
      <param name="hub">指定した <paramref name="method" /> を検索するハブ。</param>
      <param name="method">検索するメソッドの名前。</param>
      <param name="descriptor">成功した場合は、解決された <see cref="T:Microsoft.AspNet.SignalR.Hubs.MethodDescriptor" />。</param>
      <param name="parameters">指定された <paramref name="method" /> の特定のオーバーロードを探すために使用されるパラメーターのセット。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.ReflectionHelper">
      <summary>リフレクション ヘルパーを表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ReflectionHelper.GetAttributeValue``2(System.Reflection.ICustomAttributeProvider,System.Func{``0,``1})">
      <summary>このヘルパーの属性値を取得します。</summary>
      <returns>このヘルパーの属性値。</returns>
      <param name="source">値の取得元。</param>
      <param name="valueGetter">値 getter。</param>
      <typeparam name="TAttribute">属性の型。</typeparam>
      <typeparam name="TResult">結果の型。</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ReflectionHelper.GetExportedHubMethods(System.Type)">
      <summary>エクスポートされたハブ メソッドの一覧を取得します。</summary>
      <returns>エクスポートされたハブ メソッドの一覧。</returns>
      <param name="type">取得するメソッドの型。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.SignalProxy">
      <summary>ハブによって使用される信号プロキシを表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.SignalProxy.#ctor(Microsoft.AspNet.SignalR.IConnection,Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker,System.String,System.String,System.String,System.Collections.Generic.IList{System.String})"></member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.SignalProxy.Connection"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.SignalProxy.GetInvocationData(System.String,System.Object[])">
      <summary>プロキシに関連付けられているクライアント ハブ呼び出しデータを取得します。</summary>
      <returns>プロキシに関連付けられているクライアント ハブ呼び出しデータ。</returns>
      <param name="method">メソッド。</param>
      <param name="args">引数。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.SignalProxy.HubName">
      <summary>ハブの名前を取得または設定します。</summary>
      <returns>ハブの名前。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.SignalProxy.Invoke(System.String,System.Object[])">
      <summary>メソッドを呼び出して、メソッド呼び出しの結果を返します。</summary>
      <returns>操作の結果。</returns>
      <param name="method">呼び出すメソッド。</param>
      <param name="args">引数の配列。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.SignalProxy.Invoker"></member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.SignalProxy.Signal">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.SignalProxy" /> に関連付けられている信号を取得または設定します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.SignalProxy" /> に関連付けられている信号。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.SignalProxy.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary>メンバー値を取得する操作の実装を提供します。</summary>
      <returns>操作が成功した場合は true。それ以外の場合は false。</returns>
      <param name="binder">動的操作を呼び出したオブジェクトに関する情報。</param>
      <param name="result">取得操作の結果。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.SignalProxy.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
      <summary>メンバーを呼び出す操作の実装を提供します。</summary>
      <returns>操作が成功した場合は true。それ以外の場合は false。</returns>
      <param name="binder">動的な操作に関する情報を提供します。</param>
      <param name="args">呼び出し操作の間にオブジェクト メンバーに渡される引数。</param>
      <param name="result">メンバー呼び出しの結果。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.StateChangeTracker">
      <summary>変更追跡ディクショナリを表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.StateChangeTracker.#ctor">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.StateChangeTracker" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.StateChangeTracker.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.StateChangeTracker" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="values">ディクショナリの値。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.StateChangeTracker.GetChanges">
      <summary>トラッカーに関連付けられた変更を取得します。</summary>
      <returns>トラッカーに関連付けられた変更。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.StateChangeTracker.Item(System.String)">
      <summary>指定されたキーを使用してトラッカーに関連付けられた項目を取得または設定します。</summary>
      <returns>指定されたキーを使用してトラッカーに関連付けられた項目。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.StatefulSignalProxy">
      <summary>ハブによって使用されるステートフルな信号プロキシを表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.StatefulSignalProxy.#ctor(Microsoft.AspNet.SignalR.IConnection,Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker,System.String,System.String,System.String,Microsoft.AspNet.SignalR.Hubs.StateChangeTracker)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.StatefulSignalProxy.GetInvocationData(System.String,System.Object[])">
      <summary>プロキシに関連付けられているクライアント ハブ呼び出しデータを取得します。</summary>
      <returns>プロキシに関連付けられているクライアント ハブ呼び出しデータ。</returns>
      <param name="method">メソッド。</param>
      <param name="args">引数。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.StatefulSignalProxy.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary>メンバー値を取得する操作の実装を提供します。</summary>
      <returns>操作が成功した場合は true。それ以外の場合は false。</returns>
      <param name="binder">動的操作を呼び出したオブジェクトに関する情報。</param>
      <param name="result">取得操作の結果。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.StatefulSignalProxy.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
      <summary>メンバー値を設定する操作の実装を提供します。</summary>
      <returns>操作が成功した場合は true。それ以外の場合は false。</returns>
      <param name="binder">動的操作を呼び出したオブジェクトに関する情報。</param>
      <param name="value">設定操作の結果。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.UserProxy"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.UserProxy.#ctor(Microsoft.AspNet.SignalR.IConnection,Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker,System.String,System.String)"></member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.AckHandler">
      <summary>アプリ認証キット (ACK) を処理するインスタンスを表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.AckHandler.#ctor">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.AckHandler" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.AckHandler.#ctor(System.Boolean,System.TimeSpan,System.TimeSpan)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.AckHandler" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="completeAcksOnTimeout">タイムアウト時に ACK が完了している場合は true。それ以外の場合は false。</param>
      <param name="ackThreshold">ACK のしきい値。</param>
      <param name="ackInterval">ACK の間隔。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.AckHandler.CreateAck(System.String)">
      <summary>新しい ACK オブジェクトを作成します。</summary>
      <returns>作成された ACK オブジェクト。</returns>
      <param name="id">識別子。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.AckHandler.Dispose">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.AckHandler" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.AckHandler.Dispose(System.Boolean)">
      <summary>このインスタンスによって使用されているすべてのリソースを解放します。</summary>
      <param name="disposing">マネージ リソースとアンマネージ リソースを解放する場合は true。アンマネージ リソースだけを解放する場合は false。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.AckHandler.TriggerAck(System.String)">
      <summary>指定された ACK オブジェクトをトリガーします。</summary>
      <returns>操作の結果。</returns>
      <param name="id">ACK 識別子。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.ArraySegmentTextReader">
      <summary>配列セグメントに関連付けられているテキスト リーダーを表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.ArraySegmentTextReader.#ctor(System.ArraySegment{System.Byte},System.Text.Encoding)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.ArraySegmentTextReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="buffer">配列セグメント バッファー。</param>
      <param name="encoding">エンコード。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.ArraySegmentTextReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>現在のリーダーから指定された最大文字数を読み取り、指定されたインデックスから開始してバッファーにデータを書き込みます。</summary>
      <returns>読み取られた文字数。</returns>
      <param name="buffer">インデックス間の値を持つ指定された文字配列を格納し、現在のソースから読み取られた文字で置き換えられます。</param>
      <param name="index">書き込みを開始するバッファーの位置。</param>
      <param name="count">読み取る最大文字数。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.Connection">
      <summary>ここの内容は更新されません。ここに素材を追加しないでください。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.Connection.#ctor(Microsoft.AspNet.SignalR.Messaging.IMessageBus,Newtonsoft.Json.JsonSerializer,System.String,System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},Microsoft.AspNet.SignalR.Tracing.ITraceManager,Microsoft.AspNet.SignalR.Infrastructure.IAckHandler,Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager,Microsoft.AspNet.SignalR.Infrastructure.IProtectedData)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.Connection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="newMessageBus">新しいメッセージ バス。</param>
      <param name="jsonSerializer">JSON シリアライザー。</param>
      <param name="baseSignal">ベース信号。</param>
      <param name="connectionId">接続 ID。</param>
      <param name="signals">信号のコレクション。</param>
      <param name="groups">グループのコレクション。</param>
      <param name="traceManager">トレース マネージャー。</param>
      <param name="ackHandler">ack ハンドラー。</param>
      <param name="performanceCounterManager">パフォーマンス カウンター マネージャー。</param>
      <param name="protectedData">保護されているデータ。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.Connection.DefaultSignal">
      <summary>この接続のメイン信号を取得します。</summary>
      <returns>この接続のメイン信号。</returns>
    </member>
    <member name="E:Microsoft.AspNet.SignalR.Infrastructure.Connection.EventKeyAdded">
      <summary>イベントがキーを追加すると発生します。</summary>
    </member>
    <member name="E:Microsoft.AspNet.SignalR.Infrastructure.Connection.EventKeyRemoved">
      <summary>イベントがキーを削除すると発生します。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.Connection.Identity">
      <summary>この接続の ID プロパティを取得します。</summary>
      <returns>この接続の ID プロパティ。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.Connection.Microsoft#AspNet#SignalR#Messaging#ISubscriber#EventKeys">
      <summary>インデックスによって個別にアクセス可能なオブジェクトの一覧を取得します。</summary>
      <returns>インデックスによって個別にアクセス可能なオブジェクトの一覧。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.Connection.Receive(System.String,System.Func{Microsoft.AspNet.SignalR.Transports.PersistentResponse,System.Object,System.Threading.Tasks.Task{System.Boolean}},System.Int32,System.Object)">
      <summary>接続メソッドへのメッセージ応答を受信します。</summary>
      <returns>接続メソッド応答するメッセージ。</returns>
      <param name="messageId">メッセージ ID。</param>
      <param name="callback">接続がコールバック応答をするかどうかを判断します。</param>
      <param name="maxMessages">メッセージの最大数。</param>
      <param name="state">接続の状態。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.Connection.Send(Microsoft.AspNet.SignalR.ConnectionMessage)">
      <summary>1 つ以上の接続にメッセージを送信します。</summary>
      <returns>1 つ以上の接続に送信されるメッセージ。</returns>
      <param name="message">接続に送信されるメッセージ。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.Connection.Subscription">
      <summary>この接続のプロパティのサブスクリプションを取得または設定します。</summary>
      <returns>この接続のプロパティのサブスクリプション。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.Connection.WriteCursor">
      <summary>連続性のある一連の文字を書き込むカーソルを取得または設定します。</summary>
      <returns>連続性のある一連の文字を書き込むカーソル。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.ConnectionManager">
      <summary>既定の <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IConnectionManager" /> の実装を提供します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.ConnectionManager.#ctor(Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.ConnectionManager" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="resolver">
        <see cref="T:Microsoft.AspNet.SignalR.IDependencyResolver" />。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.ConnectionManager.GetConnection(System.Type)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> の <see cref="T:Microsoft.AspNet.SignalR.IPersistentConnectionContext" /> を返します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> の <see cref="T:Microsoft.AspNet.SignalR.IPersistentConnectionContext" />。</returns>
      <param name="type">
        <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> の型。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.ConnectionManager.GetConnectionContext``1">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> の <see cref="T:Microsoft.AspNet.SignalR.IPersistentConnectionContext" /> を返します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> の <see cref="T:Microsoft.AspNet.SignalR.IPersistentConnectionContext" />。</returns>
      <typeparam name="T">
        <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> の型。</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.ConnectionManager.GetHubContext``1">
      <summary>この接続のハブ コンテキストを返します。</summary>
      <returns>この接続のハブ コンテキスト。</returns>
      <typeparam name="T">ハブの種類。</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.ConnectionManager.GetHubContext(System.String)">
      <summary>指定された名前に基づいて、この接続のハブ コンテキストを返します。</summary>
      <returns>この接続のハブ コンテキスト。</returns>
      <param name="hubName">ハブの名前。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.DataProtectionProviderProtectedData">
      <summary>データを保護するメソッドを提供します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.DataProtectionProviderProtectedData.#ctor(Microsoft.Owin.Security.DataProtection.IDataProtectionProvider)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.DataProtectionProviderProtectedData" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="provider">データ保護プロバイダー。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.DataProtectionProviderProtectedData.Protect(System.String,System.String)">
      <summary>指定されたデータを保護します。</summary>
      <returns>保護されているデータ。</returns>
      <param name="data">保護するデータ。</param>
      <param name="purpose">保護の目的。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.DataProtectionProviderProtectedData.Unprotect(System.String,System.String)">
      <summary>指定されたデータの保護を解除します。</summary>
      <returns>保護されていないデータ。</returns>
      <param name="protectedValue">保護されているデータ。</param>
      <param name="purpose">保護の目的。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.DefaultProtectedData">
      <summary>データを保護するメソッドを提供します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.DefaultProtectedData.#ctor">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.DefaultProtectedData" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.DefaultProtectedData.Protect(System.String,System.String)">
      <summary>指定されたデータを保護します。</summary>
      <returns>保護されているデータ。</returns>
      <param name="data">保護するデータ。</param>
      <param name="purpose">保護の目的。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.DefaultProtectedData.Unprotect(System.String,System.String)">
      <summary>指定されたデータの保護を解除します。</summary>
      <returns>保護されていないデータ。</returns>
      <param name="protectedValue">保護されているデータ。</param>
      <param name="purpose">保護の目的。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.IAckHandler">
      <summary>アプリ認証キット (ACK) を処理するインスタンスを表すインターフェイスを提供します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IAckHandler.CreateAck(System.String)">
      <summary>新しい ACK オブジェクトを作成します。</summary>
      <returns>作成された ACK オブジェクト。</returns>
      <param name="id">識別子。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IAckHandler.TriggerAck(System.String)">
      <summary>指定された ACK オブジェクトをトリガーします。</summary>
      <returns>操作の結果。</returns>
      <param name="id">ACK 識別子。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.IBinaryWriter">
      <summary>Represents the base interface for class that has the ability to write raw binary data.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IBinaryWriter.Write(System.ArraySegment{System.Byte})">
      <summary>Writes raw binary data to underlying stream.</summary>
      <param name="data">The raw binary data to write.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.IConnectionManager">
      <summary>ハブおよび永続的な接続と参照へのアクセスを提供します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IConnectionManager.GetConnectionContext``1">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> の <see cref="T:Microsoft.AspNet.SignalR.IPersistentConnectionContext" /> を返します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> の <see cref="T:Microsoft.AspNet.SignalR.IPersistentConnectionContext" />。</returns>
      <typeparam name="T">
        <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> の型。</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IConnectionManager.GetHubContext``1">
      <summary>接続に関連付けられているハブ情報を返します。</summary>
      <returns>接続に関連付けられているハブ情報。</returns>
      <typeparam name="T">ハブの種類。</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IConnectionManager.GetHubContext(System.String)">
      <summary>接続に関連付けられているハブ情報を返します。</summary>
      <returns>接続に関連付けられているハブ情報。</returns>
      <param name="hubName">ハブの名前。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.InterlockedHelper">
      <summary>複数のスレッドのよって共有される変数に対するアトミックの操作のヘルパーを表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.InterlockedHelper.CompareExchangeOr(System.Int32@,System.Int32,System.Int32,System.Int32)">
      <summary>2 つのオブジェクトを比較して、参照の等価性およびそれらが等しいかどうかを確認します。</summary>
      <returns>2 つのオブジェクトが等しい場合は true。それ以外の場合は false。</returns>
      <param name="location">比較対照値と比較され、場合によっては置き換えられる対象オブジェクト。</param>
      <param name="value">比較の結果が等価である場合に対象オブジェクトに置き換わるオブジェクト。</param>
      <param name="comparandA">最初の比較対照値。</param>
      <param name="comparandB">2 つ目の比較対照値。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter">
      <summary>ここの内容は更新されません。ここに素材を追加しないでください。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter.Close">
      <summary>パフォーマンス カウンターを終了し、このパフォーマンス カウンター インスタンスによって割り当てられるすべてのリソースを解放します。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter.CounterName"></member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter.Decrement">
      <summary>効率的なアトミックの操作によって、関連付けられたパフォーマンス カウンターを 1 つ減らします。</summary>
      <returns>減らされたカウンター値。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter.Increment">
      <summary>効率的なアトミックの操作によって、関連付けられたパフォーマンス カウンターを 1 つ増やします。</summary>
      <returns>増やされたカウンター値。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter.IncrementBy(System.Int64)">
      <summary>効率的なアトミックの操作によって、関連付けられたパフォーマンス カウンターの指定された値を増減します。</summary>
      <returns>新しいカウンター値。</returns>
      <param name="value">増やす値。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter.NextSample">
      <summary>カウンター サンプルを取得し、生の値または計算されない値を返します。</summary>
      <returns>カウンター サンプルに対する生の値または計算されない値を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter.RawValue">
      <summary>このカウンターの生の値または計算されない値を取得または設定します。</summary>
      <returns>カウンターの生の値。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter.RemoveInstance">
      <summary>PerformanceCounter オブジェクト InstanceName プロパティによって指定されたカテゴリ インスタンスを削除します。</summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager">
      <summary>パフォーマンス カウンターへのアクセスを提供します。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ConnectionMessagesReceivedPerSec">
      <summary>1 秒あたりに接続 (サーバーからクライアント) で受信したメッセージ数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ConnectionMessagesReceivedTotal">
      <summary>アプリケーションの開始後に (サーバーからクライアントへの) 接続が受信したメッセージの総数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ConnectionMessagesSentPerSec">
      <summary>1 秒あたりに接続 (クライアントからサーバー) で送信したメッセージ数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ConnectionMessagesSentTotal">
      <summary>アプリケーションの起動後に接続 (クライアントからサーバー) で送信したメッセージの総数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ConnectionsConnected">
      <summary>アプリケーションが起動されたとき以降の接続の Connect イベントの総数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ConnectionsCurrent">
      <summary>現在接続されている接続の数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ConnectionsDisconnected">
      <summary>アプリケーションが起動されたとき以降の接続の Disconnect イベントの総数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ConnectionsReconnected">
      <summary>アプリケーションが起動されたとき以降の接続の Reconnect イベントの総数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ErrorsAllPerSec">
      <summary>1 秒あたりに処理されたすべてのエラーの数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ErrorsAllTotal">
      <summary>アプリケーションの起動後に処理されたすべてのエラーの総数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ErrorsHubInvocationPerSec">
      <summary>1 秒あたりに処理されたハブの呼び出しエラーの数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ErrorsHubInvocationTotal">
      <summary>アプリケーションの起動後に処理されたハブの呼び出しエラーの総数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ErrorsHubResolutionPerSec">
      <summary>1 秒あたりに処理されたハブの解決エラーの数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ErrorsHubResolutionTotal">
      <summary>アプリケーションの起動後に処理されたハブの解決エラーの総数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ErrorsTransportPerSec">
      <summary>1 秒あたりに処理されたトランスポート エラーの数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ErrorsTransportTotal">
      <summary>アプリケーションの起動後に処理されたトランスポート エラーの総数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.Initialize(System.String,System.Threading.CancellationToken)">
      <summary>パフォーマンス カウンターを初期化します。</summary>
      <param name="instanceName">ホスト インスタンス名。</param>
      <param name="hostShutdownToken">ホストのシャットダウンを表す CancellationToken。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.LoadCounter(System.String,System.String,System.String,System.Boolean)">
      <summary>パフォーマンス カウンターを読み込みます。</summary>
      <param name="categoryName">カテゴリ名。</param>
      <param name="counterName">カウンター名。</param>
      <param name="instanceName">インスタンス名。</param>
      <param name="isReadOnly">コレクションが読み取り専用かどうか。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.MessageBusAllocatedWorkers">
      <summary>メッセージ バス内でメッセージを配信するために割り当てられたワーカーの数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.MessageBusBusyWorkers">
      <summary>メッセージ バス内で現在メッセージを配信中のワーカーの数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.MessageBusMessagesPublishedPerSec">
      <summary>1 秒あたりにメッセージ バスに対して発行されたメッセージの数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.MessageBusMessagesPublishedTotal">
      <summary>アプリケーションの起動後にメッセージ バスに対して発行されたメッセージの総数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.MessageBusMessagesReceivedPerSec">
      <summary>サブスクライバーが 1 秒あたりに受信したメッセージ数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.MessageBusMessagesReceivedTotal">
      <summary>アプリケーション起動後にサブスクライバーが受信したメッセージの総数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.MessageBusSubscribersCurrent">
      <summary>メッセージ バスの現在のサブスクライバーの数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.MessageBusSubscribersPerSec">
      <summary>1 秒あたりのメッセージ バスの新しいサブスクライバーの数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.MessageBusSubscribersTotal">
      <summary>アプリケーションの起動以降のメッセージ バスのサブスクライバーの総数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.MessageBusTopicsCurrent">
      <summary>メッセージ バス内の現在のトピック数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ScaleoutErrorsPerSec">
      <summary>1 秒あたりに処理されたスケールアウト エラーの数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ScaleoutErrorsTotal">
      <summary>アプリケーション起動後のスケールアウト エラーの総数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ScaleoutMessageBusMessagesReceivedPerSec">
      <summary>スケールアウト メッセージ バスが受信した 1 秒あたりのメッセージの数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ScaleoutSendQueueLength">
      <summary>現在のスケールアウト送信キューの長さを表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ScaleoutStreamCountBuffering">
      <summary>バッファリング状態のスケールアウト メッセージ バス プロバイダーに現在構成されている論理ストリームの数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ScaleoutStreamCountOpen">
      <summary>オープン状態のスケールアウト メッセージ バス プロバイダーに現在構成されている論理ストリームの数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ScaleoutStreamCountTotal">
      <summary>スケールアウト メッセージ バス プロバイダーに現在構成されている論理ストリームの数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.IProtectedData">
      <summary>SignalR インフラストラクチャに関連付けられているデータの暗号化と暗号化解除のメソッドを提供するインターフェイスを表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IProtectedData.Protect(System.String,System.String)">
      <summary>指定されたデータを保護します。</summary>
      <returns>保護されているデータ。</returns>
      <param name="data">保護するデータ。</param>
      <param name="purpose">保護の目的。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IProtectedData.Unprotect(System.String,System.String)">
      <summary>特定のデータの保護を解除します。</summary>
      <returns>保護されていないデータ。</returns>
      <param name="protectedValue">保護を解除される、保護された値。</param>
      <param name="purpose">保護を解除する理由。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.IServerIdManager">
      <summary>サーバー ID を生成します。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IServerIdManager.ServerId">
      <summary>サーバーの ID。</summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier">
      <summary>文字列のサイズを減らすクラスを表すインターフェイスを提供します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.Minify(System.String)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier" /> のこのインスタンスによって元に戻すことができるような方法で文字列を縮小します。</summary>
      <returns>文字 ,|\ を含まない <paramref name="value" /> の縮小された表現。</returns>
      <param name="value">縮小する文字列。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.RemoveUnminified(System.String)">
      <summary>この関数の呼び出しは、以前に <paramref name="value" /> から縮小された文字列の縮小解除の試みが null 戻り値で満たされる可能性があることを示します。これにより、<paramref name="value" /> を参照する内部データ構造をクリーンアップできます。</summary>
      <param name="value">以前に縮小された可能性のある文字列。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.Unminify(System.String)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier" /> のこのインスタンスに対して以前に少なくとも 1 回は実行され、その後で <paramref name="value" /> を返した <see cref="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.Minify(System.String)" /> の呼び出しと同じ引数を共有する <see cref="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.RemoveUnminified(System.String)" /> が呼び出されていない、<see cref="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.Minify(System.String)" /> の呼び出しを元に戻します。</summary>
      <returns>それ以前に行われて <paramref name="value" /> を返した <see cref="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.Minify(System.String)" /> のすべての呼び出しの引数。<see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier" /> のこのインスタンスに対する <see cref="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.Minify(System.String)" /> のすべての呼び出しで <paramref name="value" /> が返されていない場合、または <paramref name="value" /> を返した <see cref="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.Minify(System.String)" /> の最新の呼び出しの後で同じ引数を共有する <see cref="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.RemoveUnminified(System.String)" /> の呼び出しが行われた場合は、<see cref="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.Unminify(System.String)" /> は null を返す可能性がありますがスローはしません。</returns>
      <param name="value">以前の <see cref="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.Minify(System.String)" /> の呼び出しによって返された、縮小された文字列。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager">
      <summary>Windows パフォーマンス カウンターを使用してパフォーマンス カウンターを管理します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.#ctor">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.#ctor(Microsoft.AspNet.SignalR.DefaultDependencyResolver)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="resolver">既定の依存関係競合回避モジュール。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.#ctor(Microsoft.AspNet.SignalR.Tracing.ITraceManager)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.CategoryName">
      <summary>このパフォーマンス カウンターのパフォーマンス カウンター カテゴリの名前を指定します。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ConnectionMessagesReceivedPerSec">
      <summary>1 秒あたりに接続 (サーバーからクライアント) で受信したメッセージ数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ConnectionMessagesReceivedTotal">
      <summary>アプリケーションの開始後に (サーバーからクライアントへの) 接続が受信したメッセージの総数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ConnectionMessagesSentPerSec">
      <summary>1 秒あたりに接続 (クライアントからサーバー) で送信したメッセージ数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ConnectionMessagesSentTotal">
      <summary>アプリケーションの起動後に接続 (クライアントからサーバー) で送信したメッセージの総数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ConnectionsConnected">
      <summary>アプリケーションが起動されたとき以降の接続の Connect イベントの総数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ConnectionsCurrent">
      <summary>現在接続されている接続の数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ConnectionsDisconnected">
      <summary>アプリケーションが起動されたとき以降の接続の Disconnect イベントの総数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ConnectionsReconnected">
      <summary>アプリケーションが起動されたとき以降の接続の Reconnect イベントの総数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ErrorsAllPerSec">
      <summary>1 秒あたりに処理されたすべてのエラーの数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ErrorsAllTotal">
      <summary>アプリケーションの起動後に処理されたすべてのエラーの総数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ErrorsHubInvocationPerSec">
      <summary>1 秒あたりに処理されたハブの呼び出しエラーの数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ErrorsHubInvocationTotal">
      <summary>アプリケーションの起動後に処理されたハブの呼び出しエラーの総数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ErrorsHubResolutionPerSec">
      <summary>1 秒あたりに処理されたハブの解決エラーの数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ErrorsHubResolutionTotal">
      <summary>アプリケーションの起動後に処理されたハブの解決エラーの総数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ErrorsTransportPerSec">
      <summary>1 秒あたりに処理されたトランスポート エラーの数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ErrorsTransportTotal">
      <summary>アプリケーションの起動後に処理されたトランスポート エラーの総数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.Initialize(System.String,System.Threading.CancellationToken)">
      <summary>パフォーマンス カウンターを初期化します。</summary>
      <param name="instanceName">ホスト インスタンス名。</param>
      <param name="hostShutdownToken">ホストのシャットダウンを表す CancellationToken。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.LoadCounter(System.String,System.String,System.String,System.Boolean)">
      <summary>パフォーマンス カウンターを読み込みます。</summary>
      <param name="categoryName">カテゴリ名。</param>
      <param name="counterName">カウンター名。</param>
      <param name="instanceName">インスタンス名。</param>
      <param name="isReadOnly">カウンターが読み取り専用である場合は true。それ以外の場合は false。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.MessageBusAllocatedWorkers">
      <summary>メッセージ バス内でメッセージを配信するために割り当てられたワーカーの数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.MessageBusBusyWorkers">
      <summary>メッセージ バス内で現在メッセージを配信中のワーカーの数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.MessageBusMessagesPublishedPerSec">
      <summary>1 秒あたりにメッセージ バスに対して発行されたメッセージの数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.MessageBusMessagesPublishedTotal">
      <summary>アプリケーションの起動後にメッセージ バスに対して発行されたメッセージの総数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.MessageBusMessagesReceivedPerSec">
      <summary>サブスクライバーが 1 秒あたりに受信したメッセージ数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.MessageBusMessagesReceivedTotal">
      <summary>アプリケーション起動後にサブスクライバーが受信したメッセージの総数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.MessageBusSubscribersCurrent">
      <summary>メッセージ バスの現在のサブスクライバーの数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.MessageBusSubscribersPerSec">
      <summary>1 秒あたりのメッセージ バスの新しいサブスクライバーの数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.MessageBusSubscribersTotal">
      <summary>アプリケーションの起動以降のメッセージ バスのサブスクライバーの総数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.MessageBusTopicsCurrent">
      <summary>メッセージ バス内の現在のトピック数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ScaleoutErrorsPerSec">
      <summary>1 秒あたりに処理されたスケールアウト エラーの数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ScaleoutErrorsTotal">
      <summary>アプリケーション起動後のスケールアウト エラーの総数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ScaleoutMessageBusMessagesReceivedPerSec">
      <summary>スケールアウト メッセージ バスが受信した 1 秒あたりのメッセージの数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ScaleoutSendQueueLength">
      <summary>現在のスケールアウト送信キューの長さを表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ScaleoutStreamCountBuffering">
      <summary>バッファリング状態のスケールアウト メッセージ バス プロバイダーに現在構成されている論理ストリームの数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ScaleoutStreamCountOpen">
      <summary>オープン状態のスケールアウト メッセージ バス プロバイダーに現在構成されている論理ストリームの数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ScaleoutStreamCountTotal">
      <summary>スケールアウト メッセージ バス プロバイダーに現在構成されている論理ストリームの数を表すパフォーマンス カウンターを取得します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" /> を返します。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.PrincipalUserIdProvider"></member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.PrincipalUserIdProvider.#ctor"></member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.PrincipalUserIdProvider.GetUserId(Microsoft.AspNet.SignalR.IRequest)"></member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.ProtocolResolver">
      <summary>Provides method for resolving protocol.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.ProtocolResolver.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.ProtocolResolver" /> class.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.ProtocolResolver.#ctor(System.Version,System.Version)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.ProtocolResolver" /> class.</summary>
      <param name="min">The minimum version of the protocol to resolve.</param>
      <param name="max">The maximum version of the protocol to resolve.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.ProtocolResolver.Resolve(Microsoft.AspNet.SignalR.IRequest)">
      <summary>Resolves the protocol in the specified SignalR request.</summary>
      <param name="request">The request to resolve.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.Purposes">
      <summary>目的の定数を指定します。</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Infrastructure.Purposes.ConnectionToken">
      <summary>ConnectionToken 定数。</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Infrastructure.Purposes.Groups">
      <summary>Groups 定数。</summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.ServerCommandType">
      <summary>サーバー コマンドを指定します。</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Infrastructure.ServerCommandType.RemoveConnection">
      <summary>RemoveConnection コマンド。</summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.ServerIdManager">
      <summary>既定の <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IServerIdManager" /> の実装。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.ServerIdManager.#ctor">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.ServerIdManager" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.ServerIdManager.ServerId">
      <summary>サーバーの ID を取得または設定します。</summary>
      <returns>サーバーの ID。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Json.IJsonValue">
      <summary>JSON 値を表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Json.IJsonValue.CanConvertTo(System.Type)">
      <summary>パラメーター値を指定された <see cref="T:System.Type" /> に変換します。</summary>
      <returns>変換されたパラメーター値。</returns>
      <param name="type">パラメーターの変換先の <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Json.IJsonValue.ConvertTo(System.Type)">
      <summary>パラメーター値を指定された <see cref="T:System.Type" /> に変換します。</summary>
      <returns>変換されたパラメーター値。</returns>
      <param name="type">パラメーターの変換先の <see cref="T:System.Type" />。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Json.IJsonWritable">
      <summary>実装はそれぞれの JSON へのシリアル化を処理します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Json.IJsonWritable.WriteJson(System.IO.TextWriter)">
      <summary>
        <see cref="T:System.IO.TextWriter" /> によって自身を JSON にシリアル化します。</summary>
      <param name="writer">JSON にシリアル化されたオブジェクトを受け取る <see cref="T:System.IO.TextWriter" />。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Json.JsonSerializerExtensions">
      <summary>
        <see cref="T:Newtonsoft.Json.JsonSerializer" /> の拡張。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Json.JsonSerializerExtensions.Parse``1(Newtonsoft.Json.JsonSerializer,System.ArraySegment{System.Byte},System.Text.Encoding)">
      <summary>JSON から .NET オブジェクトに逆シリアル化します。</summary>
      <returns>JSON 文字列から逆シリアル化されたオブジェクト。</returns>
      <param name="serializer">シリアライザー。</param>
      <param name="jsonBuffer">逆シリアル化する JSON バッファー。</param>
      <param name="encoding">使用するエンコーディング。</param>
      <typeparam name="T">逆シリアル化されるオブジェクトの <see cref="T:System.Type" />。</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Json.JsonSerializerExtensions.Parse``1(Newtonsoft.Json.JsonSerializer,System.String)">
      <summary>JSON から .NET オブジェクトに逆シリアル化します。</summary>
      <returns>JSON 文字列から逆シリアル化されたオブジェクト。</returns>
      <param name="serializer">シリアライザー。</param>
      <param name="json">逆シリアル化する JSON。</param>
      <typeparam name="T">逆シリアル化されるオブジェクトの <see cref="T:System.Type" />。</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Json.JsonSerializerExtensions.Serialize(Newtonsoft.Json.JsonSerializer,System.Object,System.IO.TextWriter)">
      <summary>指定されたオブジェクトを <see cref="T:System.IO.TextWriter" /> にシリアル化します。</summary>
      <param name="serializer">JSON シリアライザー</param>
      <param name="value">シリアル化するオブジェクト。</param>
      <param name="writer">オブジェクトのシリアル化先の <see cref="T:System.IO.TextWriter" />。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Json.JsonSerializerExtensions.Stringify(Newtonsoft.Json.JsonSerializer,System.Object)">
      <summary>指定されたオブジェクトを JSON 文字列にシリアル化します。</summary>
      <returns>オブジェクトの JSON 文字列表現。</returns>
      <param name="serializer">シリアライザー。</param>
      <param name="value">シリアル化するオブジェクト。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Json.JsonUtility">
      <summary> 共通の JSON 処理のヘルパー クラス。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Json.JsonUtility.CamelCase(System.String)">
      <summary>指定された名前をキャメル ケースに変換します。</summary>
      <returns>指定された <paramref name="name" /> のキャメル ケース値。</returns>
      <param name="name">変換する値。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Json.JsonUtility.CreateDefaultSerializer">
      <summary>既定の設定で <see cref="T:Newtonsoft.Json.JsonSerializer" /> インスタンスを作成します。</summary>
      <returns>新しく作成された <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> オブジェクト。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Json.JsonUtility.CreateDefaultSerializerSettings">
      <summary>既定の <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> インスタンスを作成します。</summary>
      <returns>新しく作成された <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> オブジェクト。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Json.JsonUtility.CreateJsonpCallback(System.String,System.String)">
      <summary>JSONP コールバックを作成します。</summary>
      <returns>コールバックを表す <see cref="T:System.String" />。</returns>
      <param name="callback">作成するコールバック。</param>
      <param name="payload">ペイロード。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Json.JsonUtility.JavaScriptMimeType">
      <summary>Javascript の MIME 型を取得します。</summary>
      <returns>Javascript の MIME 型。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Json.JsonUtility.JsonMimeType">
      <summary>この JSON ユーティリティの MIME 型を取得します。</summary>
      <returns>この JSON ユーティリティの MIME 型。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.Command">
      <summary>SignalR メッセージングで使用するコマンドを表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Command.#ctor">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Messaging.Command" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Command.CommandType">
      <summary>コマンドの種類を取得または設定します。</summary>
      <returns>コマンドの種類。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Command.Id">
      <summary>コマンド識別子を取得または設定します。</summary>
      <returns>コマンド識別子。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Command.Value">
      <summary>コマンドの値を取得または設定します。</summary>
      <returns>コマンドの値。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Command.WaitForAck">
      <summary>コマンドが実行前に認証を待つかどうかを取得または設定します。</summary>
      <returns>コマンドが実行前に認証を待つ場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.CommandType">
      <summary>接続メッセージのコマンドを列挙します。</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Messaging.CommandType.Abort">
      <summary />
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Messaging.CommandType.AddToGroup">
      <summary />
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Messaging.CommandType.Disconnect">
      <summary />
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Messaging.CommandType.Initializing">
      <summary>接続を開始するコマンドを指定します。</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Messaging.CommandType.RemoveFromGroup">
      <summary />
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.IMessageBus">
      <summary>SignalR メッセージ バスにメッセージを発行し、SignalR メッセージ バスからメッセージをサブスクライブするために使用するメソッドを提供します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.IMessageBus.Publish(Microsoft.AspNet.SignalR.Messaging.Message)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.IMessageBus.Subscribe(Microsoft.AspNet.SignalR.Messaging.ISubscriber,System.String,System.Func{Microsoft.AspNet.SignalR.Messaging.MessageResult,System.Object,System.Threading.Tasks.Task{System.Boolean}},System.Int32,System.Object)">
      <summary>メッセージ バス上のサブスクライバーのトピック サブスクリプションを設定します。</summary>
      <returns>サブスクリプションの状態。</returns>
      <param name="subscriber">サブスクライバー。</param>
      <param name="cursor">サブスクリプションの作業を示す読み取りカーソル。</param>
      <param name="callback">コールバック関数。</param>
      <param name="maxMessages">メッセージ バッファーのサイズ。</param>
      <param name="state">コールバック操作の状態。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.ISubscriber">
      <summary>SignalR メッセージ バスのサブスクライバーに関する詳細を提供します。</summary>
    </member>
    <member name="E:Microsoft.AspNet.SignalR.Messaging.ISubscriber.EventKeyAdded"></member>
    <member name="E:Microsoft.AspNet.SignalR.Messaging.ISubscriber.EventKeyRemoved"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ISubscriber.EventKeys"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ISubscriber.Identity"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ISubscriber.Subscription">
      <summary>サブスクリプションを取得または設定します。</summary>
      <returns>サブスクリプション。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ISubscriber.WriteCursor">
      <summary>書き込みカーソルを取得または設定します。</summary>
      <returns>書き込みカーソル。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.ISubscription">
      <summary>作業を実行し、サブスクリプションの状態をコントロールするメソッドを提供します。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ISubscription.Identity">
      <summary>サブスクリプションの ID を取得または設定します。</summary>
      <returns>サブスクリプションの ID。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ISubscription.SetQueued">
      <summary>サブスクリプションを作業中の状態に設定します。</summary>
      <returns>サブスクリプションが作業中の状態に設定された場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ISubscription.UnsetQueued">
      <summary>サブスクリプションをアイドル状態に設定します。</summary>
      <returns>サブスクリプションがアイドル状態に設定された場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ISubscription.Work">
      <summary>このサブスクリプションによってサブスクライブされたメッセージで作業を実行します。</summary>
      <returns>サブスクライブされたメッセージでの操作を表すタスク。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.LocalEventKeyInfo">
      <summary>ここの内容は更新されません。ここに素材を追加しないでください。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.LocalEventKeyInfo.#ctor(System.String,System.UInt64,Microsoft.AspNet.SignalR.Messaging.MessageStore{Microsoft.AspNet.SignalR.Messaging.Message})">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Messaging.LocalEventKeyInfo" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="key">ローカル イベントに関連付けられているキー。</param>
      <param name="id">キーの情報に関連付けられている識別子。</param>
      <param name="store">ローカル イベント キーに関連付けられているメッセージ ストア。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.LocalEventKeyInfo.Id">
      <summary>キーの情報に関連付けられている識別子を取得または設定します。</summary>
      <returns>キーの情報に関連付けられている識別子。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.LocalEventKeyInfo.Key">
      <summary>ローカル イベントに関連付けられているキーを取得または設定します。</summary>
      <returns>ローカル イベントに関連付けられているキー。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.LocalEventKeyInfo.MessageStore">
      <summary>キーのメッセージを取得します。</summary>
      <returns>キーのメッセージ。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.Message">
      <summary>ここの内容は更新されません。ここに素材を追加しないでください。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Message.#ctor">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Messaging.Message" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Message.#ctor(System.String,System.String,System.ArraySegment{System.Byte})"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Message.#ctor(System.String,System.String,System.String)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Messaging.Message" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="source">メッセージのソース。</param>
      <param name="key">キー メッセージ。</param>
      <param name="value">メッセージの値。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Message.CommandId">
      <summary>メッセージのコマンド識別子を取得または設定します。</summary>
      <returns>メッセージのコマンド識別子。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Message.Encoding">
      <summary>メッセージのエンコード。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Message.Filter">
      <summary>メッセージ フィルターを取得または設定します。</summary>
      <returns>メッセージ フィルター。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Message.GetString"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Message.IsAck">
      <summary>メッセージが確認メッセージであるかどうかを示す値を取得または設定します。</summary>
      <returns>メッセージが確認メッセージである場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Message.IsCommand">
      <summary>メッセージがコマンド メッセージであるかどうかを示す値を取得または設定します。</summary>
      <returns>メッセージがコマンド メッセージである場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Message.Key">
      <summary>メッセージのキーを取得または設定します。</summary>
      <returns>メッセージのキー。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Message.MappingId">
      <summary>ペイロード ID。スケールアウト シナリオでのみ使用されます。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Message.ReadFrom(System.IO.Stream)"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Message.Source">
      <summary>メッセージのソースを取得または設定します。</summary>
      <returns>メッセージのソース。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Message.StreamIndex">
      <summary>このメッセージの発生元のストリーム インデックス。スケールアウト シナリオでのみ使用されます。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Message.Value">
      <summary>メッセージの値を取得または設定します。</summary>
      <returns>メッセージの値。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Message.WaitForAck">
      <summary>メッセージが確認を待機するかどうかを示す値を取得または設定します。</summary>
      <returns>メッセージが確認を待機する場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Message.WriteTo(System.IO.Stream)"></member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.MessageBroker">
      <summary>特定のサブスクリプションに対して行われる作業のスケジュールを設定し、スケジュールする作業を処理するためのワーカー (スレッド プール スレッド) の数を選択するためのアルゴリズムを保持しています。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBroker.#ctor(Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Messaging.MessageBroker" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="performanceCounterManager">パフォーマンス カウンター マネージャー。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBroker.Dispose">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Messaging.MessageBroker" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBroker.Dispose(System.Boolean)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Messaging.MessageBroker" /> によって使用されているすべてのリソースを解放します。</summary>
      <param name="disposing">マネージ リソースとアンマネージ リソースを解放する場合は true。アンマネージ リソースだけを解放する場合は false。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBroker.Schedule(Microsoft.AspNet.SignalR.Messaging.ISubscription)">
      <summary>指定されたサブスクリプションでの作業をスケジュールします。</summary>
      <param name="subscription">スケジュールされるサブスクリプション。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.MessageBroker.Trace">
      <summary>ブローカーのトレース ソースを取得または設定します。</summary>
      <returns>ブローカーのトレース ソース。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.MessageBus">
      <summary>SignalR のメッセージ バスを表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBus.#ctor(Microsoft.AspNet.SignalR.IDependencyResolver)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBus.#ctor(Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier,Microsoft.AspNet.SignalR.Tracing.ITraceManager,Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager,Microsoft.AspNet.SignalR.Configuration.IConfigurationManager,System.Int32)"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.MessageBus.Counters"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBus.CreateSubscription(Microsoft.AspNet.SignalR.Messaging.ISubscriber,System.String,System.Func{Microsoft.AspNet.SignalR.Messaging.MessageResult,System.Object,System.Threading.Tasks.Task{System.Boolean}},System.Int32,System.Object)">
      <summary>サブスクライバーに新しいサブスクリプションを作成します。</summary>
      <returns>新しく作成されたサブスクリプション。</returns>
      <param name="subscriber">サブスクライバー。</param>
      <param name="cursor">サブスクリプションの作業を示す読み取りカーソル。</param>
      <param name="callback">コールバック関数。</param>
      <param name="messageBufferSize">メッセージ バッファーのサイズ。</param>
      <param name="state">コールバック操作の状態。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBus.CreateTopic(System.String)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBus.Dispose"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBus.Dispose(System.Boolean)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBus.Publish(Microsoft.AspNet.SignalR.Messaging.Message)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBus.Save(Microsoft.AspNet.SignalR.Messaging.Message)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBus.ScheduleEvent(System.String)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBus.Subscribe(Microsoft.AspNet.SignalR.Messaging.ISubscriber,System.String,System.Func{Microsoft.AspNet.SignalR.Messaging.MessageResult,System.Object,System.Threading.Tasks.Task{System.Boolean}},System.Int32,System.Object)">
      <summary>メッセージ バス上のサブスクライバーのトピック サブスクリプションを設定します。</summary>
      <returns>サブスクリプションの状態。</returns>
      <param name="subscriber">サブスクライバー。</param>
      <param name="cursor">サブスクリプションの作業を示す読み取りカーソル。</param>
      <param name="callback">コールバック関数。</param>
      <param name="maxMessages">メッセージ バッファーのサイズ。</param>
      <param name="state">コールバック操作の状態。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.MessageBus.Topics"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.MessageBus.Trace">
      <summary>コードの実行をトレースするために使用するトレース ソースを取得します。</summary>
      <returns>コードの実行をトレースするために使用するトレース ソース。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.MessageBusExtensions">
      <summary>SignalR メッセージ バスの拡張メソッドを提供します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBusExtensions.Enumerate(System.Collections.Generic.IList{System.ArraySegment{Microsoft.AspNet.SignalR.Messaging.Message}},System.Action{Microsoft.AspNet.SignalR.Messaging.Message})"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBusExtensions.Enumerate``1(System.Collections.Generic.IList{System.ArraySegment{Microsoft.AspNet.SignalR.Messaging.Message}},System.Func{Microsoft.AspNet.SignalR.Messaging.Message,System.Boolean},System.Action{``0,Microsoft.AspNet.SignalR.Messaging.Message},``0)">
      <summary>メッセージを列挙します。</summary>
      <param name="messages">列挙するメッセージを含む一覧。</param>
      <param name="filter">列挙されるメッセージをフィルターするメソッド。</param>
      <param name="onMessage">列挙されるメッセージを処理するメソッド。</param>
      <param name="state">操作の状態を表すオブジェクト。</param>
      <typeparam name="T">
        <paramref name="state" /> パラメーターの型。</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBusExtensions.Publish(Microsoft.AspNet.SignalR.Messaging.IMessageBus,System.String,System.String,System.String)"></member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.MessageResult">
      <summary>メッセージの結果を表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageResult.#ctor(System.Boolean)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Messaging.MessageResult" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="terminal">これがターミナル メッセージの結果であることを示す場合は true。それ以外の場合は false。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageResult.#ctor(System.Collections.Generic.IList{System.ArraySegment{Microsoft.AspNet.SignalR.Messaging.Message}},System.Int32)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Messaging.MessageResult" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="messages">この <see cref="T:Microsoft.AspNet.SignalR.Messaging.MessageResult" /> に関連付けられたメッセージの配列。</param>
      <param name="totalCount">メッセージ配列に設定されるメッセージの数。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.MessageResult.Messages">
      <summary>結果に関連付けられた <see cref="T:System.Collections.Generic.IList`1" /> を取得します。</summary>
      <returns>結果に関連付けられた <see cref="T:System.Collections.Generic.IList`1" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.MessageResult.Terminal">
      <summary>これがターミナル メッセージの結果であるどうかを示す値を取得または設定します。</summary>
      <returns>これがターミナル メッセージの結果である場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Messaging.MessageResult.TerminalMessage">
      <summary>これがターミナル メッセージの結果であるかどうかを指定します。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.MessageResult.TotalCount">
      <summary>メッセージ配列に設定されるメッセージの数を取得または設定します。</summary>
      <returns>メッセージ配列に設定されるメッセージの数。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.MessageStore`1">
      <summary>リング バッファーに基づくメッセージ ストアを表します。</summary>
      <typeparam name="T">ストア内の要素の型。</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageStore`1.#ctor(System.UInt32)">
      <summary>指定された容量を使用して <see cref="T:Microsoft.AspNet.SignalR.Messaging.MessageStore`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="capacity">ストアの最小容量。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageStore`1.#ctor(System.UInt32,System.UInt32)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Messaging.MessageStore`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="capacity">ストアの最小容量。</param>
      <param name="offset">ストア内の最初のメッセージのオフセット。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageStore`1.Add(`0)">
      <summary>ストアにメッセージを追加し、新しく追加されたメッセージの ID を返します。</summary>
      <returns>新しく追加されたメッセージの ID。</returns>
      <param name="message">追加するメッセージ。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageStore`1.GetMessageCount">
      <summary>ストア内のメッセージの数を取得します。</summary>
      <returns>ストア内のメッセージの数。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageStore`1.GetMessages(System.UInt64,System.Int32)">
      <summary>指定された ID から開始して、次のバッチのメッセージを取得します。</summary>
      <returns>次のバッチのメッセージ</returns>
      <param name="firstMessageId">最初のメッセージ ID。</param>
      <param name="maxMessages">返すメッセージの最大数。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.MessageStoreResult`1">
      <summary>メッセージ ストアに関連付けられた結果を表します。</summary>
      <typeparam name="T">結果の型。</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageStoreResult`1.#ctor(System.UInt64,System.ArraySegment{`0},System.Boolean)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Messaging.MessageStoreResult`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="firstMessageId">最初のメッセージの識別子。</param>
      <param name="messages">結果に関連付けられているメッセージ。</param>
      <param name="hasMoreData">結果に追加のデータが含まれている場合は true。それ以外の場合は false。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.MessageStoreResult`1.FirstMessageId">
      <summary>最初のメッセージの ID を取得します。</summary>
      <returns>最初のメッセージの識別子。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.MessageStoreResult`1.HasMoreData">
      <summary>さらに多くのデータが結果に含まれるかどうかを取得します。</summary>
      <returns>結果に追加のデータが含まれている場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.MessageStoreResult`1.Messages">
      <summary>結果に関連付けられたメッセージを取得します。</summary>
      <returns>結果に関連付けられているメッセージ。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutConfiguration">
      <summary>スケールアウト メッセージ バス実装の共通の設定を表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutConfiguration.#ctor">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutConfiguration" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Messaging.ScaleoutConfiguration.DisableQueuing">
      <summary>現在、キューは無効になっています。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ScaleoutConfiguration.MaxQueueLength">
      <summary>送信キューの最大長を取得または設定します。</summary>
      <returns>送信キューの最大長。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutMapping">
      <summary>ここの内容は更新されません。ここに素材を追加しないでください。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMapping.#ctor(System.UInt64,Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMapping.#ctor(System.UInt64,Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage,System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Messaging.LocalEventKeyInfo})"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ScaleoutMapping.Id"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ScaleoutMapping.LocalKeyInfo"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ScaleoutMapping.ServerCreationTime"></member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutMappingStore">
      <summary>Represents a scale out mapping store on SignalR messaging.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMappingStore.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutMappingStore" /> class.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMappingStore.Add(System.UInt64,Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage,System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Messaging.LocalEventKeyInfo})">
      <summary>Adds a new scaleout mapping store.</summary>
      <param name="id">The identifier.</param>
      <param name="message">The message.</param>
      <param name="localKeyInfo">The local key information.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMappingStore.GetEnumerator(System.UInt64)">
      <summary>Gets the enumerator for the mapping store.</summary>
      <returns>The enumerator for the mapping store.</returns>
      <param name="id">The identifier.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ScaleoutMappingStore.MaxMapping">
      <summary>Gets the maximum numbers of mapping for this instance.</summary>
      <returns>The maximum numbers of mapping for this instance.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage">
      <summary>Represents a message to the scaleout backplane.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage" /> class.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage.#ctor(System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Messaging.Message})">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage" /> class.</summary>
      <param name="messages">The messages from SignalR.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage.FromBytes(System.Byte[])">
      <summary>Creates a new instance of the <see cref="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage" /> class from the specified data in bytes.</summary>
      <returns>The created instance of the <see cref="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage" />.</returns>
      <param name="data">The data in bytes.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage.Messages">
      <summary>Gets or sets the messages from SignalR.</summary>
      <returns>The messages from SignalR.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage.ServerCreationTime">
      <summary>Gets or sets the time the message was created on the origin server.</summary>
      <returns>The time the message was created on the origin server.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage.ToBytes">
      <summary>Converts a <see cref="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage" /> object to bytes.</summary>
      <returns>The converted <see cref="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage" /> object to bytes.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus">
      <summary>スケールアウト メッセージ バス実装の共通の基本クラスを表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus.#ctor(Microsoft.AspNet.SignalR.IDependencyResolver,Microsoft.AspNet.SignalR.Messaging.ScaleoutConfiguration)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus.Close(System.Int32)">
      <param name="streamIndex">閉じるストリームのインデックス。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus.CreateSubscription(Microsoft.AspNet.SignalR.Messaging.ISubscriber,System.String,System.Func{Microsoft.AspNet.SignalR.Messaging.MessageResult,System.Object,System.Threading.Tasks.Task{System.Boolean}},System.Int32,System.Object)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus.Dispose(System.Boolean)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus.OnError(System.Int32,System.Exception)">
      <summary>メッセージ送信の指定されたキューを閉じます。すべての送信は非同期に失敗します。</summary>
      <param name="streamIndex">閉じるストリームのインデックス。</param>
      <param name="exception">発生したエラー。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus.OnReceived(System.Int32,System.UInt64,Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage)">
      <summary>ペイロードがバックプレーンから受信されると呼び出されます。アクティブな呼び出しは一度に 1 つだけ存在します。</summary>
      <param name="streamIndex">ストリームの ID。</param>
      <param name="id">ストリーム内のペイロードの ID。</param>
      <param name="message">スケールアウト メッセージ。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus.Open(System.Int32)">
      <param name="streamIndex">開くストリームのインデックス。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus.Publish(Microsoft.AspNet.SignalR.Messaging.Message)">
      <summary>スケールアウト メッセージ バスからメッセージを発行します。</summary>
      <returns>メッセージを発行する操作を表すタスク。</returns>
      <param name="message">発行するメッセージ。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus.Send(System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Messaging.Message})">
      <summary>SignalR スケールアウト メッセージ バスからメッセージを送信します。</summary>
      <returns>メッセージを送信する操作を表すタスク。</returns>
      <param name="messages">送信するメッセージ。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus.Send(System.Int32,System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Messaging.Message})"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus.StreamCount">
      <summary>このインスタンスの有効期間中は、ストリームの数は変わりません。</summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutStore">
      <summary>Represents a message store that is backed by a ring buffer.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutStore.#ctor(System.UInt32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutStore" /> class.</summary>
      <param name="capacity">The minimum capacity of the store.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutStore.Add(Microsoft.AspNet.SignalR.Messaging.ScaleoutMapping)">
      <summary>Adds a message to the store and returns the ID of the newly added message.</summary>
      <returns>The ID of the newly added message.</returns>
      <param name="mapping">The mapping used in the store.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ScaleoutStore.FragmentCount">
      <summary>Gets or sets the number of message fragments in the store.</summary>
      <returns>The number of message fragments.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ScaleoutStore.FragmentSize">
      <summary>Gets or sets the size of the message fragment.</summary>
      <returns>The size of the message fragment.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutStore.GetMessages(System.UInt64)">
      <summary>Gets the next batch of messages, beginning with the specified ID. </summary>
      <returns>The next batch of messages.</returns>
      <param name="firstMessageIdRequestedByClient">The first message ID requested by the client.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutStore.GetMessagesByMappingId(System.UInt64)">
      <summary>Gets the next batch of messages for the specified mapping ID.</summary>
      <returns>The next batch of messages.</returns>
      <param name="mappingId">The mapping ID.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ScaleoutStore.MaxMapping">
      <summary>Gets or sets the maximum mapping ID.</summary>
      <returns>The maximum mapping ID.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutSubscription">
      <summary>スケール アウトされたサブスクリプションを表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutSubscription.#ctor(System.String,System.Collections.Generic.IList{System.String},System.String,System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Messaging.ScaleoutMappingStore},System.Func{Microsoft.AspNet.SignalR.Messaging.MessageResult,System.Object,System.Threading.Tasks.Task{System.Boolean}},System.Int32,Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager,System.Object)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutSubscription" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="identity">サブスクリプション ID。</param>
      <param name="eventKeys">サブスクリプションのイベント キー。</param>
      <param name="cursor">書き込みカーソル。</param>
      <param name="streams">書き込みカーソルとの関連付けに使用されるストリーム。</param>
      <param name="callback">サブスクリプションの状態が変更したときに実行するコールバック関数。</param>
      <param name="maxMessages">このサブスクリプションに割り当てられたメッセージの最大数。</param>
      <param name="counters">サブスクリプションのパフォーマンス カウンターにアクセスするために使用するオブジェクト。</param>
      <param name="state">サブスクリプションの状態。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutSubscription.BeforeInvoke(System.Object)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutSubscription.PerformWork(System.Collections.Generic.IList{System.ArraySegment{Microsoft.AspNet.SignalR.Messaging.Message}},System.Int32@,System.Object@)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutSubscription.WriteCursor(System.IO.TextWriter)">
      <summary>指定したテキスト ライターを使用してカーソルを書き込みます。</summary>
      <param name="textWriter">カーソルの書き込みに使用するテキスト ライター。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.Subscription">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Messaging.ISubscription" /> クラスの実装を表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.#ctor(System.String,System.Collections.Generic.IList{System.String},System.Func{Microsoft.AspNet.SignalR.Messaging.MessageResult,System.Object,System.Threading.Tasks.Task{System.Boolean}},System.Int32,Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager,System.Object)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Messaging.Subscription" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="identity">サブスクリプションの ID。</param>
      <param name="eventKeys">サブスクリプションのイベント キーを含む一覧。</param>
      <param name="callback">サブスクリプションの状態が変更したときに実行するコールバック関数。</param>
      <param name="maxMessages">このサブスクリプションに割り当てられたメッセージの最大数。</param>
      <param name="counters">サブスクリプションのパフォーマンス カウンターにアクセスするために使用するオブジェクト。</param>
      <param name="state">サブスクリプションの状態。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.AddEvent(System.String,Microsoft.AspNet.SignalR.Messaging.Topic)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.BeforeInvoke(System.Object)"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Subscription.Disposable">
      <summary>サブスクリプションのリソースを破棄するために使用するメソッドを取得または設定します。</summary>
      <returns>サブスクリプションのリソースを破棄するために使用するメソッド。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.Dispose"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.Dispose(System.Boolean)"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Subscription.EventKeys"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Subscription.Identity"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.Invoke(Microsoft.AspNet.SignalR.Messaging.MessageResult)"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Subscription.MaxMessages"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.PerformWork(System.Collections.Generic.IList{System.ArraySegment{Microsoft.AspNet.SignalR.Messaging.Message}},System.Int32@,System.Object@)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.RemoveEvent(System.String)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.SetEventTopic(System.String,Microsoft.AspNet.SignalR.Messaging.Topic)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.SetQueued"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.UnsetQueued"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.Work"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.WriteCursor(System.IO.TextWriter)">
      <summary>指定したテキスト ライターを使用してカーソルを書き込みます。</summary>
      <param name="textWriter">カーソルの書き込みに使用するテキスト ライター。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.Topic">
      <summary>SignalR メッセージ バスのトピックを表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Topic.#ctor(System.UInt32,System.TimeSpan)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Messaging.Topic" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="storeSize">メッセージ ストアのサイズ。</param>
      <param name="lifespan">トピックの有効期限。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Topic.AddSubscription(Microsoft.AspNet.SignalR.Messaging.ISubscription)">
      <summary>指定されたサブスクリプションを一覧に追加します。</summary>
      <param name="subscription">追加するサブスクリプション。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Topic.IsExpired">
      <summary>トピックの有効期限が切れたかどうかを示す値を取得します。</summary>
      <returns>トピックの有効期限が切れた場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Topic.LastUsed">
      <summary>サブスクリプションが使用された最終時刻を取得または設定します。</summary>
      <returns>サブスクリプションが使用された最終時刻。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Topic.MarkUsed"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Topic.RemoveSubscription(Microsoft.AspNet.SignalR.Messaging.ISubscription)">
      <summary>指定されたサブスクリプションを一覧から削除します。</summary>
      <param name="subscription">削除するサブスクリプション。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Topic.Store">
      <summary>メッセージ ストアを取得または設定します。</summary>
      <returns>メッセージ ストア。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Topic.SubscriptionLock">
      <summary>トピックのロックに使用するオブジェクトを取得または設定します。</summary>
      <returns>トピックのロックに使用するオブジェクト。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Topic.Subscriptions">
      <summary>トピック サブスクリプションを含む一覧を取得または設定します。</summary>
      <returns>トピック サブスクリプションを含む一覧。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.TopicLookup">
      <summary>ルックアップとして使用されるトピックのコレクションを表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.TopicLookup.#ctor">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Messaging.TopicLookup" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.TopicLookup.Clear">
      <summary>コレクションからすべてのトピックを削除します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.TopicLookup.ContainsKey(System.String)">
      <summary>指定されたキーを持つトピックがコレクションに含まれているかどうかを判断します。</summary>
      <returns>指定されたキーを持つトピックがコレクションに含まれている場合は true。それ以外の場合は false。</returns>
      <param name="key">トピックのキー。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.TopicLookup.Count">
      <summary>コレクション内のすべてのトピック (全般およびグループ) の数を取得します。</summary>
      <returns>コレクション内のすべてのトピック (全般およびグループ) の数。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.TopicLookup.GetEnumerator">
      <summary>コレクションを反復処理する列挙子を取得します。</summary>
      <returns>コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.TopicLookup.GetOrAdd(System.String,System.Func{System.String,Microsoft.AspNet.SignalR.Messaging.Topic})">
      <summary>キーがまだ存在しない場合、指定された関数を使用してトピックをコレクションに追加します。</summary>
      <returns>指定されたキーに対して生成されたトピック。</returns>
      <param name="key">追加するトピックのキー。</param>
      <param name="factory">キーのトピックの生成に使用される関数。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.TopicLookup.Item(System.String)">
      <summary>指定されたキーを持つトピックを取得します。</summary>
      <returns>指定されたキーを持つトピックが見つかった場合は、そのトピック。トピックが見つからない場合は null。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.TopicLookup.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を取得します。</summary>
      <returns>コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.TopicLookup.TryGetValue(System.String,Microsoft.AspNet.SignalR.Messaging.Topic@)">
      <summary>コレクションから、指定されたキーを持つトピックの取得を試みます。</summary>
      <returns>キーが見つかった場合は true。それ以外の場合は false。</returns>
      <param name="key">取得するキー。</param>
      <param name="topic">このメソッドから制御が戻るとき、取得されたトピックが含まれます。このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.TopicLookup.TryRemove(System.String)">
      <summary>コレクションから、指定されたキーを持つトピックを削除し、返すことを試みます。</summary>
      <returns>削除されたトピック。</returns>
      <param name="key">削除するトピックのキー。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Owin.ServerRequest">
      <summary>サーバー要求を表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Owin.ServerRequest.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Owin.ServerRequest" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="environment">環境。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Owin.ServerRequest.Cookies">
      <summary>サーバーに関連付けられた Cookie を取得します。</summary>
      <returns>サーバーに関連付けられた Cookie。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Owin.ServerRequest.Environment"></member>
    <member name="P:Microsoft.AspNet.SignalR.Owin.ServerRequest.Headers">
      <summary>要求に関連付けられたヘッダーを取得します。</summary>
      <returns>要求に関連付けられたヘッダー。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Owin.ServerRequest.LocalPath"></member>
    <member name="P:Microsoft.AspNet.SignalR.Owin.ServerRequest.QueryString">
      <summary>サーバー クエリ文字列変数のコレクションを取得します。</summary>
      <returns>サーバー クエリ文字列変数のコレクション。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Owin.ServerRequest.ReadForm"></member>
    <member name="P:Microsoft.AspNet.SignalR.Owin.ServerRequest.Url">
      <summary>現在の要求の URL に関する情報を取得します。</summary>
      <returns>現在の要求の URL に関する情報を含む <see cref="T:System.Uri" /> オブジェクト。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Owin.ServerRequest.User">
      <summary>このサーバーのユーザーを取得します。</summary>
      <returns>このサーバーのユーザー。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Owin.ServerResponse">
      <summary>要求に応じたサーバー フィードバックを表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Owin.ServerResponse.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Owin.ServerResponse" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="environment">環境。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Owin.ServerResponse.CancellationToken">
      <summary>応答に関連付けられたキャンセル トークンを取得します。</summary>
      <returns>応答に関連付けられたキャンセル トークン。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Owin.ServerResponse.ContentType">
      <summary>応答に関連付けられたコンテンツ タイプを取得または設定します。</summary>
      <returns>応答に関連付けられたコンテンツ タイプ。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Owin.ServerResponse.Flush">
      <summary>このインスタンスをフラッシュします。</summary>
      <returns>フラッシュされるインスタンス。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Owin.ServerResponse.Write(System.ArraySegment{System.Byte})">
      <summary>関連付けられた配列セグメントを使用して応答を書き込みます。</summary>
      <param name="data">配列セグメント。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Owin.Middleware.HubDispatcherMiddleware">
      <summary>Represents the middleware used by the hub dispatcher.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Owin.Middleware.HubDispatcherMiddleware.#ctor(Microsoft.Owin.OwinMiddleware,Microsoft.AspNet.SignalR.HubConfiguration)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Owin.Middleware.HubDispatcherMiddleware.Invoke(Microsoft.Owin.IOwinContext)"></member>
    <member name="T:Microsoft.AspNet.SignalR.Owin.Middleware.PersistentConnectionMiddleware">
      <summary>永続的な接続のミドルウェアを表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Owin.Middleware.PersistentConnectionMiddleware.#ctor(Microsoft.Owin.OwinMiddleware,System.Type,Microsoft.AspNet.SignalR.ConnectionConfiguration)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Owin.Middleware.PersistentConnectionMiddleware.Invoke(Microsoft.Owin.IOwinContext)"></member>
    <member name="T:Microsoft.AspNet.SignalR.Tracing.ITraceManager">
      <summary>コードの実行をトレースするためのプロパティを提供するインターフェイスを表します。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Tracing.ITraceManager.Item(System.String)">
      <summary>ソースの指定された名前を持つ <see cref="T:System.Diagnostics.TraceSource" /> を取得します。</summary>
      <returns>ソースの指定された名前を持つ <see cref="T:System.Diagnostics.TraceSource" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Tracing.ITraceManager.Switch">
      <summary>コードの実行のトレースとデバッグ出力を制御するスイッチを取得します。</summary>
      <returns>
        <see cref="T:System.Diagnostics.SourceSwitch" /> オブジェクト。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Tracing.TraceManager">
      <summary>コードの実行をトレースできるようにするプロパティを提供します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Tracing.TraceManager.#ctor">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Tracing.TraceManager" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Tracing.TraceManager.#ctor(System.Diagnostics.TextWriterTraceListener)"></member>
    <member name="P:Microsoft.AspNet.SignalR.Tracing.TraceManager.Item(System.String)">
      <summary>ソースの指定された名前を持つ <see cref="T:System.Diagnostics.TraceSource" /> を取得します。</summary>
      <returns>ソースの指定された名前を持つ <see cref="T:System.Diagnostics.TraceSource" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Tracing.TraceManager.Switch">
      <summary>コードの実行のトレースとデバッグ出力を制御するスイッチを取得します。</summary>
      <returns>
        <see cref="T:System.Diagnostics.SourceSwitch" /> オブジェクト。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.ForeverFrameTransport">
      <summary>Forever Frame Transport を表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverFrameTransport.#ctor(Microsoft.AspNet.SignalR.Hosting.HostContext,Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Transports.ForeverFrameTransport" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="context">ホストのコンテキスト。</param>
      <param name="resolver">依存関係競合回避モジュール。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverFrameTransport.InitializeResponse(Microsoft.AspNet.SignalR.Transports.ITransportConnection)">
      <summary>応答オブジェクトを初期化します。</summary>
      <returns>初期化応答操作を表す <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="connection">トランスポート接続。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverFrameTransport.KeepAlive">
      <summary>接続をアライブに保ちます。</summary>
      <returns>キープ アライブ操作を表す <see cref="T:System.Threading.Tasks.Task" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ForeverFrameTransport.OutputWriter">
      <summary>コンテキスト応答を出力ストリームに書き込む HTML テキスト ライターを取得します。</summary>
      <returns>コンテキスト応答を出力ストリームに書き込む HTML テキスト ライター。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverFrameTransport.Send(Microsoft.AspNet.SignalR.Transports.PersistentResponse)">
      <summary>指定されたコンテキスト応答を送信します。</summary>
      <returns>送信処理を表す <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="response">送信する応答。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.ForeverTransport">
      <summary>ここの内容は更新されません。ここに素材を追加しないでください。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverTransport.#ctor(Microsoft.AspNet.SignalR.Hosting.HostContext,Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Transports.ForeverTransport" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="context">ホストのコンテキスト。</param>
      <param name="resolver">依存関係競合回避モジュール。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverTransport.#ctor(Microsoft.AspNet.SignalR.Hosting.HostContext,Newtonsoft.Json.JsonSerializer,Microsoft.AspNet.SignalR.Transports.ITransportHeartbeat,Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager,Microsoft.AspNet.SignalR.Tracing.ITraceManager)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Transports.ForeverTransport" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="context">ホストのコンテキスト。</param>
      <param name="jsonSerializer">jsonSerializer。</param>
      <param name="heartbeat">トランスポート ハートビート。</param>
      <param name="performanceCounterWriter">パフォーマンス カウンター ライター。</param>
      <param name="traceManager">トレース マネージャー。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ForeverTransport.Connected">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Transports.ForeverTransport" /> の接続関数を取得または設定します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Transports.ForeverTransport" /> の接続関数。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverTransport.EnqueueOperation(System.Func{System.Object,System.Threading.Tasks.Task},System.Object)">
      <summary>トランスポートのエンキュー操作を提供します。</summary>
      <returns>トランスポートのエンキュー操作。</returns>
      <param name="writeAsync">非同期に書き込みます。</param>
      <param name="state">状態オブジェクト。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverTransport.InitializePersistentState">
      <summary>永続的なトランスポートの継続状態を初期化します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverTransport.InitializeResponse(Microsoft.AspNet.SignalR.Transports.ITransportConnection)">
      <summary>永続的なトランスポートの接続の応答を初期化します。</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task" /> を返します。</returns>
      <param name="connection">トランスポート接続。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ForeverTransport.JsonSerializer">
      <summary>永続的なトランスポートの JsonSerializer を取得します。</summary>
      <returns>永続的なトランスポートの JsonSerializer。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ForeverTransport.LastMessageId">
      <summary>永続的なトランスポートの最後のメッセージ ID を取得します。</summary>
      <returns>永続的なトランスポートの最後のメッセージ ID。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverTransport.OnSending(System.String)">
      <summary>トランスポート送信のペイロードを提供します。</summary>
      <param name="payload">文字列ペイロード。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverTransport.OnSendingResponse(Microsoft.AspNet.SignalR.Transports.PersistentResponse)">
      <summary>メソッド送信の応答を提供します。</summary>
      <param name="response">接続への応答。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverTransport.ProcessRequest(Microsoft.AspNet.SignalR.Transports.ITransportConnection)">
      <summary>要求を処理する接続を提供します。</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task" /> を返します。</returns>
      <param name="connection">トランスポート接続。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverTransport.ProcessRequestCore(Microsoft.AspNet.SignalR.Transports.ITransportConnection)">
      <summary>トランスポートの接続を処理する要求を提供します。</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task" /> を返します。</returns>
      <param name="connection">トランスポート接続。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ForeverTransport.Received">
      <summary>永続的なトランスポートでの受信関数を取得または設定します。</summary>
      <returns>永続的なトランスポートでの受信関数。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ForeverTransport.Reconnected">
      <summary>永続的なトランスポートでの再接続関数を取得または設定します。</summary>
      <returns>トランスポートでの再接続関数。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverTransport.Send(Microsoft.AspNet.SignalR.Transports.PersistentResponse)">
      <summary>永続的なトランスポートの接続に応答を送信します。</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task" /> を返します。</returns>
      <param name="response">永続性のある応答。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverTransport.Send(System.Object)">
      <summary>永続的なトランスポートにオブジェクトを送信します。</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task" /> を返します。</returns>
      <param name="value">送信する値。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ForeverTransport.TransportConnected">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Transports.ForeverTransport" /> の接続済みトランスポートを取得または設定します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Transports.ForeverTransport" /> の接続済みトランスポート。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.ITrackingConnection">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Transports.ITransportHeartbeat" /> によって追跡できる接続を表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.ApplyState(Microsoft.AspNet.SignalR.Transports.TransportConnectionStates)">
      <summary> 新しい状態を接続に適用します。</summary>
      <param name="states">
        <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates" /> 列挙の値の 1 つ。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.CancellationToken"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.ConnectionId"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.ConnectTask"></member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.Disconnect"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.DisconnectThreshold"></member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.End"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.IsAlive"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.IsTimedOut"></member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.KeepAlive"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.SupportsKeepAlive"></member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.Timeout"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.Url"></member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.ITransport">
      <summary>通信するトランスポートを表します。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITransport.Connected">
      <summary>初期接続がトランスポートに接続したときに呼び出されるコールバックを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Func`1" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITransport.ConnectionId">
      <summary>トランスポートの接続 ID を取得または設定します。</summary>
      <returns>
        <see cref="T:System.String" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITransport.Disconnected">
      <summary>トランスポートが切断したときに呼び出されるコールバックを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Func`1" /> を返します。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITransport.ProcessRequest(Microsoft.AspNet.SignalR.Transports.ITransportConnection)">
      <summary>このトランスポートの指定された <see cref="T:Microsoft.AspNet.SignalR.Transports.ITransportConnection" /> を処理します。</summary>
      <returns>トランスポートが接続の処理を終了したときに完了する <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="connection">処理する <see cref="T:Microsoft.AspNet.SignalR.Transports.ITransportConnection" />。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITransport.Received">
      <summary>トランスポートがデータを受信したときに呼び出されるコールバックを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Func`2" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITransport.Reconnected">
      <summary>トランスポートが再接続したときに呼び出されるコールバックを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Func`1" /> を返します。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITransport.Send(System.Object)">
      <summary>トランスポート上でデータを送信します。</summary>
      <returns>送信が完了したときに完了する <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="value">送信される値。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITransport.TransportConnected">
      <summary>トランスポートが接続したときに呼び出されるコールバックを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Func`1" /> を返します。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.ITransportConnection">
      <summary>接続のトランスポートを表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITransportConnection.Receive(System.String,System.Func{Microsoft.AspNet.SignalR.Transports.PersistentResponse,System.Object,System.Threading.Tasks.Task{System.Boolean}},System.Int32,System.Object)">
      <summary>トランスポートからサブスクリプション データを受信します。</summary>
      <returns>トランスポートからのサブスクリプション データ。</returns>
      <param name="messageId">サブスクリプションのメッセージ ID。</param>
      <param name="callback">受信したメッセージを処理するメソッド。</param>
      <param name="maxMessages">メッセージのバッファー サイズ。</param>
      <param name="state">トランスポート接続の状態。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITransportConnection.Send(Microsoft.AspNet.SignalR.ConnectionMessage)"></member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.ITransportHeartbeat">
      <summary>接続の状態の追跡を管理します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITransportHeartbeat.AddOrUpdateConnection(Microsoft.AspNet.SignalR.Transports.ITrackingConnection)">
      <summary>追跡されている接続の一覧に新しい接続を追加します。</summary>
      <returns>置き換えられた接続 (ある場合)。</returns>
      <param name="connection">追加される接続。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITransportHeartbeat.GetConnections">
      <summary>追跡されている接続の一覧を取得します。</summary>
      <returns>接続の一覧。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITransportHeartbeat.MarkConnection(Microsoft.AspNet.SignalR.Transports.ITrackingConnection)">
      <summary>既存の接続をアクティブとしてマークします。</summary>
      <param name="connection">マークする接続。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITransportHeartbeat.RemoveConnection(Microsoft.AspNet.SignalR.Transports.ITrackingConnection)">
      <summary>追跡されている接続の一覧から接続を削除します。</summary>
      <param name="connection">削除する接続。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.ITransportManager">
      <summary>接続のトランスポートを管理します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITransportManager.GetTransport(Microsoft.AspNet.SignalR.Hosting.HostContext)">
      <summary>指定された <see cref="T:Microsoft.AspNet.SignalR.Hosting.HostContext" /> の指定されたトランスポートを取得します。</summary>
      <returns>指定された <see cref="T:Microsoft.AspNet.SignalR.Hosting.HostContext" /> の <see cref="T:Microsoft.AspNet.SignalR.Transports.ITransport" />。</returns>
      <param name="hostContext">現在の要求の <see cref="T:Microsoft.AspNet.SignalR.Hosting.HostContext" />。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITransportManager.SupportsTransport(System.String)">
      <summary>指定されたトランスポートがサポートされているかどうかを判断します。</summary>
      <returns>トランスポートがサポートされている場合は True。それ以外の場合は False。</returns>
      <param name="transportName">テストするトランスポートの名前。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.LongPollingTransport">
      <summary>ここの内容は更新されません。ここに素材を追加しないでください。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.#ctor(Microsoft.AspNet.SignalR.Hosting.HostContext,Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Transports.LongPollingTransport" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="context">ホストのコンテキスト。</param>
      <param name="resolver">依存関係競合回避モジュール。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.#ctor(Microsoft.AspNet.SignalR.Hosting.HostContext,Newtonsoft.Json.JsonSerializer,Microsoft.AspNet.SignalR.Transports.ITransportHeartbeat,Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager,Microsoft.AspNet.SignalR.Tracing.ITraceManager,Microsoft.AspNet.SignalR.Configuration.IConfigurationManager)"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.Connected">
      <summary>接続関数を取得または設定します。</summary>
      <returns>接続関数。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.DisconnectThreshold">
      <summary>切断のしきい値を取得します。</summary>
      <returns>切断のしきい値。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.IsConnectRequest">
      <summary>トランスポートが接続要求であるかどうかを示す値を取得または設定します。</summary>
      <returns>トランスポートが接続要求である場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.ProcessRequest(Microsoft.AspNet.SignalR.Transports.ITransportConnection)">
      <summary>接続要求を処理します。</summary>
      <returns>要求の操作を表すタスク。</returns>
      <param name="connection">処理する接続。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.Received">
      <summary>受信関数を取得または設定します。</summary>
      <returns>受信関数。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.Reconnected">
      <summary>再接続済みトランスポートを取得または設定します。</summary>
      <returns>トランスポートを再接続するタスク。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.Send(Microsoft.AspNet.SignalR.Transports.PersistentResponse)">
      <summary>トランスポートの応答を送信します。</summary>
      <returns>応答を送信する操作を表すタスク。</returns>
      <param name="response">送信する応答。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.Send(System.Object)">
      <summary>指定された値を使用してポーリング時間の長いトランスポートを送信します。</summary>
      <returns>ポーリング時間の長いトランスポートを送信する操作を表すタスク。</returns>
      <param name="value">値。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.SupportsKeepAlive">
      <summary>トランスポートがキープ アライブをサポートするかどうかを示す値を取得します。</summary>
      <returns>トランスポートがキープ アライブをサポートする場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.TransportConnected">
      <summary>接続済みトランスポートを取得または設定します。</summary>
      <returns>トランスポートを接続するタスク。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.PersistentResponse">
      <summary> 接続に対する応答を表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.PersistentResponse.#ctor">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Transports.PersistentResponse" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.PersistentResponse.#ctor(System.Func{Microsoft.AspNet.SignalR.Messaging.Message,System.Boolean},System.Action{System.IO.TextWriter})">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Transports.PersistentResponse" /> の新しいインスタンスを作成します。</summary>
      <param name="exclude">メッセージをクライアントに書き込むかどうかを判断するフィルター。</param>
      <param name="writeCursor">カーソル ライター。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.PersistentResponse.Aborted">
      <summary>接続が強制的に閉じられたかどうかを示す値を取得または設定します。</summary>
      <returns>接続が強制的に閉じられた場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.PersistentResponse.Disconnect">
      <summary>接続が切断コマンドを受信するかどうかを示す値を取得または設定します。</summary>
      <returns>接続が切断コマンドを受信する場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.PersistentResponse.GroupsToken">
      <summary>グループの一覧を表す署名付きトークンを取得または設定します。</summary>
      <returns>トークンのグループ。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.PersistentResponse.Initializing">
      <summary>接続が初期化中の場合は true。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.PersistentResponse.LongPollDelay">
      <summary>データが受信されなかった場合に、ポーリング時間の長いクライアントが接続を再確立するまで待機する必要がある時間を取得または設定します。</summary>
      <returns>データが受信されなかった場合に、ポーリング時間の長いクライアントが接続を再確立するまで待機する必要がある時間。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.PersistentResponse.Messages">
      <summary>受信側の接続に送信されるメッセージの一覧を取得または設定します。</summary>
      <returns>受信側の接続に送信されるメッセージの一覧。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.PersistentResponse.Microsoft#AspNet#SignalR#Json#IJsonWritable#WriteJson(System.IO.TextWriter)">
      <summary>パフォーマンスを向上させるために、<see cref="T:Microsoft.AspNet.SignalR.Transports.PersistentResponse" /> の必要なコンポーネントのみを、Json.NET の JsonTextWriter を使用して JSON にシリアル化します。</summary>
      <param name="writer">JSON のシリアル化を受け取る <see cref="T:System.IO.TextWriter" />。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.PersistentResponse.Reconnect">
      <summary>クライアントが再接続を試行する場合は true。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.PersistentResponse.Terminal"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.PersistentResponse.TotalCount">
      <summary>受信側の接続に送信されたメッセージの総数を取得または設定します。</summary>
      <returns>受信側の接続に送信されたメッセージの総数。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.ServerSentEventsTransport">
      <summary>SignalR のサーバーからイベントを送信するためにトランスポートを提供します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ServerSentEventsTransport.#ctor(Microsoft.AspNet.SignalR.Hosting.HostContext,Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Transports.ServerSentEventsTransport" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="context">ホストのコンテキスト。</param>
      <param name="resolver">IDependency 競合回避モジュール。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ServerSentEventsTransport.InitializeResponse(Microsoft.AspNet.SignalR.Transports.ITransportConnection)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Transports.ITransportConnection" /> への応答を初期化します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Transports.ITransportConnection" /> への初期化応答。</returns>
      <param name="connection">トランスポート接続の初期化。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ServerSentEventsTransport.KeepAlive">
      <summary>インターネット リソースへの永続的な接続を行うキープ アライブ メソッドを返します。</summary>
      <returns>インターネット リソースへの永続的な接続を行うキープ アライブ メソッド。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ServerSentEventsTransport.Send(Microsoft.AspNet.SignalR.Transports.PersistentResponse)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Transports.ServerSentEventsTransport" /> に永続性のある応答を送信します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Transports.ServerSentEventsTransport" /> に送信する永続性のある応答。</returns>
      <param name="response">永続性のある応答。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates">
      <summary>TransportConnectionState の属性を列挙します。</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates.Aborted">
      <summary>状態の中止された接続。</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates.Added">
      <summary>状態の追加された接続。</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates.Disconnected">
      <summary>状態の切断された接続。</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates.DisconnectMessageReceived">
      <summary>状態の受信された切断メッセージ。</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates.Disposed">
      <summary>状態の廃棄された接続。</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates.HttpRequestEnded">
      <summary>接続状態の終了した HTTP 要求。</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates.None">
      <summary>接続の状態はありません。</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates.QueueDrained">
      <summary>接続状態のドレインされたキュー。</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates.Removed">
      <summary>状態の削除された接続。</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates.Replaced">
      <summary>接続の置き換えられた状態。</summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase">
      <summary>ここの内容は更新されません。ここに素材を追加しないでください。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.#ctor(Microsoft.AspNet.SignalR.Hosting.HostContext,Microsoft.AspNet.SignalR.Transports.ITransportHeartbeat,Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager,Microsoft.AspNet.SignalR.Tracing.ITraceManager)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="context">ホストのコンテキスト。</param>
      <param name="heartbeat">トランスポート ハートビート。</param>
      <param name="performanceCounterManager">パフォーマンス カウンター マネージャー。</param>
      <param name="traceManager">トレース マネージャー。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Abort">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase" /> の現在のタスク プロセスを中止します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase" /> で中止する現在のタスク プロセス。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Abort(System.Boolean)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase" /> の現在のタスク プロセスを中止します。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase" /> で中止する現在のタスク プロセス。</returns>
      <param name="clean">中止されたプロセスですべてのタスクをクリーン アップするかどうかを示します。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.ApplyState(Microsoft.AspNet.SignalR.Transports.TransportConnectionStates)">
      <summary>切断ベースにトランスポート接続の状態を適用します。</summary>
      <param name="states">トランスポート接続の状態。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.CancellationToken">
      <summary>接続の有効期間を表す取り消しトークンを取得します。</summary>
      <returns>接続の有効期間を表す取り消しトークン。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Connection">
      <summary>トランスポートの切断ベースのトランスポート接続を取得または設定します。</summary>
      <returns>トランスポートの切断ベースのトランスポート接続。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.ConnectionEndToken">
      <summary>このトークンの操作を終了する接続を取得します。</summary>
      <returns>このトークンの操作を終了する接続。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.ConnectionId">
      <summary>接続の ID を取得または設定します。</summary>
      <returns>接続の ID を含む文字列。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.ConnectTask"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Context">
      <summary>トランスポート切断ベースに関連付けられたホスト コンテキストを取得します。</summary>
      <returns>トランスポート切断ベースに関連付けられたホスト コンテキスト。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.CreateResponseWriter">
      <summary>トランスポート切断ベースで応答を作成するライターを表します。</summary>
      <returns>トランスポート切断ベースで応答を作成するライター。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Disconnect">
      <summary>接続を切断します。</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Disconnected">
      <summary>接続トランスポートの切断プロパティを取得または設定します。</summary>
      <returns>接続トランスポートの切断プロパティ。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.DisconnectThreshold">
      <summary>接続が無効になってから切断が開始されるまでの待ち時間を取得します。</summary>
      <returns>
        <see cref="T:System.TimeSpan" /> を返します。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Dispose">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Dispose(System.Boolean)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase" /> クラスによって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</summary>
      <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は true。アンマネージ リソースだけを解放する場合は false。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.End">
      <summary>接続を強制的に終了します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.EnqueueOperation(System.Func{System.Threading.Tasks.Task})">
      <summary>キュー操作を終了するオブジェクトを表します。</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task" /> を返します。</returns>
      <param name="writeAsync">非同期に書き込みます。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.EnqueueOperation(System.Func{System.Object,System.Threading.Tasks.Task},System.Object)">
      <summary>キュー操作を終了するオブジェクトを表します。</summary>
      <returns>キュー操作の終了を表すオブジェクト。</returns>
      <param name="writeAsync">非同期に書き込みます。</param>
      <param name="state">状態。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Heartbeat">
      <summary>接続状態の追跡を管理するトランスポート ハートビートを取得します。</summary>
      <returns>接続状態の追跡を管理するトランスポート ハートビート。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.HostShutdownToken"></member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.IncrementErrors">
      <summary>トランスポート切断ベースに対するエラーを増加します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.InitializePersistentState">
      <summary>トランスポート切断ベースの継続状態を初期化します。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.IsAbortRequest">
      <summary>接続が中止を要求することを表す値を取得します。</summary>
      <returns>接続が中止を要求する場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.IsAlive">
      <summary>接続が有効であるかどうかを表す値を取得します。</summary>
      <returns>接続が有効である場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.IsConnectRequest">
      <summary>接続が要求するどうかを表す値を取得します。</summary>
      <returns>接続が要求する場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.IsTimedOut">
      <summary>接続がタイムアウトしているかどうかを表す値を取得します。</summary>
      <returns>接続がタイムアウトしている場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.KeepAlive">
      <summary>接続上でキープ アライブ ping を送信します。</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task" /> を返します。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.OutputWriter">
      <summary>連続性のある一連の文字を書き込むことができる出力ライターを取得します。</summary>
      <returns>連続性のある一連の文字を書き込むことができる出力ライター。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.SupportsKeepAlive">
      <summary>トランスポートがキープ アライブをサポートするかどうかを表す値を取得します。</summary>
      <returns>トランスポートがキープ アライブをサポートする場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Timeout">
      <summary>接続をタイムアウトにします。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Trace">
      <summary>コードの実行をトレースし、トレース メッセージをそのソースに関連付けるソースを取得します。</summary>
      <returns>コードの実行をトレースし、トレース メッセージをそのソースに関連付けるソース。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Url">
      <summary>接続の URI を取得します。</summary>
      <returns>接続の URI。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.TransportHeartbeat">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Transports.ITransportHeartbeat" /> の既定の実装を表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportHeartbeat.#ctor(Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportHeartbeat" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="resolver">
        <see cref="T:Microsoft.AspNet.SignalR.IDependencyResolver" />。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportHeartbeat.AddOrUpdateConnection(Microsoft.AspNet.SignalR.Transports.ITrackingConnection)">
      <summary>追跡されている接続の一覧に新しい接続を追加します。</summary>
      <param name="connection">追加される接続。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportHeartbeat.Dispose">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportHeartbeat" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportHeartbeat.Dispose(System.Boolean)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportHeartbeat" /> クラスによって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</summary>
      <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は true。アンマネージ リソースだけを解放する場合は false。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportHeartbeat.GetConnections">
      <summary>追跡されている接続の一覧を取得します。</summary>
      <returns>接続の一覧。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportHeartbeat.MarkConnection(Microsoft.AspNet.SignalR.Transports.ITrackingConnection)">
      <summary>既存の接続をアクティブとしてマークします。</summary>
      <param name="connection">マークする接続。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportHeartbeat.RemoveConnection(Microsoft.AspNet.SignalR.Transports.ITrackingConnection)">
      <summary>追跡されている接続の一覧から接続を削除します。</summary>
      <param name="connection">削除する接続。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.TransportManager">
      <summary>既定の <see cref="T:Microsoft.AspNet.SignalR.Transports.ITransportManager" /> の実装。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportManager.#ctor(Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportManager" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="resolver">既定の <see cref="T:Microsoft.AspNet.SignalR.IDependencyResolver" />。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportManager.GetTransport(Microsoft.AspNet.SignalR.Hosting.HostContext)">
      <summary>指定された <see cref="T:Microsoft.AspNet.SignalR.Hosting.HostContext" /> の指定されたトランスポートを取得します。</summary>
      <returns>指定された <see cref="T:Microsoft.AspNet.SignalR.Hosting.HostContext" /> の <see cref="T:Microsoft.AspNet.SignalR.Transports.ITransport" />。</returns>
      <param name="hostContext">現在の要求の <see cref="T:Microsoft.AspNet.SignalR.Hosting.HostContext" />。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportManager.Register(System.String,System.Func{Microsoft.AspNet.SignalR.Hosting.HostContext,Microsoft.AspNet.SignalR.Transports.ITransport})">
      <summary>サポートされているトランスポートの一覧に新しいトランスポートを追加します。</summary>
      <param name="transportName">指定されたトランスポート。</param>
      <param name="transportFactory">指定されたトランスポートのファクトリ メソッド。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportManager.Remove(System.String)">
      <summary>サポートされているトランスポートの一覧からトランスポートを削除します。</summary>
      <param name="transportName">指定されたトランスポート。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportManager.SupportsTransport(System.String)">
      <summary>指定されたトランスポートがサポートされているかどうかを判断します。</summary>
      <returns>トランスポートがサポートされている場合は True。それ以外の場合は False。</returns>
      <param name="transportName">テストするトランスポートの名前。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.WebSocketTransport">
      <summary>ここの内容は更新されません。ここに素材を追加しないでください。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.WebSocketTransport.#ctor(Microsoft.AspNet.SignalR.Hosting.HostContext,Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Transports.WebSocketTransport" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="context">ホストのコンテキスト。</param>
      <param name="resolver">依存関係競合回避モジュール。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.WebSocketTransport.#ctor(Microsoft.AspNet.SignalR.Hosting.HostContext,Newtonsoft.Json.JsonSerializer,Microsoft.AspNet.SignalR.Transports.ITransportHeartbeat,Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager,Microsoft.AspNet.SignalR.Tracing.ITraceManager)"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.WebSocketTransport.CancellationToken">
      <summary>トランスポートで使用された取り消しトークンを取得します。</summary>
      <returns>トランスポートで使用された取り消しトークン。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.WebSocketTransport.CreateResponseWriter"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.WebSocketTransport.IsAlive">
      <summary>トランスポートがアライブかどうかを示す値を取得します。</summary>
      <returns>トランスポートがアライブの場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.WebSocketTransport.KeepAlive">
      <summary>トランスポートをアライブに保ちます。</summary>
      <returns>トランスポートをアライブに保つタスク。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.WebSocketTransport.ProcessRequest(Microsoft.AspNet.SignalR.Transports.ITransportConnection)">
      <summary>接続要求を処理します。</summary>
      <returns>接続を要求する操作を表すタスク。</returns>
      <param name="connection">接続。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.WebSocketTransport.Send(Microsoft.AspNet.SignalR.Transports.PersistentResponse)">
      <summary>websocket 応答を送信します。</summary>
      <returns>応答を送信する操作を表すタスク。</returns>
      <param name="response">送信する応答。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.WebSocketTransport.Send(System.Object)">
      <summary>トランスポートの値を送信します。</summary>
      <returns>トランスポートの値を送信する操作を表すタスク。</returns>
      <param name="value">送信する値。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler">
      <summary>SignalR Web ソケットを管理するインスタンスを表します。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.#ctor(System.Nullable{System.Int32})"></member>
    <member name="M:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.Close">
      <summary>このインスタンスを閉じます。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.Error">
      <summary>Web ソケットの処理中のエラーを取得または設定します。</summary>
      <returns>Web ソケットの処理中のエラー。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.MaxIncomingMessageSize">
      <summary>受信メッセージの最大サイズを取得します。</summary>
      <returns>受信メッセージの最大サイズ。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.OnClose(System.Boolean)">
      <summary>このインスタンスが閉じられたときに発生します。</summary>
      <param name="clean">トレースをクリーンする場合は true。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.OnError">
      <summary>ハンドラー操作中にエラーが発生したときにイベントを発生させます。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.OnMessage(System.Byte[])">
      <summary>メッセージを受信するとイベントを発生させます。</summary>
      <param name="message">メッセージ。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.OnMessage(System.String)">
      <summary>メッセージを受信するとイベントを発生させます。</summary>
      <param name="message">メッセージ。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.OnOpen">
      <summary>このインスタンスが開かれたときにイベントを発生させます。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.ProcessWebSocketRequestAsync(System.Net.WebSockets.WebSocket,System.Threading.CancellationToken)">
      <summary>ハンドラーが受け取った要求を非同期に処理します。</summary>
      <returns>操作の結果。</returns>
      <param name="webSocket">Web ソケット。</param>
      <param name="disconnectToken">切断トークン。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.Send(System.String)">
      <summary>ハンドラーに関連付けられているメッセージを送信します。</summary>
      <returns>送信メッセージ。</returns>
      <param name="message">送信されるメッセージ。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.WebSocket">
      <summary>Web ソケットを取得または設定します。</summary>
      <returns>Web ソケット。</returns>
    </member>
    <member name="T:Owin.ObsoleteOwinExtensions"></member>
    <member name="M:Owin.ObsoleteOwinExtensions.MapConnection``1(Owin.IAppBuilder,System.String)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Owin.ObsoleteOwinExtensions.MapConnection``1(Owin.IAppBuilder,System.String,Microsoft.AspNet.SignalR.ConnectionConfiguration)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Owin.ObsoleteOwinExtensions.MapConnection(Owin.IAppBuilder,System.String,System.Type,Microsoft.AspNet.SignalR.ConnectionConfiguration)"></member>
    <member name="M:Owin.ObsoleteOwinExtensions.MapHubs(Owin.IAppBuilder)"></member>
    <member name="M:Owin.ObsoleteOwinExtensions.MapHubs(Owin.IAppBuilder,Microsoft.AspNet.SignalR.HubConfiguration)"></member>
    <member name="M:Owin.ObsoleteOwinExtensions.MapHubs(Owin.IAppBuilder,System.String,Microsoft.AspNet.SignalR.HubConfiguration)"></member>
    <member name="T:Owin.OwinExtensions">
      <summary>Owin 拡張機能の接続を表します。</summary>
    </member>
    <member name="M:Owin.OwinExtensions.MapSignalR(Owin.IAppBuilder)">
      <summary>SignalR ハブを "/signalr” にあるアプリケーション ビルダー パイプラインにマップします。</summary>
      <returns>
        <see cref="T:Owin.IAppBuilder" /> を返します。</returns>
      <param name="builder">アプリケーション ビルダー。</param>
    </member>
    <member name="M:Owin.OwinExtensions.MapSignalR(Owin.IAppBuilder,Microsoft.AspNet.SignalR.HubConfiguration)">
      <summary>SignalR ハブを "/signalr” にあるアプリケーション ビルダー パイプラインにマップします。</summary>
      <returns>
        <see cref="T:Owin.IAppBuilder" /> を返します。</returns>
      <param name="builder">アプリケーション ビルダー。</param>
      <param name="configuration">使用する <see cref="T:Microsoft.AspNet.SignalR.HubConfiguration" /></param>
    </member>
    <member name="M:Owin.OwinExtensions.MapSignalR``1(Owin.IAppBuilder,System.String)">
      <summary>指定された SignalR の <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> を、指定されたパスにあるアプリケーション ビルダー パイプラインにマップします。</summary>
      <returns>
        <see cref="T:Owin.IAppBuilder" /> を返します。</returns>
      <param name="builder">アプリケーション ビルダー。</param>
      <param name="path"> <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> をマップするパス</param>
      <typeparam name="TConnection">
        <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> の型</typeparam>
    </member>
    <member name="M:Owin.OwinExtensions.MapSignalR``1(Owin.IAppBuilder,System.String,Microsoft.AspNet.SignalR.ConnectionConfiguration)">
      <summary>指定された SignalR の <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> を、指定されたパスにあるアプリケーション ビルダー パイプラインにマップします。</summary>
      <returns>
        <see cref="T:Owin.IAppBuilder" /> を返します。</returns>
      <param name="builder">アプリケーション ビルダー。</param>
      <param name="path">永続的な接続をマップするパス。</param>
      <param name="configuration">使用する <see cref="T:Microsoft.AspNet.SignalR.ConnectionConfiguration" /></param>
      <typeparam name="TConnection">
        <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> の型</typeparam>
    </member>
    <member name="M:Owin.OwinExtensions.MapSignalR(Owin.IAppBuilder,System.String,Microsoft.AspNet.SignalR.HubConfiguration)">
      <summary>SignalR ハブを指定されたパスにあるアプリケーション ビルダー パイプラインにマップします。</summary>
      <returns>
        <see cref="T:Owin.IAppBuilder" /> を返します。</returns>
      <param name="builder">アプリケーション ビルダー。</param>
      <param name="path">SignalR ハブをマップするパス。</param>
      <param name="configuration">使用する <see cref="T:Microsoft.AspNet.SignalR.HubConfiguration" /></param>
    </member>
    <member name="M:Owin.OwinExtensions.MapSignalR(Owin.IAppBuilder,System.String,System.Type,Microsoft.AspNet.SignalR.ConnectionConfiguration)">
      <summary>指定された <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> を、指定されたパスにあるアプリケーション ビルダー パイプラインにマップします。</summary>
      <returns>
        <see cref="T:Owin.IAppBuilder" /> を返します。</returns>
      <param name="builder">アプリケーション ビルダー。</param>
      <param name="path">永続的な接続をマップするパス。</param>
      <param name="connectionType">
        <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> の型</param>
      <param name="configuration">使用する <see cref="T:Microsoft.AspNet.SignalR.ConnectionConfiguration" /></param>
    </member>
    <member name="M:Owin.OwinExtensions.RunSignalR(Owin.IAppBuilder)">
      <summary>SignalR ハブをアプリケーション ビルダー パイプラインに追加します。</summary>
      <param name="builder">アプリケーション ビルダー。</param>
    </member>
    <member name="M:Owin.OwinExtensions.RunSignalR``1(Owin.IAppBuilder)">
      <summary>指定された SignalR の <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> をアプリケーション ビルダーに追加します。</summary>
      <param name="builder">アプリケーション ビルダー</param>
      <typeparam name="TConnection">
        <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> の型</typeparam>
    </member>
    <member name="M:Owin.OwinExtensions.RunSignalR``1(Owin.IAppBuilder,Microsoft.AspNet.SignalR.ConnectionConfiguration)">
      <param name="builder">アプリケーション ビルダー。</param>
      <param name="configuration">使用する <see cref="T:Microsoft.AspNet.SignalR.ConnectionConfiguration" /></param>
      <typeparam name="TConnection">指定された SignalR の <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> をアプリケーション ビルダーに追加します。</typeparam>
    </member>
    <member name="M:Owin.OwinExtensions.RunSignalR(Owin.IAppBuilder,Microsoft.AspNet.SignalR.HubConfiguration)">
      <summary>SignalR ハブをアプリケーション ビルダー パイプラインに追加します。</summary>
      <param name="builder">アプリケーション ビルダー。</param>
      <param name="configuration">使用する <see cref="T:Microsoft.AspNet.SignalR.HubConfiguration" /></param>
    </member>
    <member name="M:Owin.OwinExtensions.RunSignalR(Owin.IAppBuilder,System.Type,Microsoft.AspNet.SignalR.ConnectionConfiguration)">
      <summary>指定された SignalR の <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> をアプリケーション ビルダーに追加します。</summary>
      <param name="builder">アプリケーション ビルダー。</param>
      <param name="connectionType">
        <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> の型</param>
      <param name="configuration">使用する <see cref="T:Microsoft.AspNet.SignalR.ConnectionConfiguration" /></param>
    </member>
    <member name="T:System.Diagnostics.TraceSourceExtensions">
      <summary>Provides extension methods for used by SignalR.</summary>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceError(System.Diagnostics.TraceSource,System.String)">
      <summary>Writes trace error message to the specified trace source.</summary>
      <param name="traceSource">The trace source to write to.</param>
      <param name="msg">The trace error message to write.</param>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceError(System.Diagnostics.TraceSource,System.String,System.Object[])">
      <summary>Writes trace error message to the specified trace source.</summary>
      <param name="traceSource">The trace source to write to.</param>
      <param name="format">The message format to write to.</param>
      <param name="args">The arguments associated with the <paramref name="format" />.</param>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceVerbose(System.Diagnostics.TraceSource,System.String)">
      <summary>Writes trace verbose message to the specified trace source.</summary>
      <param name="traceSource">The trace source to write to.</param>
      <param name="msg">The trace message to write.</param>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceVerbose(System.Diagnostics.TraceSource,System.String,System.Object[])">
      <summary>Writes trace verbose message to the specified trace source.</summary>
      <param name="traceSource">The trace source to write to.</param>
      <param name="format">The message format to write to.</param>
      <param name="args">The arguments associated with the <paramref name="format" />.</param>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceWarning(System.Diagnostics.TraceSource,System.String)">
      <summary>Writes trace warning message to the specified trace source.</summary>
      <param name="traceSource">The trace source to write to.</param>
      <param name="msg">The trace warning message to write.</param>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceWarning(System.Diagnostics.TraceSource,System.String,System.Object[])">
      <summary>Writes trace warning message to the specified trace source.</summary>
      <param name="traceSource">The trace source to write to.</param>
      <param name="format">The message format to write to.</param>
      <param name="args">The arguments associated with the <paramref name="format" />.</param>
    </member>
  </members>
</doc>